name: üßπ Automated Archive Cleanup

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      execute_cleanup:
        description: 'Execute cleanup (not just dry run)'
        required: true
        default: false
        type: boolean
      size_threshold_mb:
        description: 'Size threshold in MB for cleanup'
        required: true
        default: 100
        type: number

env:
  CLEANUP_THRESHOLD_MB: ${{ github.event.inputs.size_threshold_mb || 100 }}

jobs:
  archive-cleanup-analysis:
    name: üìä Archive Cleanup Analysis
    runs-on: ubuntu-latest
    outputs:
      cleanup_needed: ${{ steps.analysis.outputs.cleanup_needed }}
      total_size_mb: ${{ steps.analysis.outputs.total_size_mb }}
      items_count: ${{ steps.analysis.outputs.items_count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Run archive cleanup analysis
        id: analysis
        run: |
          python scripts/comprehensive_archive_cleanup.py \
            --output archive_cleanup_analysis.json

          # Extract key metrics from the report
          TOTAL_SIZE_BYTES=$(python -c "
          import json
          with open('archive_cleanup_analysis.json') as f:
              data = json.load(f)
          print(data['impact_analysis']['total_size_bytes'])
          ")

          TOTAL_SIZE_MB=$((TOTAL_SIZE_BYTES / 1024 / 1024))
          ITEMS_COUNT=$(python -c "
          import json
          with open('archive_cleanup_analysis.json') as f:
              data = json.load(f)
          print(len(data['cleanup_plan']['immediate_deletion']))
          ")

          echo "total_size_mb=$TOTAL_SIZE_MB" >> $GITHUB_OUTPUT
          echo "items_count=$ITEMS_COUNT" >> $GITHUB_OUTPUT

          # Determine if cleanup is needed
          if [ $TOTAL_SIZE_MB -gt $CLEANUP_THRESHOLD_MB ]; then
            echo "cleanup_needed=true" >> $GITHUB_OUTPUT
          else
            echo "cleanup_needed=false" >> $GITHUB_OUTPUT
          fi

          echo "üìä Archive Analysis Results:"
          echo "   Total size: ${TOTAL_SIZE_MB}MB"
          echo "   Items to clean: $ITEMS_COUNT"
          echo "   Cleanup needed: $([ $TOTAL_SIZE_MB -gt $CLEANUP_THRESHOLD_MB ] && echo 'Yes' || echo 'No')"

      - name: Upload analysis report
        uses: actions/upload-artifact@v4
        with:
          name: archive-cleanup-analysis
          path: archive_cleanup_analysis.json
          retention-days: 30

  execute-cleanup:
    name: üóëÔ∏è Execute Archive Cleanup
    runs-on: ubuntu-latest
    needs: archive-cleanup-analysis
    if: |
      (needs.archive-cleanup-analysis.outputs.cleanup_needed == 'true' &&
       github.event_name == 'schedule') ||
      (github.event.inputs.execute_cleanup == 'true')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_API_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Execute archive cleanup
        id: cleanup
        run: |
          echo "üßπ Executing archive cleanup..."
          python scripts/comprehensive_archive_cleanup.py \
            --execute \
            --output archive_cleanup_execution.json

          # Extract cleanup results
          SPACE_RECOVERED=$(python -c "
          import json
          with open('archive_cleanup_execution.json') as f:
              data = json.load(f)
          if 'execution_results' in data and data['execution_results']:
              print(data['execution_results']['space_recovered'])
          else:
              print(0)
          ")

          ITEMS_DELETED=$(python -c "
          import json
          with open('archive_cleanup_execution.json') as f:
              data = json.load(f)
          if 'execution_results' in data and data['execution_results']:
              print(len(data['execution_results']['deleted_items']))
          else:
              print(0)
          ")

          SPACE_RECOVERED_MB=$((SPACE_RECOVERED / 1024 / 1024))

          echo "space_recovered_mb=$SPACE_RECOVERED_MB" >> $GITHUB_OUTPUT
          echo "items_deleted=$ITEMS_DELETED" >> $GITHUB_OUTPUT

          echo "‚úÖ Cleanup completed:"
          echo "   Items deleted: $ITEMS_DELETED"
          echo "   Space recovered: ${SPACE_RECOVERED_MB}MB"

      - name: Commit cleanup changes
        if: steps.cleanup.outputs.items_deleted > 0
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add -A
          git commit -m "üßπ Automated archive cleanup: removed ${{ steps.cleanup.outputs.items_deleted }} items, recovered ${{ steps.cleanup.outputs.space_recovered_mb }}MB

          - Cleaned up archived and legacy files
          - Removed backup directories and deprecated content
          - Updated .gitignore to prevent future accumulation
          - Total space recovered: ${{ steps.cleanup.outputs.space_recovered_mb }}MB

          Automated cleanup performed by GitHub Actions" || echo "No changes to commit"

      - name: Push cleanup changes
        if: steps.cleanup.outputs.items_deleted > 0
        run: |
          git push origin main

      - name: Upload cleanup report
        uses: actions/upload-artifact@v4
        with:
          name: archive-cleanup-execution
          path: archive_cleanup_execution.json
          retention-days: 90

  notify-results:
    name: üì¢ Notify Cleanup Results
    runs-on: ubuntu-latest
    needs: [archive-cleanup-analysis, execute-cleanup]
    if: always()
    steps:
      - name: Prepare notification
        id: notification
        run: |
          if [ "${{ needs.execute-cleanup.result }}" = "success" ]; then
            STATUS="‚úÖ SUCCESS"
            MESSAGE="Archive cleanup completed successfully"
            DETAILS="Items deleted: ${{ needs.execute-cleanup.outputs.items_deleted || 0 }}
          Space recovered: ${{ needs.execute-cleanup.outputs.space_recovered_mb || 0 }}MB"
          elif [ "${{ needs.execute-cleanup.result }}" = "skipped" ]; then
            STATUS="‚ÑπÔ∏è SKIPPED"
            MESSAGE="Archive cleanup skipped - threshold not met"
            DETAILS="Total archive size: ${{ needs.archive-cleanup-analysis.outputs.total_size_mb }}MB
          Threshold: ${{ env.CLEANUP_THRESHOLD_MB }}MB
          Items found: ${{ needs.archive-cleanup-analysis.outputs.items_count }}"
          else
            STATUS="‚ùå FAILED"
            MESSAGE="Archive cleanup failed"
            DETAILS="Check workflow logs for details"
          fi

          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          echo "details<<EOF" >> $GITHUB_OUTPUT
          echo "$DETAILS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create issue on failure
        if: needs.execute-cleanup.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Automated Archive Cleanup Failed',
              body: `## Archive Cleanup Failure Report

              **Workflow Run**: [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})
              **Trigger**: ${context.eventName}
              **Time**: ${new Date().toISOString()}

              ### Analysis Results
              - Total archive size: ${{ needs.archive-cleanup-analysis.outputs.total_size_mb }}MB
              - Items to clean: ${{ needs.archive-cleanup-analysis.outputs.items_count }}
              - Cleanup needed: ${{ needs.archive-cleanup-analysis.outputs.cleanup_needed }}

              ### Action Required
              Please review the workflow logs and investigate the failure cause.

              ### Next Steps
              1. Check the workflow logs for error details
              2. Verify the cleanup script functionality
              3. Run manual cleanup if necessary
              4. Update the cleanup workflow if needed
              `,
              labels: ['bug', 'automation', 'cleanup']
            })

      - name: Post to Slack
        if: env.SLACK_WEBHOOK
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST $SLACK_WEBHOOK \
            -H 'Content-type: application/json' \
            --data '{
              "text": "${{ steps.notification.outputs.status }} Archive Cleanup",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${{ steps.notification.outputs.status }}* ${{ steps.notification.outputs.message }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.notification.outputs.details }}"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Repository: sophia-main | Trigger: ${{ github.event_name }}"
                    }
                  ]
                }
              ]
            }'

  security-scan:
    name: üîí Security Scan Post-Cleanup
    runs-on: ubuntu-latest
    needs: execute-cleanup
    if: needs.execute-cleanup.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run security scan
        run: |
          echo "üîç Running post-cleanup security scan..."

          # Check for any accidentally exposed secrets
          if command -v git-secrets >/dev/null 2>&1; then
            git secrets --scan
          fi

          # Check for large files that might have been missed
          find . -type f -size +10M -not -path "./.git/*" | while read file; do
            echo "‚ö†Ô∏è Large file found: $file ($(du -h "$file" | cut -f1))"
          done

          # Verify no critical files were accidentally deleted
          CRITICAL_FILES=(
            "README.md"
            "requirements.txt"
            "pyproject.toml"
            ".gitignore"
            "api/app/fastapi_main.py"
            "frontend/package.json"
          )

          for file in "${CRITICAL_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Critical file missing: $file"
              exit 1
            fi
          done

          echo "‚úÖ Security scan completed - no issues found"
