name: üöÄ Sophia AI Unified Deployment

on:
  workflow_dispatch:
    inputs:
      target_instance:
        description: 'Target instance for deployment'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - production
          - ai-core
          - mcp-orchestrator
          - data-pipeline
          - development
      build_images:
        description: 'Build and push Docker images'
        required: false
        default: true
        type: boolean
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        default: false
        type: boolean
      skip_validation:
        description: 'Skip deployment validation'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Environment'
        required: false
        default: 'prod'
        type: choice
        options:
          - prod
          - staging
          - dev
  push:
    branches: [ main ]
    paths:
      - 'deployment/**'
      - 'scripts/deploy_sophia_unified.sh'
      - 'docker-compose-*.yml'
      - 'Dockerfile*'
      - '.github/workflows/deploy-sophia-unified.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'deployment/**'
      - 'scripts/deploy_sophia_unified.sh'
      - 'docker-compose-*.yml'
      - 'Dockerfile*'
      - '.github/workflows/deploy-sophia-unified.yml'

env:
  DOCKER_REGISTRY: scoobyjava15
  IMAGE_TAG: latest
  SSH_KEY_PATH: ~/.ssh/sophia2025.pem
  PULUMI_ORG: scoobyjava-org
  ENVIRONMENT: prod

jobs:
  prepare:
    name: üõ†Ô∏è Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      instances: ${{ steps.set-instances.outputs.instances }}
      build_images: ${{ steps.set-build.outputs.build_images }}
      deployment_id: ${{ steps.set-deployment-id.outputs.deployment_id }}
    steps:
      - name: üìÇ Checkout repository
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Set deployment instances
        id: set-instances
        run: |
          TARGET="${{ github.event.inputs.target_instance || 'all' }}"
          
          if [ "$TARGET" = "all" ]; then
            echo "instances=[\"production\", \"ai-core\", \"mcp-orchestrator\", \"data-pipeline\", \"development\"]" >> $GITHUB_OUTPUT
          else
            echo "instances=[\"$TARGET\"]" >> $GITHUB_OUTPUT
          fi
          
          echo "Selected instances: $TARGET"

      - name: üèóÔ∏è Set build images flag
        id: set-build
        run: |
          BUILD_IMAGES="${{ github.event.inputs.build_images || 'true' }}"
          echo "build_images=$BUILD_IMAGES" >> $GITHUB_OUTPUT
          echo "Build images: $BUILD_IMAGES"

      - name: üÜî Set deployment ID
        id: set-deployment-id
        run: |
          DEPLOYMENT_ID="sophia-deploy-$(date +%Y%m%d-%H%M%S)"
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "Deployment ID: $DEPLOYMENT_ID"

  build-images:
    name: üèóÔ∏è Build Docker Images
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.build_images == 'true'
    strategy:
      matrix:
        image_group:
          - name: core-platform
            images: |
              sophia-ai:backend
              sophia-ai-unified-chat:chat
              sophia-ai-dashboard:frontend
              sophia-mcp-gateway:mcp-gateway
          - name: ai-services
            images: |
              sophia-ai-memory-v2:mcp-servers/ai_memory
              sophia-ai-cortex:mcp-servers/snowflake_cortex
              sophia-ai-mem0:mcp-servers/mem0
              sophia-snowflake-cortex:mcp-servers/snowflake_cortex
              sophia-huggingface-ai:mcp-servers/huggingface_ai
              sophia-portkey-admin:mcp-servers/portkey_admin
              sophia-prompt-optimizer:mcp-servers/prompt_optimizer
          - name: business-ai
            images: |
              sophia-gong-v2:mcp-servers/gong
              sophia-perplexity-v2:mcp-servers/perplexity
              sophia-apollo:mcp-servers/apollo
              sophia-bright-data:mcp-servers/bright_data
              sophia-apify-intelligence:mcp-servers/apify_intelligence
    steps:
      - name: üìÇ Checkout repository
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üèóÔ∏è Build and push images
        run: |
          echo "Building ${{ matrix.image_group.name }} images..."
          
          IFS=$'\n'
          for image_line in ${{ matrix.image_group.images }}; do
            if [ -n "$image_line" ]; then
              image_name=$(echo $image_line | cut -d: -f1)
              build_context=$(echo $image_line | cut -d: -f2)
              
              echo "Building $image_name from $build_context..."
              
              # Determine Dockerfile path
              if [ "$build_context" = "backend" ]; then
                dockerfile="Dockerfile.production"
              elif [ "$build_context" = "frontend" ]; then
                dockerfile="frontend/Dockerfile"
              elif [[ "$build_context" == mcp-servers/* ]]; then
                dockerfile="$build_context/Dockerfile"
              else
                dockerfile="Dockerfile"
              fi
              
              # Build and push
              docker buildx build \
                --platform linux/amd64 \
                --push \
                --tag ${{ env.DOCKER_REGISTRY }}/$image_name:${{ env.IMAGE_TAG }} \
                --tag ${{ env.DOCKER_REGISTRY }}/$image_name:${{ needs.prepare.outputs.deployment_id }} \
                --file $dockerfile \
                --build-arg ENVIRONMENT=${{ env.ENVIRONMENT }} \
                --build-arg PULUMI_ORG=${{ env.PULUMI_ORG }} \
                $build_context
              
              echo "‚úÖ Built and pushed $image_name"
            fi
          done

  deploy:
    name: üöÄ Deploy to Lambda Labs
    runs-on: ubuntu-latest
    needs: [prepare, build-images]
    if: always() && (needs.build-images.result == 'success' || needs.build-images.result == 'skipped')
    strategy:
      matrix:
        instance: ${{ fromJson(needs.prepare.outputs.instances) }}
      fail-fast: false
    steps:
      - name: üìÇ Checkout repository
        uses: actions/checkout@v4

      - name: üîê Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LAMBDA_PRIVATE_SSH_KEY }}" > ~/.ssh/sophia2025.pem
          chmod 600 ~/.ssh/sophia2025.pem
          ssh-keyscan -H 104.171.202.103 >> ~/.ssh/known_hosts
          ssh-keyscan -H 192.222.58.232 >> ~/.ssh/known_hosts
          ssh-keyscan -H 104.171.202.117 >> ~/.ssh/known_hosts
          ssh-keyscan -H 104.171.202.134 >> ~/.ssh/known_hosts
          ssh-keyscan -H 155.248.194.183 >> ~/.ssh/known_hosts

      - name: üè∑Ô∏è Set instance variables
        id: set-vars
        run: |
          case "${{ matrix.instance }}" in
            "production")
              echo "ip=104.171.202.103" >> $GITHUB_OUTPUT
              echo "gpu=RTX6000" >> $GITHUB_OUTPUT
              echo "compose_file=docker-compose-production.yml" >> $GITHUB_OUTPUT
              echo "description=Core Platform Services" >> $GITHUB_OUTPUT
              ;;
            "ai-core")
              echo "ip=192.222.58.232" >> $GITHUB_OUTPUT
              echo "gpu=GH200" >> $GITHUB_OUTPUT
              echo "compose_file=docker-compose-ai-core.yml" >> $GITHUB_OUTPUT
              echo "description=AI/ML Compute Engine" >> $GITHUB_OUTPUT
              ;;
            "mcp-orchestrator")
              echo "ip=104.171.202.117" >> $GITHUB_OUTPUT
              echo "gpu=A6000" >> $GITHUB_OUTPUT
              echo "compose_file=docker-compose-mcp-orchestrator.yml" >> $GITHUB_OUTPUT
              echo "description=MCP Services Hub" >> $GITHUB_OUTPUT
              ;;
            "data-pipeline")
              echo "ip=104.171.202.134" >> $GITHUB_OUTPUT
              echo "gpu=A100" >> $GITHUB_OUTPUT
              echo "compose_file=docker-compose-data-pipeline.yml" >> $GITHUB_OUTPUT
              echo "description=Data Processing Center" >> $GITHUB_OUTPUT
              ;;
            "development")
              echo "ip=155.248.194.183" >> $GITHUB_OUTPUT
              echo "gpu=A10" >> $GITHUB_OUTPUT
              echo "compose_file=docker-compose-development.yml" >> $GITHUB_OUTPUT
              echo "description=Development & Monitoring" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: üîç Validate SSH connection
        run: |
          echo "Testing SSH connection to ${{ matrix.instance }} (${{ steps.set-vars.outputs.ip }})..."
          ssh -i ~/.ssh/sophia2025.pem -o ConnectTimeout=10 -o StrictHostKeyChecking=no ubuntu@${{ steps.set-vars.outputs.ip }} "echo 'SSH connection successful'"

      - name: üõ†Ô∏è Prepare deployment environment
        run: |
          echo "Preparing deployment environment on ${{ matrix.instance }}..."
          ssh -i ~/.ssh/sophia2025.pem ubuntu@${{ steps.set-vars.outputs.ip }} "
            # Create directories
            sudo mkdir -p /opt/sophia-ai/{deployment,data,logs,configs}
            sudo chown -R ubuntu:ubuntu /opt/sophia-ai
            
            # Initialize Docker Swarm if needed
            if ! docker info | grep -q 'Swarm: active'; then
              echo 'Initializing Docker Swarm...'
              docker swarm init || true
            fi
            
            # Create networks
            docker network create --driver overlay sophia-network || true
            docker network create --driver overlay sophia-public || true
            docker network create --driver overlay sophia-private || true
            
            # Create volumes
            docker volume create sophia-postgres-data || true
            docker volume create sophia-redis-data || true
            docker volume create sophia-grafana-data || true
            docker volume create sophia-prometheus-data || true
            
            echo 'Environment prepared successfully'
          "

      - name: üì§ Copy deployment files
        run: |
          echo "Copying deployment files to ${{ matrix.instance }}..."
          
          # Copy Docker Compose file
          scp -i ~/.ssh/sophia2025.pem deployment/${{ steps.set-vars.outputs.compose_file }} ubuntu@${{ steps.set-vars.outputs.ip }}:/opt/sophia-ai/docker-compose.yml
          
          # Copy configuration files if they exist
          if [ -d "deployment/configs" ]; then
            scp -i ~/.ssh/sophia2025.pem -r deployment/configs ubuntu@${{ steps.set-vars.outputs.ip }}:/opt/sophia-ai/
          fi
          
          echo "Files copied successfully"

      - name: üöÄ Deploy Docker stack
        run: |
          echo "Deploying Docker stack to ${{ matrix.instance }}..."
          ssh -i ~/.ssh/sophia2025.pem ubuntu@${{ steps.set-vars.outputs.ip }} "
            cd /opt/sophia-ai
            
            # Set environment variables
            export DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
            export IMAGE_TAG=${{ env.IMAGE_TAG }}
            export ENVIRONMENT=${{ env.ENVIRONMENT }}
            export INSTANCE_NAME=${{ matrix.instance }}
            export GPU_TYPE=${{ steps.set-vars.outputs.gpu }}
            
            # Deploy the stack
            docker stack deploy -c docker-compose.yml sophia-${{ matrix.instance }} --with-registry-auth
            
            echo 'Deployment initiated successfully'
          "

      - name: ‚è≥ Wait for services to start
        run: |
          echo "Waiting for services to start on ${{ matrix.instance }}..."
          sleep 60

      - name: üîç Validate deployment
        if: github.event.inputs.skip_validation != 'true'
        run: |
          echo "Validating deployment on ${{ matrix.instance }}..."
          ssh -i ~/.ssh/sophia2025.pem ubuntu@${{ steps.set-vars.outputs.ip }} "
            cd /opt/sophia-ai
            
            # Check service status
            echo 'Service Status:'
            docker stack services sophia-${{ matrix.instance }}
            
            # Check for failed services
            failed_services=\$(docker stack services sophia-${{ matrix.instance }} --format 'table {{.Name}}\t{{.Replicas}}' | grep '0/' | wc -l)
            
            if [ \$failed_services -gt 0 ]; then
              echo 'WARNING: Some services failed to start'
              docker stack services sophia-${{ matrix.instance }} --format 'table {{.Name}}\t{{.Replicas}}\t{{.Image}}'
              exit 1
            else
              echo 'SUCCESS: All services are running'
            fi
            
            # Show running containers
            echo 'Running containers:'
            docker ps --filter label=com.docker.stack.namespace=sophia-${{ matrix.instance }} --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
          "

      - name: üìä Generate deployment report
        if: always()
        run: |
          echo "Generating deployment report for ${{ matrix.instance }}..."
          ssh -i ~/.ssh/sophia2025.pem ubuntu@${{ steps.set-vars.outputs.ip }} "
            cd /opt/sophia-ai
            
            # Generate deployment report
            echo '=== SOPHIA AI DEPLOYMENT REPORT ===' > deployment-report.txt
            echo 'Instance: ${{ matrix.instance }}' >> deployment-report.txt
            echo 'GPU: ${{ steps.set-vars.outputs.gpu }}' >> deployment-report.txt
            echo 'IP: ${{ steps.set-vars.outputs.ip }}' >> deployment-report.txt
            echo 'Deployment ID: ${{ needs.prepare.outputs.deployment_id }}' >> deployment-report.txt
            echo 'Timestamp: $(date)' >> deployment-report.txt
            echo '' >> deployment-report.txt
            echo '=== DOCKER STACK SERVICES ===' >> deployment-report.txt
            docker stack services sophia-${{ matrix.instance }} >> deployment-report.txt
            echo '' >> deployment-report.txt
            echo '=== RUNNING CONTAINERS ===' >> deployment-report.txt
            docker ps --filter label=com.docker.stack.namespace=sophia-${{ matrix.instance }} >> deployment-report.txt
            
            cat deployment-report.txt
          "

  post-deployment:
    name: üìã Post-Deployment Summary
    runs-on: ubuntu-latest
    needs: [prepare, deploy]
    if: always()
    steps:
      - name: üìä Generate deployment summary
        run: |
          echo "## üöÄ Sophia AI Unified Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment ID:** ${{ needs.prepare.outputs.deployment_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Instances:** ${{ github.event.inputs.target_instance || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Registry:** ${{ env.DOCKER_REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** ${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üèóÔ∏è Lambda Labs Instances" >> $GITHUB_STEP_SUMMARY
          echo "| Instance | GPU | IP Address | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-----|------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Check deployment status for each instance
          instances='["production", "ai-core", "mcp-orchestrator", "data-pipeline", "development"]'
          for instance in $(echo $instances | jq -r '.[]'); do
            if echo '${{ needs.prepare.outputs.instances }}' | jq -r '.[]' | grep -q "^$instance$"; then
              case "$instance" in
                "production") echo "| Production | RTX6000 | 104.171.202.103 | ‚úÖ Deployed |" >> $GITHUB_STEP_SUMMARY ;;
                "ai-core") echo "| AI Core | GH200 | 192.222.58.232 | ‚úÖ Deployed |" >> $GITHUB_STEP_SUMMARY ;;
                "mcp-orchestrator") echo "| MCP Orchestrator | A6000 | 104.171.202.117 | ‚úÖ Deployed |" >> $GITHUB_STEP_SUMMARY ;;
                "data-pipeline") echo "| Data Pipeline | A100 | 104.171.202.134 | ‚úÖ Deployed |" >> $GITHUB_STEP_SUMMARY ;;
                "development") echo "| Development | A10 | 155.248.194.183 | ‚úÖ Deployed |" >> $GITHUB_STEP_SUMMARY ;;
              esac
            else
              case "$instance" in
                "production") echo "| Production | RTX6000 | 104.171.202.103 | ‚è≠Ô∏è Skipped |" >> $GITHUB_STEP_SUMMARY ;;
                "ai-core") echo "| AI Core | GH200 | 192.222.58.232 | ‚è≠Ô∏è Skipped |" >> $GITHUB_STEP_SUMMARY ;;
                "mcp-orchestrator") echo "| MCP Orchestrator | A6000 | 104.171.202.117 | ‚è≠Ô∏è Skipped |" >> $GITHUB_STEP_SUMMARY ;;
                "data-pipeline") echo "| Data Pipeline | A100 | 104.171.202.134 | ‚è≠Ô∏è Skipped |" >> $GITHUB_STEP_SUMMARY ;;
                "development") echo "| Development | A10 | 155.248.194.183 | ‚è≠Ô∏è Skipped |" >> $GITHUB_STEP_SUMMARY ;;
              esac
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Access URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Production Dashboard:** http://104.171.202.103:3000" >> $GITHUB_STEP_SUMMARY
          echo "- **Production API:** http://104.171.202.103:8000" >> $GITHUB_STEP_SUMMARY
          echo "- **AI Core Services:** http://192.222.58.232:9000" >> $GITHUB_STEP_SUMMARY
          echo "- **MCP Services:** http://104.171.202.117:8080" >> $GITHUB_STEP_SUMMARY
          echo "- **Data Pipeline:** http://104.171.202.134:9090" >> $GITHUB_STEP_SUMMARY
          echo "- **Development:** http://155.248.194.183:3000" >> $GITHUB_STEP_SUMMARY

      - name: üîî Notify deployment status
        if: always()
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "‚úÖ Deployment completed successfully"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi