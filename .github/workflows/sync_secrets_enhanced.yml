name: üîê Enhanced Secret Sync (Using Actual Names)

on:
  push:
    branches: [main]
    paths:
      - 'scripts/ci/sync_secrets_to_esc_enhanced.py'
      - '.github/workflows/sync_secrets_enhanced.yml'
  schedule:
    - cron: '0 2 * * *'  # Nightly at 2 AM UTC
  workflow_dispatch:

jobs:
  sync-secrets:
    name: Sync GitHub Secrets to Pulumi ESC
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Pulumi
        uses: pulumi/actions@v5
        with:
          pulumi-version: 'latest'

      - name: Login to Pulumi
        run: |
          export PULUMI_ACCESS_TOKEN="${{ secrets.PULUMI_ACCESS_TOKEN }}"
          pulumi login

      - name: Sync Secrets to ESC
        run: |
          python scripts/ci/sync_secrets_to_esc_enhanced.py
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          # AI Services
          SECRET_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SECRET_ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          SECRET_GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          SECRET_DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          SECRET_COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
          SECRET_MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
          SECRET_PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
          SECRET_TOGETHER_AI_API_KEY: ${{ secrets.TOGETHER_AI_API_KEY }}
          SECRET_ELEVEN_LABS_API_KEY: ${{ secrets.ELEVEN_LABS_API_KEY }}
          SECRET_STABILITY_API_KEY: ${{ secrets.STABILITY_API_KEY }}
          SECRET_TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
          SECRET_MEM0_API_KEY: ${{ secrets.MEM0_API_KEY }}
          SECRET_LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          SECRET_LANGGRAPH_API_KEY: ${{ secrets.LANGGRAPH_API_KEY }}
          SECRET_PORTKEY_API_KEY: ${{ secrets.PORTKEY_API_KEY }}
          SECRET_OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

          # Infrastructure
          SECRET_DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          SECRET_LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
          SECRET_LAMBDA_SSH_KEY: ${{ secrets.LAMBDA_SSH_KEY }}
          SECRET_LAMBDA_PRIVATE_SSH_KEY: ${{ secrets.LAMBDA_PRIVATE_SSH_KEY }}
          SECRET_VERCEL_ACCESS_TOKEN: ${{ secrets.VERCEL_ACCESS_TOKEN }}

          # Data Services
          SECRET_SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SECRET_SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SECRET_SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SECRET_SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SECRET_SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SECRET_SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SECRET_SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
          SECRET_PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          SECRET_REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

          # Business Integrations
          SECRET_GONG_ACCESS_KEY: ${{ secrets.GONG_ACCESS_KEY }}
          SECRET_GONG_CLIENT_SECRET: ${{ secrets.GONG_CLIENT_SECRET }}
          SECRET_HUBSPOT_ACCESS_TOKEN: ${{ secrets.HUBSPOT_ACCESS_TOKEN }}
          SECRET_SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SECRET_SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
          SECRET_SLACK_CLIENT_ID: ${{ secrets.SLACK_CLIENT_ID }}
          SECRET_SLACK_CLIENT_SECRET: ${{ secrets.SLACK_CLIENT_SECRET }}
          SECRET_LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          SECRET_ASANA_API_TOKEN: ${{ secrets.ASANA_API_TOKEN }}
          SECRET_GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
          SECRET_FIGMA_PAT: ${{ secrets.FIGMA_PAT }}
          SECRET_NOTION_API_TOKEN: ${{ secrets.NOTION_API_TOKEN }}

          # Security
          SECRET_JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SECRET_ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}

      - name: Upload Sync Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secret-sync-report
          path: sync_report.json

      - name: Verify Critical Secrets
        run: |
          python << 'EOF'
          import json
          import sys

          # Load sync report
          with open('sync_report.json', 'r') as f:
              report = json.load(f)

          # Critical secrets that must be synced
          critical = ["PULUMI_ACCESS_TOKEN", "DOCKER_TOKEN", "LAMBDA_PRIVATE_SSH_KEY"]

          # Check if all critical secrets were synced
          missing_critical = [s for s in critical if s not in report['synced']]

          if missing_critical:
              print(f"‚ùå Critical secrets not synced: {', '.join(missing_critical)}")
              sys.exit(1)
          else:
              print("‚úÖ All critical secrets synced successfully!")
              print(f"üìä Total synced: {len(report['synced'])}/{report['total_mappings']}")
          EOF
