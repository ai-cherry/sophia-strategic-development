name: Build and Push Images
on:
  workflow_call:
    inputs:
      backend:
        description: 'Build backend image'
        type: boolean
        default: true
      mcp_servers:
        description: 'Build MCP server images'
        type: boolean
        default: true
      registry:
        description: 'Docker registry'
        type: string
        default: 'scoobyjava15'
    outputs:
      images:
        description: "Built image tags"
        value: ${{ jobs.collect.outputs.images }}

jobs:
  detect-mcp-servers:
    name: 🔍 Detect MCP Servers
    runs-on: ubuntu-latest
    if: inputs.mcp_servers
    outputs:
      matrix: ${{ steps.detect.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect MCP servers
        id: detect
        run: |
          # Find all V2 MCP server directories
          servers=$(find infrastructure/mcp_servers -name "*_v2" -type d | sed 's|infrastructure/mcp_servers/||' | jq -R -s -c 'split("\n")[:-1]')
          echo "Found MCP servers: $servers"
          echo "matrix=$servers" >> $GITHUB_OUTPUT

  build-backend:
    name: 🏗️ Build Backend
    runs-on: ubuntu-latest
    if: inputs.backend
    outputs:
      image: ${{ steps.build.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ inputs.registry }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push backend
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          platforms: linux/amd64
          push: true
          tags: |
            ${{ inputs.registry }}/sophia-ai:latest
            ${{ inputs.registry }}/sophia-ai:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

      - name: Output image tag
        id: output
        run: |
          echo "image=${{ inputs.registry }}/sophia-ai:${{ github.sha }}" >> $GITHUB_OUTPUT

  build-mcp-servers:
    name: 🏗️ Build ${{ matrix.server }}
    runs-on: ubuntu-latest
    needs: detect-mcp-servers
    if: inputs.mcp_servers && needs.detect-mcp-servers.outputs.matrix != '[]'
    strategy:
      matrix:
        server: ${{ fromJson(needs.detect-mcp-servers.outputs.matrix) }}
      fail-fast: false
    outputs:
      image: ${{ steps.build.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ inputs.registry }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push ${{ matrix.server }}
        id: build
        uses: docker/build-push-action@v5
        with:
          context: infrastructure/mcp_servers/${{ matrix.server }}
          file: infrastructure/mcp_servers/${{ matrix.server }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ inputs.registry }}/sophia-${{ matrix.server }}:latest
            ${{ inputs.registry }}/sophia-${{ matrix.server }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ inputs.registry }}/sophia-${{ matrix.server }}:buildcache
          cache-to: type=registry,ref=${{ inputs.registry }}/sophia-${{ matrix.server }}:buildcache,mode=max

      - name: Save image tag
        run: |
          echo "${{ matrix.server }}=${{ inputs.registry }}/sophia-${{ matrix.server }}:${{ github.sha }}" >> image-tags.txt

      - name: Upload image tags
        uses: actions/upload-artifact@v4
        with:
          name: image-tag-${{ matrix.server }}
          path: image-tags.txt

  collect:
    name: 📦 Collect Images
    runs-on: ubuntu-latest
    needs: [build-backend, build-mcp-servers]
    if: always()
    outputs:
      images: ${{ steps.collect.outputs.images }}
    steps:
      - name: Download all image tags
        uses: actions/download-artifact@v4
        with:
          pattern: image-tag-*
          merge-multiple: true

      - name: Collect all images
        id: collect
        run: |
          echo "## Built Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "image-tags.txt" ]; then
            cat image-tags.txt >> all-images.txt
          fi

          if [ "${{ needs.build-backend.outputs.image }}" != "" ]; then
            echo "backend=${{ needs.build-backend.outputs.image }}" >> all-images.txt
            echo "✅ Backend: ${{ needs.build-backend.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "all-images.txt" ]; then
            while IFS= read -r line; do
              echo "✅ $line" >> $GITHUB_STEP_SUMMARY
            done < all-images.txt

            # Output as JSON for downstream jobs
            images=$(cat all-images.txt | jq -R -s -c 'split("\n")[:-1]')
            echo "images=$images" >> $GITHUB_OUTPUT
          fi

      - name: Upload image manifest
        uses: actions/upload-artifact@v4
        with:
          name: image-manifest
          path: all-images.txt
