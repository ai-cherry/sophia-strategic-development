name: Daily Cleanup - Clean by Design
on:
  schedule:
    - cron: '0 0 * * *'  # Midnight UTC daily
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: Run cleanup scan (dry-run)
        if: github.event_name == 'schedule' || inputs.dry_run == 'true'
        env:
          DRY_RUN: 'true'
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          echo "🔍 Running cleanup scan in dry-run mode..."
          python scripts/utils/enhanced_daily_cleanup.py
      
      - name: Run cleanup execution
        if: github.event_name == 'workflow_dispatch' && inputs.dry_run == 'false'
        env:
          DRY_RUN: 'false'
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          echo "🧹 Running cleanup execution (DELETING FILES)..."
          python scripts/utils/enhanced_daily_cleanup.py
      
      - name: Upload scan report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cleanup-report
          path: |
            cleanup_scan_report.json
            cleanup_execution_report.json
      
      - name: Check for critical findings
        id: check_findings
        run: |
          if [ -f cleanup_scan_report.json ]; then
            LEAKS=$(python -c "import json; data=json.load(open('cleanup_scan_report.json')); print(len(data['findings']['env_leaks']))")
            MCP_DUPS=$(python -c "import json; data=json.load(open('cleanup_scan_report.json')); print(len(data['findings']['mcp_duplicates']))")
            TOTAL=$(python -c "import json; data=json.load(open('cleanup_scan_report.json')); print(data['summary']['total_items_found'])")
            
            echo "env_leaks=$LEAKS" >> $GITHUB_OUTPUT
            echo "mcp_duplicates=$MCP_DUPS" >> $GITHUB_OUTPUT
            echo "total_items=$TOTAL" >> $GITHUB_OUTPUT
            
            if [ "$LEAKS" -gt 0 ]; then
              echo "🚨 Found $LEAKS potential secret leaks!"
            fi
          fi
      
      - name: Create issue for critical findings
        if: steps.check_findings.outputs.env_leaks > 0
        uses: actions/github-script@v6
        with:
          script: |
            const leaks = ${{ steps.check_findings.outputs.env_leaks }};
            const total = ${{ steps.check_findings.outputs.total_items }};
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Daily Cleanup: ${leaks} potential secret leaks found`,
              body: `## Daily Cleanup Report
              
              The automated cleanup scan found potential issues:
              
              - **Potential secret leaks**: ${leaks}
              - **Total items to clean**: ${total}
              
              Please review the [cleanup report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) and take appropriate action.
              
              To execute cleanup:
              1. Review the findings carefully
              2. Run the workflow manually with dry_run=false
              `,
              labels: ['security', 'cleanup', 'automated']
            });
      
      - name: Commit changes (if execution mode)
        if: github.event_name == 'workflow_dispatch' && inputs.dry_run == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are changes to commit
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "🧹 Automated cleanup execution
            
            - Removed expired one-time scripts
            - Cleaned backup files
            - Removed empty archive directories
            - See cleanup_execution_report.json for details"
            
            git push
          else
            echo "No changes to commit"
          fi
      
      - name: Slack notification
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Daily Cleanup Workflow Complete",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Daily Cleanup Report* :broom:\n*Status:* ${{ job.status }}\n*Mode:* ${{ env.DRY_RUN == 'true' && 'Dry Run' || 'Execution' }}\n*Total Items:* ${{ steps.check_findings.outputs.total_items || '0' }}\n*Potential Leaks:* ${{ steps.check_findings.outputs.env_leaks || '0' }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Run"
                      },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 