name: Enhanced Estuary Gong Pipeline Deployment

on:
  push:
    branches: [main]
    paths:
      - 'backend/etl/estuary/**'
      - 'backend/scripts/deploy_gong_snowflake_setup.py'
      - '.github/workflows/estuary-deployment.yml'
  pull_request:
    branches: [main]
    paths:
      - 'backend/etl/estuary/**'
      - 'backend/scripts/deploy_gong_snowflake_setup.py'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  PULUMI_ORG: scoobyjava-org

jobs:
  validate-and-test:
    name: Validate Estuary Configuration
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
          uv sync
          uv sync --group test pytest-asyncio
      
      - name: Set up Pulumi ESC
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          curl -fsSL https://get.pulumi.com | sh
          export PATH=$PATH:$HOME/.pulumi/bin
          echo "$HOME/.pulumi/bin" >> $GITHUB_PATH
          pulumi login
      
      - name: Validate Estuary Configuration
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_ORG: ${{ env.PULUMI_ORG }}
        run: |
          export PULUMI_ORG=${{ env.PULUMI_ORG }}
          python -c "
          import asyncio
          from backend.etl.estuary.estuary_configuration_manager import EnhancedEstuaryManager
          
          async def validate():
              manager = EnhancedEstuaryManager('${{ github.event.inputs.environment || 'dev' }}')
              result = await manager.initialize()
              if result.status.value != 'success':
                  raise Exception(f'Estuary manager initialization failed: {result.error_message}')
              await manager.cleanup()
              print('✅ Estuary configuration validation passed')
          
          asyncio.run(validate())
          "
      
      - name: Run Enhanced Integration Tests
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_ORG: ${{ env.PULUMI_ORG }}
        run: |
          export PULUMI_ORG=${{ env.PULUMI_ORG }}
          python backend/scripts/enhanced_estuary_integration_test_suite.py \
            --environment ${{ github.event.inputs.environment || 'dev' }} \
            --output test_results_${{ github.event.inputs.environment || 'dev' }}.json
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ github.event.inputs.environment || 'dev' }}
          path: test_results_*.json
          retention-days: 30

  deploy-snowflake-infrastructure:
    name: Deploy Snowflake Infrastructure
    runs-on: ubuntu-latest
    needs: validate-and-test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
          uv sync
      
      - name: Set up Pulumi ESC
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          curl -fsSL https://get.pulumi.com | sh
          export PATH=$PATH:$HOME/.pulumi/bin
          echo "$HOME/.pulumi/bin" >> $GITHUB_PATH
          pulumi login
      
      - name: Deploy Snowflake DDL and Procedures
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_ORG: ${{ env.PULUMI_ORG }}
        run: |
          export PULUMI_ORG=${{ env.PULUMI_ORG }}
          python backend/scripts/deploy_gong_snowflake_setup.py \
            --env ${{ github.event.inputs.environment || 'dev' }} \
            --execute-all
      
      - name: Validate Snowflake Deployment
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_ORG: ${{ env.PULUMI_ORG }}
        run: |
          export PULUMI_ORG=${{ env.PULUMI_ORG }}
          python -c "
          import asyncio
          from backend.utils.snowflake_cortex_service import SnowflakeCortexService
          
          async def validate():
              cortex = SnowflakeCortexService()
              await cortex.initialize()
              
              # Verify STG_GONG_CALLS table exists
              result = await cortex.execute_query('''
                  SELECT COUNT(*) as table_exists 
                  FROM INFORMATION_SCHEMA.TABLES 
                  WHERE TABLE_SCHEMA = 'STG_TRANSFORMED' 
                  AND TABLE_NAME = 'STG_GONG_CALLS'
              ''')
              
              if result.iloc[0]['TABLE_EXISTS'] == 0:
                  raise Exception('STG_GONG_CALLS table not found')
              
              await cortex.close()
              print('✅ Snowflake infrastructure validation passed')
          
          asyncio.run(validate())
          "

  configure-estuary-connectors:
    name: Configure Estuary Connectors
    runs-on: ubuntu-latest
    needs: deploy-snowflake-infrastructure
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
          uv sync
      
      - name: Set up Pulumi ESC
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          curl -fsSL https://get.pulumi.com | sh
          export PATH=$PATH:$HOME/.pulumi/bin
          echo "$HOME/.pulumi/bin" >> $GITHUB_PATH
          pulumi login
      
      - name: Configure Gong Source and Snowflake Destination
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_ORG: ${{ env.PULUMI_ORG }}
        run: |
          export PULUMI_ORG=${{ env.PULUMI_ORG }}
          python -c "
          import asyncio
          from backend.etl.estuary.estuary_configuration_manager import EnhancedEstuaryManager
          
          async def configure():
              manager = EnhancedEstuaryManager('${{ github.event.inputs.environment || 'dev' }}')
              await manager.initialize()
              
              # Configure Gong source
              source_result = await manager.configure_gong_source()
              if source_result.status.value != 'success':
                  raise Exception(f'Gong source configuration failed: {source_result.error_message}')
              
              print(f'✅ Gong source configured: {source_result.resource_id}')
              
              # Configure Snowflake destination
              # dest_result = await manager.configure_snowflake_destination()
              # if dest_result.status.value != 'success':
              #     raise Exception(f'Snowflake destination configuration failed: {dest_result.error_message}')
              
              # print(f'✅ Snowflake destination configured: {dest_result.resource_id}')
              
              await manager.cleanup()
          
          asyncio.run(configure())
          "

  post-deployment-validation:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: configure-estuary-connectors
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
          uv sync
      
      - name: Set up Pulumi ESC
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          curl -fsSL https://get.pulumi.com | sh
          export PATH=$PATH:$HOME/.pulumi/bin
          echo "$HOME/.pulumi/bin" >> $GITHUB_PATH
          pulumi login
      
      - name: Run Post-Deployment Tests
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_ORG: ${{ env.PULUMI_ORG }}
        run: |
          export PULUMI_ORG=${{ env.PULUMI_ORG }}
          python backend/scripts/enhanced_estuary_integration_test_suite.py \
            --environment ${{ github.event.inputs.environment || 'dev' }} \
            --output post_deployment_results.json
      
      - name: Validate Data Pipeline Health
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_ORG: ${{ env.PULUMI_ORG }}
        run: |
          export PULUMI_ORG=${{ env.PULUMI_ORG }}
          python -c "
          import asyncio
          from backend.etl.estuary.estuary_configuration_manager import EnhancedEstuaryManager
          
          async def validate():
              manager = EnhancedEstuaryManager('${{ github.event.inputs.environment || 'dev' }}')
              await manager.initialize()
              
              health_check = await manager.perform_health_check()
              
              if health_check['overall_status'] not in ['healthy', 'degraded']:
                  raise Exception(f'Pipeline health check failed: {health_check[\"overall_status\"]}')
              
              print(f'✅ Pipeline health validated: {health_check[\"overall_status\"]}')
              await manager.cleanup()
          
          asyncio.run(validate())
          "
      
      - name: Upload post-deployment results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: post-deployment-results-${{ github.event.inputs.environment || 'dev' }}
          path: post_deployment_results.json
          retention-days: 30
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "🎉 Enhanced Estuary Gong Pipeline deployment completed successfully!"
          echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
