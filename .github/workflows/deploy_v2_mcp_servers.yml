name: Deploy V2 MCP Servers

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - staging
      deploy_monitoring:
        description: 'Deploy monitoring stack'
        required: false
        default: true
        type: boolean
  push:
    branches: [main]
    paths:
      - 'infrastructure/mcp_servers/*_v2/**'
      - 'docker-compose.cloud.v2.yml'
      - '.github/workflows/deploy_v2_mcp_servers.yml'

env:
  DOCKER_REGISTRY: scoobyjava15
  LAMBDA_LABS_HOST: 146.235.200.1
  PULUMI_ORG: scoobyjava-org

jobs:
  pre-flight-checks:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.validate.outputs.ready }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Validate environment
        id: validate
        run: |
          python scripts/validate_environment.py
          python scripts/mcp_version_validator.py
          echo "ready=true" >> $GITHUB_OUTPUT

  build-images:
    name: Build MCP V2 Images
    needs: pre-flight-checks
    if: needs.pre-flight-checks.outputs.ready == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        server:
          - ai_memory_v2
          - gong_v2
          - snowflake_v2
          - slack_v2
          - notion_v2
          - linear_v2
          - github_v2
          - codacy_v2
          - asana_v2
          - perplexity_v2
    outputs:
      images: ${{ steps.collect.outputs.images }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push ${{ matrix.server }}
        id: build
        uses: docker/build-push-action@v5
        with:
          context: infrastructure/mcp_servers/${{ matrix.server }}
          file: infrastructure/mcp_servers/${{ matrix.server }}/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/sophia-${{ matrix.server }}:latest
            ${{ env.DOCKER_REGISTRY }}/sophia-${{ matrix.server }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/sophia-${{ matrix.server }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/sophia-${{ matrix.server }}:buildcache,mode=max
          build-args: |
            ENVIRONMENT=${{ inputs.environment || 'prod' }}
            PULUMI_ORG=${{ env.PULUMI_ORG }}

      - name: Collect image tags
        id: collect
        run: |
          echo "${{ matrix.server }}=${{ env.DOCKER_REGISTRY }}/sophia-${{ matrix.server }}:${{ github.sha }}" >> images.txt

      - name: Upload image list
        uses: actions/upload-artifact@v3
        with:
          name: image-tags-${{ matrix.server }}
          path: images.txt

  prepare-deployment:
    name: Prepare Deployment Configuration
    needs: build-images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all image tags
        uses: actions/download-artifact@v3
        with:
          pattern: image-tags-*
          merge-multiple: true

      - name: Create deployment env file
        run: |
          echo "# V2 MCP Server Images" > .env.deployment
          cat image-tags-*/images.txt >> .env.deployment
          echo "ENVIRONMENT=${{ inputs.environment || 'prod' }}" >> .env.deployment
          echo "DEPLOY_TIMESTAMP=$(date -u +%Y%m%d_%H%M%S)" >> .env.deployment

      - name: Upload deployment config
        uses: actions/upload-artifact@v3
        with:
          name: deployment-config
          path: .env.deployment

  deploy-infrastructure:
    name: Deploy Infrastructure Services
    needs: prepare-deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Pulumi
        uses: pulumi/actions@v4
        with:
          cloud-url: ${{ secrets.PULUMI_CLOUD_URL }}

      - name: Deploy Snowflake resources
        run: |
          cd infrastructure/snowflake_iac
          pulumi stack select ${{ inputs.environment || 'prod' }}
          pulumi up --yes
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}

  deploy-mcp-stack:
    name: Deploy MCP V2 Stack
    needs: [prepare-deployment, deploy-infrastructure]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download deployment config
        uses: actions/download-artifact@v3
        with:
          name: deployment-config

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LAMBDA_LABS_SSH_KEY }}" > ~/.ssh/lambda_labs
          chmod 600 ~/.ssh/lambda_labs
          ssh-keyscan -H ${{ env.LAMBDA_LABS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Lambda Labs
        run: |
          # Copy files to Lambda Labs
          scp -i ~/.ssh/lambda_labs \
            docker-compose.cloud.v2.yml \
            .env.deployment \
            scripts/deploy_enhanced.sh \
            ubuntu@${{ env.LAMBDA_LABS_HOST }}:/home/ubuntu/

          # Deploy stack
          ssh -i ~/.ssh/lambda_labs ubuntu@${{ env.LAMBDA_LABS_HOST }} << 'EOF'
            set -e
            source .env.deployment
            bash deploy_enhanced.sh deploy sophia-v2-mcp docker-compose.cloud.v2.yml
          EOF

  deploy-monitoring:
    name: Deploy Monitoring Stack
    needs: deploy-mcp-stack
    if: inputs.deploy_monitoring == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LAMBDA_LABS_SSH_KEY }}" > ~/.ssh/lambda_labs
          chmod 600 ~/.ssh/lambda_labs
          ssh-keyscan -H ${{ env.LAMBDA_LABS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy monitoring
        run: |
          scp -i ~/.ssh/lambda_labs \
            monitoring-stack.yml \
            configs/prometheus.yml \
            configs/alerts.yml \
            ubuntu@${{ env.LAMBDA_LABS_HOST }}:/home/ubuntu/

          ssh -i ~/.ssh/lambda_labs ubuntu@${{ env.LAMBDA_LABS_HOST }} << 'EOF'
            docker stack deploy -c monitoring-stack.yml monitoring
          EOF

  validate-deployment:
    name: Validate Deployment
    needs: [deploy-mcp-stack, deploy-monitoring]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run validation tests
        run: |
          python scripts/validate_v2_deployment.py \
            --host ${{ env.LAMBDA_LABS_HOST }} \
            --timeout 300

      - name: Generate deployment report
        if: always()
        run: |
          python scripts/generate_deployment_report.py \
            --deployment sophia-v2-mcp \
            --output reports/v2_deployment_report.json

      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: reports/v2_deployment_report.json

  update-frontend:
    name: Update Frontend
    needs: validate-deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Vercel CLI
        run: npm i -g vercel

      - name: Deploy to Vercel
        run: |
          cd frontend
          vercel pull --yes --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  notify-completion:
    name: Notify Deployment Status
    needs: [validate-deployment, update-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            V2 MCP Deployment ${{ job.status }}
            Environment: ${{ inputs.environment || 'prod' }}
            Commit: ${{ github.sha }}
            Triggered by: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
