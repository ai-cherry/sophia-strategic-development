name: Deploy Sentry MCP Server

on:
  repository_dispatch:
    types: [deploy-sentry-mcp]
  workflow_dispatch:
  push:
    paths:
      - 'mcp-servers/sentry/**'
      - 'docker-compose.sentry.yml'
      - '.github/workflows/deploy-sentry-mcp.yml'

jobs:
  deploy:
    name: Deploy Sentry MCP
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and Push Sentry MCP Image
        uses: docker/build-push-action@v5
        with:
          context: ./mcp-servers/sentry
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/sophia-sentry-mcp:latest
            ${{ secrets.DOCKER_USERNAME }}/sophia-sentry-mcp:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy to Production
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
          
          # Deploy script
          cat > deploy_sentry.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Deploying Sentry MCP Server..."
          
          # Pull latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/sophia-sentry-mcp:latest
          
          # Update docker-compose.sentry.yml
          cd /opt/sophia
          
          # Stop existing container
          docker-compose -f docker-compose.sentry.yml down || true
          
          # Start with new image
          PULUMI_ACCESS_TOKEN=${{ secrets.PULUMI_ACCESS_TOKEN }} \
          docker-compose -f docker-compose.sentry.yml up -d
          
          # Wait for health check
          echo "Waiting for Sentry MCP to be healthy..."
          for i in {1..30}; do
            if docker exec sentry-mcp python -c "import httpx; httpx.get('http://localhost:9000/health')" 2>/dev/null; then
              echo "✅ Sentry MCP is healthy!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          
          # Show logs
          docker logs sentry-mcp --tail 50
          
          echo "✅ Sentry MCP deployment complete!"
          EOF
          
          # Execute deployment
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            $DEPLOY_USER@$DEPLOY_HOST 'bash -s' < deploy_sentry.sh
      
      - name: Verify Deployment
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          # Verify Sentry MCP is running
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            $DEPLOY_USER@$DEPLOY_HOST \
            "docker ps | grep sentry-mcp && echo '✅ Sentry MCP is running'"
      
      - name: Update Deployment Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: `Sentry MCP deployment ${status}`,
              context: 'deploy/sentry-mcp'
            });
