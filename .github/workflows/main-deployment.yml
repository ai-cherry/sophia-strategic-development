name: 🚀 Sophia AI Main Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        type: choice
        options:
          - production
          - staging
          - development
        default: production
      components:
        description: 'Components to deploy'
        type: choice
        options:
          - all
          - backend
          - mcp
          - infrastructure
        default: all
      skip_tests:
        description: 'Skip tests (emergency only)'
        type: boolean
        default: false

env:
  DOCKER_REGISTRY: scoobyjava15
  PULUMI_ORG: scoobyjava-org
  LAMBDA_LABS_IP: 192.222.51.151
  LAMBDA_SSH_KEY_NAME: lynn_sophia_h200_key

concurrency:
  group: deployment-${{ github.event.inputs.environment || 'production' }}
  cancel-in-progress: false

jobs:
  # Security scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Scan for secrets
        run: |
          pip install -r requirements.txt
          python scripts/security/scan_for_secrets.py
          
      - name: Container scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  # Run tests
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    needs: security-scan
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          
      - name: Run tests
        run: |
          pytest tests/ -v --cov=backend --cov-report=xml
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  # Build Docker images
  build:
    name: 🏗️ Build Images
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: |
      always() && 
      needs.security-scan.result == 'success' &&
      (needs.test.result == 'success' || inputs.skip_tests)
    strategy:
      matrix:
        include:
          - service: backend
            context: .
            dockerfile: Dockerfile.production
          - service: mcp-linear
            context: mcp-servers/linear
            dockerfile: Dockerfile
          - service: mcp-github
            context: mcp-servers/github
            dockerfile: Dockerfile
          - service: mcp-asana
            context: mcp-servers/asana
            dockerfile: Dockerfile
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_REGISTRY }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/sophia-${{ matrix.service }}:latest
            ${{ env.DOCKER_REGISTRY }}/sophia-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ inputs.environment || 'production' }}

  # Deploy infrastructure
  deploy-infrastructure:
    name: 🏗️ Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    if: contains(inputs.components, 'all') || contains(inputs.components, 'infrastructure')
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Pulumi
        uses: pulumi/actions@v5
        with:
          command: preview
          stack-name: ${{ env.PULUMI_ORG }}/sophia-${{ inputs.environment || 'production' }}
          work-dir: infrastructure/pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          
      - name: Deploy with Pulumi
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: pulumi/actions@v5
        with:
          command: up
          stack-name: ${{ env.PULUMI_ORG }}/sophia-${{ inputs.environment || 'production' }}
          work-dir: infrastructure/pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  # Deploy services
  deploy-services:
    name: 🚀 Deploy Services
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure]
    if: always() && needs.build.result == 'success'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install deployment tools
        run: |
          pip install paramiko pyyaml httpx
          
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LAMBDA_SSH_PRIVATE_KEY }}" > ~/.ssh/lambda_labs_key
          chmod 600 ~/.ssh/lambda_labs_key
          
      - name: Deploy Backend
        if: contains(inputs.components, 'all') || contains(inputs.components, 'backend')
        run: |
          python scripts/deployment/deploy.py \
            --host ${{ env.LAMBDA_LABS_IP }} \
            --key ~/.ssh/lambda_labs_key \
            --component backend \
            --tag ${{ github.sha }}
            
      - name: Deploy MCP Servers
        if: contains(inputs.components, 'all') || contains(inputs.components, 'mcp')
        run: |
          python scripts/deployment/deploy.py \
            --host ${{ env.LAMBDA_LABS_IP }} \
            --key ~/.ssh/lambda_labs_key \
            --component mcp \
            --tag ${{ github.sha }}

  # Health check
  health-check:
    name: ✅ Health Check
    runs-on: ubuntu-latest
    needs: deploy-services
    if: always() && needs.deploy-services.result == 'success'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install httpx pyyaml
          
      - name: Run health checks
        run: |
          python scripts/deployment/health_check.py \
            --host ${{ env.LAMBDA_LABS_IP }} \
            --services backend,mcp-linear,mcp-github,mcp-asana \
            --timeout 300
            
      - name: Generate deployment report
        if: always()
        run: |
          python scripts/deployment/generate_report.py \
            --deployment-id ${{ github.run_id }} \
            --environment ${{ inputs.environment || 'production' }} \
            --commit ${{ github.sha }}
            
      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ github.run_id }}
          path: deployment_report.html

  # Notification
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [security-scan, test, build, deploy-services, health-check]
    if: always()
    steps:
      - name: Determine status
        id: status
        run: |
          if [[ "${{ needs.health-check.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
          fi
          
      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-type: application/json' \
            -d '{
              "text": "${{ steps.status.outputs.emoji }} Deployment ${{ steps.status.outputs.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment ${{ steps.status.outputs.status }}*\n*Environment:* ${{ inputs.environment || 'production' }}\n*Commit:* `${{ github.sha }}`\n*Run:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                }
              ]
            }' 