name: "\U0001F680 Sophia AI Main Deployment"
true:
  push:
    branches:
    - main
  workflow_dispatch:
    inputs:
      environment:
        description: Deployment environment
        type: choice
        options:
        - production
        - staging
        - development
        default: production
      components:
        description: Components to deploy
        type: choice
        options:
        - all
        - backend
        - mcp
        - infrastructure
        default: all
      skip_tests:
        description: Skip tests (emergency only)
        type: boolean
        default: false
env:
  DOCKER_REGISTRY: scoobyjava15
  PULUMI_ORG: scoobyjava-org
  LAMBDA_LABS_IP: 192.222.58.232
  LAMBDA_SSH_KEY_NAME: sophia2025
concurrency:
  group: deployment-${{ github.event.inputs.environment || 'production' }}
  cancel-in-progress: false
jobs:
  security-scan:
    name: "\U0001F512 Security Scan"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Scan for secrets
      run: 'pip install -r requirements.txt

        python scripts/security/scan_for_secrets.py

        '
    - name: Container scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: fs
        scan-ref: .
        severity: CRITICAL,HIGH
        exit-code: '1'
  test:
    name: "\U0001F9EA Test Suite"
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    needs: security-scan
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: 'pip install -r requirements.txt

        '
    - name: Run tests
      run: 'pytest tests/ -v --cov=backend --cov-report=xml

        '
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
  build:
    name: "\U0001F3D7\uFE0F Build Images"
    runs-on: ubuntu-latest
    needs:
    - security-scan
    - test
    if: "always() && \nneeds.security-scan.result == 'success' &&\n(needs.test.result\
      \ == 'success' || inputs.skip_tests)\n"
    strategy:
      matrix:
        include:
        - service: backend
          context: .
          dockerfile: Dockerfile.production
        - service: mcp-linear
          context: mcp-servers/linear
          dockerfile: Dockerfile
        - service: mcp-github
          context: mcp-servers/github
          dockerfile: Dockerfile
        - service: mcp-asana
          context: mcp-servers/asana
          dockerfile: Dockerfile
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_REGISTRY }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Build and push ${{ matrix.service }}
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: '${{ env.DOCKER_REGISTRY }}/sophia-${{ matrix.service }}:latest

          ${{ env.DOCKER_REGISTRY }}/sophia-${{ matrix.service }}:${{ github.sha }}

          '
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: 'ENVIRONMENT=${{ inputs.environment || ''production'' }}

          '
  deploy-infrastructure:
    name: "\U0001F3D7\uFE0F Deploy Infrastructure"
    runs-on: ubuntu-latest
    needs: build
    if: contains(inputs.components, 'all') || contains(inputs.components, 'infrastructure')
    steps:
    - uses: actions/checkout@v4
    - name: Setup Pulumi
      uses: pulumi/actions@v5
      with:
        command: preview
        stack-name: ${{ env.PULUMI_ORG }}/sophia-${{ inputs.environment || 'production'
          }}
        work-dir: infrastructure/pulumi
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    - name: Deploy with Pulumi
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: pulumi/actions@v5
      with:
        command: up
        stack-name: ${{ env.PULUMI_ORG }}/sophia-${{ inputs.environment || 'production'
          }}
        work-dir: infrastructure/pulumi
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  deploy-services:
    name: "\U0001F680 Deploy Services"
    runs-on: ubuntu-latest
    needs:
    - build
    - deploy-infrastructure
    if: always() && needs.build.result == 'success'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install deployment tools
      run: 'pip install paramiko pyyaml httpx

        '
    - name: Configure SSH
      run: 'mkdir -p ~/.ssh

        echo "${{ secrets.LAMBDA_SSH_PRIVATE_KEY }}" > ~/.ssh/lambda_labs_key

        chmod 600 ~/.ssh/lambda_labs_key

        '
    - name: Deploy Backend
      if: contains(inputs.components, 'all') || contains(inputs.components, 'backend')
      run: "python scripts/deployment/deploy.py \\\n  --host ${{ env.LAMBDA_LABS_IP\
        \ }} \\\n  --key ~/.ssh/lambda_labs_key \\\n  --component backend \\\n  --tag\
        \ ${{ github.sha }}\n  \n"
    - name: Deploy MCP Servers
      if: contains(inputs.components, 'all') || contains(inputs.components, 'mcp')
      run: "python scripts/deployment/deploy.py \\\n  --host ${{ env.LAMBDA_LABS_IP\
        \ }} \\\n  --key ~/.ssh/lambda_labs_key \\\n  --component mcp \\\n  --tag\
        \ ${{ github.sha }}\n"
  health-check:
    name: "\u2705 Health Check"
    runs-on: ubuntu-latest
    needs: deploy-services
    if: always() && needs.deploy-services.result == 'success'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: 'pip install httpx pyyaml

        '
    - name: Run health checks
      run: "python scripts/deployment/health_check.py \\\n  --host ${{ env.LAMBDA_LABS_IP\
        \ }} \\\n  --services backend,mcp-linear,mcp-github,mcp-asana \\\n  --timeout\
        \ 300\n  \n"
    - name: Generate deployment report
      if: always()
      run: "python scripts/deployment/generate_report.py \\\n  --deployment-id ${{\
        \ github.run_id }} \\\n  --environment ${{ inputs.environment || 'production'\
        \ }} \\\n  --commit ${{ github.sha }}\n  \n"
    - name: Upload report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report-${{ github.run_id }}
        path: deployment_report.html
  notify:
    name: "\U0001F4E2 Notify"
    runs-on: ubuntu-latest
    needs:
    - security-scan
    - test
    - build
    - deploy-services
    - health-check
    if: always()
    steps:
    - name: Determine status
      id: status
      run: "if [[ \"${{ needs.health-check.result }}\" == \"success\" ]]; then\n \
        \ echo \"status=success\" >> $GITHUB_OUTPUT\n  echo \"emoji=\u2705\" >> $GITHUB_OUTPUT\n\
        else\n  echo \"status=failure\" >> $GITHUB_OUTPUT\n  echo \"emoji=\u274C\"\
        \ >> $GITHUB_OUTPUT\nfi\n"
    - name: Send Slack notification
      if: env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: "curl -X POST $SLACK_WEBHOOK_URL \\\n  -H 'Content-type: application/json'\
        \ \\\n  -d '{\n    \"text\": \"${{ steps.status.outputs.emoji }} Deployment\
        \ ${{ steps.status.outputs.status }}\",\n    \"blocks\": [\n      {\n    \
        \    \"type\": \"section\",\n        \"text\": {\n          \"type\": \"mrkdwn\"\
        ,\n          \"text\": \"*Deployment ${{ steps.status.outputs.status }}*\\\
        n*Environment:* ${{ inputs.environment || 'production' }}\\n*Commit:* `${{\
        \ github.sha }}`\\n*Run:* <${{ github.server_url }}/${{ github.repository\
        \ }}/actions/runs/${{ github.run_id }}|View Details>\"\n        }\n      }\n\
        \    ]\n  }' "
