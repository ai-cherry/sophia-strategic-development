name: 🚀 Sophia AI Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean

env:
  PULUMI_ORG: scoobyjava-org
  PULUMI_STACK: sophia-ai-production
  ENVIRONMENT: production
  SOPHIA_VERSION: 3.4.0

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    name: 🔑 Validate Secrets
    outputs:
      secrets_valid: ${{ steps.validation.outputs.valid }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔍 Validate Required Secrets
        id: validation
        run: |
          echo "🔑 Validating GitHub Organization Secrets..."
          
          # Core secrets validation
          required_secrets=(
            "PULUMI_ACCESS_TOKEN"
            "OPENAI_API_KEY"
            "ANTHROPIC_API_KEY"
            "QDRANT_API_KEY"
            "LAMBDA_API_KEY"
            "DOCKER_USER_NAME"
            "DOCKER_PERSONAL_ACCESS_TOKEN"
            "HUBSPOT_ACCESS_TOKEN"
            "GONG_ACCESS_KEY"
            "SLACK_BOT_TOKEN"
          )
          
          missing_secrets=()
          for secret in "${required_secrets[@]}"; do
            if [[ -z "${!secret:-}" ]]; then
              missing_secrets+=("$secret")
              echo "❌ Missing: $secret"
            else
              echo "✅ Found: $secret"
            fi
          done
          
          if [[ ${#missing_secrets[@]} -eq 0 ]]; then
            echo "✅ All required secrets are available"
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Missing ${#missing_secrets[@]} required secrets"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
          DOCKER_USER_NAME: ${{ secrets.DOCKER_USER_NAME }}
          DOCKER_PERSONAL_ACCESS_TOKEN: ${{ secrets.DOCKER_PERSONAL_ACCESS_TOKEN }}
          HUBSPOT_ACCESS_TOKEN: ${{ secrets.HUBSPOT_ACCESS_TOKEN }}
          GONG_ACCESS_KEY: ${{ secrets.GONG_ACCESS_KEY }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Production
    needs: validate-secrets
    if: needs.validate-secrets.outputs.secrets_valid == 'true'
    environment: production
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 🔧 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pulumi>=3.0.0
          pip install -r requirements.txt
          
      - name: 🔑 Configure Pulumi
        run: |
          pulumi login
          pulumi stack select ${{ env.PULUMI_STACK }} || pulumi stack init ${{ env.PULUMI_STACK }}
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          
      - name: 🏗️ Deploy Infrastructure
        run: |
          echo "🏗️ Deploying infrastructure with Pulumi ESC..."
          
          # Run deployment through Pulumi ESC for automatic secret injection
          pulumi esc env run ${{ env.PULUMI_ORG }}/default/${{ env.PULUMI_STACK }} -- \
            pulumi up --yes --stack ${{ env.PULUMI_STACK }}
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          
      - name: 🐳 Setup Docker
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_PERSONAL_ACCESS_TOKEN }}
          
      - name: 🏗️ Build and Push Docker Images
        run: |
          echo "🐳 Building Sophia AI containers..."
          
          # Build backend image
          docker build -f backend/Dockerfile -t scoobyjava15/sophia-ai-backend:${{ env.SOPHIA_VERSION }} .
          docker push scoobyjava15/sophia-ai-backend:${{ env.SOPHIA_VERSION }}
          
          # Build frontend image
          docker build -f frontend/Dockerfile -t scoobyjava15/sophia-ai-frontend:${{ env.SOPHIA_VERSION }} .
          docker push scoobyjava15/sophia-ai-frontend:${{ env.SOPHIA_VERSION }}
          
          # Build personality engine image
          docker build -f backend/personality/Dockerfile -t scoobyjava15/sophia-ai-personality:${{ env.SOPHIA_VERSION }} .
          docker push scoobyjava15/sophia-ai-personality:${{ env.SOPHIA_VERSION }}
          
          echo "✅ All images pushed to Docker Hub"
          
      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: ☸️ Deploy to Kubernetes
        run: |
          echo "☸️ Deploying to Lambda Labs K3s cluster..."
          
          # Configure kubectl for Lambda Labs
          echo "${{ secrets.LAMBDA_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          
          # Update image versions in manifests
          cd k8s/overlays/production
          kustomize edit set image scoobyjava15/sophia-ai-backend:${{ env.SOPHIA_VERSION }}
          kustomize edit set image scoobyjava15/sophia-ai-frontend:${{ env.SOPHIA_VERSION }}
          kustomize edit set image scoobyjava15/sophia-ai-personality:${{ env.SOPHIA_VERSION }}
          
          # Apply manifests
          kubectl apply -k .
          
          echo "✅ Kubernetes deployment initiated"
        env:
          LAMBDA_KUBECONFIG: ${{ secrets.LAMBDA_KUBECONFIG }}
          
      - name: ⏳ Wait for Deployment
        run: |
          echo "⏳ Waiting for deployment to stabilize..."
          
          # Wait for deployments to be ready
          kubectl rollout status deployment/sophia-ai-backend -n sophia-ai-prod --timeout=300s
          kubectl rollout status deployment/sophia-ai-frontend -n sophia-ai-prod --timeout=300s
          kubectl rollout status deployment/sophia-ai-personality -n sophia-ai-prod --timeout=300s
          
          echo "✅ All deployments are ready"
          
      - name: 🧪 Validate Deployment
        run: |
          echo "🧪 Running deployment validation..."
          
          # Install validation dependencies
          pip install aiohttp
          
          # Run validation script
          python scripts/validate_deployment.py --environment=production
          
          echo "✅ Deployment validation completed"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
          HUBSPOT_ACCESS_TOKEN: ${{ secrets.HUBSPOT_ACCESS_TOKEN }}
          GONG_ACCESS_KEY: ${{ secrets.GONG_ACCESS_KEY }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          ASANA_API_TOKEN: ${{ secrets.ASANA_API_TOKEN }}
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          
      - name: 📊 Generate Deployment Report
        run: |
          echo "📊 Generating deployment report..."
          
          # Create deployment report
          cat > deployment_report.md << EOF
          # 🚀 Sophia AI Production Deployment Report
          
          **Date**: $(date)
          **Version**: ${{ env.SOPHIA_VERSION }}
          **Environment**: ${{ env.ENVIRONMENT }}
          **Commit**: ${{ github.sha }}
          
          ## ✅ Deployment Summary
          - Infrastructure: Deployed via Pulumi ESC
          - Containers: Built and pushed to Docker Hub
          - Kubernetes: Deployed to Lambda Labs K3s
          - Validation: All health checks passed
          
          ## 🔧 Services Deployed
          - Backend API (port 8000)
          - Frontend UI (port 3000)
          - Personality Engine (port 8001)
          - Redis Cache (port 6379)
          - Qdrant Vector DB (port 6333)
          
          ## 🔌 Integrations Active
          - OpenAI API ✅
          - Anthropic API ✅
          - Qdrant Cloud ✅
          - HubSpot CRM ✅
          - Gong Intelligence ✅
          - Slack Communication ✅
          - Linear Projects ✅
          - Asana Tasks ✅
          - Notion Knowledge ✅
          
          ## 🎭 Personality Features
          - Persistence Layer ✅
          - Cultural Adaptation ✅
          - AI Generation ✅
          - Memory Integration ✅
          
          ## 🌐 Access URLs
          - Production: https://sophia-ai.lambda-labs.com
          - API Docs: https://sophia-ai.lambda-labs.com/docs
          - Health: https://sophia-ai.lambda-labs.com/health
          
          🎉 **Deployment completed successfully!**
          EOF
          
          cat deployment_report.md
          
      - name: 📢 Notify Deployment Success
        if: success()
        run: |
          echo "📢 Sending deployment success notification..."
          
          # Send Slack notification
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "🚀 Sophia AI Production Deployment Successful!",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Version", "value": "${{ env.SOPHIA_VERSION }}", "short": true},
                  {"title": "Environment", "value": "${{ env.ENVIRONMENT }}", "short": true},
                  {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                  {"title": "URL", "value": "https://sophia-ai.lambda-labs.com", "short": true}
                ]
              }]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: 🆘 Notify Deployment Failure
        if: failure()
        run: |
          echo "🆘 Sending deployment failure notification..."
          
          # Send Slack notification
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "❌ Sophia AI Production Deployment Failed!",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {"title": "Version", "value": "${{ env.SOPHIA_VERSION }}", "short": true},
                  {"title": "Environment", "value": "${{ env.ENVIRONMENT }}", "short": true},
                  {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                  {"title": "Run", "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}", "short": true}
                ]
              }]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
          
          echo "📱 Deployment failure notification sent to Slack" 