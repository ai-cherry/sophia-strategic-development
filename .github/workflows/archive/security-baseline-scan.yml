name: Security Baseline Scan

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      notify:
        description: "Send notifications for new vulnerabilities"
        required: false
        default: "true"

env:
  ENVIRONMENT: prod
  PULUMI_ORG: scoobyjava-org

jobs:
  baseline-scan:
    name: Nightly Security Baseline Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-security-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-security-
            ${{ runner.os }}-uv-

      - name: Install all dependency groups
        run: |
          uv sync --all-groups

      - name: Create security reports directory
        run: mkdir -p security/reports security/baselines

      - name: Download previous baseline
        uses: actions/download-artifact@v4
        with:
          name: security-baseline
          path: security/baselines/
        continue-on-error: true

      - name: Run comprehensive pip-audit scan
        id: pip_audit
        run: |
          # Run pip-audit on all dependency groups
          echo "Running comprehensive pip-audit scan..."

          # Main dependencies
          uv run pip-audit --format=json --output=security/reports/main-vulnerabilities.json

          # Dev dependencies
          uv run pip-audit --format=json --output=security/reports/dev-vulnerabilities.json --extra-index-url https://pypi.org/simple

          # Create script to combine reports
          cat > combine_reports.py << 'EOF'
          import json
          import glob

          all_vulns = {'vulnerabilities': []}
          for report_file in glob.glob('security/reports/*-vulnerabilities.json'):
              with open(report_file) as f:
                  data = json.load(f)
                  all_vulns['vulnerabilities'].extend(data.get('vulnerabilities', []))

          # Remove duplicates
          seen = set()
          unique_vulns = []
          for vuln in all_vulns['vulnerabilities']:
              key = (vuln.get('name'), vuln.get('version'), vuln.get('id'))
              if key not in seen:
                  seen.add(key)
                  unique_vulns.append(vuln)

          all_vulns['vulnerabilities'] = unique_vulns
          all_vulns['vulnerability_count'] = len(unique_vulns)

          with open('security/reports/all-vulnerabilities.json', 'w') as f:
              json.dump(all_vulns, f, indent=2)
          EOF

          python combine_reports.py

      - name: Run comprehensive safety check
        id: safety_check
        run: |
          # Run safety check with full database
          uv run safety check --json --output=security/reports/safety-full-report.json --full-report

          # Generate license report
          uv run safety license --json --output=security/reports/license-report.json || true

      - name: Compare with baseline
        id: compare_baseline
        run: |
          python scripts/security/compare_baseline.py \
            --current security/reports/all-vulnerabilities.json \
            --baseline security/baselines/baseline-vulnerabilities.json \
            --output security/reports/baseline-comparison.json

          # Check if new vulnerabilities were found
          NEW_VULNS=$(python -c "import json; data = json.load(open('security/reports/baseline-comparison.json')); print(len(data.get('new_vulnerabilities', [])))")
          echo "new_vulnerabilities=$NEW_VULNS" >> $GITHUB_OUTPUT

      - name: Update baseline
        run: |
          cp security/reports/all-vulnerabilities.json security/baselines/baseline-vulnerabilities.json

      - name: Upload new baseline
        uses: actions/upload-artifact@v4
        with:
          name: security-baseline
          path: security/baselines/baseline-vulnerabilities.json
          retention-days: 90

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: nightly-security-reports-${{ github.run_id }}
          path: security/reports/
          retention-days: 30

      - name: Create issue for new vulnerabilities
        if: steps.compare_baseline.outputs.new_vulnerabilities != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comparison = JSON.parse(fs.readFileSync('security/reports/baseline-comparison.json', 'utf8'));

            let issueBody = '## ðŸš¨ New Security Vulnerabilities Detected\n\n';
            issueBody += `Found **${comparison.new_vulnerabilities.length}** new vulnerabilities in the nightly scan.\n\n`;

            // Group by severity
            const bySeverity = {};
            comparison.new_vulnerabilities.forEach(vuln => {
              const severity = vuln.severity || 'Unknown';
              if (!bySeverity[severity]) bySeverity[severity] = [];
              bySeverity[severity].push(vuln);
            });

            // List vulnerabilities by severity
            ['Critical', 'High', 'Medium', 'Low', 'Unknown'].forEach(severity => {
              if (bySeverity[severity] && bySeverity[severity].length > 0) {
                issueBody += `### ${severity} Severity (${bySeverity[severity].length})\n\n`;
                bySeverity[severity].forEach(vuln => {
                  issueBody += `- **${vuln.name} ${vuln.version}**: ${vuln.description || vuln.id}\n`;
                  if (vuln.fix_versions) {
                    issueBody += `  - Fix available: ${vuln.fix_versions.join(', ')}\n`;
                  }
                });
                issueBody += '\n';
              }
            });

            issueBody += '\n[View full report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})';

            // Create or update issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,automated',
              state: 'open'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title === 'ðŸš¨ Security Vulnerabilities - Nightly Scan'
            );

            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: issueBody
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸš¨ Security Vulnerabilities - Nightly Scan',
                body: issueBody,
                labels: ['security', 'automated', 'high-priority']
              });
            }

      - name: Send Slack notification
        if: steps.compare_baseline.outputs.new_vulnerabilities != '0' && (github.event_name == 'schedule' || github.event.inputs.notify == 'true')
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
        run: |
          NEW_VULNS=${{ steps.compare_baseline.outputs.new_vulnerabilities }}

          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "ðŸš¨ Security Alert: '"$NEW_VULNS"' new vulnerabilities detected",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "ðŸš¨ Security Vulnerability Alert"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*'"$NEW_VULNS"' new vulnerabilities* were detected in the nightly security scan.\n\n<'"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"'|View Full Report>"
                  }
                }
              ]
            }' || true
