name: MCP Integration Testing

on
  push
    branches: [ main, develop ]
    paths
      - 'mcp-servers/**'
      - 'external/**'
      - 'mcp-integrations/**'
      - 'backend/**'
      - 'pyproject.toml'
      - 'uv.lock'
  pull_request
    branches: [ main ]
    paths
      - 'mcp-servers/**'
      - 'external/**'
      - 'mcp-integrations/**'
      - 'backend/**'
      - 'pyproject.toml'
      - 'uv.lock'
  workflow_dispatch
env
  PULUMI_ORG: scoobyjava-org
  PULUMI_STACK: sophia-prod-on-lambda

jobs
  mcp-server-validation
    runs-on: ubuntu-latest
    strategy
      matrix
        python-version: [3.11, 3.12]
        server: [ai_memory, notion, slack, modern_stack, codacy, asana, linear]

    steps
    - name: Checkout repository
      uses: actions/checkout@v4
      with
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with
        python-version: ${{ matrix.python-version }}

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: Install dependencies
      run: |
        uv sync --frozen
    - name: Validate MCP server configuration
      run: |
        uv run python scripts/validate_mcp_server.py --server ${{ matrix.server }}
    - name: Test MCP server startup
      run: |
        uv run python scripts/test_mcp_server_startup.py --server ${{ matrix.server }}
      timeout-minutes: 5

    - name: Run MCP protocol compliance tests
      run: |
        uv run python scripts/test_mcp_protocol_compliance.py --server ${{ matrix.server }}
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with
        name: mcp-test-results-${{ matrix.server }}-py${{ matrix.python-version }}
        path: |
          test-results/
          logs/

  mcp-inspector-validation
    runs-on: ubuntu-latest
    needs: mcp-server-validation

    steps
    - name: Checkout repository
      uses: actions/checkout@v4
      with
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with
        python-version: 3.12

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: external/anthropic-mcp-inspector/package-lock.json

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: Install Python dependencies
      run: |
        uv sync --frozen
    - name: Install MCP Inspector
      run: |
        cd external/anthropic-mcp-inspector
        npm install
    - name: Run MCP Inspector tests
      run: |
        uv run python scripts/run_mcp_inspector_tests.py
      timeout-minutes: 10

    - name: Upload inspector results
      uses: actions/upload-artifact@v3
      if: always()
      with
        name: mcp-inspector-results
        path: |
          inspector-results/
          logs/

  integration-test
    runs-on: ubuntu-latest
    needs: [mcp-server-validation, mcp-inspector-validation]

    steps
    - name: Checkout repository
      uses: actions/checkout@v4
      with
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with
        python-version: 3.12

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: Install dependencies
      run: |
        uv sync --frozen
    - name: Configure Pulumi ESC for testing
      env
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      run: |
        # Install Pulumi CLI
        curl -fsSL https://get.pulumi.com | sh
        echo "$HOME/.pulumi/bin" >> $GITHUB_PATH
        # Configure Pulumi ESC for test environment
        pulumi config set --path test-env
    - name: Run integration tests
      env
        # Test environment secrets from Pulumi ESC
        NOTION_API_KEY: ${{ secrets.NOTION_API_KEY_TEST }}
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN_TEST }}
        modern_stack_ACCOUNT: ${{ secrets.modern_stack_ACCOUNT_TEST }}
        modern_stack_USER: ${{ secrets.modern_stack_USER_TEST }}
        modern_stack_PASSWORD: ${{ secrets.modern_stack_PASSWORD_TEST }}
      run: |
        uv run python scripts/run_integration_tests.py
      timeout-minutes: 15

    - name: Generate test report
      if: always()
      run: |
        uv run python scripts/generate_test_report.py
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with
        name: integration-test-results
        path: |
          test-results/
          reports/
          logs/

  security-scan
    runs-on: ubuntu-latest

    steps
    - name: Checkout repository
      uses: actions/checkout@v4
      with
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with
        python-version: 3.12

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: Install dependencies
      run: |
        uv sync --frozen
    - name: Run security scan
      run: |
        # Install security scanning tools
        uv add --dev bandit safety
        # Run Bandit security scan
        uv run bandit -r mcp-servers/ backend/ -f json -o security-scan-results.json
        # Run Safety dependency scan
        uv run safety check --json --output safety-results.json
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with
        name: security-scan-results
        path: |
          security-scan-results.json
          safety-results.json

  notify-results
    runs-on: ubuntu-latest
    needs: [mcp-server-validation, mcp-inspector-validation, integration-test, security-scan]
    if: always()

    steps
    - name: Notify test results
      env
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        # Send notification to Slack about test results
        if [ "${{ needs.integration-test.result }}" == "success" ]; then
          STATUS="✅ SUCCESS"
          COLOR="good"
        else
          STATUS="❌ FAILED"
          COLOR="danger"
        fi
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"MCP Integration Tests: $STATUS\", \"color\":\"$COLOR\"}" \
          $SLACK_WEBHOOK_URL
