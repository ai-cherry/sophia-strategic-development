name: Dashboard Deployment Automation

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'ui-ux-agent/**'
  workflow_dispatch:
    inputs:
      force_deployment:
        description: 'Force deployment even if no changes detected'
        required: false
        default: 'false'
        type: boolean
      enhancement_mode:
        description: 'Enhancement mode for dashboard components'
        required: false
        default: 'standard'
        type: choice
        options:
          - standard
          - aggressive
          - accessibility_focused
          - performance_focused

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  validate-uiux-agent:
    runs-on: ubuntu-latest
    outputs:
      agent-status: ${{ steps.validate.outputs.status }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install UI/UX Agent dependencies
      run: |
        cd ui-ux-agent
        pip install -r requirements.txt
        
    - name: Start UI/UX Agent System
      run: |
        cd ui-ux-agent
        python start_ui_ux_agent_system.py &
        sleep 30
        
    - name: Validate Agent System
      id: validate
      run: |
        # Check if agents are running
        if curl -f http://localhost:9002/health && curl -f http://localhost:9001/health; then
          echo "status=healthy" >> $GITHUB_OUTPUT
        else
          echo "status=unhealthy" >> $GITHUB_OUTPUT
        fi

  generate-enhanced-components:
    needs: validate-uiux-agent
    runs-on: ubuntu-latest
    if: needs.validate-uiux-agent.outputs.agent-status == 'healthy'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd ui-ux-agent
        pip install -r requirements.txt
        cd ../frontend
        npm ci
        
    - name: Configure Pulumi ESC credentials
      env:
        FIGMA_PERSONAL_ACCESS_TOKEN: ${{ secrets.FIGMA_PERSONAL_ACCESS_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        # Export credentials for UI/UX Agent System
        export FIGMA_PAT=$FIGMA_PERSONAL_ACCESS_TOKEN
        echo "Credentials configured for UI/UX Agent System"
        
    - name: Start UI/UX Agent System
      env:
        FIGMA_PERSONAL_ACCESS_TOKEN: ${{ secrets.FIGMA_PERSONAL_ACCESS_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        cd ui-ux-agent
        python start_ui_ux_agent_system.py &
        sleep 45
        
    - name: Execute Dashboard Deployment Automation
      env:
        FIGMA_PERSONAL_ACCESS_TOKEN: ${{ secrets.FIGMA_PERSONAL_ACCESS_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        ENHANCEMENT_MODE: ${{ github.event.inputs.enhancement_mode || 'standard' }}
      run: |
        cd ui-ux-agent
        python dashboard_deployment_automation.py
        
    - name: Upload enhanced components
      uses: actions/upload-artifact@v4
      with:
        name: enhanced-dashboard-components
        path: |
          frontend/src/components/enhanced/
          frontend/src/App.jsx
        retention-days: 30

  quality-assurance:
    needs: generate-enhanced-components
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download enhanced components
      uses: actions/download-artifact@v4
      with:
        name: enhanced-dashboard-components
        path: ./
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run build check
      run: |
        cd frontend
        npm run build
        
    - name: Run lint check
      run: |
        cd frontend
        npm run lint || echo "Lint warnings detected but not blocking"
        
    - name: Run accessibility audit
      run: |
        # Install accessibility testing tools
        npm install -g @axe-core/cli
        
        # Start preview server
        cd frontend
        npm run preview &
        sleep 10
        
        # Run accessibility audit
        axe http://localhost:4173 --exit || echo "Accessibility issues detected"
        
    - name: Performance audit
      run: |
        # Install Lighthouse
        npm install -g lighthouse
        
        # Run Lighthouse audit
        lighthouse http://localhost:4173 --output=json --output-path=./lighthouse-report.json || echo "Performance audit completed"
        
    - name: Upload QA reports
      uses: actions/upload-artifact@v4
      with:
        name: qa-reports
        path: |
          lighthouse-report.json
        retention-days: 30

  deploy-to-vercel:
    needs: [generate-enhanced-components, quality-assurance]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download enhanced components
      uses: actions/download-artifact@v4
      with:
        name: enhanced-dashboard-components
        path: ./
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build application
      run: |
        cd frontend
        npm run build
        
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        vercel-args: '--prod'
        
    - name: Validate deployment
      run: |
        # Wait for deployment to propagate
        sleep 60
        
        # Check production URL
        curl -f https://app.sophia-intel.ai || exit 1
        
        # Check enhanced dashboard route
        curl -f https://app.sophia-intel.ai/dashboard/ceo-enhanced || exit 1
        
        echo "✅ Deployment validation successful"

  notify-completion:
    needs: [deploy-to-vercel]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-to-vercel.result }}" == "success" ]; then
          echo "🎉 Dashboard deployment automation completed successfully!"
          echo "✅ Enhanced dashboard available at: https://app.sophia-intel.ai/dashboard/ceo-enhanced"
        else
          echo "❌ Dashboard deployment automation failed"
          echo "Check the workflow logs for details"
        fi
        
    - name: Create deployment summary
      env:
        ENH_MODE: ${{ github.event.inputs.enhancement_mode || 'standard' }}
      run: |
        echo "## 🚀 Dashboard Deployment Automation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Status:** ${{ needs.deploy-to-vercel.result }}" >> $GITHUB_STEP_SUMMARY
        echo "**Enhancement Mode:** $ENH_MODE" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy-to-vercel.result }}" == "success" ]; then
          echo "### ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Production URL:** https://app.sophia-intel.ai" >> $GITHUB_STEP_SUMMARY
          echo "- **Enhanced Dashboard:** https://app.sophia-intel.ai/dashboard/ceo-enhanced" >> $GITHUB_STEP_SUMMARY
          echo "- **UI/UX Agent System:** Operational" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs for detailed error information." >> $GITHUB_STEP_SUMMARY
        fi

