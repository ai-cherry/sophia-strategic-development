name: Lambda Labs Monitoring

on:
  schedule:
    - cron: '0 * * * *'  # Every hour
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of check to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - budget
          - performance
          - optimization

env:
  LAMBDA_SERVERLESS_API_KEY: ${{ secrets.LAMBDA_SERVERLESS_API_KEY }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
  SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
  SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}

jobs:
  budget-check:
    name: Budget Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'budget'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Check budget status
        id: budget
        run: |
          python -c "
          import asyncio
          import json
          from infrastructure.monitoring.lambda_labs_cost_monitor import LambdaLabsCostMonitor

          async def check():
              monitor = LambdaLabsCostMonitor()
              status = await monitor.check_and_alert()
              print(json.dumps(status, indent=2))

              # Set outputs
              with open('$GITHUB_OUTPUT', 'a') as f:
                  f.write(f'daily_percentage={status[\"daily_percentage\"]:.1f}\\n')
                  f.write(f'monthly_percentage={status[\"monthly_percentage\"]:.1f}\\n')
                  f.write(f'alerts={len(status.get(\"alerts\", []))}\\n')

          asyncio.run(check())
          "

      - name: Create issue if budget exceeded
        if: steps.budget.outputs.daily_percentage > 80 || steps.budget.outputs.monthly_percentage > 80
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '⚠️ Lambda Labs Budget Alert',
              body: `## Budget Status

              - **Daily Usage**: ${{ steps.budget.outputs.daily_percentage }}%
              - **Monthly Usage**: ${{ steps.budget.outputs.monthly_percentage }}%

              Please review Lambda Labs usage and consider optimization strategies.`,
              labels: ['budget', 'lambda-labs', 'alert']
            });

  performance-check:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'performance'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Analyze performance
        run: |
          python scripts/analyze_lambda_performance.py

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: lambda-performance-report
          path: reports/lambda_performance_*.json

  optimization-check:
    name: Cost Optimization
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'optimization'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install snowflake-connector-python

      - name: Find optimization opportunities
        run: |
          python -c "
          import asyncio
          import json
          from infrastructure.adapters.snowflake_adapter import SnowflakeConfigManager

          async def find_optimizations():
              async with SnowflakeConfigManager() as snowflake:
                  results = await snowflake.execute_query(
                      'SELECT * FROM TABLE(IDENTIFY_COST_OPTIMIZATIONS())'
                  )

                  if results:
                      print('## Cost Optimization Opportunities\\n')
                      total_savings = 0

                      for opt in results:
                          print(f'### {opt[\"optimization_type\"]}')
                          print(f'- Current Model: {opt[\"current_model\"]}')
                          print(f'- Recommended Model: {opt[\"recommended_model\"]}')
                          print(f'- Monthly Savings: ${opt[\"estimated_monthly_savings\"]:.2f}')
                          print(f'- Affected Requests: {opt[\"affected_requests\"]}')
                          print(f'- Recommendation: {opt[\"recommendation\"]}\\n')

                          total_savings += opt['estimated_monthly_savings']

                      print(f'**Total Potential Monthly Savings: ${total_savings:.2f}**')
                  else:
                      print('No optimization opportunities found.')

          asyncio.run(find_optimizations())
          " > optimization_report.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('optimization_report.md', 'utf8');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });

  notify:
    name: Send Notifications
    needs: [budget-check, performance-check, optimization-check]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send Slack summary
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Lambda Labs Monitoring Complete
            Budget Check: ${{ needs.budget-check.result }}
            Performance Check: ${{ needs.performance-check.result }}
            Optimization Check: ${{ needs.optimization-check.result }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
