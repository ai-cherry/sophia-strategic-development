name: ðŸš€ Sophia AI Production Deployment
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip quality gate tests'
        required: false
        type: boolean
        default: false

concurrency:
  group: production-deployment
  cancel-in-progress: false

jobs:
  preflight:
    name: Pre-flight Checks
    if: ${{ !inputs.skip_tests }}
    uses: ./.github/workflows/_template.yml
    secrets: inherit

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: [preflight]
    if: always() && (needs.preflight.result == 'success' || inputs.skip_tests)
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 30

    permissions:
      id-token: write
      contents: read

    outputs:
      backend_url: ${{ steps.outputs.outputs.backend_url }}
      mcp_gateway_url: ${{ steps.outputs.outputs.mcp_gateway_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: us-east-1

      - name: Login to Pulumi
        uses: ./.github/actions/pulumi-login
        with:
          stack: scoobyjava-org/sophia-prod-on-lambda
          access-token: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Deploy with Pulumi
        run: |
          cd infrastructure/pulumi
          npm install
          pulumi up --yes --suppress-outputs

      - name: Export stack outputs
        id: outputs
        run: |
          cd infrastructure/pulumi
          echo "backend_url=$(pulumi stack output backendUrl)" >> $GITHUB_OUTPUT
          echo "mcp_gateway_url=$(pulumi stack output mcpGatewayUrl)" >> $GITHUB_OUTPUT

      - name: Smoke test infrastructure
        run: |
          # Test backend health
          curl -sf "${{ steps.outputs.outputs.backend_url }}/health" | grep '"status":"healthy"'

          # Test MCP gateway
          curl -sf "${{ steps.outputs.outputs.mcp_gateway_url }}/mcp/tools" | grep '\['

  deploy-application:
    name: Deploy Application
    needs: [deploy-infrastructure]
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 20

    strategy:
      matrix:
        host: ["192.222.58.232", "104.171.202.117", "192.222.58.232", "192.222.58.67"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LAMBDA_SSH_PRIVATE_KEY }}" > ~/.ssh/sophia2025
          chmod 600 ~/.ssh/sophia2025
          ssh-keyscan -H ${{ matrix.host }} >> ~/.ssh/known_hosts

      - name: Deploy to Lambda Labs instance
        run: |
          ssh -i ~/.ssh/sophia2025 -o StrictHostKeyChecking=no ubuntu@${{ matrix.host }} << 'ENDSSH'
            set -euo pipefail

            # Update code
            cd /home/ubuntu/sophia-ai
            git fetch origin
            git reset --hard origin/main

            # Update dependencies
            source venv/bin/activate
            pip install --no-cache-dir -r requirements.txt

            # Run migrations if needed
            if [ -d "migrations" ]; then
              alembic upgrade head || true
            fi

            # Restart services
            sudo systemctl restart sophia-ai-backend
            sudo systemctl restart sophia-ai-mcp-gateway

            # Health check
            sleep 5
            curl -sf http://localhost:8000/health || exit 1
          ENDSSH

      - name: Verify deployment
        run: |
          # Wait for service to stabilize
          sleep 10

          # Test from external
          response=$(curl -s http://${{ matrix.host }}:8000/health)
          echo "Health check response: $response"
          echo "$response" | grep '"status":"healthy"'

  deploy-frontend:
    name: Deploy Frontend
    needs: [deploy-infrastructure]
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        env:
          VITE_API_URL: ${{ needs.deploy-infrastructure.outputs.backend_url }}
          VITE_MCP_GATEWAY_URL: ${{ needs.deploy-infrastructure.outputs.mcp_gateway_url }}
          VITE_ENVIRONMENT: production
        run: npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: frontend
          production: true

  post-deployment:
    name: Post-Deployment Tasks
    needs: [deploy-application, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Sophia AI Production Deployment ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: '${{ job.status }}',
              environment_url: 'https://app.sophia-intel.ai'
            });

      - name: Update Grafana annotations
        if: success()
        run: |
          curl -X POST "${{ secrets.GRAFANA_URL }}/api/annotations" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "dashboardUID": "sophia-prod",
              "tags": ["deployment", "production"],
              "text": "Production deployment completed",
              "time": '$(date +%s000)'
            }'
