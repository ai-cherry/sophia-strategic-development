name: üöÄ Unified Sophia AI Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      deploy_mcp_servers:
        description: 'Deploy all MCP servers'
        required: true
        default: true
        type: boolean

env:
  DOCKER_REGISTRY: scoobyjava15
  LAMBDA_LABS_HOST: 192.222.51.151
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: üèóÔ∏è Build & Deploy Complete Platform

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: üì¶ Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: üîß Install Dependencies
        run: |
          uv sync
          uv pip install pulumi pulumi-docker

      - name: üîê Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîë Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: scoobyjava15
          password: ${{ secrets.DOCKER_PERSONAL_ACCESS_TOKEN }}

      - name: üèóÔ∏è Build Core Backend Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/sophia-ai:latest
            ${{ env.DOCKER_REGISTRY }}/sophia-ai:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ü§ñ Build All MCP Server Images
        run: |
          # Build all 29 MCP servers
          python scripts/build_all_mcp_images.py --registry ${{ env.DOCKER_REGISTRY }} --push

      - name: üîê Setup Pulumi ESC
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          pulumi login
          pulumi org set-default scoobyjava-org

      - name: üîë Create Docker Swarm Secrets
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          LAMBDA_LABS_SSH_KEY: ${{ secrets.LAMBDA_LABS_SSH_KEY }}
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "$LAMBDA_LABS_SSH_KEY" > ~/.ssh/lambda_labs_key
          chmod 600 ~/.ssh/lambda_labs_key

          # Create all Docker secrets from Pulumi ESC
          python scripts/create_docker_swarm_secrets.py \
            --host ${{ env.LAMBDA_LABS_HOST }} \
            --ssh-key ~/.ssh/lambda_labs_key \
            --environment ${{ env.ENVIRONMENT }}

      - name: üöÄ Deploy to Lambda Labs
        env:
          LAMBDA_LABS_SSH_KEY: ${{ secrets.LAMBDA_LABS_SSH_KEY }}
        run: |
          # Deploy complete stack
          python scripts/unified_lambda_labs_deployment.py \
            --host ${{ env.LAMBDA_LABS_HOST }} \
            --ssh-key ~/.ssh/lambda_labs_key \
            --registry ${{ env.DOCKER_REGISTRY }} \
            --environment ${{ env.ENVIRONMENT }} \
            --deploy-mcp-servers ${{ github.event.inputs.deploy_mcp_servers || 'true' }}

      - name: üîç Validate Deployment
        run: |
          # Comprehensive deployment validation
          python scripts/validate_complete_deployment.py \
            --host ${{ env.LAMBDA_LABS_HOST }} \
            --environment ${{ env.ENVIRONMENT }}

      - name: üìä Generate Deployment Report
        if: always()
        run: |
          python scripts/generate_deployment_report.py \
            --host ${{ env.LAMBDA_LABS_HOST }} \
            --environment ${{ env.ENVIRONMENT }} \
            --output deployment-report.json

      - name: üì§ Upload Deployment Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ github.sha }}
          path: deployment-report.json

      - name: üí¨ Notify Deployment Status
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          python scripts/notify_deployment_status.py \
            --status ${{ job.status }} \
            --environment ${{ env.ENVIRONMENT }} \
            --commit ${{ github.sha }} \
            --host ${{ env.LAMBDA_LABS_HOST }}
