name: 🚀 Sophia Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy backend services'
        type: boolean
        default: true
      deploy_mcp:
        description: 'Deploy MCP servers'
        type: boolean
        default: true
      deploy_frontend:
        description: 'Deploy frontend'
        type: boolean
        default: true
      deploy_monitoring:
        description: 'Deploy monitoring stack'
        type: boolean
        default: false

env:
  DOCKER_REGISTRY: scoobyjava15
  LAMBDA_LABS_HOST: 192.222.51.122
  ENVIRONMENT: production

jobs:
  # Stage 1: Quality Gate
  quality-gate:
    name: 🔍 Quality Gate
    runs-on: ubuntu-latest
    outputs:
      passed: ${{ steps.gate.outputs.passed }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Run Placeholder Check
        id: placeholders
        run: |
          python scripts/security/purge_placeholders.py --ci --json placeholder_report.json || true

      - name: Run Security Scan
        run: |
          pip install bandit safety
          bandit -r backend/ -f json -o bandit_report.json || true
          safety check --json > safety_report.json || true

      - name: Quality Gate Decision
        id: gate
        run: |
          # Simple gate - just check for placeholders
          if [ -f placeholder_report.json ]; then
            placeholders=$(jq -r '.total_violations' placeholder_report.json)
            if [ "$placeholders" -gt 0 ]; then
              echo "❌ Quality gate failed: $placeholders placeholder secrets found"
              echo "passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          echo "✅ Quality gate passed"
          echo "passed=true" >> $GITHUB_OUTPUT

      - name: Upload Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: |
            *_report.json

  # Stage 2: Build Images
  build-images:
    name: 🏗️ Build Images
    needs: quality-gate
    if: needs.quality-gate.outputs.passed == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - name: backend
            context: backend
            dockerfile: backend/Dockerfile
          - name: frontend
            context: frontend
            dockerfile: frontend/Dockerfile
          - name: mcp-gateway
            context: infrastructure/mcp-gateway
            dockerfile: infrastructure/mcp-gateway/Dockerfile

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push ${{ matrix.service.name }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/sophia-${{ matrix.service.name }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/sophia-${{ matrix.service.name }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/sophia-${{ matrix.service.name }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/sophia-${{ matrix.service.name }}:buildcache,mode=max

  # Stage 3: Deploy Infrastructure
  deploy-infrastructure:
    name: 🏗️ Deploy Infrastructure
    needs: build-images
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.pulumi.outputs.instance_ip }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Pulumi
        uses: pulumi/actions@v5
        with:
          pulumi-version: 'latest'

      - name: Deploy with Pulumi
        id: pulumi
        run: |
          cd infrastructure
          pulumi stack select scoobyjava-org/sophia-ai-production --non-interactive
          pulumi up --yes --non-interactive

          # Get outputs
          INSTANCE_IP=$(pulumi stack output lambdaLabsInstanceIp -j | jq -r '.')
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  # Stage 4: Deploy to Swarm
  deploy-swarm:
    name: 🐳 Deploy to Swarm
    needs: [build-images, deploy-infrastructure]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LAMBDA_PRIVATE_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ needs.deploy-infrastructure.outputs.instance_ip || env.LAMBDA_LABS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Stack
        run: |
          # Generate compose file with current image tags
          export IMAGE_TAG=${{ github.sha }}
          export DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}

          # Deploy via SSH
          scp docker-compose.cloud.yml ubuntu@${{ needs.deploy-infrastructure.outputs.instance_ip || env.LAMBDA_LABS_HOST }}:/tmp/

          ssh ubuntu@${{ needs.deploy-infrastructure.outputs.instance_ip || env.LAMBDA_LABS_HOST }} << 'EOF'
            cd /tmp
            docker stack deploy -c docker-compose.cloud.yml sophia-ai --with-registry-auth
          EOF

  # Stage 5: Deploy Frontend
  deploy-frontend:
    name: 🌐 Deploy Frontend
    needs: build-images
    if: github.event.inputs.deploy_frontend != 'false'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Vercel
        run: |
          npx vercel deploy --prod --token ${{ secrets.VERCEL_ACCESS_TOKEN }}
        working-directory: frontend

  # Stage 6: Validate Deployment
  validate:
    name: ✅ Validate Deployment
    needs: [deploy-swarm, deploy-frontend]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Validation
        run: |
          python scripts/validate_deployment.py \
            --host ${{ needs.deploy-infrastructure.outputs.instance_ip || env.LAMBDA_LABS_HOST }} \
            --services backend,mcp-gateway \
            --health-endpoints /health,/api/health \
            --timeout 300

      - name: Smoke Tests
        run: |
          # Test backend
          curl -f http://${{ needs.deploy-infrastructure.outputs.instance_ip || env.LAMBDA_LABS_HOST }}:8000/health

          # Test API docs
          curl -f http://${{ needs.deploy-infrastructure.outputs.instance_ip || env.LAMBDA_LABS_HOST }}:8000/docs

          # Test MCP gateway
          curl -f http://${{ needs.deploy-infrastructure.outputs.instance_ip || env.LAMBDA_LABS_HOST }}:8080/mcp/list

  # Stage 7: Notify
  notify:
    name: 📢 Notify
    needs: [quality-gate, build-images, deploy-swarm, validate]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.validate.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "🌐 Backend: http://${{ env.LAMBDA_LABS_HOST }}:8000"
            echo "📚 API Docs: http://${{ env.LAMBDA_LABS_HOST }}:8000/docs"
            echo "🔌 MCP Gateway: http://${{ env.LAMBDA_LABS_HOST }}:8080"
          else
            echo "❌ Deployment failed!"
            echo "Check the workflow logs for details"
          fi

      - name: Create Deployment Record
        if: needs.validate.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Automated production deployment',
              auto_merge: false,
              required_contexts: []
            });
