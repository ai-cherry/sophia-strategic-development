name: MCP Version Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'config/mcp_version_management.yaml'
      - 'config/consolidated_mcp_ports.json'
      - 'mcp-servers/**'
      - 'backend/mcp_servers/**'
      - '.github/workflows/mcp-version-validation.yml'

  pull_request:
    branches: [ main, develop ]
    paths:
      - 'config/mcp_version_management.yaml'
      - 'config/consolidated_mcp_ports.json'
      - 'mcp-servers/**'
      - 'backend/mcp_servers/**'
      - '.github/workflows/mcp-version-validation.yml'

  # Allow manual triggering
  workflow_dispatch:

env:
  ENVIRONMENT: prod
  PULUMI_ORG: scoobyjava-org

jobs:
  validate-mcp-versions:
    name: Validate MCP Server Versions
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version comparison

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Validate MCP version configuration
      run: |
        echo "üîç Validating MCP server versions..."
        python scripts/mcp_version_validator.py \
          --config config/mcp_version_management.yaml \
          --output validation_report.json

    - name: Check for breaking changes
      if: github.event_name == 'pull_request'
      run: |
        echo "üîç Checking for breaking changes in PR..."

        # Get changed files
        git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changed_files.txt

        # Check if version management config changed
        if grep -q "config/mcp_version_management.yaml" changed_files.txt; then
          echo "üìã Version management config changed - validating compatibility"

          # Validate that major version changes have migration guides
          python -c "
        import yaml
        import sys

        # Load current config
        with open('config/mcp_version_management.yaml', 'r') as f:
            config = yaml.safe_load(f)

        migration_paths = config.get('migration_paths', {})
        server_versions = config.get('server_versions', {})

        # Check for major version changes without migration paths
        missing_migrations = []
        for server_name, server_config in server_versions.items():
            current_version = server_config.get('current', '')
            if current_version.startswith('2.') or current_version.startswith('3.'):
                # Major version, should have migration path
                if server_name not in migration_paths:
                    missing_migrations.append(server_name)

        if missing_migrations:
            print(f'‚ùå Missing migration paths for major versions: {missing_migrations}')
            sys.exit(1)
        else:
            print('‚úÖ All major versions have migration paths')
          "
        fi

    - name: Run MCP integration tests
      run: |
        echo "üß™ Running MCP integration tests..."
        python -m pytest tests/integration/mcp_orchestration_test_suite.py::test_mcp_orchestration_suite -v --tb=short
      continue-on-error: true  # Don't fail CI for integration test issues

    - name: Generate version compatibility report
      run: |
        echo "üìä Generating version compatibility report..."
        python -c "
        import yaml
        import json
        from datetime import datetime

        # Load version config
        with open('config/mcp_version_management.yaml', 'r') as f:
            config = yaml.safe_load(f)

        server_versions = config.get('server_versions', {})
        compatibility_matrix = config.get('compatibility_matrix', {})

        # Generate compatibility report
        report = {
            'timestamp': datetime.now().isoformat(),
            'total_servers': len(server_versions),
            'api_versions': {},
            'compatibility_summary': {},
            'deprecation_warnings': []
        }

        # Count servers by API version
        for server_name, server_config in server_versions.items():
            api_version = server_config.get('api_version', 'unknown')
            if api_version not in report['api_versions']:
                report['api_versions'][api_version] = []
            report['api_versions'][api_version].append(server_name)

        # Check for deprecated versions
        for server_name, server_config in server_versions.items():
            deprecated = server_config.get('deprecated', [])
            if deprecated:
                report['deprecation_warnings'].append({
                    'server': server_name,
                    'deprecated_versions': deprecated
                })

        # Save report
        with open('compatibility_report.json', 'w') as f:
            json.dump(report, f, indent=2)

        print(f'üìä Compatibility report: {len(server_versions)} servers, {len(report[\"api_versions\"])} API versions')
        for api_version, servers in report['api_versions'].items():
            print(f'  {api_version}: {len(servers)} servers')
        "

    - name: Check deprecation timeline
      run: |
        echo "‚è∞ Checking deprecation timeline compliance..."
        python -c "
        import yaml
        from datetime import datetime, timedelta
        import sys

        with open('config/mcp_version_management.yaml', 'r') as f:
            config = yaml.safe_load(f)

        deprecation_schedule = config.get('deprecation_schedule', {})
        current_date = datetime.now()

        warnings = []
        errors = []

        for period, deprecations in deprecation_schedule.items():
            # Parse period (YYYY-QN format)
            try:
                year, quarter = period.split('-Q')
                quarter_start_month = (int(quarter) - 1) * 3 + 1
                period_date = datetime(int(year), quarter_start_month, 1)

                # Check if deprecation is within warning period (90 days)
                time_diff = period_date - current_date

                if 0 <= time_diff.days <= 90:
                    warnings.append(f'Deprecation in {period} is within 90 days ({time_diff.days} days)')
                elif time_diff.days < 0:
                    errors.append(f'Deprecation in {period} is overdue ({abs(time_diff.days)} days)')

            except ValueError:
                warnings.append(f'Invalid period format: {period}')

        if warnings:
            print('‚ö†Ô∏è  Deprecation warnings:')
            for warning in warnings:
                print(f'  {warning}')

        if errors:
            print('‚ùå Deprecation errors:')
            for error in errors:
                print(f'  {error}')
            sys.exit(1)

        if not warnings and not errors:
            print('‚úÖ All deprecations are properly scheduled')
        "

    - name: Upload validation artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: mcp-validation-reports
        path: |
          validation_report.json
          compatibility_report.json
        retention-days: 30

    - name: Comment PR with validation results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');

          // Read validation report
          let validationReport = '';
          try {
            const report = JSON.parse(fs.readFileSync('validation_report.json', 'utf8'));

            validationReport = `## üîç MCP Version Validation Results

          **Summary:** ${report.errors} errors, ${report.warnings} warnings, ${report.info} info
          **Status:** ${report.validation_passed ? '‚úÖ PASSED' : '‚ùå FAILED'}

          `;

            if (report.errors > 0) {
              validationReport += `### ‚ùå Errors (${report.errors})\n`;
              report.results.filter(r => r.severity === 'ERROR').forEach(result => {
                validationReport += `- **${result.server}**: ${result.message}\n`;
              });
              validationReport += '\n';
            }

            if (report.warnings > 0) {
              validationReport += `### ‚ö†Ô∏è Warnings (${report.warnings})\n`;
              report.results.filter(r => r.severity === 'WARNING').forEach(result => {
                validationReport += `- **${result.server}**: ${result.message}\n`;
              });
              validationReport += '\n';
            }

          } catch (error) {
            validationReport = `## ‚ùå MCP Version Validation Failed

          Unable to read validation report: ${error.message}
          `;
          }

          // Read compatibility report
          let compatibilityReport = '';
          try {
            const report = JSON.parse(fs.readFileSync('compatibility_report.json', 'utf8'));

            compatibilityReport = `## üìä Compatibility Summary

          **Total Servers:** ${report.total_servers}
          **API Versions:**
          `;

            Object.entries(report.api_versions).forEach(([version, servers]) => {
              compatibilityReport += `- ${version}: ${servers.length} servers\n`;
            });

            if (report.deprecation_warnings.length > 0) {
              compatibilityReport += `\n**Deprecation Warnings:** ${report.deprecation_warnings.length}\n`;
              report.deprecation_warnings.forEach(warning => {
                compatibilityReport += `- ${warning.server}: ${warning.deprecated_versions.join(', ')}\n`;
              });
            }

          } catch (error) {
            compatibilityReport = `Unable to read compatibility report: ${error.message}`;
          }

          const comment = `${validationReport}\n${compatibilityReport}

          ---
          *Automated MCP version validation - [View workflow run](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})*`;

          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Fail workflow if validation errors
      run: |
        if [ -f validation_report.json ]; then
          errors=$(python -c "import json; report = json.load(open('validation_report.json')); print(report['errors'])")
          if [ "$errors" -gt 0 ]; then
            echo "‚ùå MCP version validation failed with $errors errors"
            exit 1
          else
            echo "‚úÖ MCP version validation passed"
          fi
        else
          echo "‚ùå No validation report generated"
          exit 1
        fi

  integration-test-summary:
    name: MCP Integration Test Summary
    runs-on: ubuntu-latest
    needs: validate-mcp-versions
    if: always()

    steps:
    - name: Download validation artifacts
      uses: actions/download-artifact@v3
      with:
        name: mcp-validation-reports

    - name: Generate integration summary
      run: |
        echo "## üéØ MCP Integration Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -f validation_report.json ]; then
          python -c "
        import json

        with open('validation_report.json', 'r') as f:
            report = json.load(f)

        print(f'**Validation Status:** {\"‚úÖ PASSED\" if report[\"validation_passed\"] else \"‚ùå FAILED\"}')
        print(f'**Total Issues:** {report[\"total_issues\"]}')
        print(f'**Breakdown:** {report[\"errors\"]} errors, {report[\"warnings\"]} warnings, {report[\"info\"]} info')
        print()

        if report['errors'] > 0:
            print('### Critical Issues to Address:')
            for result in report['results']:
                if result['severity'] == 'ERROR':
                    print(f'- **{result[\"server\"]}**: {result[\"message\"]}')
        " >> $GITHUB_STEP_SUMMARY
        fi

        if [ -f compatibility_report.json ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Server Compatibility" >> $GITHUB_STEP_SUMMARY
          python -c "
        import json

        with open('compatibility_report.json', 'r') as f:
            report = json.load(f)

        print(f'**Total Servers:** {report[\"total_servers\"]}')
        print('**API Version Distribution:**')
        for version, servers in report['api_versions'].items():
            print(f'- {version}: {len(servers)} servers')
        " >> $GITHUB_STEP_SUMMARY
        fi
