name: Dead Code Detection & Prevention
# Weekly automated scan for dead code patterns and prevention

on:
  push:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 1' # Weekly Monday 2AM UTC
  workflow_dispatch: # Allow manual trigger

env:
  PULUMI_ORG: scoobyjava-org
  ENVIRONMENT: prod

jobs:
  dead-code-analysis:
    runs-on: ubuntu-latest
    name: Enhanced Dead Code Analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt || pip install ruff black isort

      - name: Run Enhanced Dead Code Scanner
        id: scan
        run: |
          echo "üîç Running Enhanced Dead Code Scanner..."
          python scripts/enhanced_dead_code_scanner.py --scan --report json --output dead_code_report.json

          # Extract key metrics for PR comment
          TOTAL_FILES=$(python -c "import json; data=json.load(open('dead_code_report.json')); print(data['summary']['total_dead_code_files'])")
          AUTO_FIXABLE=$(python -c "import json; data=json.load(open('dead_code_report.json')); print(data['summary']['auto_fixable'])")
          MANUAL_REVIEW=$(python -c "import json; data=json.load(open('dead_code_report.json')); print(data['summary']['requires_manual_review'])")

          echo "total_files=$TOTAL_FILES" >> $GITHUB_OUTPUT
          echo "auto_fixable=$AUTO_FIXABLE" >> $GITHUB_OUTPUT
          echo "manual_review=$MANUAL_REVIEW" >> $GITHUB_OUTPUT

      - name: AI Junk Prevention Analysis
        run: |
          echo "üõ°Ô∏è Running AI Junk Prevention Analysis..."
          python -c '
          import sys
          sys.path.append("backend")
          from services.ai_junk_prevention_service import junk_prevention_service
          stats = junk_prevention_service.get_dead_code_prevention_stats()
          print(f"Prevention patterns: {stats[\"forbidden_patterns_count\"]}")
          print(f"Coverage: {stats[\"prevention_coverage\"]}")
          recommendations = junk_prevention_service.get_cleanup_recommendations()
          if recommendations:
              print("Recommendations:")
              for rec in recommendations[:5]:
                  print(f"  - {rec}")
          '

      - name: Generate Cleanup PR (if needed)
        if: steps.scan.outputs.total_files > 50
        run: |
          echo "üßπ High dead code count detected. Generating cleanup recommendations..."

          # Create cleanup script
          cat > cleanup_recommendations.md << 'EOF'
          # üßπ Dead Code Cleanup Recommendations

          **Generated**: $(date -Iminutes)
          **Total dead code files**: ${{ steps.scan.outputs.total_files }}
          **Auto-fixable**: ${{ steps.scan.outputs.auto_fixable }}
          **Manual review required**: ${{ steps.scan.outputs.manual_review }}

          ## üöÄ Immediate Actions (Safe)

          ```bash
          # Fix monorepo artifacts
          python scripts/enhanced_dead_code_scanner.py --fix-monorepo-artifacts

          # Clean up temporary reports (with user approval)
          python scripts/enhanced_dead_code_scanner.py --cleanup-reports
          ```

          ## üìä Detailed Analysis

          See attached `dead_code_report.json` for complete analysis.

          ## ‚ö° Auto-Fix Available

          Run the enhanced dead code scanner with auto-fix options to address ${{ steps.scan.outputs.auto_fixable }} low-risk issues automatically.
          EOF

          echo "Cleanup recommendations generated"

      - name: Comment on PR (if PR)
        if: github.event_name == 'pull_request' && steps.scan.outputs.total_files > 10
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = `## üîç Dead Code Analysis Results

            **Total dead code files found**: ${{ steps.scan.outputs.total_files }}
            **Auto-fixable**: ${{ steps.scan.outputs.auto_fixable }}
            **Requires manual review**: ${{ steps.scan.outputs.manual_review }}

            ### üéØ Recommendations
            `;

            if (${{ steps.scan.outputs.auto_fixable }} > 0) {
              comment += `
            #### ‚úÖ Auto-fixable (Low Risk)
            \`\`\`bash
            # Fix monorepo artifacts
            python scripts/enhanced_dead_code_scanner.py --fix-monorepo-artifacts

            # Clean up temporary reports
            python scripts/enhanced_dead_code_scanner.py --cleanup-reports
            \`\`\`
            `;
            }

            if (${{ steps.scan.outputs.manual_review }} > 0) {
              comment += `
            #### ‚ö†Ô∏è Manual Review Required (${{ steps.scan.outputs.manual_review }} files)
            - Deprecated Dockerfiles - consolidation needed
            - Legacy FastAPI apps - verification required
            - See detailed report for specific files
            `;
            }

            comment += `
            ### üìä Prevention Status
            - ‚úÖ Pre-commit hooks active (prevents new dead code)
            - ‚úÖ AI Junk Prevention Service enhanced
            - ‚úÖ Weekly automated scanning active

            <details>
            <summary>View full report</summary>

            \`\`\`json
            ${fs.readFileSync('dead_code_report.json', 'utf8')}
            \`\`\`

            </details>
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dead-code-analysis-${{ github.run_number }}
          path: |
            dead_code_report.json
            cleanup_recommendations.md
          retention-days: 30

      - name: Create Issue (if high dead code count)
        if: steps.scan.outputs.total_files > 100
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üßπ High Dead Code Count Detected: ${{ steps.scan.outputs.total_files }} files`;
            const body = `
            ## üö® Dead Code Alert

            The weekly scan detected **${{ steps.scan.outputs.total_files }}** dead code files, exceeding the threshold of 100.

            ### üìä Analysis Summary
            - **Auto-fixable**: ${{ steps.scan.outputs.auto_fixable }}
            - **Manual review**: ${{ steps.scan.outputs.manual_review }}
            - **Automation coverage**: ${{ steps.scan.outputs.auto_fixable / steps.scan.outputs.total_files * 100 }}%

            ### üéØ Recommended Actions

            1. **Immediate (Low Risk)**:
               \`\`\`bash
               python scripts/enhanced_dead_code_scanner.py --fix-monorepo-artifacts
               python scripts/enhanced_dead_code_scanner.py --cleanup-reports
               \`\`\`

            2. **Planned (Medium Risk)**:
               - Review Dockerfile consolidation strategy
               - Verify FastAPI application unification
               - Manual cleanup of remaining items

            ### üìà Prevention

            - ‚úÖ Enhanced pre-commit hooks now active
            - ‚úÖ AI Junk Prevention Service updated
            - ‚úÖ Weekly scanning will track progress

            **Artifacts**: See workflow artifacts for detailed JSON report and cleanup recommendations.

            **Auto-generated by**: \`/.github/workflows/dead-code-prevention.yml\`
            `;

            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'dead-code,automated'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes('High Dead Code Count Detected')
            );

            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.createComment({
                issue_number: existingIssue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üìä Updated Scan Results (${new Date().toISOString()})\n\n${body}`
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['dead-code', 'automated', 'technical-debt']
              });
            }

  validation:
    runs-on: ubuntu-latest
    name: Validate Prevention Systems
    needs: dead-code-analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Pre-commit Hooks
        run: |
          echo "üîß Validating pre-commit hook configuration..."
          python -c '
          import yaml
          with open(".pre-commit-config.yaml") as f:
              config = yaml.safe_load(f)

          local_hooks = []
          for repo in config.get("repos", []):
              if repo.get("repo") == "local":
                  local_hooks.extend([h["id"] for h in repo.get("hooks", [])])

          required_hooks = ["dead-code-prevention", "one-time-script-reminder", "monorepo-transition-guard"]
          missing = [h for h in required_hooks if h not in local_hooks]

          if missing:
              print(f"‚ùå Missing hooks: {missing}")
              exit(1)
          else:
              print("‚úÖ All dead code prevention hooks configured")
          '

      - name: Test AI Junk Prevention Service
        run: |
          echo "üõ°Ô∏è Testing AI Junk Prevention Service..."
          python -c '
          import sys
          sys.path.append("backend")
          from services.ai_junk_prevention_service import AIJunkPreventionService

          service = AIJunkPreventionService()

          test_files = [
              "apps/new-feature/component.ts",
              "TEMP_ANALYSIS_REPORT.md",
              "Dockerfile.development",
              "api/fastapi_main.py",
              "docs/system_handbook/guide.md"
          ]

          for test_file in test_files:
              should_prevent, reason = service.should_prevent_file_creation(test_file)
              status = "‚ùå BLOCKED" if should_prevent else "‚úÖ ALLOWED"
              print(f"{status}: {test_file}")
              if reason:
                  print(f"   Reason: {reason}")

          print("\nüõ°Ô∏è AI Junk Prevention Service is operational")
          '

      - name: Validate Enhancement Integration
        run: |
          echo "üîç Validating dead code audit integration..."
          python -c '
          import sys
          sys.path.append("backend")
          from services.ai_junk_prevention_service import AIJunkPreventionService

          service = AIJunkPreventionService()
          stats = service.get_dead_code_prevention_stats()

          print(f"üìä Prevention Statistics:")
          print(f"   Total patterns: {stats[\"forbidden_patterns_count\"]}")
          print(f"   Coverage: {stats[\"prevention_coverage\"]}")
          print(f"   Categories: {list(stats[\"categories\"].keys())}")

          if stats["forbidden_patterns_count"] >= 25:
              print("‚úÖ Dead code audit patterns successfully integrated")
          else:
              print("‚ùå Dead code audit patterns missing")
              exit(1)
          '
