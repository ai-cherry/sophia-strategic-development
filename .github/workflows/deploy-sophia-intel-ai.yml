name: Deploy Sophia Intel AI

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - 'admin/**'
      - 'api/**'
      - 'infrastructure/**'
      - 'scripts/deploy_sophia_intel_ai.py'

  pull_request:
    branches: [main]
    paths:
      - 'frontend/**'
      - 'admin/**'
      - 'api/**'
      - 'infrastructure/**'
      - 'scripts/deploy_sophia_intel_ai.py'

  workflow_dispatch:
    inputs:
      deployment_phase:
        description: 'Deployment phase to run'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - '1'
          - '2'
          - '3'
          - '4'

env:
  DOMAIN: sophia-intel.ai
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Install backend dependencies
        run: |
          pip install uv
          uv pip install -r requirements.txt

      - name: Run frontend tests
        run: |
          cd frontend
          npm test

      - name: Run backend tests
        run: |
          python -m pytest api/tests/

      - name: Run linting
        run: |
          cd frontend
          npm run lint

      - name: Type checking
        run: |
          cd frontend
          npm run type-check

  validate-infrastructure:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install uv
          uv pip install -r requirements.txt

      - name: Validate Lambda Labs infrastructure
        env:
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
          LAMBDA_SSH_KEY: ${{ secrets.LAMBDA_SSH_KEY }}
        run: |
          python scripts/validate_lambda_infrastructure.py

      - name: Validate Pulumi ESC configuration
        run: |
          # Validate YAML syntax
          python -c "import yaml; yaml.safe_load(open('infrastructure/esc/sophia-intel-ai-production.yaml'))"
          echo "‚úÖ Pulumi ESC configuration is valid"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [test, validate-infrastructure]

    environment:
      name: staging
      url: https://staging.sophia-intel.ai

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install uv
          uv pip install -r requirements.txt

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_API_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: frontend

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://app.sophia-intel.ai

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install uv
          uv pip install -r requirements.txt

      - name: Run deployment script
        env:
          VERCEL_API_TOKEN: ${{ secrets.VERCEL_API_TOKEN }}
          NAMECHEAP_API_KEY: ${{ secrets.NAMECHEAP_API_KEY }}
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
          LAMBDA_SSH_KEY: ${{ secrets.LAMBDA_SSH_KEY }}
          LAMBDA_PRIVATE_SSH_KEY: ${{ secrets.LAMBDA_PRIVATE_SSH_KEY }}
        run: |
          python scripts/deploy_sophia_intel_ai.py --phase ${{ github.event.inputs.deployment_phase || 'all' }}

      - name: Verify deployment
        run: |
          # Wait for deployment to propagate
          sleep 30

          # Test main endpoints
          curl -f https://app.sophia-intel.ai || exit 1
          curl -f https://api.sophia-intel.ai/health || exit 1

          echo "‚úÖ Deployment verification successful"

      - name: Update deployment status
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "üéâ Deployment to sophia-intel.ai completed successfully!"
            echo "üåê App: https://app.sophia-intel.ai"
            echo "üîß Admin: https://admin.sophia-intel.ai"
            echo "üì° API: https://api.sophia-intel.ai"
            echo "üìä Status: https://status.sophia-intel.ai"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi

  manual-deployment:
    name: Manual Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    environment:
      name: production
      url: https://app.sophia-intel.ai

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install uv
          uv pip install -r requirements.txt

      - name: Run deployment script
        env:
          VERCEL_API_TOKEN: ${{ secrets.VERCEL_API_TOKEN }}
          NAMECHEAP_API_KEY: ${{ secrets.NAMECHEAP_API_KEY }}
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
          LAMBDA_SSH_KEY: ${{ secrets.LAMBDA_SSH_KEY }}
          LAMBDA_PRIVATE_SSH_KEY: ${{ secrets.LAMBDA_PRIVATE_SSH_KEY }}
        run: |
          python scripts/deploy_sophia_intel_ai.py --phase ${{ github.event.inputs.deployment_phase }}

      - name: Post-deployment summary
        run: |
          echo "üöÄ Manual deployment completed"
          echo "üìã Phase: ${{ github.event.inputs.deployment_phase }}"
          echo "üåê Domain: sophia-intel.ai"
          echo "‚è∞ Timestamp: $(date -u)"

  notify-completion:
    name: Notify Deployment Completion
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-production.result == 'success' || needs.manual-deployment.result == 'success')
    needs: [deploy-production, manual-deployment]

    steps:
      - name: Deployment Success Notification
        run: |
          echo "üéâ Sophia Intel AI deployment completed successfully!"
          echo ""
          echo "üåê Production URLs:"
          echo "   ‚Ä¢ Main App: https://app.sophia-intel.ai"
          echo "   ‚Ä¢ Admin: https://admin.sophia-intel.ai"
          echo "   ‚Ä¢ API: https://api.sophia-intel.ai"
          echo "   ‚Ä¢ Status: https://status.sophia-intel.ai"
          echo "   ‚Ä¢ Docs: https://docs.sophia-intel.ai"
          echo ""
          echo "üèóÔ∏è Infrastructure:"
          echo "   ‚Ä¢ 5 Lambda Labs instances active"
          echo "   ‚Ä¢ Vercel projects configured"
          echo "   ‚Ä¢ DNS records updated"
          echo "   ‚Ä¢ SSL certificates active"
          echo ""
          echo "üìä Monitoring:"
          echo "   ‚Ä¢ Prometheus: Available"
          echo "   ‚Ä¢ Grafana: Available"
          echo "   ‚Ä¢ Status page: Active"
          echo ""
          echo "üí∞ Cost: ~$115.92/day ($3,477.60/month)"
