name: Lambda Labs Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      services:
        description: 'Services to deploy (comma-separated)'
        required: false
        default: 'all'
        type: string
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'infrastructure/**'
      - 'docker-compose*.yml'
      - 'Dockerfile*'
      - '.github/workflows/lambda-labs-deploy.yml'

env:
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  PULUMI_ORG: scoobyjava-org
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_USERNAME }}/sophia-ai
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          ENVIRONMENT=${{ env.ENVIRONMENT }}
          PULUMI_ORG=${{ env.PULUMI_ORG }}

  deploy-to-lambda-labs:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    strategy:
      matrix:
        instance:
          - name: production
            ip: 104.171.202.103
            gpu: RTX6000
            services: backend,frontend,postgres,redis
          - name: ai-core
            ip: 192.222.58.232
            gpu: GH200
            services: ai-memory,snowflake,cortex
          - name: mcp-orchestrator
            ip: 104.171.202.117
            gpu: A6000
            services: mcp-gateway,mcp-servers
          - name: data-pipeline
            ip: 104.171.202.134
            gpu: A100
            services: etl,monitoring,analytics
          - name: development
            ip: 155.248.194.183
            gpu: A10
            services: testing,staging
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ matrix.instance.ip }} >> ~/.ssh/known_hosts
        
    - name: Deploy to Lambda Labs Instance
      run: |
        echo "üöÄ Deploying to ${{ matrix.instance.name }} (${{ matrix.instance.ip }})"
        
        # Create deployment directory
        ssh root@${{ matrix.instance.ip }} "mkdir -p /opt/sophia-ai"
        
        # Copy docker-compose files
        scp docker-compose.cloud.yml root@${{ matrix.instance.ip }}:/opt/sophia-ai/
        scp docker-compose.override.yml root@${{ matrix.instance.ip }}:/opt/sophia-ai/ || true
        
        # Deploy services
        ssh root@${{ matrix.instance.ip }} << 'EOF'
          cd /opt/sophia-ai
          
          # Set environment variables
          export ENVIRONMENT=${{ env.ENVIRONMENT }}
          export PULUMI_ORG=${{ env.PULUMI_ORG }}
          export DOCKER_USERNAME=${{ env.DOCKER_USERNAME }}
          export DOCKER_TOKEN=${{ env.DOCKER_TOKEN }}
          
          # Login to Docker Hub
          echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
          
          # Pull latest images
          docker-compose -f docker-compose.cloud.yml pull
          
          # Deploy stack
          docker stack deploy -c docker-compose.cloud.yml sophia-ai
          
          # Wait for services to be ready
          sleep 30
          
          # Check service status
          docker service ls
          docker stack ps sophia-ai
          
          echo "‚úÖ Deployment complete on ${{ matrix.instance.name }}"
        EOF
        
    - name: Health Check
      run: |
        echo "üîç Performing health check on ${{ matrix.instance.name }}"
        
        # Wait for services to start
        sleep 60
        
        # Check service health
        ssh root@${{ matrix.instance.ip }} << 'EOF'
          # Check if services are running
          RUNNING_SERVICES=$(docker service ls --filter "label=com.docker.stack.namespace=sophia-ai" --format "table {{.Name}}\t{{.Replicas}}" | grep -v "0/")
          
          if [ -z "$RUNNING_SERVICES" ]; then
            echo "‚ùå No services running"
            exit 1
          else
            echo "‚úÖ Services running:"
            echo "$RUNNING_SERVICES"
          fi
          
          # Test API endpoints if backend is deployed
          if echo "${{ matrix.instance.services }}" | grep -q "backend"; then
            if curl -f http://localhost:8000/health > /dev/null 2>&1; then
              echo "‚úÖ Backend health check passed"
            else
              echo "‚ö†Ô∏è  Backend health check failed"
            fi
          fi
          
          # Test frontend if deployed
          if echo "${{ matrix.instance.services }}" | grep -q "frontend"; then
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "‚úÖ Frontend health check passed"
            else
              echo "‚ö†Ô∏è  Frontend health check failed"
            fi
          fi
        EOF
        
    - name: Update deployment status
      if: always()
      run: |
        echo "üìä Deployment Status for ${{ matrix.instance.name }}:"
        echo "Instance: ${{ matrix.instance.ip }}"
        echo "GPU: ${{ matrix.instance.gpu }}"
        echo "Services: ${{ matrix.instance.services }}"
        echo "Image: ${{ needs.build-and-push.outputs.image_tag }}"
        echo "Status: ${{ job.status }}"
        
  notify-completion:
    needs: [build-and-push, deploy-to-lambda-labs]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment completion
      run: |
        if [ "${{ needs.deploy-to-lambda-labs.result }}" == "success" ]; then
          echo "üéâ Deployment successful to all Lambda Labs instances!"
          echo "Image: ${{ needs.build-and-push.outputs.image_tag }}"
          echo "Environment: ${{ env.ENVIRONMENT }}"
        else
          echo "‚ùå Deployment failed on one or more instances"
          echo "Check the logs above for details"
          exit 1
        fi
        
    - name: Post to Slack
      if: always()
      run: |
        STATUS_EMOJI="${{ needs.deploy-to-lambda-labs.result == 'success' && '‚úÖ' || '‚ùå' }}"
        STATUS_TEXT="${{ needs.deploy-to-lambda-labs.result == 'success' && 'SUCCESS' || 'FAILED' }}"
        
        echo "Would post to Slack: $STATUS_EMOJI Lambda Labs Deployment $STATUS_TEXT"
        echo "Environment: ${{ env.ENVIRONMENT }}"
        echo "Image: ${{ needs.build-and-push.outputs.image_tag }}"
        
        # Uncomment when Slack integration is ready
        # curl -X POST -H 'Content-type: application/json' \
        #   --data "{\"text\":\"$STATUS_EMOJI Lambda Labs Deployment $STATUS_TEXT\nEnvironment: ${{ env.ENVIRONMENT }}\nImage: ${{ needs.build-and-push.outputs.image_tag }}\"}" \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}
