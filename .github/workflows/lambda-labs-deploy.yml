name: 🚀 Lambda Labs Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Deployment type'
        type: choice
        options:
          - full
          - backend-only
          - mcp-only
        default: full
      use_serverless:
        description: 'Use serverless inference (80% of workload)'
        type: boolean
        default: true

env:
  DOCKER_REGISTRY: scoobyjava15
  LAMBDA_LABS_HOST: 192.222.51.151
  ENVIRONMENT: production

jobs:
  verify-secrets:
    name: 🔐 Verify Secrets
    runs-on: ubuntu-latest
    outputs:
      secrets_valid: ${{ steps.verify.outputs.valid }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify GitHub Secrets
        id: verify
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Verifying required secrets..."

          # Check if secrets are set (we can't read values, only check existence)
          MISSING_SECRETS=""

          # Lambda Labs secrets
          if [ -z "${{ secrets.LAMBDA_API_KEY }}" ]; then
            MISSING_SECRETS="${MISSING_SECRETS}LAMBDA_API_KEY "
          fi

          if [ -z "${{ secrets.LAMBDA_CLOUD_API_KEY }}" ]; then
            MISSING_SECRETS="${MISSING_SECRETS}LAMBDA_CLOUD_API_KEY "
          fi

          if [ -z "${{ secrets.LAMBDA_SSH_PRIVATE_KEY }}" ]; then
            MISSING_SECRETS="${MISSING_SECRETS}LAMBDA_SSH_PRIVATE_KEY "
          fi

          # Docker Hub secrets
          if [ -z "${{ secrets.DOCKER_HUB_USERNAME }}" ]; then
            MISSING_SECRETS="${MISSING_SECRETS}DOCKER_HUB_USERNAME "
          fi

          if [ -z "${{ secrets.DOCKER_HUB_TOKEN }}" ]; then
            MISSING_SECRETS="${MISSING_SECRETS}DOCKER_HUB_TOKEN "
          fi

          if [ -n "$MISSING_SECRETS" ]; then
            echo "❌ Missing secrets: $MISSING_SECRETS"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ All required secrets are configured"
            echo "valid=true" >> $GITHUB_OUTPUT
          fi

  test-lambda-apis:
    name: 🧪 Test Lambda APIs
    needs: verify-secrets
    runs-on: ubuntu-latest
    if: needs.verify-secrets.outputs.secrets_valid == 'true'

    steps:
      - name: Test Inference API
        env:
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
        run: |
          echo "🔍 Testing Lambda Labs Inference API..."

          # Test inference API with basic auth
          response=$(curl -s -w "\n%{http_code}" \
            -u "$LAMBDA_API_KEY:" \
            -X POST https://api.lambda.ai/v1/inference \
            -H "Content-Type: application/json" \
            -d '{
              "model": "llama3.1-8b",
              "prompt": "Hello, world! Please respond with a simple greeting.",
              "max_tokens": 50
            }')

          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')

          if [ "$http_code" = "200" ]; then
            echo "✅ Inference API test successful"
            echo "$body" | jq '.'
          else
            echo "❌ Inference API test failed with status $http_code"
            echo "$body"
            exit 1
          fi

      - name: Test Cloud API
        env:
          LAMBDA_CLOUD_API_KEY: ${{ secrets.LAMBDA_CLOUD_API_KEY }}
        run: |
          echo "🔍 Testing Lambda Labs Cloud API..."

          # Test cloud API with bearer token
          response=$(curl -s -w "\n%{http_code}" \
            -H "Authorization: Bearer $LAMBDA_CLOUD_API_KEY" \
            https://cloud.lambda.ai/api/v1/instances)

          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')

          if [ "$http_code" = "200" ]; then
            echo "✅ Cloud API test successful"
            echo "$body" | jq '.data[] | {id, name, status, ip_address}'
          else
            echo "❌ Cloud API test failed with status $http_code"
            echo "$body"
            # Don't fail the job if no instances exist
            if [ "$http_code" != "404" ]; then
              exit 1
            fi
          fi

  deploy-to-lambda:
    name: 🚀 Deploy to Lambda Labs
    needs: [verify-secrets, test-lambda-apis]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.LAMBDA_SSH_PRIVATE_KEY }}

      - name: Get Lambda Labs Instance IP
        id: get-ip
        env:
          LAMBDA_CLOUD_API_KEY: ${{ secrets.LAMBDA_CLOUD_API_KEY }}
        run: |
          echo "🔍 Getting Lambda Labs instance IP..."

          # Try to get instance IP from Cloud API
          response=$(curl -s \
            -H "Authorization: Bearer $LAMBDA_CLOUD_API_KEY" \
            https://cloud.lambda.ai/api/v1/instances)

          # Extract first running instance IP
          instance_ip=$(echo "$response" | jq -r '.data[] | select(.status == "running") | .ip_address' | head -n1)

          if [ -n "$instance_ip" ]; then
            echo "✅ Found running instance: $instance_ip"
            echo "instance_ip=$instance_ip" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No running instances found, using default: ${{ env.LAMBDA_LABS_HOST }}"
            echo "instance_ip=${{ env.LAMBDA_LABS_HOST }}" >> $GITHUB_OUTPUT
          fi

      - name: Test SSH Connection
        run: |
          INSTANCE_IP="${{ steps.get-ip.outputs.instance_ip }}"
          echo "🔍 Testing SSH connection to $INSTANCE_IP..."

          # Add host to known hosts
          ssh-keyscan -H "$INSTANCE_IP" >> ~/.ssh/known_hosts 2>/dev/null || true

          # Test connection
          if ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ubuntu@"$INSTANCE_IP" "echo 'SSH connection successful'"; then
            echo "✅ SSH connection successful"
          else
            echo "❌ SSH connection failed to $INSTANCE_IP"
            echo "This may be due to:"
            echo "  - Instance is not running"
            echo "  - Network connectivity issues"
            echo "  - SSH key mismatch"
            exit 1
          fi

      - name: Deploy Application
        if: github.event.inputs.deploy_type != 'mcp-only'
        env:
          LAMBDA_CLOUD_API_KEY: ${{ secrets.LAMBDA_CLOUD_API_KEY }}
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
        run: |
          INSTANCE_IP="${{ steps.get-ip.outputs.instance_ip }}"
          echo "🚀 Deploying to Lambda Labs instance: $INSTANCE_IP"

          # Create deployment package
          cat > deployment/deploy.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail

          echo "🚀 Starting Sophia AI deployment on Lambda Labs"

          # Environment setup
          export DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
          export ENVIRONMENT=${{ env.ENVIRONMENT }}
          export LAMBDA_API_KEY="${LAMBDA_API_KEY}"
          export LAMBDA_CLOUD_API_KEY="${LAMBDA_CLOUD_API_KEY}"

          # Pull latest images
          echo "📥 Pulling latest Docker images..."
          docker pull ${DOCKER_REGISTRY}/sophia-backend:latest
          docker pull ${DOCKER_REGISTRY}/sophia-frontend:latest

          # Initialize Docker Swarm if needed
          if ! docker info | grep -q "Swarm: active"; then
              echo "🐝 Initializing Docker Swarm..."
              docker swarm init
          fi

          # Deploy stack
          echo "🚀 Deploying Docker stack..."
          docker stack deploy -c docker-compose.cloud.yml sophia-ai --with-registry-auth

          # Wait for services
          echo "⏳ Waiting for services to start..."
          sleep 30

          # Check status
          docker stack services sophia-ai

          echo "✅ Deployment complete!"
          EOF

          chmod +x deployment/deploy.sh

          # Copy files to Lambda Labs
          scp -r deployment/* docker-compose.cloud.yml ubuntu@${INSTANCE_IP}:~/

          # Execute deployment
          ssh ubuntu@${INSTANCE_IP} "cd ~/ && ./deploy.sh"

      - name: Deploy MCP Servers
        if: github.event.inputs.deploy_type == 'full' || github.event.inputs.deploy_type == 'mcp-only'
        run: |
          INSTANCE_IP="${{ steps.get-ip.outputs.instance_ip }}"
          echo "🔌 Deploying MCP servers..."

          # Deploy MCP servers via SSH
          ssh ubuntu@${INSTANCE_IP} << 'EOF'
            # Pull MCP server images
            for server in ai-memory-v2 gong-v2 snowflake-v2 slack-v2 linear-v2; do
              docker pull ${{ env.DOCKER_REGISTRY }}/sophia-${server}:latest || echo "Warning: ${server} image not found"
            done

            # Update stack with MCP servers
            docker stack deploy -c docker-compose.cloud.yml sophia-ai --with-registry-auth
          EOF

      - name: Validate Deployment
        run: |
          INSTANCE_IP="${{ steps.get-ip.outputs.instance_ip }}"
          echo "✅ Validating deployment..."

          # Wait for services to stabilize
          sleep 20

          # Check backend health
          if curl -f http://${INSTANCE_IP}:8000/health; then
            echo "✅ Backend is healthy"
          else
            echo "❌ Backend health check failed"
            exit 1
          fi

          # Check API docs
          if curl -f http://${INSTANCE_IP}:8000/docs; then
            echo "✅ API documentation is accessible"
          else
            echo "⚠️ API documentation not accessible"
          fi

          # List running services
          ssh ubuntu@${INSTANCE_IP} "docker service ls"

      - name: Update Deployment Status
        if: always()
        run: |
          cat > deployment-status.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "environment": "${{ env.ENVIRONMENT }}",
            "instance_ip": "${{ steps.get-ip.outputs.instance_ip }}",
            "deploy_type": "${{ github.event.inputs.deploy_type }}",
            "status": "${{ job.status }}",
            "urls": {
              "backend": "http://${{ steps.get-ip.outputs.instance_ip }}:8000",
              "api_docs": "http://${{ steps.get-ip.outputs.instance_ip }}:8000/docs",
              "frontend": "http://${{ steps.get-ip.outputs.instance_ip }}:3000"
            }
          }
          EOF

          echo "📊 Deployment Status:"
          cat deployment-status.json | jq '.'

  serverless-config:
    name: ⚡ Configure Serverless
    needs: deploy-to-lambda
    if: github.event.inputs.use_serverless == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Update Serverless Configuration
        env:
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
        run: |
          echo "⚡ Configuring serverless inference..."

          # Create configuration for 80% serverless routing
          cat > serverless-config.json << EOF
          {
            "routing": {
              "serverless_percentage": 80,
              "dedicated_percentage": 20,
              "models": {
                "llama3.1-8b": "serverless",
                "llama3.1-70b": "serverless",
                "mistral-7b": "serverless",
                "heavy_compute": "dedicated"
              }
            },
            "cost_optimization": {
              "enabled": true,
              "daily_budget": 50,
              "monthly_budget": 1000
            }
          }
          EOF

          echo "✅ Serverless configuration created"
          cat serverless-config.json | jq '.'

  notify-deployment:
    name: 📢 Notify Status
    needs: [deploy-to-lambda, serverless-config]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Create Summary
        run: |
          echo "## 🚀 Lambda Labs Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.deploy-to-lambda.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Type**: ${{ github.event.inputs.deploy_type || 'full' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Serverless**: ${{ github.event.inputs.use_serverless || 'true' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Access URLs" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: http://${{ env.LAMBDA_LABS_HOST }}:8000" >> $GITHUB_STEP_SUMMARY
          echo "- API Docs: http://${{ env.LAMBDA_LABS_HOST }}:8000/docs" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: http://${{ env.LAMBDA_LABS_HOST }}:3000" >> $GITHUB_STEP_SUMMARY
