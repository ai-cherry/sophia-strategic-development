name: Deploy to Lambda Labs (Aligned)

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  LAMBDA_FRONTEND_IP: 104.171.202.103
  LAMBDA_BACKEND_IP: 192.222.58.232
  LAMBDA_MCP_IP: 104.171.202.117
  DOCKER_REGISTRY: 192.222.58.232:5000

jobs:
  deploy-frontend:
    name: Deploy Frontend to Lambda Labs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        env:
          VITE_API_URL: http://${{ env.LAMBDA_BACKEND_IP }}:8000
          VITE_modern_stack_ACCOUNT: ${{ secrets.modern_stack_ACCOUNT }}
        run: npm run build

      - name: Create deployment package
        working-directory: frontend
        run: tar -czf frontend-dist.tar.gz dist/

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LAMBDA_PRIVATE_SSH_KEY }}" > ~/.ssh/sophia2025.pem
          chmod 600 ~/.ssh/sophia2025.pem

      - name: Deploy to Lambda Labs Frontend
        run: |
          scp -i ~/.ssh/sophia2025.pem -o StrictHostKeyChecking=no \
            frontend/frontend-dist.tar.gz \
            ubuntu@${{ env.LAMBDA_FRONTEND_IP }}:/tmp/
          
          ssh -i ~/.ssh/sophia2025.pem -o StrictHostKeyChecking=no \
            ubuntu@${{ env.LAMBDA_FRONTEND_IP }} << 'EOF'
            cd /var/www
            sudo rm -rf html.bak
            sudo mv html html.bak || true
            sudo mkdir -p html
            cd html
            sudo tar -xzf /tmp/frontend-dist.tar.gz --strip-components=1
            sudo chown -R www-data:www-data .
            sudo systemctl restart nginx
            rm /tmp/frontend-dist.tar.gz
          EOF

  deploy-backend:
    name: Deploy Backend to Lambda Labs K3s
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        run: |
          docker build -t sophia-backend:${{ github.sha }} \
            -f Dockerfile.production \
            --build-arg ENVIRONMENT=prod \
            .

      - name: Setup SSH tunnel for registry
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LAMBDA_PRIVATE_SSH_KEY }}" > ~/.ssh/sophia2025.pem
          chmod 600 ~/.ssh/sophia2025.pem
          ssh -i ~/.ssh/sophia2025.pem -o StrictHostKeyChecking=no \
            -L 5000:localhost:5000 ubuntu@${{ env.LAMBDA_BACKEND_IP }} \
            -N -f

      - name: Push to Lambda Labs registry
        run: |
          docker tag sophia-backend:${{ github.sha }} \
            localhost:5000/sophia-backend:${{ github.sha }}
          docker push localhost:5000/sophia-backend:${{ github.sha }}

      - name: Update K3s deployment
        run: |
          ssh -i ~/.ssh/sophia2025.pem -o StrictHostKeyChecking=no \
            ubuntu@${{ env.LAMBDA_BACKEND_IP }} << EOF
            kubectl set image deployment/sophia-api \
              sophia-api=${{ env.DOCKER_REGISTRY }}/sophia-backend:${{ github.sha }} \
              -n sophia-ai-prod
            kubectl rollout status deployment/sophia-api -n sophia-ai-prod
          EOF

  deploy-mcp-servers:
    name: Deploy MCP Servers to Lambda Labs
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LAMBDA_PRIVATE_SSH_KEY }}" > ~/.ssh/sophia2025.pem
          chmod 600 ~/.ssh/sophia2025.pem

      - name: Update MCP manifests with nodeSelector
        run: |
          for manifest in kubernetes/production/mcp-*.yaml; do
            if ! grep -q "nodeSelector:" "$manifest"; then
              sed -i '/spec:/a\      nodeSelector:\n        kubernetes.io/hostname: mcp-node' "$manifest"
            fi
          done

      - name: Copy manifests to control plane
        run: |
          tar -czf mcp-manifests.tar.gz kubernetes/production/mcp-*.yaml
          scp -i ~/.ssh/sophia2025.pem -o StrictHostKeyChecking=no \
            mcp-manifests.tar.gz \
            ubuntu@${{ env.LAMBDA_BACKEND_IP }}:/tmp/

      - name: Label MCP node and deploy
        run: |
          ssh -i ~/.ssh/sophia2025.pem -o StrictHostKeyChecking=no \
            ubuntu@${{ env.LAMBDA_BACKEND_IP }} << 'EOF'
            # Extract manifests
            cd /tmp
            tar -xzf mcp-manifests.tar.gz
            
            # Label the MCP node
            MCP_NODE=$(kubectl get nodes -o name | grep ${{ env.LAMBDA_MCP_IP }} | cut -d/ -f2)
            if [ -n "$MCP_NODE" ]; then
              kubectl label node $MCP_NODE kubernetes.io/hostname=mcp-node --overwrite
            else
              echo "Warning: MCP node not found in cluster"
            fi
            
            # Apply MCP deployments
            kubectl apply -f kubernetes/production/mcp-*.yaml
            
            # Wait for deployments
            for deployment in $(kubectl get deployments -n sophia-ai-prod -o name | grep mcp); do
              kubectl rollout status $deployment -n sophia-ai-prod
            done
            
            # Cleanup
            rm -rf /tmp/mcp-manifests.tar.gz /tmp/kubernetes
          EOF

  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend, deploy-mcp-servers]
    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LAMBDA_PRIVATE_SSH_KEY }}" > ~/.ssh/sophia2025.pem
          chmod 600 ~/.ssh/sophia2025.pem

      - name: Check Frontend
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.LAMBDA_FRONTEND_IP }})
          if [ "$response" = "200" ]; then
            echo "✅ Frontend is accessible"
          else
            echo "❌ Frontend returned status: $response"
            exit 1
          fi

      - name: Check Backend
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.LAMBDA_BACKEND_IP }}:8000/health)
          if [ "$response" = "200" ]; then
            echo "✅ Backend is healthy"
          else
            echo "❌ Backend returned status: $response"
            exit 1
          fi

      - name: Check MCP Servers
        run: |
          ssh -i ~/.ssh/sophia2025.pem -o StrictHostKeyChecking=no \
            ubuntu@${{ env.LAMBDA_BACKEND_IP }} << 'EOF'
            echo "MCP Server Status:"
            kubectl get pods -n sophia-ai-prod -o wide | grep mcp
            
            # Check if pods are on correct node
            MCP_PODS=$(kubectl get pods -n sophia-ai-prod -o wide | grep mcp | grep ${{ env.LAMBDA_MCP_IP }} | wc -l)
            TOTAL_MCP_PODS=$(kubectl get pods -n sophia-ai-prod | grep mcp | wc -l)
            
            echo "MCP pods on dedicated node: $MCP_PODS/$TOTAL_MCP_PODS"
            
            if [ "$MCP_PODS" -ne "$TOTAL_MCP_PODS" ]; then
              echo "⚠️ Warning: Not all MCP pods are on the dedicated node"
            fi
          EOF

      - name: Post deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: http://${{ env.LAMBDA_FRONTEND_IP }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend API: http://${{ env.LAMBDA_BACKEND_IP }}:8000" >> $GITHUB_STEP_SUMMARY
          echo "- API Docs: http://${{ env.LAMBDA_BACKEND_IP }}:8000/docs" >> $GITHUB_STEP_SUMMARY
          echo "- MCP Servers: Deployed to ${{ env.LAMBDA_MCP_IP }}" >> $GITHUB_STEP_SUMMARY 