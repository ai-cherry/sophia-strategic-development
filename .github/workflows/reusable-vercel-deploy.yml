name: Deploy to Vercel
on:
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment'
        type: string
        default: 'production'
      project_name:
        description: 'Vercel project name'
        type: string
        default: 'sophia-ai-unified-dashboard'

jobs:
  deploy:
    name: 🌐 Deploy Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Pull Vercel Environment
        run: |
          cd frontend
          vercel pull --yes --environment=${{ inputs.environment }} --token=${{ secrets.VERCEL_ACCESS_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project
        run: |
          cd frontend

          # Set build-time environment variables
          export VITE_DEPLOYMENT_ENV=${{ inputs.environment }}
          export VITE_BUILD_VERSION=${{ github.sha }}
          export VITE_BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)

          # Production vs Development URLs
          if [ "${{ inputs.environment }}" = "production" ]; then
            export VITE_BACKEND_URL="https://api.sophia-intel.ai"
            export VITE_WS_URL="wss://api.sophia-intel.ai"
          else
            export VITE_BACKEND_URL="https://dev.api.sophia-intel.ai"
            export VITE_WS_URL="wss://dev.api.sophia-intel.ai"
          fi

          # Build with Vercel
          vercel build --prod --token=${{ secrets.VERCEL_ACCESS_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          cd frontend

          # Deploy prebuilt project
          if [ "${{ inputs.environment }}" = "production" ]; then
            url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_ACCESS_TOKEN }})
          else
            url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_ACCESS_TOKEN }})
          fi

          echo "deployment_url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Update deployment summary
        run: |
          echo "## Frontend Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ inputs.project_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deploy.outputs.deployment_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ inputs.environment }}" = "production" ]; then
            echo "🌐 **Production URL**: https://app.sophia-intel.ai" >> $GITHUB_STEP_SUMMARY
          else
            echo "🌐 **Development URL**: https://dev.app.sophia-intel.ai" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Frontend deployed to Vercel!\n\n**Preview URL**: ${{ steps.deploy.outputs.deployment_url }}\n**Environment**: ${{ inputs.environment }}`
            })
