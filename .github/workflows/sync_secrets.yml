name: üîê Unified Secret Sync (GitHub ‚Üí Pulumi ESC)

on:
  push:
    branches: [main]
    paths:
      - 'scripts/security/secret_mapping.py'
      - '.github/workflows/sync_secrets.yml'
  schedule:
    - cron: '0 2 * * *'  # Nightly at 2 AM UTC
  workflow_dispatch:
    inputs:
      validate_only:
        description: 'Only validate secrets without syncing'
        type: boolean
        default: false

jobs:
  sync-secrets:
    name: Sync GitHub Secrets to Pulumi ESC
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Pulumi
        uses: pulumi/actions@v5
        with:
          pulumi-version: 'latest'

      - name: Login to Pulumi
        run: |
          export PULUMI_ACCESS_TOKEN="${{ secrets.PULUMI_ACCESS_TOKEN }}"
          pulumi login

      - name: Validate Secrets
        id: validate
        run: |
          python << 'EOF'
          import os
          import sys
          import json
          sys.path.insert(0, 'scripts/security')
          from secret_mapping import get_all_mappings, get_required_mappings, validate_secret_value

          # Collect all GitHub secrets
          github_secrets = {}
          missing_required = []
          invalid_secrets = []
          placeholder_secrets = []

          for mapping in get_all_mappings():
              secret_name = mapping.github_name
              secret_value = os.environ.get(f"SECRET_{secret_name}", "")

              if secret_value:
                  github_secrets[secret_name] = secret_value

                  # Check for placeholders
                  if any(p in secret_value.upper() for p in ['PLACEHOLDER', 'YOUR_', 'REPLACE_ME', 'DUMMY']):
                      placeholder_secrets.append((secret_name, secret_value[:20] + "..."))

                  # Validate format if regex provided
                  elif mapping.validation_regex and not validate_secret_value(mapping, secret_value):
                      invalid_secrets.append((secret_name, "Invalid format"))

              elif mapping.required:
                  missing_required.append(secret_name)

          # Generate report
          report = {
              "total_expected": len(get_all_mappings()),
              "total_found": len(github_secrets),
              "missing_required": missing_required,
              "invalid_secrets": invalid_secrets,
              "placeholder_secrets": placeholder_secrets,
              "sync_ready": len(missing_required) == 0 and len(placeholder_secrets) == 0
          }

          # Print report
          print("üîç SECRET VALIDATION REPORT")
          print("=" * 50)
          print(f"Expected secrets: {report['total_expected']}")
          print(f"Found in GitHub: {report['total_found']}")
          print(f"Missing required: {len(report['missing_required'])}")
          print(f"Invalid format: {len(report['invalid_secrets'])}")
          print(f"Placeholders: {len(report['placeholder_secrets'])}")

          if report['missing_required']:
              print("\n‚ùå Missing Required Secrets:")
              for secret in report['missing_required']:
                  print(f"  - {secret}")

          if report['placeholder_secrets']:
              print("\n‚ö†Ô∏è  Placeholder Secrets Detected:")
              for secret, preview in report['placeholder_secrets']:
                  print(f"  - {secret}: {preview}")

          if report['invalid_secrets']:
              print("\n‚ö†Ô∏è  Invalid Secret Formats:")
              for secret, reason in report['invalid_secrets']:
                  print(f"  - {secret}: {reason}")

          # Save report
          with open('secret_validation_report.json', 'w') as f:
              json.dump(report, f, indent=2)

          # Set outputs
          print(f"::set-output name=sync_ready::{str(report['sync_ready']).lower()}")
          print(f"::set-output name=missing_count::{len(report['missing_required'])}")
          print(f"::set-output name=placeholder_count::{len(report['placeholder_secrets'])}")

          # Exit with error if not ready
          if not report['sync_ready']:
              print("\n‚ùå SYNC BLOCKED: Fix missing/placeholder secrets first!")
              sys.exit(1)
          else:
              print("\n‚úÖ All required secrets are valid and ready to sync!")
          EOF
        env:
          # Map all organization secrets
          SECRET_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SECRET_ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          SECRET_GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          SECRET_DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          SECRET_PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          SECRET_DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
          SECRET_LAMBDA_LABS_API_KEY: ${{ secrets.LAMBDA_LABS_API_KEY }}
          SECRET_LAMBDA_LABS_SSH_KEY: ${{ secrets.LAMBDA_LABS_SSH_KEY }}
          SECRET_VERCEL_ACCESS_TOKEN: ${{ secrets.VERCEL_ACCESS_TOKEN }}
          SECRET_SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SECRET_SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USERNAME }}
          SECRET_SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SECRET_PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          SECRET_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          SECRET_REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          SECRET_GONG_ACCESS_KEY: ${{ secrets.GONG_ACCESS_KEY }}
          SECRET_GONG_CLIENT_SECRET: ${{ secrets.GONG_CLIENT_SECRET }}
          SECRET_HUBSPOT_ACCESS_TOKEN: ${{ secrets.HUBSPOT_ACCESS_TOKEN }}
          SECRET_SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SECRET_LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          SECRET_ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
          SECRET_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SECRET_FIGMA_ACCESS_TOKEN: ${{ secrets.FIGMA_ACCESS_TOKEN }}
          SECRET_JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SECRET_ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          SECRET_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SECRET_DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}

      - name: Sync to Pulumi ESC
        if: steps.validate.outputs.sync_ready == 'true' && github.event.inputs.validate_only != 'true'
        run: |
          python scripts/ci/sync_secrets_to_esc.py
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          # Same secret mappings as above
          SECRET_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SECRET_ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          SECRET_GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          SECRET_DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          SECRET_DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
          SECRET_LAMBDA_LABS_API_KEY: ${{ secrets.LAMBDA_LABS_API_KEY }}
          SECRET_LAMBDA_LABS_SSH_KEY: ${{ secrets.LAMBDA_LABS_SSH_KEY }}
          SECRET_VERCEL_ACCESS_TOKEN: ${{ secrets.VERCEL_ACCESS_TOKEN }}
          SECRET_SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SECRET_SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USERNAME }}
          SECRET_SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SECRET_PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          SECRET_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          SECRET_REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          SECRET_GONG_ACCESS_KEY: ${{ secrets.GONG_ACCESS_KEY }}
          SECRET_GONG_CLIENT_SECRET: ${{ secrets.GONG_CLIENT_SECRET }}
          SECRET_HUBSPOT_ACCESS_TOKEN: ${{ secrets.HUBSPOT_ACCESS_TOKEN }}
          SECRET_SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SECRET_LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          SECRET_ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
          SECRET_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SECRET_FIGMA_ACCESS_TOKEN: ${{ secrets.FIGMA_ACCESS_TOKEN }}
          SECRET_JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SECRET_ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          SECRET_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SECRET_DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}

      - name: Upload Validation Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secret-validation-report
          path: secret_validation_report.json

      - name: Create Issue if Secrets Missing
        if: failure() && steps.validate.outputs.missing_count > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('secret_validation_report.json', 'utf8'));

            const issueBody = `## üö® Missing Required Secrets Detected

            The secret sync workflow detected **${report.missing_required.length}** missing required secrets.

            ### Missing Secrets:
            ${report.missing_required.map(s => `- [ ] \`${s}\``).join('\n')}

            ### Action Required:
            1. Add missing secrets to GitHub Organization Secrets
            2. Use \`gh secret set <SECRET_NAME> --org ai-cherry\`
            3. Re-run the secret sync workflow

            ### Placeholder Secrets: ${report.placeholder_secrets.length}
            ${report.placeholder_secrets.map(([s, p]) => `- \`${s}\`: ${p}`).join('\n')}

            ---
            *This issue was automatically created by the Secret Sync workflow*`;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîê Missing Secrets: ${report.missing_required.length} required secrets not configured`,
              body: issueBody,
              labels: ['security', 'deployment-blocker', 'priority-critical']
            });
