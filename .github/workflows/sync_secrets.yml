name: Unified Secret Sync

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for running the workflow'
        required: true
        default: 'Manual sync of organization secrets to Pulumi ESC'
  push:
    branches: [main]
    paths:
      - 'scripts/unified_secret_sync.py'
      - '.github/workflows/sync_secrets.yml'

jobs:
  unified-secret-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          # Install dependencies if needed
          # uv pip install -r requirements.txt

      - name: Authenticate with Pulumi Cloud
        uses: pulumi/auth-actions@v1
        with:
          organization: scoobyjava-org
          requested-token-type: urn:pulumi:token-type:access_token:organization

      - name: Run Unified Secret Sync
        run: python scripts/unified_secret_sync.py
        env:
          PULUMI_ORG: scoobyjava-org
          
          # AI Services
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          MEM0_API_KEY: ${{ secrets.MEM0_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          PORTKEY_API_KEY: ${{ secrets.PORTKEY_API_KEY }}
          
          # Infrastructure
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
          LAMBDA_LABS_API_KEY: ${{ secrets.LAMBDA_LABS_API_KEY }}
          LAMBDA_LABS_SSH_PRIVATE_KEY: ${{ secrets.LAMBDA_LABS_SSH_PRIVATE_KEY }}
          LAMBDA_LABS_SSH_KEY_NAME: ${{ secrets.LAMBDA_LABS_SSH_KEY_NAME }}
          LAMBDA_LABS_REGION: ${{ secrets.LAMBDA_LABS_REGION }}
          LAMBDA_LABS_INSTANCE_TYPE: ${{ secrets.LAMBDA_LABS_INSTANCE_TYPE }}
          LAMBDA_LABS_CLUSTER_SIZE: ${{ secrets.LAMBDA_LABS_CLUSTER_SIZE }}
          LAMBDA_LABS_MAX_CLUSTER_SIZE: ${{ secrets.LAMBDA_LABS_MAX_CLUSTER_SIZE }}
          LAMBDA_LABS_SHARED_FS_ID: ${{ secrets.LAMBDA_LABS_SHARED_FS_ID }}
          LAMBDA_LABS_SHARED_FS_MOUNT: ${{ secrets.LAMBDA_LABS_SHARED_FS_MOUNT }}
          LAMBDA_LABS_ASG_NAME: ${{ secrets.LAMBDA_LABS_ASG_NAME }}

          # Snowflake
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USERNAME }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}

          # Business Intelligence
          GONG_ACCESS_KEY: ${{ secrets.GONG_ACCESS_KEY }}
          GONG_ACCESS_KEY_SECRET: ${{ secrets.GONG_ACCESS_KEY_SECRET }}
          HUBSPOT_API_KEY: ${{ secrets.HUBSPOT_API_KEY }}
          
          # Communication
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
          
          # Project Management
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
          NOTION_API_TOKEN: ${{ secrets.NOTION_API_TOKEN }}
          
          # Cloud Infrastructure
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          VERCEL_ACCESS_TOKEN: ${{ secrets.VERCEL_ACCESS_TOKEN }}
          
          # Development Tools
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_APP_ID: ${{ secrets.GITHUB_APP_ID }}
          GITHUB_APP_PRIVATE_KEY: ${{ secrets.GITHUB_APP_PRIVATE_KEY }}
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}
          
          # Data Infrastructure
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT }}
          WEAVIATE_API_KEY: ${{ secrets.WEAVIATE_API_KEY }}
          WEAVIATE_URL: ${{ secrets.WEAVIATE_URL }}
          ESTUARY_API_TOKEN: ${{ secrets.ESTUARY_API_TOKEN }}
          
          # Monitoring
          GRAFANA_PASSWORD: ${{ secrets.GRAFANA_PASSWORD }}
          
          # Design
          FIGMA_PAT: ${{ secrets.FIGMA_PAT }}
          FIGMA_PROJECT_ID: ${{ secrets.FIGMA_PROJECT_ID }}

      - name: Upload Sync Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sync-report
          path: sync_report.json
          retention-days: 30

      - name: Display Sync Summary
        if: always()
        run: |
          if [ -f sync_report.json ]; then
            echo "üìã Sync Report Summary:"
            echo "======================="
            cat sync_report.json | python -m json.tool
          else
            echo "‚ùå Sync report not found"
          fi

      - name: Notify on Failure
        if: failure()
        run: |
          echo "‚ùå Secret sync failed!"
          echo "Check the workflow logs and sync report for details."
          echo "Some secrets may not be available in the organization secrets."
