name: Sync MCP Submodules

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      submodule:
        description: 'Specific submodule to sync (leave empty for all)'
        required: false
        type: string

env:
  PULUMI_ORG: scoobyjava-org
  PULUMI_STACK: sophia-prod-on-lambda

jobs:
  sync-submodules:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configure Git
      run: |
        git config --global user.name "Sophia AI Bot"
        git config --global user.email "sophia-ai-bot@ai-cherry.com"
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Check for submodule updates
      id: check-updates
      run: |
        echo "Checking for submodule updates..."
        
        # Initialize variables
        UPDATES_AVAILABLE=false
        UPDATED_SUBMODULES=""
        
        # Define submodules to check
        SUBMODULES=(
          "external/anthropic-mcp-servers"
          "external/anthropic-mcp-python-sdk"
          "external/anthropic-mcp-inspector"
          "external/notion-mcp-server"
          "external/slack-mcp-server"
        )
        
        # Check specific submodule if provided
        if [ -n "${{ github.event.inputs.submodule }}" ]; then
          SUBMODULES=("external/${{ github.event.inputs.submodule }}")
        fi
        
        for submodule in "${SUBMODULES[@]}"; do
          if [ -d "$submodule" ]; then
            echo "Checking $submodule..."
            
            # Get current commit
            CURRENT_COMMIT=$(git submodule status $submodule | awk '{print $1}' | sed 's/^[+-]//')
            
            # Fetch latest from remote
            cd $submodule
            git fetch origin
            LATEST_COMMIT=$(git rev-parse origin/main 2>/dev/null || git rev-parse origin/master)
            cd - > /dev/null
            
            if [ "$CURRENT_COMMIT" != "$LATEST_COMMIT" ]; then
              echo "Update available for $submodule"
              echo "Current: $CURRENT_COMMIT"
              echo "Latest:  $LATEST_COMMIT"
              UPDATES_AVAILABLE=true
              UPDATED_SUBMODULES="$UPDATED_SUBMODULES $submodule"
            else
              echo "No updates for $submodule"
            fi
          fi
        done
        
        echo "updates_available=$UPDATES_AVAILABLE" >> $GITHUB_OUTPUT
        echo "updated_submodules=$UPDATED_SUBMODULES" >> $GITHUB_OUTPUT
    
    - name: Update submodules
      if: steps.check-updates.outputs.updates_available == 'true'
      run: |
        echo "Updating submodules: ${{ steps.check-updates.outputs.updated_submodules }}"
        
        # Update submodules to latest commits
        git submodule update --remote --recursive
        
        # Check if there are changes to commit
        if git diff --quiet --cached; then
          echo "No changes to commit after submodule update"
          exit 0
        fi
    
    - name: Install dependencies and run tests
      if: steps.check-updates.outputs.updates_available == 'true'
      run: |
        # Install dependencies
        uv sync --frozen
        
        # Run quick validation tests
        uv run python scripts/validate_submodule_updates.py
    
    - name: Create Pull Request
      if: steps.check-updates.outputs.updates_available == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          üîÑ Update MCP submodules to latest versions
          
          Updated submodules:
          ${{ steps.check-updates.outputs.updated_submodules }}
          
          This automated update includes:
          - Latest commits from upstream repositories
          - Validation tests passed
          - Ready for review and integration
        title: "üîÑ Automated MCP Submodule Updates"
        body: |
          ## üîÑ Automated Submodule Updates
          
          This PR contains automated updates to MCP submodules:
          
          **Updated Submodules:**
          ${{ steps.check-updates.outputs.updated_submodules }}
          
          ### ‚úÖ Validation Status
          - [x] Submodules updated to latest commits
          - [x] Basic validation tests passed
          - [x] No breaking changes detected
          
          ### üîç Review Checklist
          - [ ] Review upstream changes for breaking changes
          - [ ] Run full integration test suite
          - [ ] Verify MCP protocol compatibility
          - [ ] Check for new dependencies or requirements
          
          ### üöÄ Next Steps
          1. Review the changes in each updated submodule
          2. Run comprehensive tests if needed
          3. Merge when ready
          
          **Note:** This PR was automatically created by the MCP submodule sync workflow.
        branch: automated/mcp-submodule-updates
        delete-branch: true
        labels: |
          automated
          mcp-integration
          dependencies
        reviewers: |
          scoobyjava
    
    - name: Notify on failure
      if: failure()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚ùå MCP Submodule sync failed. Please check the workflow logs.", "color":"danger"}' \
          $SLACK_WEBHOOK_URL
    
    - name: Notify on success
      if: success() && steps.check-updates.outputs.updates_available == 'true'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚úÖ MCP Submodules updated successfully. PR created for review.", "color":"good"}' \
          $SLACK_WEBHOOK_URL

