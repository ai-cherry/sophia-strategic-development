name: Lambda Labs Deployment

on:
  push:
    branches:
      - main
      - 'feature/lambda-*'
    paths:
      - 'infrastructure/services/lambda_labs_*'
      - 'infrastructure/monitoring/lambda_labs_*'
      - 'mcp-servers/lambda_labs_unified/**'
      - 'infrastructure/pulumi/lambda_labs_*'
      - '.github/workflows/lambda-labs-deployment.yml'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'infrastructure/services/lambda_labs_*'
      - 'infrastructure/monitoring/lambda_labs_*'
      - 'mcp-servers/lambda_labs_unified/**'

env:
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  test:
    name: Test Lambda Labs Components
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Run tests
        run: |
          pytest tests/test_lambda_labs_*.py -v --cov=infrastructure --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: lambda-labs

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          pip install ruff mypy

      - name: Run ruff
        run: ruff check infrastructure/services/lambda_labs_* infrastructure/monitoring/lambda_labs_*

      - name: Run mypy
        run: mypy --strict --ignore-missing-imports infrastructure/services/lambda_labs_* infrastructure/monitoring/lambda_labs_*

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Pulumi
        run: |
          curl -fsSL https://get.pulumi.com | sh
          echo "$HOME/.pulumi/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: infrastructure/pulumi
        run: npm install

      - name: Deploy with Pulumi
        working-directory: infrastructure/pulumi
        run: |
          pulumi stack select sophia-ai-production
          pulumi up --yes

  deploy-mcp-server:
    name: Deploy MCP Server
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push MCP server
        uses: docker/build-push-action@v5
        with:
          context: mcp-servers/lambda_labs_unified
          push: true
          tags: |
            scoobyjava15/lambda-labs-mcp:latest
            scoobyjava15/lambda-labs-mcp:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    name: Notify Deployment
    needs: [deploy-infrastructure, deploy-mcp-server]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Lambda Labs Deployment ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
