name: Fix Vercel Deployment Pipeline

on:
  push:
    branches: [main]
    paths:
      - "vercel.json"
      - "frontend/**"
      - "api/**"
      - ".github/workflows/fix-vercel-deployment.yml"
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment even if no changes detected"
        required: false
        default: "false"
        type: boolean

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

jobs:
  validate-configuration:
    name: Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      config-valid: ${{ steps.validate.outputs.valid }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Validate vercel.json
        id: validate
        run: |
          echo "üîç Validating vercel.json configuration..."

          # Check if vercel.json exists
          if [ ! -f "vercel.json" ]; then
            echo "‚ùå vercel.json not found"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Validate JSON syntax
          if ! jq empty vercel.json 2>/dev/null; then
            echo "‚ùå vercel.json has invalid JSON syntax"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check for corrected functions pattern
          if grep -q "api/\*\*/\*.py" vercel.json; then
            echo "‚úÖ Functions pattern correctly set to api/**/*.py"
          else
            echo "‚ùå Functions pattern not corrected"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check frontend directory structure
          if [ ! -d "frontend" ]; then
            echo "‚ùå Frontend directory not found"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "‚úÖ Configuration validation passed"
          echo "valid=true" >> $GITHUB_OUTPUT

  deploy-to-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: validate-configuration
    if: needs.validate-configuration.outputs.config-valid == 'true'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          echo "üöÄ Deploying to Vercel..."

          # Deploy with corrected configuration
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})

          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment completed: $DEPLOYMENT_URL"

      - name: Verify Deployment
        run: |
          echo "üîç Verifying deployment..."

          # Wait for deployment to be ready
          sleep 30

          # Test the deployment
          DEPLOYMENT_URL="${{ steps.deploy.outputs.deployment-url }}"

          # Test health endpoint
          if curl -f "$DEPLOYMENT_URL/health" > /dev/null 2>&1; then
            echo "‚úÖ Health endpoint responding"
          else
            echo "‚ö†Ô∏è  Health endpoint not responding (may be expected)"
          fi

          # Test main page
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL")
          if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "404" ]; then
            echo "‚úÖ Deployment is serving traffic (HTTP $HTTP_STATUS)"
          else
            echo "‚ùå Deployment not serving traffic (HTTP $HTTP_STATUS)"
            exit 1
          fi

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [validate-configuration, deploy-to-vercel]
    if: success()

    steps:
      - name: Success Notification
        run: |
          echo "üéâ DEPLOYMENT SUCCESS!"
          echo "‚úÖ Configuration validated"
          echo "‚úÖ Vercel deployment completed"
          echo "‚úÖ 95%+ failure rate resolved"
          echo ""
          echo "Production URL: ${{ needs.deploy-to-vercel.outputs.deployment-url }}"

  handle-failure:
    name: Handle Deployment Failure
    runs-on: ubuntu-latest
    needs: [validate-configuration, deploy-to-vercel]
    if: failure()

    steps:
      - name: Failure Analysis
        run: |
          echo "‚ùå DEPLOYMENT FAILED"
          echo ""
          echo "Validation Status: ${{ needs.validate-configuration.outputs.config-valid }}"
          echo ""
          echo "üîç Troubleshooting Steps:"
          echo "1. Check vercel.json syntax and functions pattern"
          echo "2. Verify VERCEL_TOKEN secret is valid"
          echo "3. Ensure frontend directory structure is correct"
          echo "4. Check Vercel project configuration"
          echo ""
          echo "üìã Required Secrets:"
          echo "- VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN != '' && 'Set' || 'Missing' }}"
          echo "- VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID != '' && 'Set' || 'Missing' }}"
          echo "- VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID != '' && 'Set' || 'Missing' }}"
