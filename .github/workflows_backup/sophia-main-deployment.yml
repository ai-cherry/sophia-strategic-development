name: 🚀 Sophia AI - Single Source of Truth Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      target:
        description: 'Deployment target'
        required: true
        default: 'lambda-labs'
        type: choice
        options:
          - lambda-labs
          - lambda-labs-full
          - validation-only
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        default: false
        type: boolean

env:
  PULUMI_ORG: scoobyjava-org
  PULUMI_STACK: sophia-ai-production
  ENVIRONMENT: production
  LAMBDA_CLUSTER: 192.222.58.232
  DOCKER_REGISTRY: scoobyjava15

permissions:
  contents: read
  actions: read
  checks: read

jobs:
  # Phase 1: Pre-deployment validation
  validate:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      validation_passed: ${{ steps.validate.outputs.passed }}
      secret_count: ${{ steps.secrets.outputs.count }}
      
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🔑 Validate Critical Secrets
        id: secrets
        run: |
          echo "🔍 Validating GitHub Organization Secrets..."
          
          required_secrets=(
            "DOCKERHUB_USERNAME"
            "DOCKER_TOKEN" 
            "LAMBDA_API_KEY"
            "QDRANT_API_KEY"
            "OPENAI_API_KEY"
            "ANTHROPIC_API_KEY"
          )
          
          secret_count=0
          missing_secrets=()
          
          for secret in "${required_secrets[@]}"; do
            # Check if secret exists (length > 0)
            if [[ -n "${!secret:-}" ]]; then
              echo "✅ $secret: Available"
              ((secret_count++))
            else
              echo "❌ $secret: Missing"
              missing_secrets+=("$secret")
            fi
          done
          
          echo "count=$secret_count" >> $GITHUB_OUTPUT
          
          if [[ ${#missing_secrets[@]} -eq 0 ]]; then
            echo "✅ All required secrets available ($secret_count/6)"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Missing ${#missing_secrets[@]} secrets: ${missing_secrets[*]}"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
          QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          
      - name: 🔍 Validate Deployment Files
        id: validate
        run: |
          echo "🔍 Validating deployment configuration files..."
          
          errors=0
          
          # Check K3s manifests
          if [[ ! -d "k8s/production" ]]; then
            echo "❌ k8s/production directory not found"
            ((errors++))
          fi
          
          # Check Docker configuration
          if [[ ! -f "backend/Dockerfile" ]]; then
            echo "❌ backend/Dockerfile not found"
            ((errors++))
          fi
          
          # Check deployment scripts
          if [[ ! -f "scripts/deploy_sophia_production_complete.sh" ]]; then
            echo "❌ Main deployment script not found"
            ((errors++))
          fi
          
          if [[ $errors -eq 0 ]]; then
            echo "✅ All deployment files validated"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ $errors validation errors found"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Phase 2: Build and Push Images
  build:
    name: 🐳 Build & Push Images
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.validation_passed == 'true'
    timeout-minutes: 30
    
    outputs:
      backend_image: ${{ steps.backend.outputs.image }}
      frontend_image: ${{ steps.frontend.outputs.image }}
      
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      - name: 🏗️ Build Backend Image
        id: backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/sophia-backend:latest
            ${{ env.DOCKER_REGISTRY }}/sophia-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ env.ENVIRONMENT }}
            
      - name: 🌐 Build Frontend Image
        id: frontend
        uses: docker/build-push-action@v5
        with:
          context: frontend
          file: frontend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/sophia-frontend:latest
            ${{ env.DOCKER_REGISTRY }}/sophia-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Phase 3: Deploy to Lambda Labs
  deploy:
    name: ☸️ Deploy to Lambda Labs K3s
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: github.ref == 'refs/heads/main' && needs.validate.outputs.validation_passed == 'true'
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: 🔑 Configure K3s Access  
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/lambda_labs_key
          chmod 600 ~/.ssh/lambda_labs_key
          
          # Get kubeconfig from Lambda Labs server
          mkdir -p ~/.kube
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/lambda_labs_key ubuntu@${{ env.LAMBDA_CLUSTER }} \
            "sudo cat /etc/rancher/k3s/k3s.yaml" | \
            sed 's/127.0.0.1:6443/${{ env.LAMBDA_CLUSTER }}:6443/' > ~/.kube/config
          chmod 600 ~/.kube/config
          
          # Test connection
          kubectl cluster-info --request-timeout=30s
          kubectl get nodes
          
      - name: 🏗️ Deploy Infrastructure
        run: |
          echo "🏗️ Deploying K8s manifests..."
          
          # Apply namespace first
          kubectl apply -f k8s/base/namespace.yaml
          
          # Apply secrets (they should exist but ensure they're updated)
          kubectl apply -f k8s/base/secrets.yaml
          
          # Deploy core services
          kubectl apply -f k8s/production/
          
          echo "✅ Infrastructure deployment completed"
          
      - name: 🚀 Deploy Application
        run: |
          echo "🚀 Deploying Sophia AI application..."
          
          # Update image tags in deployment
          kubectl set image deployment/sophia-backend \
            sophia-backend=${{ env.DOCKER_REGISTRY }}/sophia-backend:${{ github.sha }} \
            -n sophia-ai-prod
            
          kubectl set image deployment/sophia-frontend \
            sophia-frontend=${{ env.DOCKER_REGISTRY }}/sophia-frontend:${{ github.sha }} \
            -n sophia-ai-prod
          
          # Wait for rollout
          kubectl rollout status deployment/sophia-backend -n sophia-ai-prod --timeout=300s
          kubectl rollout status deployment/sophia-frontend -n sophia-ai-prod --timeout=300s
          
          echo "✅ Application deployment completed"

  # Phase 4: Validation & Health Checks
  validate-deployment:
    name: ✅ Validate Deployment
    runs-on: ubuntu-latest
    needs: [validate, build, deploy]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: 🔑 Configure K3s Access
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/lambda_labs_key
          chmod 600 ~/.ssh/lambda_labs_key
          
          # Get kubeconfig from Lambda Labs server
          mkdir -p ~/.kube
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/lambda_labs_key ubuntu@${{ env.LAMBDA_CLUSTER }} \
            "sudo cat /etc/rancher/k3s/k3s.yaml" | \
            sed 's/127.0.0.1:6443/${{ env.LAMBDA_CLUSTER }}:6443/' > ~/.kube/config
          chmod 600 ~/.kube/config
          
      - name: 🔍 Health Check Services
        run: |
          echo "🔍 Checking deployment health..."
          
          # Check pod status
          kubectl get pods -n sophia-ai-prod
          
          # Check if pods are ready
          ready_pods=$(kubectl get pods -n sophia-ai-prod --field-selector=status.phase=Running -o name | wc -l)
          total_pods=$(kubectl get pods -n sophia-ai-prod -o name | wc -l)
          
          echo "📊 Pod Status: $ready_pods/$total_pods running"
          
          # Check service endpoints
          backend_status=$(kubectl get service sophia-backend -n sophia-ai-prod -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          if [[ "$backend_status" != "pending" ]]; then
            echo "✅ Backend service accessible at: $backend_status"
          else
            echo "⏳ Backend service still pending"
          fi
          
      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Secrets Validated**: ${{ needs.validate.outputs.secret_count }}/6" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Image**: ${{ needs.build.outputs.backend_image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Image**: ${{ needs.build.outputs.frontend_image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Cluster**: ${{ env.LAMBDA_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Access URLs" >> $GITHUB_STEP_SUMMARY
          echo "- Backend API: https://api.sophia-intel.ai" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: https://sophia-intel.ai" >> $GITHUB_STEP_SUMMARY
          echo "- API Docs: https://api.sophia-intel.ai/docs" >> $GITHUB_STEP_SUMMARY 