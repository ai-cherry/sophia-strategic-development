# Technical Debt Prevention Quality Gates
# Automated quality gates preventing technical debt accumulation

name: Technical Debt Prevention

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]

jobs:
  debt-prevention:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install UV
      run: pip install uv
      
    - name: Install dependencies
      run: uv sync
      
    - name: Run technical debt scanner
      run: |
        python scripts/technical_debt_prevention.py --mode=strict
        if [ $? -ne 0 ]; then
          echo "‚ùå Technical debt detected - PR blocked"
          exit 1
        fi
        
    - name: Validate file count
      run: |
        file_count=$(find . -type f -not -path "./.git/*" -not -path "./.venv/*" -not -path "./node_modules/*" | wc -l)
        if [ $file_count -gt 250 ]; then
          echo "‚ùå File count exceeds limit: $file_count > 250"
          exit 1
        fi
        echo "‚úÖ File count validation passed: $file_count files"
        
    - name: Validate repository size
      run: |
        repo_size=$(du -sm . | cut -f1)
        if [ $repo_size -gt 500 ]; then
          echo "‚ùå Repository size exceeds limit: ${repo_size}MB > 500MB"
          exit 1
        fi
        echo "‚úÖ Repository size validation passed: ${repo_size}MB"
        
    - name: Code quality analysis
      run: |
        # Run comprehensive code analysis
        python -m flake8 backend/ --max-line-length=88 --ignore=E203,E501,W503 || true
        python -m mypy backend/ --ignore-missing-imports || true
        python -m bandit -r backend/ -f json -o security_report.json || true
        
    - name: Test coverage validation
      run: |
        if command -v coverage &> /dev/null; then
          coverage run -m pytest || true
          coverage_percent=$(coverage report 2>/dev/null | tail -1 | awk '{print $4}' | tr -d '%' || echo "0")
          if [ "$coverage_percent" -lt 80 ] 2>/dev/null; then
            echo "‚ö†Ô∏è  Test coverage below threshold: ${coverage_percent}% < 80%"
          else
            echo "‚úÖ Test coverage validation passed: ${coverage_percent}%"
          fi
        else
          echo "‚ö†Ô∏è  Coverage tool not available, skipping test coverage validation"
        fi
        
    - name: Generate debt report
      run: |
        python scripts/technical_debt_prevention.py --mode=validate --output=debt_report.json
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let report;
          try {
            report = JSON.parse(fs.readFileSync('debt_report.json', 'utf8'));
          } catch (error) {
            console.log('Could not read debt report, creating default');
            report = {
              debt_score: 0,
              file_count: 0,
              repository_size_mb: 0,
              passed: true
            };
          }
          
          const debtStatus = report.debt_score < 20 ? '‚úÖ Excellent' : 
                            report.debt_score < 50 ? '‚ö†Ô∏è Moderate' : '‚ùå High';
          
          const comment = `
          ## üßπ Technical Debt Report
          
          **Debt Score:** ${report.debt_score}/100 (${debtStatus})
          
          **Quality Metrics:**
          - File Count: ${report.file_count}/250
          - Repository Size: ${report.repository_size_mb}MB/500MB
          - Code Quality: ${report.debt_score < 20 ? 'Excellent' : 'Needs Improvement'}
          
          **Prevention Status:** ${report.passed ? '‚úÖ All checks passed' : '‚ùå Issues detected'}
          
          ${report.debt_score > 20 ? '‚ö†Ô∏è **Action Required**: Technical debt score exceeds threshold' : ''}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 