name: Python CI Template

on:
  workflow_call:
    inputs:
      service-path:
        description: "Path to the service directory"
        required: true
        type: string
      python-version:
        description: "Python version to use"
        required: false
        type: string
        default: "3.12"
      run-tests:
        description: "Whether to run tests"
        required: false
        type: boolean
        default: true
      run-security:
        description: "Whether to run security scans"
        required: false
        type: boolean
        default: true

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          uv sync --frozen

      - name: Run Ruff linting
        run: |
          uv run ruff check ${{ inputs.service-path }}

      - name: Run type checking
        run: |
          uv run mypy ${{ inputs.service-path }} || true

      - name: Run tests
        if: ${{ inputs.run-tests }}
        run: |
          uv run pytest ${{ inputs.service-path }}/tests \
            --cov=${{ inputs.service-path }} \
            --cov-report=xml \
            --cov-report=term

      - name: Upload coverage
        if: ${{ inputs.run-tests }}
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: ${{ inputs.service-path }}
          name: ${{ inputs.service-path }}-coverage

  security-scan:
    if: ${{ inputs.run-security }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install dependencies
        run: |
          uv sync --frozen

      - name: Run pip-audit
        id: pip-audit
        run: |
          uv run pip-audit --format json --output audit-results.json || true

      - name: Run safety check
        id: safety
        run: |
          uv run safety check --json --output safety-results.json || true

      - name: Upload security results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ inputs.service-path }}
          path: |
            audit-results.json
            safety-results.json

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = '## üîí Security Scan Results\n\n';

            try {
              const auditResults = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
              const vulnerabilities = auditResults.vulnerabilities || [];

              if (vulnerabilities.length > 0) {
                comment += `### ‚ö†Ô∏è Found ${vulnerabilities.length} vulnerabilities\n\n`;
                comment += '| Package | Version | Vulnerability | Fix Version |\n';
                comment += '|---------|---------|---------------|-------------|\n';

                vulnerabilities.slice(0, 10).forEach(vuln => {
                  comment += `| ${vuln.name} | ${vuln.version} | ${vuln.id} | ${vuln.fix_versions?.join(', ') || 'N/A'} |\n`;
                });

                if (vulnerabilities.length > 10) {
                  comment += `\n*And ${vulnerabilities.length - 10} more...*\n`;
                }
              } else {
                comment += '### ‚úÖ No vulnerabilities found!\n';
              }
            } catch (e) {
              comment += '### ‚ö†Ô∏è Could not parse security results\n';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
