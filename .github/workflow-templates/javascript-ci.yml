name: JavaScript CI Template

on:
  workflow_call:
    inputs:
      service-path:
        description: "Path to the service directory"
        required: true
        type: string
      node-version:
        description: "Node.js version to use"
        required: false
        type: string
        default: "18.x"
      run-tests:
        description: "Whether to run tests"
        required: false
        type: boolean
        default: true
      run-build:
        description: "Whether to run build"
        required: false
        type: boolean
        default: true

jobs:
  lint-test-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "pnpm"

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache PNPM dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm turbo run lint --filter=${{ inputs.service-path }}

      - name: Run TypeScript check
        run: |
          cd ${{ inputs.service-path }}
          pnpm tsc --noEmit || true

      - name: Run tests
        if: ${{ inputs.run-tests }}
        run: |
          pnpm turbo run test --filter=${{ inputs.service-path }} -- --coverage

      - name: Upload test coverage
        if: ${{ inputs.run-tests }}
        uses: codecov/codecov-action@v4
        with:
          directory: ${{ inputs.service-path }}/coverage
          flags: ${{ inputs.service-path }}
          name: ${{ inputs.service-path }}-coverage

      - name: Build application
        if: ${{ inputs.run-build }}
        run: |
          pnpm turbo run build --filter=${{ inputs.service-path }}

      - name: Upload build artifacts
        if: ${{ inputs.run-build }}
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ inputs.service-path }}
          path: |
            ${{ inputs.service-path }}/dist
            ${{ inputs.service-path }}/build
            ${{ inputs.service-path }}/.next
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        id: npm-audit
        run: |
          pnpm audit --json > audit-results.json || true

      - name: Check for outdated packages
        run: |
          pnpm outdated --format json > outdated.json || true

      - name: Upload security results
        uses: actions/upload-artifact@v4
        with:
          name: npm-security-${{ inputs.service-path }}
          path: |
            audit-results.json
            outdated.json

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = '## 📦 JavaScript Dependency Analysis\n\n';

            try {
              const auditData = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
              const vulnerabilities = auditData.vulnerabilities || {};
              const vulnCount = Object.keys(vulnerabilities).length;

              if (vulnCount > 0) {
                comment += `### ⚠️ Found ${vulnCount} vulnerabilities\n\n`;

                let critical = 0, high = 0, moderate = 0, low = 0;
                Object.values(vulnerabilities).forEach(vuln => {
                  switch(vuln.severity) {
                    case 'critical': critical++; break;
                    case 'high': high++; break;
                    case 'moderate': moderate++; break;
                    case 'low': low++; break;
                  }
                });

                comment += `- 🔴 Critical: ${critical}\n`;
                comment += `- 🟠 High: ${high}\n`;
                comment += `- 🟡 Moderate: ${moderate}\n`;
                comment += `- 🟢 Low: ${low}\n`;
              } else {
                comment += '### ✅ No vulnerabilities found!\n';
              }
            } catch (e) {
              comment += '### ⚠️ Could not parse audit results\n';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
