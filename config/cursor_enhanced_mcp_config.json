{
  "version": "3.0",
  "name": "Sophia AI Enhanced Cursor IDE Integration",
  "description": "Advanced MCP configuration with 11-provider Portkey orchestration for Cursor IDE",
  "mcpServers": {
    "sophia_ai_orchestrator": {
      "command": "uv",
      "args": [
        "run",
        "python",
        "-m",
        "backend.mcp_servers.sophia_ai_orchestrator_mcp"
      ],
      "env": {
        "PORTKEY_API_KEY": "${PORTKEY_API_KEY}",
        "PORTKEY_VIRTUAL_KEY_PROD": "${PORTKEY_VIRTUAL_KEY_PROD}",
        "ENVIRONMENT": "prod",
        "MCP_SERVER_PORT": "9000",
        "CURSOR_IDE_INTEGRATION": "true"
      },
      "capabilities": [
        "intelligent_provider_routing",
        "real_time_cost_optimization",
        "code_generation_optimization",
        "context_aware_completions",
        "performance_monitoring"
      ],
      "auto_triggers": {
        "on_file_save": [
          "analyze_code",
          "suggest_optimizations"
        ],
        "on_selection": [
          "provide_context_completion"
        ],
        "on_error": [
          "suggest_fixes",
          "route_to_best_model"
        ]
      }
    },
    "enhanced_ai_memory": {
      "command": "uv",
      "args": [
        "run",
        "python",
        "-m",
        "backend.mcp_servers.ai_memory.enhanced_ai_memory_mcp_server"
      ],
      "env": {
        "OPENAI_API_KEY": "${OPENAI_API_KEY}",
        "PINECONE_API_KEY": "${PINECONE_API_KEY}",
        "ENVIRONMENT": "prod",
        "MCP_SERVER_PORT": "9001",
        "MEMORY_PERSISTENCE": "true"
      },
      "capabilities": [
        "code_pattern_learning",
        "architecture_decision_storage",
        "bug_solution_recall",
        "context_aware_suggestions",
        "development_workflow_optimization"
      ],
      "auto_triggers": {
        "on_code_completion": [
          "recall_similar_patterns"
        ],
        "on_error_fix": [
          "store_solution_pattern"
        ],
        "on_architecture_discussion": [
          "store_decision_context"
        ]
      }
    },
    "portkey_gateway": {
      "command": "uv",
      "args": [
        "run",
        "python",
        "-m",
        "backend.mcp_servers.portkey_gateway_mcp"
      ],
      "env": {
        "PORTKEY_API_KEY": "${PORTKEY_API_KEY}",
        "PORTKEY_VIRTUAL_KEYS": "${PORTKEY_VIRTUAL_KEYS_JSON}",
        "ENVIRONMENT": "prod",
        "MCP_SERVER_PORT": "9002",
        "REAL_TIME_MONITORING": "true"
      },
      "capabilities": [
        "provider_status_monitoring",
        "cost_tracking_dashboard",
        "performance_analytics",
        "intelligent_routing_decisions",
        "fallback_management"
      ],
      "auto_triggers": {
        "on_provider_failure": [
          "switch_provider",
          "log_failure"
        ],
        "on_cost_threshold": [
          "optimize_routing",
          "alert_user"
        ],
        "on_performance_degradation": [
          "auto_scale",
          "route_to_faster_provider"
        ]
      }
    },
    "code_intelligence": {
      "command": "uv",
      "args": [
        "run",
        "python",
        "-m",
        "backend.mcp_servers.code_intelligence_mcp"
      ],
      "env": {
        "PORTKEY_VIRTUAL_KEY_DEEPSEEK": "${PORTKEY_VIRTUAL_KEY_DEEPSEEK}",
        "PORTKEY_VIRTUAL_KEY_QWEN": "${PORTKEY_VIRTUAL_KEY_QWEN}",
        "ENVIRONMENT": "prod",
        "MCP_SERVER_PORT": "9003",
        "CODE_ANALYSIS_MODE": "advanced"
      },
      "capabilities": [
        "optimized_code_generation",
        "architecture_recommendations",
        "performance_optimization",
        "security_analysis",
        "test_generation",
        "documentation_automation"
      ],
      "auto_triggers": {
        "on_code_change": [
          "analyze_complexity",
          "suggest_improvements"
        ],
        "on_function_creation": [
          "generate_tests",
          "add_documentation"
        ],
        "on_security_pattern": [
          "scan_vulnerabilities",
          "suggest_fixes"
        ]
      }
    },
    "business_intelligence": {
      "command": "uv",
      "args": [
        "run",
        "python",
        "-m",
        "backend.mcp_servers.business_intelligence_mcp"
      ],
      "env": {
        "PORTKEY_VIRTUAL_KEY_ANTHROPIC": "${PORTKEY_VIRTUAL_KEY_ANTHROPIC}",
        "PORTKEY_VIRTUAL_KEY_OPENAI": "${PORTKEY_VIRTUAL_KEY_OPENAI}",
        "SNOWFLAKE_ACCOUNT": "${SNOWFLAKE_ACCOUNT}",
        "ENVIRONMENT": "prod",
        "MCP_SERVER_PORT": "9004",
        "EXECUTIVE_MODE": "true"
      },
      "capabilities": [
        "strategic_analysis",
        "market_research",
        "competitive_intelligence",
        "financial_modeling",
        "executive_reporting",
        "decision_support"
      ],
      "auto_triggers": {
        "on_business_query": [
          "route_to_premium_model",
          "provide_strategic_context"
        ],
        "on_data_analysis": [
          "integrate_business_context",
          "generate_insights"
        ]
      }
    },
    "ai_memory": {
      "command": "uv",
      "args": [
        "run",
        "python",
        "mcp-servers/ai_memory/ai_memory_mcp_server.py"
      ],
      "cwd": "/Users/lynnmusil/sophia-main",
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org"
      }
    },
    "ag_ui": {
      "command": "uv",
      "args": [
        "run",
        "python",
        "mcp-servers/ag_ui/ag_ui_mcp_server.py"
      ],
      "cwd": "/Users/lynnmusil/sophia-main",
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org"
      }
    },
    "bright_data": {
      "command": "uv",
      "args": [
        "run",
        "python",
        "mcp-servers/bright_data/bright_data_mcp_server.py"
      ],
      "cwd": "/Users/lynnmusil/sophia-main",
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org"
      }
    },
    "codacy": {
      "command": "uv",
      "args": [
        "run",
        "python",
        "mcp-servers/codacy/codacy_mcp_server.py"
      ],
      "cwd": "/Users/lynnmusil/sophia-main",
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org"
      }
    },
    "asana": {
      "command": "uv",
      "args": [
        "run",
        "python",
        "mcp-servers/asana/asana_mcp_server.py"
      ],
      "cwd": "/Users/lynnmusil/sophia-main",
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org"
      }
    },
    "notion": {
      "command": "uv",
      "args": [
        "run",
        "python",
        "mcp-servers/notion/notion_mcp_server.py"
      ],
      "cwd": "/Users/lynnmusil/sophia-main",
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org"
      }
    }
  },
  "cursor_ide_integration": {
    "enhanced_completions": {
      "enabled": true,
      "provider_intelligence": true,
      "context_aware_routing": true,
      "cost_optimization": true,
      "performance_monitoring": true
    },
    "natural_language_commands": {
      "enabled": true,
      "commands": {
        "generate_code": {
          "trigger": "@generate",
          "route_to": "code_intelligence",
          "default_complexity": "complex",
          "cost_preference": "balanced"
        },
        "analyze_performance": {
          "trigger": "@analyze",
          "route_to": "code_intelligence",
          "default_complexity": "moderate",
          "cost_preference": "cost_optimized"
        },
        "business_context": {
          "trigger": "@business",
          "route_to": "business_intelligence",
          "default_complexity": "expert",
          "cost_preference": "quality_first"
        },
        "research_topic": {
          "trigger": "@research",
          "route_to": "sophia_ai_orchestrator",
          "default_complexity": "research",
          "cost_preference": "balanced"
        },
        "optimize_cost": {
          "trigger": "@optimize",
          "route_to": "portkey_gateway",
          "action": "analyze_cost_optimization"
        }
      }
    },
    "intelligent_routing": {
      "enabled": true,
      "routing_strategy": "task_complexity_based",
      "cost_awareness": true,
      "performance_priority": "balanced",
      "fallback_enabled": true,
      "provider_selection_criteria": {
        "code_tasks": [
          "deepseek",
          "qwen",
          "mistral"
        ],
        "business_tasks": [
          "anthropic",
          "openai"
        ],
        "research_tasks": [
          "perplexity",
          "grok"
        ],
        "fast_tasks": [
          "groq",
          "together"
        ],
        "creative_tasks": [
          "anthropic",
          "openai"
        ]
      }
    },
    "real_time_features": {
      "live_cost_tracking": true,
      "provider_health_monitoring": true,
      "performance_metrics": true,
      "quality_scoring": true,
      "usage_analytics": true
    }
  },
  "workflow_automation": {
    "development_workflows": {
      "code_review": {
        "triggers": [
          "file_save",
          "git_commit"
        ],
        "actions": [
          {
            "server": "code_intelligence",
            "action": "analyze_code_quality"
          },
          {
            "server": "enhanced_ai_memory",
            "action": "store_review_context"
          }
        ]
      },
      "bug_fixing": {
        "triggers": [
          "error_detection",
          "test_failure"
        ],
        "actions": [
          {
            "server": "enhanced_ai_memory",
            "action": "recall_similar_bugs"
          },
          {
            "server": "code_intelligence",
            "action": "suggest_fixes"
          },
          {
            "server": "sophia_ai_orchestrator",
            "action": "route_to_best_debugging_model"
          }
        ]
      },
      "architecture_decisions": {
        "triggers": [
          "architecture_discussion",
          "design_pattern_usage"
        ],
        "actions": [
          {
            "server": "enhanced_ai_memory",
            "action": "store_architecture_decision"
          },
          {
            "server": "business_intelligence",
            "action": "analyze_business_impact"
          }
        ]
      },
      "frontend_development": {
        "triggers": [
          "file_save",
          "component_creation"
        ],
        "sequence": [
          {
            "server": "ag_ui",
            "tool": "send_text_message",
            "description": "Stream development progress to UI"
          },
          {
            "server": "ag_ui",
            "tool": "update_ui_state",
            "description": "Update component state in real-time"
          }
        ]
      },
      "competitive_intelligence": {
        "triggers": [
          "market_research_request",
          "competitor_analysis"
        ],
        "sequence": [
          {
            "server": "bright_data",
            "tool": "monitor_competitor_pricing",
            "description": "Scrape competitor pricing data"
          },
          {
            "server": "bright_data",
            "tool": "market_research_scrape",
            "description": "Gather market intelligence"
          },
          {
            "server": "ai_memory",
            "tool": "store_memory",
            "parameters": {
              "category": "competitive_intelligence",
              "enhance_with_graphiti": true
            }
          }
        ]
      },
      "executive_insights": {
        "triggers": [
          "business_analysis",
          "strategic_planning"
        ],
        "sequence": [
          {
            "server": "ai_memory",
            "tool": "recall_memory",
            "parameters": {
              "category": "strategic_decisions",
              "use_graphiti_relationships": true
            }
          },
          {
            "server": "ag_ui",
            "tool": "send_business_insight",
            "description": "Stream insights to executive dashboard"
          }
        ]
      }
    }
  },
  "cost_management": {
    "budget_controls": {
      "daily_limit": 25.0,
      "hourly_limit": 5.0,
      "per_request_limit": 0.5
    },
    "optimization_strategies": {
      "cache_responses": true,
      "prefer_cost_efficient_providers": true,
      "batch_similar_requests": true,
      "smart_context_compression": true
    },
    "alerting": {
      "cost_threshold_alerts": true,
      "usage_pattern_analysis": true,
      "provider_cost_comparison": true
    }
  },
  "performance_monitoring": {
    "metrics": {
      "response_time": true,
      "token_usage": true,
      "cost_per_request": true,
      "provider_success_rate": true,
      "quality_scores": true
    },
    "dashboards": {
      "real_time_status": true,
      "cost_analytics": true,
      "performance_trends": true,
      "provider_comparison": true
    },
    "optimization": {
      "auto_provider_selection": true,
      "performance_based_routing": true,
      "predictive_scaling": true
    }
  },
  "advanced_capabilities": {
    "context_sharing": {
      "cross_server_context": true,
      "persistent_memory": true,
      "session_continuity": true
    },
    "collaborative_features": {
      "team_memory_sharing": true,
      "shared_cost_tracking": true,
      "collaborative_optimization": true
    },
    "ai_artifacts_integration": {
      "code_generation": true,
      "documentation_creation": true,
      "test_generation": true,
      "ui_mockups": false
    }
  },
  "security_configuration": {
    "credential_management": {
      "use_environment_variables": true,
      "secure_credential_storage": true,
      "automatic_rotation_support": true
    },
    "data_protection": {
      "pii_detection": true,
      "sensitive_data_masking": true,
      "audit_logging": true
    },
    "access_control": {
      "role_based_access": true,
      "feature_gating": true,
      "usage_monitoring": true
    }
  },
  "deployment_configuration": {
    "environment": "prod",
    "health_check_interval": 60,
    "auto_restart_on_failure": true,
    "log_level": "INFO",
    "metrics_collection": true
  },
  "auto_triggers": {
    "on_file_save": [
      {
        "server": "codacy",
        "tool": "analyze_file",
        "condition": "file_extension in ['.py', '.js', '.ts', '.jsx', '.tsx']"
      },
      {
        "server": "ai_memory",
        "tool": "auto_store_context",
        "condition": "always"
      }
    ],
    "on_commit": [
      {
        "server": "ai_memory",
        "tool": "store_memory",
        "parameters": {
          "category": "development_milestone",
          "auto_extract_entities": true
        }
      }
    ],
    "on_architecture_discussion": [
      {
        "server": "ai_memory",
        "tool": "store_memory",
        "parameters": {
          "category": "architecture_decision",
          "enhance_with_graphiti": true
        }
      }
    ]
  },
  "enhanced_features": {
    "ag_ui_integration": {
      "enabled": true,
      "real_time_streaming": true,
      "state_delta_updates": true,
      "human_in_the_loop": true,
      "business_insights": true,
      "websocket_port": 9001
    },
    "bright_data_intelligence": {
      "enabled": true,
      "competitive_monitoring": true,
      "market_research": true,
      "social_media_intelligence": true,
      "automated_scraping": true
    },
    "graphiti_knowledge_graph": {
      "enabled": true,
      "temporal_queries": true,
      "entity_relationships": true,
      "business_intelligence": true,
      "executive_insights": true,
      "influence_analysis": true
    },
    "unified_dashboard": {
      "ag_ui_streaming": true,
      "real_time_updates": true,
      "executive_kpis": true,
      "competitive_intelligence": true,
      "knowledge_graph_insights": true
    }
  },
  "natural_language_commands": {
    "frontend_commands": [
      "Update dashboard with latest KPIs",
      "Stream new business insight to CEO dashboard",
      "Show real-time sales progress",
      "Update component state with new data"
    ],
    "intelligence_commands": [
      "Monitor competitor pricing changes",
      "Scrape latest market research data",
      "Analyze competitor social media sentiment",
      "Extract business data from company website"
    ],
    "memory_commands": [
      "Find related business entities",
      "Show decision influence network",
      "Recall strategic decisions from last quarter",
      "Analyze entity relationships and impact"
    ]
  },
  "performance_optimization": {
    "concurrent_operations": true,
    "intelligent_caching": true,
    "state_delta_compression": true,
    "relationship_indexing": true,
    "real_time_sync": true
  }
}