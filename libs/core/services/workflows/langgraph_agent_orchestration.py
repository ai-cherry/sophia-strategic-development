from __future__ import annotations


import json
import logging
from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from typing import Any, TypedDict

logger = logging.getLogger(__name__)


class AgentStatus(Enum):
    """Status of agent execution"""
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    SKIPPED = "skipped"
    """State shared across all agents in the workflow"""
    """Call Analysis Agent for processing Gong call data"""
    name: str = "call_analysis_agent"
    description: str = "Analyzes Gong call data for insights and patterns"
        """Initialize services"""
            logger.info("✅ Qdrant services initialized"
            logger.error(f"❌ Failed to initialize Qdrant services: {e}"
            logger.info("✅ Call Analysis Agent initialized"
            logger.exception(f"Failed to initialize Call Analysis Agent: {e}"
        """Analyze all calls related to a specific deal"""
                "status": "completed"
                "call_count"
                "calls_analyzed"
                "overall_assessment": "Placeholder - needs Qdrant integration"
                "metrics"
                    "avg_sentiment"
                    "avg_talk_ratio"
                    "sentiment_trend": "neutral"
                    "talk_ratio_assessment": "needs_improvement"
                "top_topics"
                "call_insights"
                "recommendations"
            logger.exception(f"Error analyzing deal calls: {e}"
            return {"status": "error", "error": str(e), "call_count": 0, "insights"
    """Supervisor Agent for orchestrating the workflow"""
    name: str = "supervisor_agent"
    description: str = "Orchestrates deal analysis workflow and consolidates insights"
            logger.info("✅ Qdrant services initialized"
            logger.error(f"❌ Failed to initialize Qdrant services: {e}"
        """Initialize services"""
            logger.info("✅ Supervisor Agent initialized"
            logger.exception(f"Failed to initialize Supervisor Agent: {e}"
        """Plan the analysis workflow based on the request"""
            state["supervisor_status"
            state["next_action"] = "sales_coach_analysis"
            logger.info(f"Analysis planned for deal {state['deal_id']}"
            logger.exception(f"Error planning analysis: {e}"
            state["error_messages"].append(f"Planning error: {e!s}"
            state["supervisor_status"
            state["next_action"] = "error_handling"
        """Consolidate findings from all agents into final recommendations"""
            state["consolidated_findings"
                "executive_summary": "Placeholder - needs Qdrant integration"
                "deal_health_score"
                "key_metrics"
                    "call_sentiment"
                    "call_count"
                    "deal_value"
                    "deal_stage": "Unknown"
                "analysis_timestamp"
state["recommendations"
            state["completed_at"
            state["next_action"] = "complete"
logger.info(f"Consolidated findings for deal {state['deal_id']}"
            logger.exception(f"Error consolidating findings: {e}"
            state["error_messages"].append(f"Consolidation error: {e!s}"
            state["next_action"] = "error_handling"
    """LangGraph workflow orchestrator for deal analysis"""
        """Initialize the workflow orchestrator"""
            logger.info("✅ LangGraph Workflow Orchestrator initialized"
            logger.exception(f"Failed to initialize workflow orchestrator: {e}"
        """Analyze a deal using the LangGraph workflow"""
                "deal_id"
                "analysis_type": "comprehensive"
                "user_request": f"Analyze deal {deal_id}"
                "supervisor_status"
                "sales_coach_status"
                "call_analysis_status"
                "workflow_id": f"workflow_{deal_id}_{datetime.now().isoformat()}"
                "started_at"
                "completed_at"
                "error_messages"
                "next_action": "supervisor_planning"
if state["next_action"] != "error_handling"
                state["sales_coach_status"
                state["call_analysis_status"
                "workflow_id": state["workflow_id"
                "status": "completed" if state["next_action"] == "complete" else "failed"
                "deal_id"
                "findings": state.get("consolidated_findings"
                "recommendations": state.get("recommendations"
                "error_messages": state["error_messages"
                "execution_time": (datetime.now() - state["started_at"
            logger.exception(f"Error in deal analysis workflow: {e}"
                "workflow_id": f"failed_{deal_id}"
                "status": "error"
                "deal_id"
                "error"
                "findings"
                "recommendations"
                "error_messages"
                "execution_time"
    """Run the complete deal analysis workflow"""