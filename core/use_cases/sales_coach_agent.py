from __future__ import annotations

"""
Enhanced Sales Coach Agent with Snowflake Cortex Integration

This agent provides AI-powered sales coaching based on Gong call data analyzed
through Snowflake Cortex, combined with HubSpot deal context for comprehensive insights.
"""

"""
File Decomposition Plan (auto-generated by Phase 3)
Current size: 727 lines

Recommended decomposition:
- sales_coach_agent_core.py - Core functionality
- sales_coach_agent_utils.py - Utility functions
- sales_coach_agent_models.py - Data models
- sales_coach_agent_handlers.py - Request handlers

TODO: Implement file decomposition
"""

import logging
from dataclasses import dataclass
from datetime import datetime, timedelta
from enum import Enum
from typing import Any

from core.agents.base_agent import BaseAgent
from infrastructure.mcp_servers.enhanced_ai_memory_mcp_server import (
    EnhancedAiMemoryMCPServer,
)
from shared.utils.snowflake_cortex_service import SnowflakeCortexService
from shared.utils.snowflake_gong_connector import SnowflakeGongConnector
from shared.utils.snowflake_hubspot_connector import SnowflakeHubSpotConnector

logger = logging.getLogger(__name__)


class CoachingPriority(Enum):
    """Priority levels for coaching recommendations"""

    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"


class CoachingCategory(Enum):
    """Categories of coaching recommendations"""

    SENTIMENT_IMPROVEMENT = "sentiment_improvement"
    TALK_RATIO_BALANCE = "talk_ratio_balance"
    DISCOVERY_SKILLS = "discovery_skills"
    CLOSING_TECHNIQUES = "closing_techniques"
    OBJECTION_HANDLING = "objection_handling"
    RELATIONSHIP_BUILDING = "relationship_building"
    PRODUCT_KNOWLEDGE = "product_knowledge"
    NEGOTIATION_SKILLS = "negotiation_skills"


@dataclass
class CallAnalysisResult:
    """Result from comprehensive call analysis"""

    call_id: str
    call_title: str
    sales_rep: str
    call_datetime: datetime
    duration_seconds: int

    # Cortex-derived insights
    overall_sentiment: float
    sentiment_category: str
    talk_ratio: float
    cortex_summary: str
    speaker_sentiments: dict[str, float]
    key_topics: list[str]

    # HubSpot context
    deal_id: str | None = None
    deal_stage: str | None = None
    deal_value: float | None = None
    company_name: str | None = None

    # Analysis metadata
    confidence_score: float = 0.0
    analysis_timestamp: datetime = datetime.now()


@dataclass
class CoachingRecommendation:
    """Individual coaching recommendation"""

    category: CoachingCategory
    priority: CoachingPriority
    title: str
    description: str
    specific_feedback: str
    suggested_actions: list[str]
    confidence_score: float

    # Context
    call_id: str
    deal_context: str | None = None
    supporting_evidence: list[str] = None


class SalesCoachAgent(BaseAgent):
    """
    Enhanced Sales Coach Agent with Snowflake Cortex integration

    Provides AI-powered sales coaching based on:
    - Gong call analysis via Snowflake Cortex
    - HubSpot deal context for strategic insights
    - Historical pattern analysis
    - Personalized coaching recommendations
    """

    def __init__(self):
        super().__init__()
        self.name = "sales_coach"
        self.description = "AI-powered sales coaching with Snowflake Cortex insights"

        # Snowflake integrations
        self.cortex_service: SnowflakeCortexService | None = None
        self.gong_connector: SnowflakeGongConnector | None = None
        self.hubspot_connector: SnowflakeHubSpotConnector | None = None
        self.ai_memory: EnhancedAiMemoryMCPServer | None = None

        self.initialized = False

    async def initialize(self) -> None:
        """Initialize Snowflake Cortex services and AI Memory"""
        if self.initialized:
            return

        try:
            self.cortex_service = SnowflakeCortexService()
            self.gong_connector = SnowflakeGongConnector()
            self.hubspot_connector = SnowflakeHubSpotConnector()
            self.ai_memory = EnhancedAiMemoryMCPServer()

            await self.ai_memory.initialize()

            self.initialized = True
            logger.info("âœ… Sales Coach Agent initialized with Snowflake Cortex")

        except Exception as e:
            logger.error(f"Failed to initialize Sales Coach Agent: {e}")
            raise

    async def analyze_call_with_cortex(self, call_id: str) -> CallAnalysisResult | None:
        """
        Perform comprehensive call analysis using Snowflake Cortex

        Args:
            call_id: Gong call ID to analyze

        Returns:
            Comprehensive call analysis with Cortex insights
        """
        if not self.initialized:
            await self.initialize()

        try:
            # Get call data from Snowflake
            async with self.gong_connector as connector:
                call_data = await connector.get_call_analysis_data(
                    call_id=call_id, include_full_transcript=True
                )

                if not call_data:
                    logger.warning(f"No call data found for call_id: {call_id}")
                    return None

            # Generate Cortex insights
            async with self.cortex_service as cortex:
                # Generate comprehensive call summary
                summary_prompt = f"""
                Analyze this sales call and provide key insights:

                Call: {call_data.get("CALL_TITLE", "Unknown")}
                Sales Rep: {call_data.get("PRIMARY_USER_NAME", "Unknown")}
                Duration: {call_data.get("CALL_DURATION_SECONDS", 0)} seconds
                Participants: {call_data.get("PARTICIPANT_LIST", "Unknown")}

                Current metrics:
                - Overall sentiment: {call_data.get("SENTIMENT_SCORE", 0):.2f}
                - Talk ratio: {call_data.get("TALK_RATIO", 0):.2f}
                - Questions asked: {call_data.get("QUESTIONS_ASKED_COUNT", 0)}

                Provide analysis on:
                1. Call effectiveness and key outcomes
                2. Sales rep performance strengths
                3. Areas for improvement
                4. Customer engagement level
                5. Next steps and follow-up recommendations
                """

                cortex_summary = await cortex.complete_text_with_cortex(
                    prompt=summary_prompt, max_tokens=400
                )

                # Analyze sentiment per speaker if transcript available
                speaker_sentiments = {}
                if call_data.get("full_transcript"):
                    transcript_segments = call_data["full_transcript"]
                    for segment in transcript_segments[
                        :10
                    ]:  # Analyze first 10 segments
                        speaker = segment.get("SPEAKER_NAME", "Unknown")
                        if speaker not in speaker_sentiments:
                            speaker_sentiments[speaker] = []
                        speaker_sentiments[speaker].append(
                            segment.get("SEGMENT_SENTIMENT", 0)
                        )

                    # Average sentiments per speaker
                    speaker_sentiments = {
                        speaker: sum(sentiments) / len(sentiments)
                        for speaker, sentiments in speaker_sentiments.items()
                        if sentiments
                    }

                # Extract key topics using Cortex
                if call_data.get("full_transcript"):
                    topic_prompt = "Extract the top 5 key topics discussed in this sales call. Return as a comma-separated list."
                    transcript_text = " ".join(
                        [
                            segment.get("TRANSCRIPT_TEXT", "")
                            for segment in call_data["full_transcript"][
                                :20
                            ]  # First 20 segments
                        ]
                    )

                    topics_result = await cortex.complete_text_with_cortex(
                        prompt=f"{topic_prompt}\n\nTranscript: {transcript_text[:2000]}",
                        max_tokens=100,
                    )

                    key_topics = (
                        [
                            topic.strip()
                            for topic in topics_result.split(",")
                            if topic.strip()
                        ]
                        if topics_result
                        else []
                    )
                else:
                    key_topics = []

            # Get HubSpot deal context if available
            deal_context = await self._get_deal_context(
                call_data.get("HUBSPOT_DEAL_ID")
            )

            # Create analysis result
            analysis = CallAnalysisResult(
                call_id=call_id,
                call_title=call_data.get("CALL_TITLE", "Unknown"),
                sales_rep=call_data.get("PRIMARY_USER_NAME", "Unknown"),
                call_datetime=call_data.get("CALL_DATETIME_UTC", datetime.now()),
                duration_seconds=call_data.get("CALL_DURATION_SECONDS", 0),
                overall_sentiment=call_data.get("SENTIMENT_SCORE", 0),
                sentiment_category=self._categorize_sentiment(
                    call_data.get("SENTIMENT_SCORE", 0)
                ),
                talk_ratio=call_data.get("TALK_RATIO", 0),
                cortex_summary=cortex_summary or "Analysis not available",
                speaker_sentiments=speaker_sentiments,
                key_topics=key_topics,
                deal_id=call_data.get("HUBSPOT_DEAL_ID"),
                deal_stage=deal_context.get("stage") if deal_context else None,
                deal_value=deal_context.get("value") if deal_context else None,
                company_name=deal_context.get("company") if deal_context else None,
                confidence_score=0.9,
            )

            # Store analysis in AI Memory
            await self.ai_memory.store_gong_call_insight(
                call_id=call_id,
                insight_content=cortex_summary,
                deal_id=analysis.deal_id,
                call_type="analyzed",
                tags=["cortex_analysis", "sales_coaching"] + key_topics[:3],
                use_cortex_analysis=True,
            )

            logger.info(f"Completed Cortex analysis for call {call_id}")
            return analysis

        except Exception as e:
            logger.error(f"Error analyzing call {call_id} with Cortex: {e}")
            return None

    def _error_handling_1(self):
        """Extracted error_handling logic"""
                # Sentiment-based coaching
                if analysis.overall_sentiment < 0.3:
                    recommendations.append(
                        CoachingRecommendation(
                            category=CoachingCategory.SENTIMENT_IMPROVEMENT,
                            priority=CoachingPriority.HIGH,
                            title="Improve Call Sentiment",
                            description=f"Call sentiment was {analysis.sentiment_category} ({analysis.overall_sentiment:.2f})",
                            specific_feedback=f"The overall tone of your call with {analysis.company_name or 'the prospect'} was below optimal. Focus on building rapport and addressing concerns proactively.",
                            suggested_actions=[
                                "Start calls with genuine interest in the prospect's business",
                                "Ask open-ended questions to understand their challenges",
                                "Acknowledge concerns before addressing them",
                                "Use positive language and avoid industry jargon",
                                "Practice active listening and summarize their key points",

    def _iteration_2(self):
        """Extracted iteration logic"""
                        sentiment = analysis.speaker_sentiments[speaker]
                        if sentiment < 0.2:
                            recommendations.append(
                                CoachingRecommendation(
                                    category=CoachingCategory.OBJECTION_HANDLING,
                                    priority=CoachingPriority.HIGH,
                                    title=f"Address {speaker}'s Concerns",
                                    description=f"{speaker} showed negative sentiment ({sentiment:.2f})",
                                    specific_feedback=f"{speaker} appears to have concerns that weren't fully addressed during the call.",
                                    suggested_actions=[
                                        f"Follow up directly with {speaker} to understand their concerns",
                                        "Schedule a separate conversation to address their specific needs",
                                        "Provide additional resources or case studies relevant to their role",
                                        "Involve a technical expert if needed",
                                        "Acknowledge their concerns and provide specific solutions",

    async def generate_coaching_recommendations(
        self, analysis: CallAnalysisResult, historical_context: bool = True
    ) -> list[CoachingRecommendation]:
        """
        Generate personalized coaching recommendations based on call analysis

        Args:
            analysis: Call analysis result from Cortex
            historical_context: Whether to include historical pattern analysis

        Returns:
            List of prioritized coaching recommendations
        """
        recommendations = []

        self._error_handling_1()
                        ],
                        confidence_score=0.9,
                        call_id=analysis.call_id,
                        deal_context=(
                            f"Deal stage: {analysis.deal_stage}, Value: ${analysis.deal_value:,.2f}"
                            if analysis.deal_value
                            else None
                        ),
                        supporting_evidence=[
                            f"Overall sentiment score: {analysis.overall_sentiment:.2f}",
                            "Multiple negative sentiment segments detected in transcript",
                        ],
                    )
                )

            # Talk ratio coaching
            if analysis.talk_ratio > 0.7:
                recommendations.append(
                    CoachingRecommendation(
                        category=CoachingCategory.DISCOVERY_SKILLS,
                        priority=CoachingPriority.HIGH,
                        title="Improve Discovery Through Listening",
                        description=f"Talk ratio was {analysis.talk_ratio:.1%} - too high for effective discovery",
                        specific_feedback="You dominated the conversation. Great sales reps listen more than they talk, especially in discovery calls.",
                        suggested_actions=[
                            "Use the 70/30 rule: prospect talks 70%, you talk 30%",
                            "Ask follow-up questions to dive deeper into their responses",
                            "Use silence strategically to encourage elaboration",
                            "Summarize what you hear before moving to next topic",
                            "Practice the SPIN selling methodology",
                        ],
                        confidence_score=0.95,
                        call_id=analysis.call_id,
                        deal_context=(
                            f"Deal stage: {analysis.deal_stage}"
                            if analysis.deal_stage
                            else None
                        ),
                        supporting_evidence=[
                            f"Talk ratio: {analysis.talk_ratio:.1%}",
                            "Limited prospect engagement in transcript",
                        ],
                    )
                )
            elif analysis.talk_ratio < 0.3:
                recommendations.append(
                    CoachingRecommendation(
                        category=CoachingCategory.RELATIONSHIP_BUILDING,
                        priority=CoachingPriority.MEDIUM,
                        title="Increase Engagement and Value Delivery",
                        description=f"Talk ratio was {analysis.talk_ratio:.1%} - may indicate low engagement",
                        specific_feedback="While listening is important, ensure you're providing enough value and guidance in the conversation.",
                        suggested_actions=[
                            "Share relevant insights about their industry",
                            "Provide examples of how you've helped similar companies",
                            "Ask permission to share your perspective",
                            "Summarize key points and confirm understanding",
                            "Guide the conversation toward next steps",
                        ],
                        confidence_score=0.8,
                        call_id=analysis.call_id,
                        deal_context=(
                            f"Deal stage: {analysis.deal_stage}"
                            if analysis.deal_stage
                            else None
                        ),
                    )
                )

            # Deal stage-specific coaching
            if analysis.deal_stage and analysis.deal_value:
                if "discovery" in analysis.deal_stage.lower():
                    if len(analysis.key_topics) < 3:
                        recommendations.append(
                            CoachingRecommendation(
                                category=CoachingCategory.DISCOVERY_SKILLS,
                                priority=CoachingPriority.MEDIUM,
                                title="Deepen Discovery Conversation",
                                description="Limited topics covered in discovery call",
                                specific_feedback=f"For a ${analysis.deal_value:,.0f} opportunity, you should explore more areas during discovery.",
                                suggested_actions=[
                                    "Cover business challenges, decision process, timeline, and budget",
                                    "Understand their current solution and pain points",
                                    "Identify key stakeholders and decision criteria",
                                    "Explore the cost of inaction",
                                    "Uncover compelling events driving urgency",
                                ],
                                confidence_score=0.8,
                                call_id=analysis.call_id,
                                deal_context=f"Discovery call for ${analysis.deal_value:,.0f} opportunity",
                            )
                        )

                elif "closing" in analysis.deal_stage.lower():
                    if analysis.overall_sentiment < 0.5:
                        recommendations.append(
                            CoachingRecommendation(
                                category=CoachingCategory.CLOSING_TECHNIQUES,
                                priority=CoachingPriority.CRITICAL,
                                title="Address Concerns Before Closing",
                                description="Negative sentiment in closing stage call",
                                specific_feedback=f"Sentiment is concerning for a closing call on a ${analysis.deal_value:,.0f} deal. Address objections first.",
                                suggested_actions=[
                                    "Identify and address remaining concerns",
                                    "Confirm value proposition alignment",
                                    "Review decision criteria and timeline",
                                    "Provide social proof and case studies",
                                    "Create urgency with limited-time incentives",
                                ],
                                confidence_score=0.95,
                                call_id=analysis.call_id,
                                deal_context=f"Closing stage: ${analysis.deal_value:,.0f} opportunity",
                                supporting_evidence=[
                                    f"Sentiment: {analysis.overall_sentiment:.2f} in closing stage",
                                    "Risk of deal stalling or lost",
                                ],
                            )
                        )

            # Speaker sentiment analysis
            if analysis.speaker_sentiments:
                prospect_speakers = [
                    speaker
                self._iteration_2()
                                ],
                                confidence_score=0.85,
                                call_id=analysis.call_id,
                                deal_context=f"Stakeholder: {speaker}",
                                supporting_evidence=[
                                    f"{speaker} sentiment: {sentiment:.2f}"
                                ],
                            )
                        )

            # Historical context recommendations
            if historical_context and self.ai_memory:
                similar_insights = await self.ai_memory.recall_gong_call_insights(
                    query=f"sales rep {analysis.sales_rep} coaching recommendations",
                    limit=3,
                )

                if similar_insights:
                    pattern_feedback = self._analyze_historical_patterns(
                        similar_insights, analysis
                    )
                    if pattern_feedback:
                        recommendations.append(pattern_feedback)

            # Sort by priority and confidence
            recommendations.sort(
                key=lambda x: (
                    {"critical": 4, "high": 3, "medium": 2, "low": 1}[x.priority.value],
                    x.confidence_score,
                ),
                reverse=True,
            )

            logger.info(
                f"Generated {len(recommendations)} coaching recommendations for call {analysis.call_id}"
            )
            return recommendations

        except Exception as e:
            logger.error(f"Error generating coaching recommendations: {e}")
            return recommendations

    async def create_coaching_summary(
        self,
        sales_rep: str,
        time_period_days: int = 30,
        include_action_plan: bool = True,
    ) -> dict[str, Any]:
        """
        Create comprehensive coaching summary for a sales rep

        Args:
            sales_rep: Sales representative name
            time_period_days: Days to analyze
            include_action_plan: Whether to include action plan

        Returns:
            Comprehensive coaching summary with insights and action plan
        """
        if not self.initialized:
            await self.initialize()

        try:
            # Get recent calls for the sales rep
            async with self.gong_connector as connector:
                rep_performance = await connector.get_sales_rep_performance(
                    sales_rep=sales_rep, date_range_days=time_period_days
                )

                coaching_calls = await connector.get_calls_for_coaching(
                    sales_rep=sales_rep,
                    date_range_days=time_period_days,
                    sentiment_threshold=0.5,
                    limit=10,
                )

            # Analyze patterns using Cortex
            async with self.cortex_service as cortex:
                performance_summary = await cortex.complete_text_with_cortex(
                    prompt=f"""
                    Analyze this sales rep's performance and provide coaching insights:

                    Sales Rep: {sales_rep}
                    Period: Last {time_period_days} days

                    Performance Metrics:
                    - Total calls: {rep_performance.get("TOTAL_CALLS", 0)}
                    - Average sentiment: {rep_performance.get("AVG_SENTIMENT", 0):.2f}
                    - Average talk ratio: {rep_performance.get("AVG_TALK_RATIO", 0):.2f}
                    - Win rate: {rep_performance.get("WIN_RATE", 0):.1f}%
                    - Revenue won: ${rep_performance.get("REVENUE_WON", 0):,.0f}

                    Coaching Needs:
                    - Sentiment coaching needed: {rep_performance.get("NEEDS_SENTIMENT_COACHING", 0)} calls
                    - Talk ratio coaching needed: {rep_performance.get("NEEDS_TALK_RATIO_COACHING", 0)} calls
                    - Discovery coaching needed: {rep_performance.get("NEEDS_DISCOVERY_COACHING", 0)} calls

                    Provide:
                    1. Overall performance assessment
                    2. Top 3 strengths
                    3. Top 3 improvement areas
                    4. Specific coaching priorities
                    """,
                    max_tokens=500,
                )

            # Get historical coaching insights
            coaching_history = await self.ai_memory.recall_gong_call_insights(
                query=f"coaching recommendations {sales_rep}", limit=5
            )

            # Create action plan if requested
            action_plan = []
            if include_action_plan:
                action_plan = [
                    {
                        "priority": "High",
                        "area": "Sentiment Improvement",
                        "actions": [
                            "Practice active listening techniques",
                            "Role-play difficult conversations",
                            "Review successful call recordings",
                        ],
                        "timeline": "2 weeks",
                        "success_metrics": [
                            "Sentiment score > 0.5",
                            "Reduced negative feedback",
                        ],
                    },
                    {
                        "priority": "Medium",
                        "area": "Discovery Skills",
                        "actions": [
                            "Use SPIN selling methodology",
                            "Prepare discovery question bank",
                            "Practice talk ratio management",
                        ],
                        "timeline": "1 month",
                        "success_metrics": [
                            "Talk ratio 30-50%",
                            "Deeper qualification",
                        ],
                    },
                ]

            summary = {
                "sales_rep": sales_rep,
                "analysis_period": f"{time_period_days} days",
                "generated_at": datetime.now().isoformat(),
                "performance_metrics": rep_performance,
                "cortex_analysis": performance_summary,
                "coaching_calls_analyzed": len(coaching_calls),
                "historical_insights": len(coaching_history),
                "action_plan": action_plan,
                "next_review_date": (datetime.now() + timedelta(days=14)).isoformat(),
                "confidence_score": 0.9,
            }

            # Store coaching summary in AI Memory
            await self.ai_memory.store_memory(
                content=f"Coaching summary for {sales_rep}: {performance_summary}",
                category="GONG_COACHING_RECOMMENDATION",
                tags=[
                    "coaching_summary",
                    sales_rep.lower().replace(" ", "_"),
                    "performance_analysis",
                ],
                importance_score=0.8,
            )

            logger.info(f"Created coaching summary for {sales_rep}")
            return summary

        except Exception as e:
            logger.error(f"Error creating coaching summary for {sales_rep}: {e}")
            return {"error": str(e), "sales_rep": sales_rep, "status": "failed"}

    async def _get_deal_context(self, deal_id: str | None) -> dict[str, Any] | None:
        """Get HubSpot deal context for call analysis"""
        if not deal_id or not self.hubspot_connector:
            return None

        try:
            async with self.hubspot_connector as connector:
                deals_data = await connector.query_hubspot_deals(limit=1)

                if not deals_data.empty:
                    deal_info = deals_data.iloc[0]
                    return {
                        "stage": deal_info.get("DEAL_STAGE"),
                        "value": deal_info.get("AMOUNT"),
                        "company": deal_info.get("COMPANY_NAME"),
                        "close_date": deal_info.get("CLOSE_DATE"),
                    }
        except Exception as e:
            logger.error(f"Error getting deal context for {deal_id}: {e}")

        return None

    def _categorize_sentiment(self, sentiment: float) -> str:
        """Categorize sentiment score into human-readable category"""
        if sentiment > 0.6:
            return "Very Positive"
        elif sentiment > 0.3:
            return "Positive"
        elif sentiment > -0.3:
            return "Neutral"
        elif sentiment > -0.6:
            return "Negative"
        else:
            return "Very Negative"

    def _analyze_historical_patterns(
        self,
        historical_insights: list[dict[str, Any]],
        current_analysis: CallAnalysisResult,
    ) -> CoachingRecommendation | None:
        """Analyze historical patterns to provide trend-based coaching"""
        if len(historical_insights) < 2:
            return None

        # Look for recurring issues
        sentiment_trend = [
            insight.get("sentiment_score", 0)
            for insight in historical_insights
            if insight.get("sentiment_score")
        ]

        if sentiment_trend and len(sentiment_trend) >= 3:
            avg_historical_sentiment = sum(sentiment_trend) / len(sentiment_trend)

            if current_analysis.overall_sentiment < avg_historical_sentiment - 0.2:
                return CoachingRecommendation(
                    category=CoachingCategory.SENTIMENT_IMPROVEMENT,
                    priority=CoachingPriority.HIGH,
                    title="Declining Sentiment Trend",
                    description="Sentiment declining compared to recent calls",
                    specific_feedback=f"Your recent call sentiment ({current_analysis.overall_sentiment:.2f}) is below your recent average ({avg_historical_sentiment:.2f}). Let's identify what's changed.",
                    suggested_actions=[
                        "Review recent successful calls to identify what worked",
                        "Practice objection handling for common concerns",
                        "Focus on building rapport early in calls",
                        "Prepare better discovery questions",
                        "Schedule role-play session with manager",
                    ],
                    confidence_score=0.8,
                    call_id=current_analysis.call_id,
                    supporting_evidence=[
                        f"Current sentiment: {current_analysis.overall_sentiment:.2f}",
                        f"Recent average: {avg_historical_sentiment:.2f}",
                        f"Based on {len(sentiment_trend)} recent calls",
                    ],
                )

        return None


# Agent factory function for AGNO integration
async def create_sales_coach_agent(config: dict[str, Any] = None) -> SalesCoachAgent:
    """Create and initialize a Sales Coach Agent instance"""
    agent = SalesCoachAgent()
    await agent.initialize()
    return agent
