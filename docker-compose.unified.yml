version: "3.8"

# Unified Docker Compose for Sophia AI
# Single source of truth for all deployments
# Use: docker stack deploy -c docker-compose.unified.yml sophia-ai

# Shared deployment configuration
x-default-deploy: &default-deploy
  mode: replicated
  replicas: ${REPLICAS:-2}
  update_config:
    parallelism: 1
    delay: 10s
    failure_action: rollback
    monitor: 60s
    max_failure_ratio: 0.3
  restart_policy:
    condition: on-failure
    delay: 5s
    max_attempts: 3
    window: 120s
  resources:
    limits:
      cpus: '2.0'
      memory: 4G
    reservations:
      cpus: '1.0'
      memory: 2G

x-default-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

x-default-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    labels: "service,environment,version"

services:
  # Main Sophia AI Backend
  backend:
    image: ${DOCKER_REGISTRY:-scoobyjava15}/sophia-ai:${IMAGE_TAG:-latest}
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-prod}
      - PULUMI_ORG=scoobyjava-org
      - PULUMI_ACCESS_TOKEN_FILE=/run/secrets/pulumi_access_token
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://sophia:${POSTGRES_PASSWORD}@postgres:5432/sophia
    ports:
      - target: 8000
        published: 8000
        mode: ingress
    secrets:
      - pulumi_access_token
      - postgres_password
    deploy:
      <<: *default-deploy
      replicas: ${BACKEND_REPLICAS:-3}
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.rule=Host(`api.sophia-intel.ai`)"
        - "traefik.http.routers.backend.tls=true"
        - "traefik.http.services.backend.loadbalancer.server.port=8000"
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
    logging: *default-logging
    networks:
      - sophia-net
      - traefik-public

  # MCP Gateway - Routes to all MCP servers
  mcp-gateway:
    image: ${DOCKER_REGISTRY:-scoobyjava15}/sophia-mcp-gateway:${IMAGE_TAG:-latest}
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-prod}
      - SERVICE_NAME=mcp_gateway
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - target: 8080
        published: 8080
        mode: ingress
    deploy:
      <<: *default-deploy
      replicas: ${GATEWAY_REPLICAS:-3}
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.mcp.rule=Host(`mcp.sophia-intel.ai`)"
        - "traefik.http.services.mcp.loadbalancer.server.port=8080"
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
    logging: *default-logging
    networks:
      - sophia-net
      - mcp-net

  # V2 MCP Services (conditionally deployed)
  ai_memory_v2:
    image: ${AI_MEMORY_V2_IMAGE:-scoobyjava15}/sophia-ai_memory_v2:${IMAGE_TAG:-latest}
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-prod}
      - SERVICE_NAME=ai_memory_v2
      - REDIS_URL=redis://redis:6379/0
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE:-SOPHIA_AI_COMPUTE_WH}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE:-SOPHIA_AI_PROD}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - target: 8000
        published: 9010
        mode: ingress
    secrets:
      - snowflake_creds
      - openai_key
    deploy:
      <<: *default-deploy
      replicas: ${AI_MEMORY_REPLICAS:-2}
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    logging: *default-logging
    networks:
      - mcp-net
    depends_on:
      - redis

  # Core Infrastructure Services
  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --appendonly yes
      --maxmemory ${REDIS_MEMORY:-512mb}
      --maxmemory-policy allkeys-lru
    ports:
      - target: 6379
        published: 6379
        mode: host
    volumes:
      - redis_data:/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sophia-net

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=sophia
      - POSTGRES_USER=sophia
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - target: 5432
        published: 5432
        mode: host
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sophia -d sophia"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sophia-net

  # Traefik - Load balancer and reverse proxy
  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmmode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.tlschallenge=true"
      - "--certificatesresolvers.le.acme.email=${ACME_EMAIL:-admin@sophia-intel.ai}"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--metrics.prometheus=true"
    ports:
      - target: 80
        published: 80
        mode: ingress
      - target: 443
        published: 443
        mode: ingress
      - target: 8080
        published: 8090
        mode: ingress
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - traefik-public
      - sophia-net

  # Monitoring Stack (optional)
  prometheus:
    image: prom/prometheus:latest
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    ports:
      - target: 9090
        published: 9090
        mode: ingress
    volumes:
      - prometheus_data:/prometheus
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    deploy:
      <<: *default-deploy
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - sophia-net
      - monitoring

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - target: 3000
        published: 3000
        mode: ingress
    secrets:
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
    deploy:
      <<: *default-deploy
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - sophia-net
      - monitoring

# Networks
networks:
  sophia-net:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"
  mcp-net:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"
  traefik-public:
    driver: overlay
    attachable: true
    external: true
  monitoring:
    driver: overlay
    attachable: true

# Volumes
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  traefik_letsencrypt:
    driver: local

# Secrets (all external from Docker Swarm)
secrets:
  pulumi_access_token:
    external: true
  postgres_password:
    external: true
  grafana_password:
    external: true
  snowflake_creds:
    external: true
  openai_key:
    external: true
  # Add more as needed for MCP servers
