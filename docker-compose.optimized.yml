version: '3.8'

# Sophia AI Optimized Docker Compose
# Implements ML/AI-specific optimizations:
# - Resource constraints tuned for ML workloads
# - Proper volume mounts for model artifacts
# - Enhanced health checks
# - Secrets management
# - GPU support (optional)

x-sophia-base-service: &sophia-base-service
  restart: unless-stopped
  networks:
    - sophia-net
  logging:
    driver: "json-file"
    options:
      max-size: "100m"
      max-file: "3"

x-sophia-resources: &sophia-base-resources
  deploy:
    resources:
      limits:
        cpus: '1'
        memory: 2G
      reservations:
        cpus: '0.5'
        memory: 1G

x-sophia-ml-resources: &sophia-ml-resources
  deploy:
    resources:
      limits:
        cpus: '2'
        memory: 4G
      reservations:
        cpus: '1'
        memory: 2G

x-sophia-heavy-ml-resources: &sophia-heavy-ml-resources
  deploy:
    resources:
      limits:
        cpus: '4'
        memory: 8G
      reservations:
        cpus: '2'
        memory: 4G

services:
  # Main API Service with ML capabilities
  sophia-api:
    <<: *sophia-base-service
    build:
      context: .
      dockerfile: Dockerfile.uv.optimized
      target: production
    image: sophia-ai/api:latest
    container_name: sophia-api
    <<: *sophia-ml-resources
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - HOST=0.0.0.0
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - PYTHONFAULTHANDLER=1
      - TRANSFORMERS_CACHE=/app/model-cache
      - TORCH_HOME=/app/model-cache
      - HF_HOME=/app/model-cache
      # Thread limits for ML optimization
      - OMP_NUM_THREADS=1
      - MKL_NUM_THREADS=1
      - NUMEXPR_NUM_THREADS=1
    volumes:
      - model-cache:/app/model-cache
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    depends_on:
      - redis
      - prometheus

  # Enhanced ML Gateway for Large Language Models
  ml-gateway:
    <<: *sophia-base-service
    build:
      context: .
      dockerfile: Dockerfile.uv.optimized
      target: production
    image: sophia-ai/ml-gateway:latest
    container_name: sophia-ml-gateway
    <<: *sophia-heavy-ml-resources
    ports:
      - "8003:8003"
    environment:
      - PORT=8003
      - HOST=0.0.0.0
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - TRANSFORMERS_CACHE=/app/model-cache
      - TORCH_HOME=/app/model-cache
      - HF_HOME=/app/model-cache
      # Thread limits for ML optimization
      - OMP_NUM_THREADS=4
      - MKL_NUM_THREADS=1
      # Memory optimization
      - MALLOC_TRIM_THRESHOLD_=100000
    volumes:
      - model-cache:/app/model-cache
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MCP Gateway (Model Context Protocol)
  mcp-gateway:
    <<: *sophia-base-service
    build:
      context: .
      dockerfile: Dockerfile.uv.optimized
      target: production
    image: sophia-ai/mcp-gateway:latest
    container_name: sophia-mcp-gateway
    <<: *sophia-base-resources
    ports:
      - "8090:8090"
    environment:
      - PORT=8090
      - HOST=0.0.0.0
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./mcp-config:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and model feature store
  redis:
    <<: *sophia-base-service
    image: redis:7-alpine
    container_name: sophia-redis
    ports:
      - "6379:6379"
    <<: *sophia-base-resources
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --loglevel warning --maxmemory 2gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for structured data
  postgres:
    <<: *sophia-base-service
    image: postgres:15-alpine
    container_name: sophia-postgres
    <<: *sophia-base-resources
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_DB=sophia
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Weaviate Vector Database for embeddings
  weaviate:
    <<: *sophia-base-service
    image: semitechnologies/weaviate:1.19.6
    container_name: sophia-weaviate
    <<: *sophia-ml-resources
    ports:
      - "8080:8080"
    environment:
      - QUERY_DEFAULTS_LIMIT=20
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=false
      - AUTHENTICATION_APIKEY_ENABLED=true
      - AUTHENTICATION_APIKEY_ALLOWED_KEYS_FILE=/run/secrets/weaviate_api_keys
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=text2vec-openai
    volumes:
      - weaviate_data:/var/lib/weaviate
    secrets:
      - weaviate_api_keys
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    <<: *sophia-base-service
    image: prom/prometheus:v2.45.0
    container_name: sophia-prometheus
    <<: *sophia-base-resources
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for ML performance visualization
  grafana:
    <<: *sophia-base-service
    image: grafana/grafana:10.0.3
    container_name: sophia-grafana
    <<: *sophia-base-resources
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    secrets:
      - grafana_admin_password
    depends_on:
      - prometheus

  # NGINX Reverse Proxy
  nginx:
    <<: *sophia-base-service
    image: nginx:1.25-alpine
    container_name: sophia-nginx
    <<: *sophia-base-resources
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - sophia-api
      - ml-gateway
      - mcp-gateway
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GPU-enabled ML service (optional, uncomment to use)
  # ml-gpu-service:
  #   <<: *sophia-base-service
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.uv.optimized
  #     target: production-gpu
  #   image: sophia-ai/ml-gpu:latest
  #   container_name: sophia-ml-gpu
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   ports:
  #     - "8004:8004"
  #   environment:
  #     - PORT=8004
  #     - HOST=0.0.0.0
  #     - ENVIRONMENT=production
  #     - REDIS_URL=redis://redis:6379/0
  #     - TRANSFORMERS_CACHE=/app/model-cache
  #     - TORCH_HOME=/app/model-cache
  #     - HF_HOME=/app/model-cache
  #     - NVIDIA_VISIBLE_DEVICES=all
  #     - TORCH_CUDA_ARCH_LIST="7.5;8.0;8.6+PTX"
  #     - OMP_NUM_THREADS=1
  #     - CUDA_LAUNCH_BLOCKING=0
  #   volumes:
  #     - model-cache:/app/model-cache
  #     - ./logs:/app/logs
  #     - ./data:/app/data
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 60s

networks:
  sophia-net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  weaviate_data:
  model-cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/model-cache  # Requires directory to exist on host
  prometheus_data:
  grafana_data:

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  weaviate_api_keys:
    file: ./secrets/weaviate_api_keys.json
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt