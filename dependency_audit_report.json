{
  "summary": {
    "total_imports": 1812,
    "internal_imports": 639,
    "external_imports": 1173,
    "missing_imports": 821,
    "circular_dependencies": 0,
    "files_analyzed": 939
  },
  "missing_imports": {
    "count": 821,
    "details": {
      "backend.integrations.enhanced_microsoft_gong_integration.EnhancedMicrosoftGongIntegration": {
        "locations": [
          "backend/agents/specialized/enhanced_sales_coach_agent.py"
        ],
        "type": "internal"
      },
      "backend.api.mcp_integration_routes.router": {
        "locations": [
          "backend/app/unified_api.py",
          "backend/app/unified_main.py",
          "backend/app/simple_unified_api.py"
        ],
        "type": "internal"
      },
      "backend.services.mcp_orchestration_service.orchestration_service": {
        "locations": [
          "backend/api/mcp_integration_routes.py",
          "backend/api/mcp_integration_routes.py",
          "backend/api/mcp_integration_routes.py",
          "backend/api/mcp_integration_routes.py",
          "backend/api/mcp_integration_routes.py",
          "scripts/validate_focus_area_implementation.py",
          "scripts/validate_focus_area_implementation.py",
          "scripts/validate_focus_area_implementation.py"
        ],
        "type": "internal"
      },
      "backend.core.cache_manager.CacheManager": {
        "locations": [
          "backend/api/foundational_knowledge_routes.py"
        ],
        "type": "internal"
      },
      "backend.services.kb_management_service.KBManagementService": {
        "locations": [
          "backend/api/kb_management_routes.py",
          "scripts/ceo_intelligence_ingestion_stub.py"
        ],
        "type": "internal"
      },
      "html2text": {
        "locations": [
          "backend/mcp_servers/optimized_mcp_server.py"
        ],
        "type": "external"
      },
      "backend.services.enhanced_unified_chat_service.app": {
        "locations": [
          "start_backend_services.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.base.standardized_mcp_server.ServerCapability": {
        "locations": [
          "mcp-servers/lambda_labs_cli/lambda_labs_cli_mcp_server.py",
          "mcp-servers/ui_ux_agent/ui_ux_agent_mcp_server.py",
          "mcp-servers/ai_memory/enhanced_ai_memory_server.py",
          "mcp-servers/portkey_admin/portkey_admin_mcp_server.py",
          "mcp-servers/codacy/enhanced_codacy_server.py",
          "mcp-servers/snowflake_cli_enhanced/snowflake_cli_enhanced_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.core.database.get_session": {
        "locations": [
          "backend/api/slack_linear_knowledge_routes.py",
          "backend/api/project_dashboard_routes.py",
          "backend/api/foundational_knowledge_routes.py"
        ],
        "type": "internal"
      },
      "mcp_server_time.main": {
        "locations": [
          "external/anthropic-mcp-servers/src/time/src/mcp_server_time/__main__.py"
        ],
        "type": "external"
      },
      "backend.application.ports.services.ai_service.AIService": {
        "locations": [
          "backend/application/use_cases/analyze_call_sentiment.py"
        ],
        "type": "internal"
      },
      "backend.services.smart_ai_service.TaskType": {
        "locations": [
          "backend/agents/specialized/sales_intelligence_agent.py",
          "backend/agents/specialized/marketing_analysis_agent.py",
          "backend/api/smart_ai_routes.py"
        ],
        "type": "internal"
      },
      "backend.core.security.get_current_user": {
        "locations": [
          "backend/app/modernized_fastapi_app.py"
        ],
        "type": "internal"
      },
      "sqlglot.errors": {
        "locations": [
          "external/dynamike_snowflake/snowflake_mcp_server/main.py"
        ],
        "type": "external"
      },
      "backend.services.mcp_orchestration_service.TaskPriority": {
        "locations": [
          "backend/workflows/enhanced_executive_tasks.py",
          "backend/api/mcp_integration_routes.py",
          "backend/services/group_aware_orchestration_enhancement.py",
          "backend/services/enhanced_mcp_orchestration_service.py"
        ],
        "type": "internal"
      },
      "clients.conversation_client": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/hubspot_client.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.server": {
        "locations": [
          "backend/mcp_servers/optimized_ai_memory_mcp_server.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py",
          "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py"
        ],
        "type": "internal"
      },
      "executive_chat_service": {
        "locations": [
          "backend/services/chat/__init__.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "backend.core.simple_config.get_config_value": {
        "locations": [
          "backend/app/main.py",
          "backend/app/_deprecated_apps/fastapi_app.py",
          "backend/services/enhanced_portkey_orchestrator.py",
          "backend/services/simplified_portkey_service.py"
        ],
        "type": "internal"
      },
      "models": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/__init__.py"
        ],
        "type": "external"
      },
      "simple_auth_provider": {
        "locations": [
          "external/anthropic-mcp-python-sdk/examples/servers/simple-auth/mcp_simple_auth/auth_server.py",
          "external/anthropic-mcp-python-sdk/examples/servers/simple-auth/mcp_simple_auth/legacy_as_server.py"
        ],
        "type": "external"
      },
      "backend.monitoring.mcp_metrics_collector.Alert": {
        "locations": [
          "backend/monitoring/mcp_monitoring_config.py"
        ],
        "type": "internal"
      },
      "backend.domain.value_objects.call_participant.ParticipantRole": {
        "locations": [
          "backend/infrastructure/persistence/repositories/snowflake_call_repository.py"
        ],
        "type": "internal"
      },
      "backend.services.intelligent_data_discovery_service.IntelligentDataDiscoveryService": {
        "locations": [
          "backend/services/sophia_universal_chat_service.py"
        ],
        "type": "internal"
      },
      "sqlparse.tokens": {
        "locations": [
          "external/isaacwasserman_snowflake/src/mcp_snowflake_server/write_detector.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.types": {
        "locations": [
          "backend/mcp_servers/sophia_mcp_base.py",
          "backend/mcp_servers/optimized_ai_memory_mcp_server.py",
          "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.adapters.slack_adapter.SlackAdapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.integrations.redis_service": {
        "locations": [
          "scripts/ai_enhanced_dns_manager.py"
        ],
        "type": "internal"
      },
      "freezegun": {
        "locations": [
          "external/anthropic-mcp-servers/src/time/test/time_server_test.py"
        ],
        "type": "external"
      },
      "models.chat_models.ChatRequest": {
        "locations": [
          "backend/services/chat/base_chat_service.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "utilities.types": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/__init__.py"
        ],
        "type": "external"
      },
      "call_repository": {
        "locations": [
          "backend/application/ports/repositories/__init__.py"
        ],
        "type": "external"
      },
      "backend.security.rbac.models.Permission": {
        "locations": [
          "tests/test_rbac.py",
          "backend/security/rbac/service.py",
          "backend/security/rbac/__init__.py",
          "backend/security/rbac/routes.py"
        ],
        "type": "internal"
      },
      "backend.services.unified_intelligence_service.get_unified_intelligence_service": {
        "locations": [
          "scripts/test_unified_intelligence.py"
        ],
        "type": "internal"
      },
      "pytest_examples.EvalExample": {
        "locations": [
          "external/anthropic-mcp-python-sdk/tests/test_examples.py"
        ],
        "type": "external"
      },
      "backend.agents.core.langgraph_agent_base.AgentContext": {
        "locations": [
          "backend/agents/integrations/gong_data_integration.py",
          "backend/agents/infrastructure/sophia_infrastructure_agent.py"
        ],
        "type": "internal"
      },
      "mcp_server_git": {
        "locations": [
          "external/anthropic-mcp-servers/src/git/src/mcp_server_git/__main__.py"
        ],
        "type": "external"
      },
      "examples.fastmcp.complex_inputs.mcp": {
        "locations": [
          "external/anthropic-mcp-python-sdk/tests/test_examples.py"
        ],
        "type": "external"
      },
      "backend.security.audit_logger.warning": {
        "locations": [
          "tests/test_audit_logging.py",
          "backend/security/rbac/dependencies.py"
        ],
        "type": "internal"
      },
      "backend.security.audit_logger.AuditLogger": {
        "locations": [
          "tests/test_audit_logging.py",
          "backend/workflows/enhanced_langgraph_orchestration.py",
          "backend/api/enhanced_unified_chat_routes.py",
          "backend/services/sophia_universal_chat_service.py",
          "backend/services/cost_engineering_service.py",
          "backend/services/enhanced_snowflake_cortex_service.py"
        ],
        "type": "internal"
      },
      "backend.services.sophia_universal_chat_service.IntentType": {
        "locations": [
          "tests/test_phase2_integration.py"
        ],
        "type": "internal"
      },
      "win32.terminate_windows_process": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/client/stdio/__init__.py"
        ],
        "type": "external"
      },
      "server.FastMCP": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/__init__.py"
        ],
        "type": "external"
      },
      "models.chat_models.ChatSession": {
        "locations": [
          "backend/services/chat/session_manager.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "backend.agents.integrations.optimized_gong_data_integration.OptimizedWorkflowType": {
        "locations": [
          "backend/app/_deprecated_apps/phase2_optimized_fastapi_app.py",
          "scripts/deploy_performance_optimizations.py"
        ],
        "type": "internal"
      },
      "gong_data_quality.CompletenessReport": {
        "locations": [
          "backend/monitoring/__init__.py"
        ],
        "type": "external"
      },
      "backend.core.optimized_database_manager.BatchOperation": {
        "locations": [
          "backend/etl/enhanced_unified_data_pipeline.py",
          "backend/etl/enhanced_ingestion_service.py"
        ],
        "type": "internal"
      },
      "websockets.typing": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/client/websocket.py"
        ],
        "type": "external"
      },
      "backend.services.comprehensive_memory_service.MemoryRecord": {
        "locations": [
          "mcp-servers/ai_memory/ai_memory_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.security.audit_logger.error": {
        "locations": [
          "tests/test_audit_logging.py",
          "backend/security/llm_audit.py",
          "backend/security/audit_middleware.py",
          "backend/security/rbac/service.py",
          "backend/security/ephemeral_credentials/service.py",
          "backend/security/ephemeral_credentials/middleware.py"
        ],
        "type": "internal"
      },
      "call.Call": {
        "locations": [
          "backend/domain/entities/__init__.py"
        ],
        "type": "external"
      },
      "providers.openai_provider": {
        "locations": [
          "backend/services/chat/__init__.py"
        ],
        "type": "external"
      },
      "backend.core.comprehensive_memory_manager.ComprehensiveMemoryManager": {
        "locations": [
          "mcp-servers/ai_memory/ai_memory_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.services.cost_engineering_service.cost_engineering_service": {
        "locations": [
          "tests/test_phase2_integration.py",
          "backend/services/enhanced_snowflake_cortex_service.py"
        ],
        "type": "internal"
      },
      "get_closed_ticket_conversations.get_closed_tickets": {
        "locations": [
          "mcp-servers/hubspot/tests/__init__.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.server.fastmcp.FastMCP": {
        "locations": [
          "backend/mcp_servers/enhanced_mcp_base.py",
          "mcp-servers/snowflake_cortex/production_snowflake_cortex_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.core.dependencies.get_current_user": {
        "locations": [
          "backend/api/enhanced_unified_chat_routes.py"
        ],
        "type": "internal"
      },
      "session_manager.SessionManager": {
        "locations": [
          "backend/services/chat/__init__.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "backend.security.rbac.dependencies.get_optional_user": {
        "locations": [
          "backend/security/rbac/__init__.py"
        ],
        "type": "internal"
      },
      "tzlocal.get_localzone_name": {
        "locations": [
          "external/anthropic-mcp-servers/src/time/src/mcp_server_time/server.py"
        ],
        "type": "external"
      },
      "utils.store_in_faiss": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/base_handler.py"
        ],
        "type": "external"
      },
      "backend.workflows.multi_agent_workflow.AgentRole": {
        "locations": [
          "backend/agents/specialized/sales_intelligence_agent.py"
        ],
        "type": "internal"
      },
      "mcp_server_git.main": {
        "locations": [
          "external/anthropic-mcp-servers/src/git/src/mcp_server_git/__main__.py"
        ],
        "type": "external"
      },
      "backend.core.optimized_connection_manager.ConnectionType": {
        "locations": [
          "backend/agents/integrations/optimized_gong_data_integration.py",
          "backend/utils/snowflake_cortex_service.py",
          "backend/utils/optimized_snowflake_cortex_service.py",
          "scripts/fix_snowflake_database_objects.py"
        ],
        "type": "internal"
      },
      "backend.services.simplified_portkey_service.TaskType": {
        "locations": [
          "backend/api/simplified_llm_routes.py"
        ],
        "type": "internal"
      },
      "ai_service": {
        "locations": [
          "backend/application/ports/services/__init__.py"
        ],
        "type": "external"
      },
      "backend.mcp.costar_mcp_server": {
        "locations": [
          "scripts/ingest_costar_data.py"
        ],
        "type": "internal"
      },
      "gemini_cli_integration.gemini_cli_provider": {
        "locations": [
          "backend/mcp_servers/optimized_mcp_server.py",
          "backend/mcp_servers/base/standardized_mcp_server.py"
        ],
        "type": "external"
      },
      "db_client": {
        "locations": [
          "external/isaacwasserman_snowflake/src/mcp_snowflake_server/server.py"
        ],
        "type": "external"
      },
      "backend.services.sophia_ai_orchestrator.SophiaAIOrchestrator": {
        "locations": [
          "backend/api/sophia_ai_phase1_routes.py"
        ],
        "type": "internal"
      },
      "agents.bi_deployer": {
        "locations": [
          "infrastructure/__init__.py"
        ],
        "type": "external"
      },
      "backend.core.config_validator.DeploymentValidator": {
        "locations": [
          "backend/app/unified_fastapi_app.py"
        ],
        "type": "internal"
      },
      "opentelemetry.trace": {
        "locations": [
          "infrastructure/agents/base_agent_template.py"
        ],
        "type": "external"
      },
      "backoff": {
        "locations": [
          "backend/services/portkey_gateway.py"
        ],
        "type": "external"
      },
      "sentiment.Sentiment": {
        "locations": [
          "backend/domain/value_objects/__init__.py"
        ],
        "type": "external"
      },
      "websockets.asyncio.client.connect": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/client/websocket.py"
        ],
        "type": "external"
      },
      "backend.services.enhanced_snowflake_cortex_service.DataPipelineConfig": {
        "locations": [
          "tests/test_phase2_integration.py"
        ],
        "type": "internal"
      },
      "bandit.core.config": {
        "locations": [
          "mcp-servers/codacy/codacy_mcp_server.py"
        ],
        "type": "external"
      },
      "backend.core.snowflake_config_override.get_snowflake_connection_params": {
        "locations": [
          "fix_snowflake_connection_final.py",
          "final_environment_verification.py"
        ],
        "type": "internal"
      },
      "flask.jsonify": {
        "locations": [
          "backend/src/main.py",
          "api/index.py",
          "api/index_optimized.py",
          "api/middleware/security.py",
          "api/mcp/index.py",
          "api/n8n/webhook.py",
          "api/monitoring/health.py"
        ],
        "type": "external"
      },
      "backend.core.constitutional_ai.SophiaConstitutionalFramework": {
        "locations": [
          "backend/core/self_optimization.py",
          "scripts/test_unified_intelligence.py"
        ],
        "type": "internal"
      },
      "models.chat_models.ChatMetadata": {
        "locations": [
          "backend/services/chat/base_chat_service.py"
        ],
        "type": "external"
      },
      "readabilipy.simple_json": {
        "locations": [
          "external/anthropic-mcp-servers/src/fetch/src/mcp_server_fetch/server.py"
        ],
        "type": "external"
      },
      "inline_snapshot": {
        "locations": [
          "external/anthropic-mcp-python-sdk/tests/shared/test_sse.py"
        ],
        "type": "external"
      },
      "codacy_api_client.CodacyAPIClient": {
        "locations": [
          "mcp-servers/codacy/enhanced_codacy_server.py",
          "mcp-servers/codacy/codacy_mcp_server.py"
        ],
        "type": "external"
      },
      "backend.core.auto_esc_config.get_config_value": {
        "locations": [
          "comprehensive_alignment_analysis_and_fix.py",
          "start_mcp_servers.py",
          "verify_complete_secrets_sync.py",
          "estuary_advanced_integration.py",
          "lambda_labs_access_and_config.py",
          "fix_pulumi_esc_structure_mismatch.py",
          "start_enhanced_mcp_servers.py",
          "cortex_agents_advanced_implementation.py",
          "deploy_estuary_foundation.py",
          "fix_alignment_issues.py",
          "deploy_snowflake_stability_simple.py",
          "deploy_comprehensive_upgrade.py",
          "deploy_complete_platform.py",
          "deploy_estuary_foundation_corrected.py",
          "sophia_standalone_server.py",
          "snowflake_advanced_features_implementation.py",
          "ui-ux-agent/start_ui_ux_agent_system.py",
          "ui-ux-agent/mcp-servers/figma-dev-mode/figma_mcp_server.py",
          "backend/database/postgresql_staging_manager.py",
          "backend/core/config_validator.py",
          "backend/core/optimized_connection_manager.py",
          "backend/core/data_flow_manager.py",
          "backend/core/snowflake_config_override.py",
          "backend/core/unified_connection_manager.py",
          "backend/core/aligned_snowflake_config.py",
          "backend/core/secure_snowflake_config.py",
          "backend/core/optimized_database_manager.py",
          "backend/core/centralized_config_manager.py",
          "backend/core/centralized_config_manager.py",
          "backend/core/security_config.py",
          "backend/core/snowflake_override.py",
          "backend/app/unified_fastapi_app.py",
          "backend/app/_deprecated_apps/stabilized_fastapi_app.py",
          "backend/app/_deprecated_apps/stabilized_fastapi_app.py",
          "backend/app/_deprecated_apps/stabilized_fastapi_app.py",
          "backend/app/_deprecated_apps/minimal_app.py",
          "backend/app/_deprecated_apps/working_app.py",
          "backend/app/_deprecated_apps/working_app.py",
          "backend/app/_deprecated_apps/phase2_minimal_app.py",
          "backend/app/_deprecated_apps/simple_app.py",
          "backend/etl/enhanced_unified_data_pipeline.py",
          "backend/etl/enhanced_unified_data_pipeline_backup.py",
          "backend/etl/estuary_flow_orchestrator.py",
          "backend/etl/payready_core/ingest_core_sql_data.py",
          "backend/etl/netsuite/estuary_netsuite_setup.py",
          "backend/etl/estuary/estuary_configuration_manager.py",
          "backend/utils/snowflake_cortex_service.py",
          "backend/integrations/advanced_estuary_flow_manager.py",
          "backend/scripts/enhanced_deploy_gong_snowflake_setup.py",
          "backend/scripts/sophia_data_pipeline_ultimate.py",
          "backend/scripts/estuary_gong_setup.py",
          "backend/scripts/enhanced_estuary_integration_test_suite.py",
          "backend/scripts/enhanced_gong_pipeline_test_suite.py",
          "backend/scripts/deploy_gong_snowflake_setup.py",
          "backend/mcp_servers/sophia_mcp_base.py",
          "backend/mcp_servers/mcp_auth.py",
          "backend/mcp_servers/enhanced_mcp_base.py",
          "backend/mcp_servers/ai_memory_auto_discovery.py",
          "backend/mcp_servers/base/enhanced_standardized_mcp_server.py",
          "backend/api/llm_strategy_routes.py",
          "backend/infrastructure/sophia_iac_orchestrator.py",
          "backend/infrastructure/adapters/estuary_adapter.py",
          "backend/services/enhanced_cortex_agent_service.py",
          "backend/services/unified_ai_orchestration_service.py",
          "backend/services/kb_management_service.py",
          "backend/services/cortex_agent_service.py",
          "backend/services/chat_driven_metadata_service.py",
          "backend/services/comprehensive_memory_service.py",
          "backend/services/portkey_gateway.py",
          "backend/services/smart_ai_service.py",
          "backend/services/vector_indexing_service.py",
          "backend/services/enhanced_mcp_orchestration_service.py",
          "backend/services/event_driven_ingestion_service.py",
          "backend/services/infrastructure_chat/sophia_infrastructure_chat.py",
          "scripts/deploy_snowflake_stability.py",
          "scripts/estuary_integration_manager.py",
          "scripts/enhanced_batch_embed_data.py",
          "scripts/fix_snowflake_connectivity.py",
          "scripts/property_assets_ingestion_stub.py",
          "scripts/ceo_intelligence_ingestion_stub.py",
          "scripts/snowflake_config_manager.py",
          "scripts/deploy_snowflake_stability_standalone.py",
          "scripts/test_mcp_pulumi_esc_integration.py",
          "scripts/ai_web_research_ingestion_stub.py",
          "scripts/automated_webhook_manager.py",
          "scripts/immediate_integration_fixes.py",
          "scripts/vercel_optimization.py",
          "scripts/security/setup_pulumi_esc_secrets.py",
          "scripts/ci/deployment_health_gate.py",
          "mcp-servers/notion/notion_mcp_server.py",
          "mcp-servers/hubspot/hubspot_mcp_server.py",
          "mcp-servers/hubspot/tests/get_closed_ticket_conversations.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/hubspot_client.py",
          "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py",
          "mcp-servers/github/github_mcp_server.py",
          "mcp-servers/codacy/codacy_mcp_server.py",
          "mcp-servers/slack/go_slack_integration.py",
          "mcp-servers/slack/slack_mcp_server.py",
          "infrastructure/lambda-labs-integration.py",
          "infrastructure/lambda-labs-deployment.py"
        ],
        "type": "internal"
      },
      "backend.api.codacy_integration_routes.router": {
        "locations": [
          "backend/app/unified_api.py",
          "backend/app/unified_main.py",
          "backend/app/_deprecated_apps/stabilized_fastapi_app.py",
          "backend/app/_deprecated_apps/working_app.py"
        ],
        "type": "internal"
      },
      "backend.workflows.multi_agent_workflow.AgentWorkflowInterface": {
        "locations": [
          "backend/agents/specialized/sales_intelligence_agent.py",
          "scripts/implement_mcp_ecosystem_optimization.py"
        ],
        "type": "internal"
      },
      "backend.models.llm_models.ChatResponse": {
        "locations": [
          "backend/api/llm_strategy_routes.py"
        ],
        "type": "internal"
      },
      "backend.scripts.sophia_data_pipeline_ultimate.GongAPIClient": {
        "locations": [
          "backend/scripts/enhanced_gong_pipeline_test_suite.py"
        ],
        "type": "internal"
      },
      "backend.agents.enhanced.data_models.IntegratedConversationRecord": {
        "locations": [
          "backend/services/comprehensive_memory_service.py"
        ],
        "type": "internal"
      },
      "backend.scripts.sophia_data_pipeline_ultimate.PipelineMode": {
        "locations": [
          "backend/scripts/enhanced_gong_pipeline_test_suite.py"
        ],
        "type": "internal"
      },
      "backend.utils.snowflake_cortex_service.analyze_gong_call_sentiment": {
        "locations": [
          "backend/agents/specialized/call_analysis_agent.py"
        ],
        "type": "internal"
      },
      "backend.domain.value_objects.call_participant.CallParticipant": {
        "locations": [
          "backend/infrastructure/persistence/repositories/snowflake_call_repository.py",
          "backend/domain/entities/call.py"
        ],
        "type": "internal"
      },
      "backend.mcp.optimized_ai_memory_mcp_server": {
        "locations": [
          "scripts/deploy_performance_optimizations.py",
          "scripts/deploy_performance_optimizations.py"
        ],
        "type": "internal"
      },
      "write_detector.SQLWriteDetector": {
        "locations": [
          "external/isaacwasserman_snowflake/src/mcp_snowflake_server/server.py"
        ],
        "type": "external"
      },
      "handlers.conversation_handler": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py"
        ],
        "type": "external"
      },
      "money": {
        "locations": [
          "backend/domain/value_objects/__init__.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.base.standardized_mcp_server.HealthCheckResult": {
        "locations": [
          "mcp-servers/lambda_labs_cli/lambda_labs_cli_mcp_server.py",
          "mcp-servers/snowflake_admin/snowflake_admin_mcp_server.py",
          "mcp-servers/ui_ux_agent/ui_ux_agent_mcp_server.py",
          "mcp-servers/ai_memory/ai_memory_mcp_server.py",
          "mcp-servers/ag_ui/ag_ui_mcp_server.py",
          "mcp-servers/portkey_admin/portkey_admin_mcp_server.py",
          "mcp-servers/codacy/codacy_mcp_server.py",
          "mcp-servers/snowflake_cli_enhanced/snowflake_cli_enhanced_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.security.audit_logger.set_request_context": {
        "locations": [
          "tests/test_audit_logging.py",
          "backend/security/audit_middleware.py"
        ],
        "type": "internal"
      },
      "backend.domain.value_objects.sentiment.Sentiment": {
        "locations": [
          "backend/application/use_cases/analyze_call_sentiment.py",
          "backend/application/ports/services/ai_service.py",
          "backend/infrastructure/persistence/repositories/snowflake_call_repository.py",
          "backend/domain/entities/call.py"
        ],
        "type": "internal"
      },
      "mcp_server_fetch": {
        "locations": [
          "external/anthropic-mcp-servers/src/fetch/src/mcp_server_fetch/__main__.py"
        ],
        "type": "external"
      },
      "werkzeug.exceptions": {
        "locations": [
          "api/middleware/security.py"
        ],
        "type": "external"
      },
      "server.stdio.stdio_server": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/__init__.py"
        ],
        "type": "external"
      },
      "services.sophia_universal_chat_service.SophiaUniversalChatService": {
        "locations": [
          "backend/api/unified_chat_routes_v2.py"
        ],
        "type": "external"
      },
      "backend.models.project.TeamMember": {
        "locations": [
          "backend/api/project_dashboard_routes.py"
        ],
        "type": "internal"
      },
      "backend.services.sophia_universal_chat_service.universal_chat_service": {
        "locations": [
          "tests/test_phase2_integration.py",
          "backend/api/enhanced_unified_chat_routes.py"
        ],
        "type": "internal"
      },
      "graphiti.Graphiti": {
        "locations": [
          "mcp-servers/graphiti/graphiti_mcp_server.py"
        ],
        "type": "external"
      },
      "models.chat_models.ChatProvider": {
        "locations": [
          "backend/services/chat/base_chat_service.py"
        ],
        "type": "external"
      },
      "backend.services.simplified_unified_intelligence_service.get_simplified_unified_intelligence_service": {
        "locations": [
          "backend/app/main.py",
          "backend/app/_deprecated_apps/fastapi_app.py",
          "backend/api/unified_intelligence_routes.py"
        ],
        "type": "internal"
      },
      "backend.security.rbac.dependencies.setup_rbac": {
        "locations": [
          "backend/security/rbac/__init__.py"
        ],
        "type": "internal"
      },
      "backend.agents.specialized.enhanced_sales_coach_agent.enhanced_sales_coach_agent": {
        "locations": [
          "backend/api/enhanced_sales_coaching_routes.py",
          "scripts/test_enhanced_coaching.py"
        ],
        "type": "internal"
      },
      "unified_chat_service.UnifiedChatService": {
        "locations": [
          "backend/services/chat/__init__.py"
        ],
        "type": "external"
      },
      "backend.services.enhanced_sentiment_analyzer.enhanced_sentiment_analyzer": {
        "locations": [
          "enhanced_startup.py",
          "simple_startup.py"
        ],
        "type": "internal"
      },
      "pyautogui": {
        "locations": [
          "external/anthropic-mcp-python-sdk/examples/fastmcp/screenshot.py"
        ],
        "type": "external"
      },
      "backend.core.enhanced_cache_manager.get_cache_manager": {
        "locations": [
          "backend/core/cache_manager.py"
        ],
        "type": "internal"
      },
      "sqlparse.sql.TokenList": {
        "locations": [
          "external/isaacwasserman_snowflake/src/mcp_snowflake_server/write_detector.py"
        ],
        "type": "external"
      },
      "backend.security.audit_middleware.setup_audit_middleware": {
        "locations": [
          "backend/app/main.py"
        ],
        "type": "internal"
      },
      "qualify_deal.QualificationCriteria": {
        "locations": [
          "backend/application/use_cases/__init__.py"
        ],
        "type": "external"
      },
      "backend.core.hierarchical_cache.hierarchical_cache": {
        "locations": [
          "backend/app/_deprecated_apps/phase2_optimized_fastapi_app.py",
          "backend/app/_deprecated_apps/phase2_optimized_app.py"
        ],
        "type": "internal"
      },
      "backend.services.mcp_orchestration_service.OrchestrationResult": {
        "locations": [
          "backend/services/group_aware_orchestration_enhancement.py",
          "backend/services/enhanced_mcp_orchestration_service.py"
        ],
        "type": "internal"
      },
      "analyze_call_sentiment.AnalyzeCallSentimentUseCase": {
        "locations": [
          "backend/application/use_cases/__init__.py"
        ],
        "type": "external"
      },
      "backend.services.automated_insights_service.AutomatedInsightsService": {
        "locations": [
          "backend/api/snowflake_intelligence_routes.py"
        ],
        "type": "internal"
      },
      "backend.services.project_service.ProjectService": {
        "locations": [
          "backend/api/project_dashboard_routes.py"
        ],
        "type": "internal"
      },
      "backend.utils.enhanced_snowflake_cortex_service.AIProcessingConfig": {
        "locations": [
          "mcp-servers/ai_memory/ai_memory_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.mcp_auth.mcp_auth": {
        "locations": [
          "backend/mcp_servers/mcp_health.py",
          "backend/mcp_servers/mcp_health.py",
          "backend/mcp_servers/mcp_health.py",
          "backend/mcp_servers/mcp_health.py"
        ],
        "type": "internal"
      },
      "call": {
        "locations": [
          "backend/domain/entities/__init__.py"
        ],
        "type": "external"
      },
      "backend.core.startup_config.apply_startup_configuration": {
        "locations": [
          "fix_snowflake_codewide.py",
          "backend/app/fastapi_app.py"
        ],
        "type": "internal"
      },
      "models.chat_models": {
        "locations": [
          "backend/services/chat/context_manager.py",
          "backend/services/chat/session_manager.py",
          "backend/services/chat/base_chat_service.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "comprehensive_memory_manager.ComprehensiveMemoryManager": {
        "locations": [
          "backend/core/contextual_memory_intelligence.py"
        ],
        "type": "external"
      },
      "backend.scripts.sophia_data_pipeline_ultimate.SnowflakeDataLoader": {
        "locations": [
          "backend/scripts/enhanced_gong_pipeline_test_suite.py"
        ],
        "type": "internal"
      },
      "sophia_chat_service.SophiaChatService": {
        "locations": [
          "backend/services/chat/__init__.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "freezegun.freeze_time": {
        "locations": [
          "external/anthropic-mcp-servers/src/time/test/time_server_test.py"
        ],
        "type": "external"
      },
      "handlers.company_handler": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py"
        ],
        "type": "external"
      },
      "services.enhanced_unified_chat_service": {
        "locations": [
          "backend/api/unified_chat_routes_v2.py"
        ],
        "type": "external"
      },
      "user.User": {
        "locations": [
          "backend/domain/entities/__init__.py"
        ],
        "type": "external"
      },
      "backend.core.secure_snowflake_config.secure_snowflake_config": {
        "locations": [
          "backend/core/optimized_connection_manager.py",
          "backend/etl/estuary_flow_orchestrator.py",
          "backend/services/snowflake/connection_pool_manager.py",
          "mcp-servers/snowflake_cortex/production_snowflake_cortex_mcp_server.py"
        ],
        "type": "internal"
      },
      "tzlocal": {
        "locations": [
          "external/anthropic-mcp-servers/src/time/src/mcp_server_time/server.py"
        ],
        "type": "external"
      },
      "backend.services.unified_intelligence_service.SophiaUnifiedIntelligenceService": {
        "locations": [
          "backend/services/enhanced_unified_intelligence_service.py"
        ],
        "type": "internal"
      },
      "backend.services.mcp_orchestration_service.BusinessTask": {
        "locations": [
          "backend/workflows/enhanced_executive_tasks.py",
          "backend/api/mcp_integration_routes.py",
          "backend/services/group_aware_orchestration_enhancement.py",
          "backend/services/enhanced_mcp_orchestration_service.py"
        ],
        "type": "internal"
      },
      "contact.EngagementLevel": {
        "locations": [
          "backend/domain/entities/__init__.py"
        ],
        "type": "external"
      },
      "backend.monitoring.mcp_metrics_collector.AlertSeverity": {
        "locations": [
          "backend/monitoring/mcp_monitoring_config.py"
        ],
        "type": "internal"
      },
      "mcp_simple_auth.server.main": {
        "locations": [
          "external/anthropic-mcp-python-sdk/examples/servers/simple-auth/mcp_simple_auth/__main__.py"
        ],
        "type": "external"
      },
      "backend.integrations.gong_webhook_server.RateLimitError": {
        "locations": [
          "backend/integrations/gong_api_client.py"
        ],
        "type": "internal"
      },
      "backend.integrations.gong_api_client.GongAPIClient": {
        "locations": [
          "backend/agents/specialized/call_analysis_agent.py",
          "backend/services/vector_indexing_service.py"
        ],
        "type": "internal"
      },
      "examples.fastmcp.simple_echo": {
        "locations": [
          "external/anthropic-mcp-python-sdk/tests/test_examples.py"
        ],
        "type": "external"
      },
      "n8n.webhook.N8NWebhookProcessor": {
        "locations": [
          "api/index_optimized.py"
        ],
        "type": "external"
      },
      "analyze_call_sentiment.AnalyzeCallResponse": {
        "locations": [
          "backend/application/use_cases/__init__.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.server.models.InitializationOptions": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py"
        ],
        "type": "internal"
      },
      "snowflake_mcp_server.utils.snowflake_conn.AuthType": {
        "locations": [
          "external/dynamike_snowflake/snowflake_mcp_server/main.py"
        ],
        "type": "external"
      },
      "get_closed_ticket_conversations": {
        "locations": [
          "mcp-servers/hubspot/tests/__init__.py",
          "mcp-servers/hubspot/tests/__init__.py",
          "mcp-servers/hubspot/tests/__init__.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.base.standardized_mcp_server.HealthStatus": {
        "locations": [
          "mcp-servers/lambda_labs_cli/lambda_labs_cli_mcp_server.py",
          "mcp-servers/snowflake_admin/snowflake_admin_mcp_server.py",
          "mcp-servers/ui_ux_agent/ui_ux_agent_mcp_server.py",
          "mcp-servers/ai_memory/ai_memory_mcp_server.py",
          "mcp-servers/ag_ui/ag_ui_mcp_server.py",
          "mcp-servers/portkey_admin/portkey_admin_mcp_server.py",
          "mcp-servers/codacy/codacy_mcp_server.py",
          "mcp-servers/snowflake_cli_enhanced/snowflake_cli_enhanced_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.services.large_data_import_service.LargeDataImportService": {
        "locations": [
          "backend/api/large_data_import_routes.py"
        ],
        "type": "internal"
      },
      "core.storage.ThreadStorage": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/hubspot_client.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/conversation_client.py"
        ],
        "type": "external"
      },
      "backend.integrations.gong_webhook_server.api_calls_total": {
        "locations": [
          "backend/integrations/gong_api_client.py"
        ],
        "type": "internal"
      },
      "sophia_chat_service": {
        "locations": [
          "backend/services/chat/__init__.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "graphiti": {
        "locations": [
          "mcp-servers/graphiti/graphiti_mcp_server.py"
        ],
        "type": "external"
      },
      "backend.services.smart_ai_service.generate_code": {
        "locations": [
          "backend/api/smart_ai_routes.py"
        ],
        "type": "internal"
      },
      "examples.fastmcp.simple_echo.mcp": {
        "locations": [
          "external/anthropic-mcp-python-sdk/tests/test_examples.py"
        ],
        "type": "external"
      },
      "backend.infrastructure.adapters.portkey_adapter.PortkeyAdapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "qualify_deal.DealNotFoundError": {
        "locations": [
          "backend/application/use_cases/__init__.py"
        ],
        "type": "external"
      },
      "backend.agents.core.langgraph_agent_base.AgentCapability": {
        "locations": [
          "backend/agents/infrastructure/sophia_infrastructure_agent.py"
        ],
        "type": "internal"
      },
      "utilities.types.Image": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/__init__.py"
        ],
        "type": "external"
      },
      "pgvector.asyncpg.register_vector": {
        "locations": [
          "external/anthropic-mcp-python-sdk/examples/fastmcp/memory.py"
        ],
        "type": "external"
      },
      "backend.infrastructure.adapters.apollo_adapter.ApolloAdapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.services.comprehensive_memory_service.ComprehensiveMemoryService": {
        "locations": [
          "mcp-servers/ai_memory/ai_memory_mcp_server.py",
          "mcp-servers/ai_memory/enhanced_ai_memory_server.py"
        ],
        "type": "internal"
      },
      "backend.core.dependencies.get_request_cache_manager": {
        "locations": [
          "backend/api/foundational_knowledge_routes.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.adapters.snowflake_adapter.SnowflakeAdapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.mcp.base.standardized_mcp_server.HealthStatus": {
        "locations": [
          "scripts/implement_mcp_ecosystem_optimization.py"
        ],
        "type": "internal"
      },
      "backend.security.ephemeral_credentials.routes.router": {
        "locations": [
          "backend/presentation/api/router.py"
        ],
        "type": "internal"
      },
      "backend.core.optimized_cache.optimized_cache": {
        "locations": [
          "scripts/activate_performance_optimizations.py",
          "scripts/activate_performance_optimizations.py"
        ],
        "type": "internal"
      },
      "models.chat_models.ChatMode": {
        "locations": [
          "backend/services/chat/session_manager.py",
          "backend/services/chat/base_chat_service.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "backend.core.sql_security_validator.validate_table_name": {
        "locations": [
          "scripts/enhanced_batch_embed_data.py"
        ],
        "type": "internal"
      },
      "client.session_group": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/__init__.py"
        ],
        "type": "external"
      },
      "graphiti.edges.Edge": {
        "locations": [
          "mcp-servers/graphiti/graphiti_mcp_server.py"
        ],
        "type": "external"
      },
      "core.formatters": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/company_client.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/conversation_client.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/contact_client.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/ticket_client.py"
        ],
        "type": "external"
      },
      "backend.models.llm_models": {
        "locations": [
          "backend/api/llm_strategy_routes.py"
        ],
        "type": "internal"
      },
      "backend.scripts.sophia_data_pipeline_ultimate.PipelineConfig": {
        "locations": [
          "backend/scripts/enhanced_gong_pipeline_test_suite.py"
        ],
        "type": "internal"
      },
      "backend.core.self.cache_manager.EnhancedCacheManager": {
        "locations": [
          "backend/api/foundational_knowledge_routes.py"
        ],
        "type": "internal"
      },
      "base_chat_service": {
        "locations": [
          "backend/services/chat/__init__.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "backend.core.cross_platform_sync_orchestrator.CrossPlatformSyncOrchestrator": {
        "locations": [
          "backend/core/mcp_sync_orchestrator_config.py"
        ],
        "type": "internal"
      },
      "backend.security.secret_management.SecretManager": {
        "locations": [
          "backend/security/ephemeral_credentials/service.py",
          "backend/services/secure_credential_service.py"
        ],
        "type": "internal"
      },
      "clients.ticket_client": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/hubspot_client.py"
        ],
        "type": "external"
      },
      "graphiti_mcp_server": {
        "locations": [
          "mcp-servers/graphiti/__init__.py"
        ],
        "type": "external"
      },
      "utils.enhanced_snowflake_cortex_service": {
        "locations": [
          "backend/integrations/enhanced_gong_integration.py",
          "backend/services/intelligent_query_router.py",
          "backend/services/enhanced_data_ingestion.py",
          "backend/services/progressive_autonomy_manager.py",
          "backend/services/okr_tracking_service.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.costar_mcp_server.costar_server": {
        "locations": [
          "backend/api/costar_routes.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.mcp_gateway": {
        "locations": [
          "backend/services/payready_business_intelligence.py"
        ],
        "type": "internal"
      },
      "backend.app.core.dependencies.get_mcp_service": {
        "locations": [
          "backend/app/unified_main.py"
        ],
        "type": "internal"
      },
      "backend.services.knowledge_service.KnowledgeStats": {
        "locations": [
          "backend/api/knowledge_dashboard_routes.py"
        ],
        "type": "internal"
      },
      "mcp_servers.ai_memory.ai_memory_mcp_server": {
        "locations": [
          "backend/agents/specialized/asana_project_intelligence_agent.py"
        ],
        "type": "external"
      },
      "gong_data_quality.AlertSeverity": {
        "locations": [
          "backend/monitoring/quality_rules.py",
          "backend/monitoring/alert_manager.py",
          "backend/monitoring/__init__.py"
        ],
        "type": "external"
      },
      "backend.infrastructure.adapters.vercel_adapter.VercelAdapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.services.cortex_agent_service.CortexAgentService": {
        "locations": [
          "backend/api/cortex_routes.py"
        ],
        "type": "internal"
      },
      "backend.security.rbac.models.User": {
        "locations": [
          "backend/security/rbac/service.py",
          "backend/security/rbac/__init__.py",
          "backend/security/rbac/dependencies.py",
          "backend/security/rbac/routes.py"
        ],
        "type": "internal"
      },
      "backend.security.rbac.dependencies.requires_system_admin": {
        "locations": [
          "backend/security/rbac/__init__.py"
        ],
        "type": "internal"
      },
      "websockets.typing.Subprotocol": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/client/websocket.py"
        ],
        "type": "external"
      },
      "backend.services.enhanced_portkey_orchestrator.TaskComplexity": {
        "locations": [
          "backend/api/enhanced_ceo_chat_routes.py"
        ],
        "type": "internal"
      },
      "templates.ResourceTemplate": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/resources/__init__.py"
        ],
        "type": "external"
      },
      "gong_data_quality.DataQualityConfig": {
        "locations": [
          "backend/monitoring/__init__.py"
        ],
        "type": "external"
      },
      "utils": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/search_handler.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/base_handler.py"
        ],
        "type": "external"
      },
      "backend.api.business_intelligence_routes": {
        "locations": [
          "backend/app/unified_fastapi_app.py"
        ],
        "type": "internal"
      },
      "backend.agents.specialized.snowflake_admin_agent.SnowflakeEnvironment": {
        "locations": [
          "backend/services/snowflake_admin_chat_integration.py"
        ],
        "type": "internal"
      },
      "backend.models.project.Task": {
        "locations": [
          "backend/api/project_dashboard_routes.py"
        ],
        "type": "internal"
      },
      "backend.services.smart_ai_service.smart_ai_service": {
        "locations": [
          "backend/agents/specialized/sales_intelligence_agent.py",
          "backend/agents/specialized/marketing_analysis_agent.py",
          "backend/api/smart_ai_routes.py"
        ],
        "type": "internal"
      },
      "backend.core.auto_esc_config.config": {
        "locations": [
          "backend/core/optimized_cache.py",
          "backend/security/secret_management.py",
          "backend/agents/core/base_agent.py",
          "backend/agents/specialized/call_analysis_agent.py",
          "backend/utils/snowflake_hubspot_connector.py",
          "backend/utils/snowflake_gong_connector.py",
          "backend/scripts/deploy_snowflake_application_layer.py",
          "backend/mcp_servers/costar_mcp_server.py",
          "scripts/performance_baseline.py",
          "scripts/comprehensive_health_check.py",
          "mcp-servers/ai_memory/ai_memory_mcp_server.py",
          "mcp-servers/ai_memory/ai_memory_mcp_server.py",
          "mcp-servers/codacy/enhanced_codacy_server.py"
        ],
        "type": "internal"
      },
      "websockets": {
        "locations": [
          "backend/services/real_time_streaming_service.py"
        ],
        "type": "external"
      },
      "backend.core.snowflake_config_manager.SnowflakeConfigManager": {
        "locations": [
          "backend/scripts/batch_embed_data.py",
          "backend/scripts/transform_slack_linear_data.py",
          "backend/scripts/deploy_snowflake_application_layer.py",
          "backend/services/snowflake_metadata_optimizer.py"
        ],
        "type": "internal"
      },
      "mcp_servers.codacy.codacy_mcp_server": {
        "locations": [
          "start_enhanced_mcp_servers.py"
        ],
        "type": "external"
      },
      "backend.core.centralized_config_manager.centralized_config_manager": {
        "locations": [
          "backend/app/_deprecated_apps/phase2_optimized_fastapi_app.py",
          "backend/app/_deprecated_apps/phase2_optimized_app.py",
          "backend/app/_deprecated_apps/phase2_minimal_app.py"
        ],
        "type": "internal"
      },
      "snowflake_mcp_server.utils.snowflake_conn": {
        "locations": [
          "external/dynamike_snowflake/snowflake_mcp_server/main.py"
        ],
        "type": "external"
      },
      "backend.security.rbac.initialize_rbac_service": {
        "locations": [
          "backend/app/main.py"
        ],
        "type": "internal"
      },
      "scripts.dns_manager.SophiaDNSManager": {
        "locations": [
          "scripts/ai_enhanced_dns_manager.py"
        ],
        "type": "internal"
      },
      "backend.services.predictive_automation_service.predictive_service": {
        "locations": [
          "scripts/validate_focus_area_implementation.py",
          "scripts/validate_focus_area_implementation.py",
          "scripts/validate_focus_area_implementation.py",
          "scripts/validate_focus_area_implementation.py"
        ],
        "type": "internal"
      },
      "backend.services.enhanced_snowflake_cortex_service.CortexSearchConfig": {
        "locations": [
          "tests/test_phase2_integration.py"
        ],
        "type": "internal"
      },
      "resource_manager": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/resources/__init__.py"
        ],
        "type": "external"
      },
      "scripts.deploy_redis_infrastructure.deploy_redis_for_sophia_ai": {
        "locations": [
          "scripts/activate_performance_optimizations.py"
        ],
        "type": "internal"
      },
      "sqlparse": {
        "locations": [
          "external/isaacwasserman_snowflake/src/mcp_snowflake_server/write_detector.py"
        ],
        "type": "external"
      },
      "auto_esc_config": {
        "locations": [
          "backend/core/config.py",
          "backend/core/secure_credential_manager.py"
        ],
        "type": "external"
      },
      "backend.services.sophia_ai_orchestrator.OrchestrationRequest": {
        "locations": [
          "backend/api/sophia_ai_phase1_routes.py"
        ],
        "type": "internal"
      },
      "backend.api.snowflake_admin_routes.router": {
        "locations": [
          "backend/app/unified_main.py"
        ],
        "type": "internal"
      },
      "backend.services.smart_ai_service.generate_competitive_analysis": {
        "locations": [
          "backend/agents/specialized/marketing_analysis_agent.py",
          "backend/api/smart_ai_routes.py"
        ],
        "type": "internal"
      },
      "werkzeug.exceptions.Unauthorized": {
        "locations": [
          "api/middleware/security.py"
        ],
        "type": "external"
      },
      "backend.integrations.gong_redis_client.ProcessedCallData": {
        "locations": [
          "backend/agents/integrations/gong_data_integration.py"
        ],
        "type": "internal"
      },
      "backend.agents.specialized.sales_coach_agent.SalesCoachAgent": {
        "locations": [
          "backend/workflows/langgraph_agent_orchestration.py",
          "backend/agents/specialized/sales_intelligence_agent.py",
          "backend/agents/integrations/gong_data_integration.py"
        ],
        "type": "internal"
      },
      "router.create_application_router": {
        "locations": [
          "backend/presentation/api/__init__.py"
        ],
        "type": "external"
      },
      "langgraph.graph.message": {
        "locations": [
          "backend/workflows/enhanced_langgraph_orchestration.py"
        ],
        "type": "external"
      },
      "backend.security.rbac.models.ResourceType": {
        "locations": [
          "tests/test_rbac.py",
          "backend/security/rbac/service.py",
          "backend/security/rbac/__init__.py",
          "backend/security/rbac/dependencies.py",
          "backend/security/rbac/routes.py",
          "backend/security/ephemeral_credentials/routes.py"
        ],
        "type": "internal"
      },
      "snowflake_mcp_server.utils.snowflake_conn.SnowflakeConfig": {
        "locations": [
          "external/dynamike_snowflake/snowflake_mcp_server/main.py"
        ],
        "type": "external"
      },
      "sqlglot.errors.ParseError": {
        "locations": [
          "external/dynamike_snowflake/snowflake_mcp_server/main.py"
        ],
        "type": "external"
      },
      "contact.Contact": {
        "locations": [
          "backend/domain/entities/__init__.py"
        ],
        "type": "external"
      },
      "backend.security.rbac.models.SYSTEM_ROLES": {
        "locations": [
          "backend/security/rbac/service.py",
          "backend/security/rbac/__init__.py"
        ],
        "type": "internal"
      },
      "lambda_labs_provisioner.LambdaLabsProvisioner": {
        "locations": [
          "infrastructure/lambda-labs-integration.py"
        ],
        "type": "external"
      },
      "backend.services.large_data_import_service.ImportDataType": {
        "locations": [
          "backend/api/large_data_import_routes.py"
        ],
        "type": "internal"
      },
      "mcp_servers.hubspot.hubspot_mcp_server.hubspot_server": {
        "locations": [
          "start_mcp_services.py"
        ],
        "type": "external"
      },
      "flask_cors.CORS": {
        "locations": [
          "backend/src/main.py",
          "api/index.py",
          "api/index_optimized.py",
          "api/mcp/index.py",
          "api/n8n/webhook.py"
        ],
        "type": "external"
      },
      "backend.infrastructure.adapters.hubspot_adapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.domain.entities.contact.EngagementLevel": {
        "locations": [
          "backend/application/use_cases/qualify_deal.py",
          "backend/application/ports/repositories/contact_repository.py"
        ],
        "type": "internal"
      },
      "backend.services.smart_ai_service.LLMRequest": {
        "locations": [
          "backend/agents/specialized/sales_intelligence_agent.py",
          "backend/agents/specialized/marketing_analysis_agent.py",
          "backend/api/smart_ai_routes.py"
        ],
        "type": "internal"
      },
      "backend.application.ports.repositories.contact_repository.ContactRepository": {
        "locations": [
          "backend/application/use_cases/qualify_deal.py"
        ],
        "type": "internal"
      },
      "backend.integrations.gong_api_client_enhanced.EnhancedGongAPIClient": {
        "locations": [
          "backend/integrations/enhanced_gong_integration.py"
        ],
        "type": "internal"
      },
      "backend.agents.specialized.snowflake_admin_agent.SnowflakeAdminAgent": {
        "locations": [
          "backend/services/snowflake_admin_chat_integration.py",
          "mcp-servers/snowflake_admin/snowflake_admin_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.mcp.ai_memory_mcp_server.AiMemoryMCPServer": {
        "locations": [
          "scripts/performance_baseline.py",
          "scripts/comprehensive_health_check.py"
        ],
        "type": "internal"
      },
      "clients.company_client": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/hubspot_client.py"
        ],
        "type": "external"
      },
      "backend.integrations.buzz_integration": {
        "locations": [
          "backend/services/payready_business_intelligence.py"
        ],
        "type": "internal"
      },
      "backend.agents.integrations.optimized_gong_data_integration.optimized_gong_integration": {
        "locations": [
          "backend/app/_deprecated_apps/phase2_optimized_fastapi_app.py",
          "scripts/deploy_performance_optimizations.py"
        ],
        "type": "internal"
      },
      "client.stdio.StdioServerParameters": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/__init__.py"
        ],
        "type": "external"
      },
      "pgvector.asyncpg": {
        "locations": [
          "external/anthropic-mcp-python-sdk/examples/fastmcp/memory.py"
        ],
        "type": "external"
      },
      "backend.core.optimized_connection_manager.connection_manager": {
        "locations": [
          "backend/app/_deprecated_apps/phase2_optimized_fastapi_app.py",
          "backend/app/_deprecated_apps/stabilized_fastapi_app.py",
          "backend/app/_deprecated_apps/phase2_optimized_app.py",
          "backend/agents/integrations/optimized_gong_data_integration.py",
          "backend/utils/snowflake_cortex_service.py",
          "backend/utils/optimized_snowflake_cortex_service.py",
          "backend/mcp_servers/optimized_ai_memory_mcp_server.py",
          "backend/services/enhanced_chat_context_service.py",
          "backend/services/enhanced_ingestion_service.py",
          "scripts/deploy_performance_optimizations.py",
          "scripts/activate_performance_optimizations.py",
          "scripts/activate_performance_optimizations.py"
        ],
        "type": "internal"
      },
      "providers.base_provider": {
        "locations": [
          "backend/services/chat/__init__.py"
        ],
        "type": "external"
      },
      "token_verifier.IntrospectionTokenVerifier": {
        "locations": [
          "external/anthropic-mcp-python-sdk/examples/servers/simple-auth/mcp_simple_auth/server.py"
        ],
        "type": "external"
      },
      "backend.scripts.estuary_gong_setup.EstuaryGongOrchestrator": {
        "locations": [
          "backend/scripts/enhanced_estuary_integration_test_suite.py"
        ],
        "type": "internal"
      },
      "backend.security.audit_logger.critical": {
        "locations": [
          "tests/test_audit_logging.py"
        ],
        "type": "internal"
      },
      "backend.services.knowledge_service.knowledge_service": {
        "locations": [
          "backend/api/knowledge_dashboard_routes.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.mcp_gateway.MCPGateway": {
        "locations": [
          "backend/services/payready_business_intelligence.py"
        ],
        "type": "internal"
      },
      "backend.api.v3_chat_routes": {
        "locations": [
          "backend/app/unified_main.py"
        ],
        "type": "internal"
      },
      "backend.security.rbac.dependencies.require_permission": {
        "locations": [
          "backend/security/rbac/__init__.py",
          "backend/security/rbac/routes.py",
          "backend/security/ephemeral_credentials/routes.py"
        ],
        "type": "internal"
      },
      "backend.workflows.enhanced_langgraph_orchestration.WorkflowStatus": {
        "locations": [
          "tests/test_phase2_integration.py"
        ],
        "type": "internal"
      },
      "backend.etl.estuary.estuary_configuration_manager.EnhancedEstuaryManager": {
        "locations": [
          "backend/etl/enhanced_ingestion_service.py",
          "backend/scripts/enhanced_asana_integration_test_suite.py",
          "backend/api/asana_integration_routes.py"
        ],
        "type": "internal"
      },
      "langchain_openai": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "external"
      },
      "server.Server": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/lowlevel/__init__.py"
        ],
        "type": "external"
      },
      "backend.core.integrated_performance_monitoring.initialize_performance_monitoring": {
        "locations": [
          "scripts/activate_performance_optimizations.py"
        ],
        "type": "internal"
      },
      "context_manager.ContextManager": {
        "locations": [
          "backend/services/chat/__init__.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "base.Resource": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/resources/__init__.py"
        ],
        "type": "external"
      },
      "graphiti_mcp_server.GraphitiMCPServer": {
        "locations": [
          "mcp-servers/graphiti/__init__.py"
        ],
        "type": "external"
      },
      "backend.security.ephemeral_credentials.models.EphemeralCredential": {
        "locations": [
          "backend/security/ephemeral_credentials/service.py",
          "backend/security/ephemeral_credentials/__init__.py"
        ],
        "type": "internal"
      },
      "backend.security.rbac.routes.router": {
        "locations": [
          "backend/presentation/api/router.py"
        ],
        "type": "internal"
      },
      "providers.portkey_provider": {
        "locations": [
          "backend/services/chat/__init__.py"
        ],
        "type": "external"
      },
      "backend.agents.specialized.snowflake_admin_agent.AdminTaskRequest": {
        "locations": [
          "backend/services/snowflake_admin_chat_integration.py"
        ],
        "type": "internal"
      },
      "core.error_handler.handle_hubspot_errors": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/company_client.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/conversation_client.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/contact_client.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/ticket_client.py"
        ],
        "type": "external"
      },
      "backend.security.ephemeral_credentials.EphemeralCredentialsService": {
        "locations": [
          "backend/app/main.py"
        ],
        "type": "internal"
      },
      "paramiko": {
        "locations": [
          "scripts/lambda-labs-provisioner.py"
        ],
        "type": "external"
      },
      "base_chat_service.BaseChatService": {
        "locations": [
          "backend/services/chat/__init__.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "backend.workflows.enhanced_langgraph_orchestration.TaskComplexity": {
        "locations": [
          "tests/test_phase2_integration.py"
        ],
        "type": "internal"
      },
      "backend.api.v3_chat_routes.router": {
        "locations": [
          "backend/app/unified_main.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.types.TextContent": {
        "locations": [
          "backend/mcp_servers/sophia_mcp_base.py",
          "backend/mcp_servers/optimized_ai_memory_mcp_server.py",
          "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.mcp.ai_memory_auto_discovery.enhanced_ai_memory_server": {
        "locations": [
          "start_enhanced_mcp_servers.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.mcp_client.MCPClient": {
        "locations": [
          "backend/agents/enhanced/cortex_agent_orchestrator.py",
          "backend/services/snowflake_intelligence_service.py"
        ],
        "type": "internal"
      },
      "opentelemetry.instrumentation.logging": {
        "locations": [
          "infrastructure/agents/base_agent_template.py"
        ],
        "type": "external"
      },
      "backend.agents.specialized.sales_intelligence_agent.SalesIntelligenceAgent": {
        "locations": [
          "backend/agents/integrations/gong_data_integration.py",
          "backend/agents/enhanced/cortex_agent_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.models.project.SprintVelocity": {
        "locations": [
          "backend/api/project_dashboard_routes.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.adapters.asana_adapter.AsanaAdapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "server.session": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/__init__.py"
        ],
        "type": "external"
      },
      "backend.infrastructure.adapters.hubspot_adapter.HubSpotAdapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.services.enhanced_cortex_agent_service.MultimodalFile": {
        "locations": [
          "deploy_comprehensive_upgrade.py"
        ],
        "type": "internal"
      },
      "backend.services.knowledge_service.KnowledgeService": {
        "locations": [
          "backend/services/foundational_knowledge_service.py",
          "backend/services/large_data_import_service.py"
        ],
        "type": "internal"
      },
      "models.chat_models.ChatContext": {
        "locations": [
          "backend/services/chat/context_manager.py",
          "backend/services/chat/session_manager.py"
        ],
        "type": "external"
      },
      "backend.security.audit_logger.configure_from_env": {
        "locations": [
          "backend/app/main.py"
        ],
        "type": "internal"
      },
      "backend.security.ephemeral_credentials.setup_ephemeral_credentials_middleware": {
        "locations": [
          "backend/app/main.py"
        ],
        "type": "internal"
      },
      "backend.integrations.gong_webhook_processor.WebhookProcessor": {
        "locations": [
          "backend/integrations/gong_webhook_server.py"
        ],
        "type": "internal"
      },
      "snowflake_call_repository": {
        "locations": [
          "backend/infrastructure/persistence/repositories/__init__.py"
        ],
        "type": "external"
      },
      "base": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/tools/__init__.py",
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/resources/__init__.py",
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/prompts/__init__.py"
        ],
        "type": "external"
      },
      "backend.api.asana_integration_routes.router": {
        "locations": [
          "backend/app/unified_api.py",
          "backend/app/unified_main.py",
          "backend/app/_deprecated_apps/stabilized_fastapi_app.py",
          "backend/app/_deprecated_apps/working_app.py"
        ],
        "type": "internal"
      },
      "backend.mcp.ai_memory_auto_discovery": {
        "locations": [
          "start_enhanced_mcp_servers.py"
        ],
        "type": "internal"
      },
      "server.NotificationOptions": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/lowlevel/__init__.py"
        ],
        "type": "external"
      },
      "tool_manager": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/tools/__init__.py"
        ],
        "type": "external"
      },
      "backend.infrastructure.adapters.vercel_adapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "write_detector": {
        "locations": [
          "external/isaacwasserman_snowflake/src/mcp_snowflake_server/server.py"
        ],
        "type": "external"
      },
      "backend.models.api_models.ChatRequest": {
        "locations": [
          "backend/app/modernized_fastapi_app.py"
        ],
        "type": "internal"
      },
      "backend.integrations.enhanced_gong_integration.EnhancedGongIntegration": {
        "locations": [
          "backend/services/unified_intelligence_service.py"
        ],
        "type": "internal"
      },
      "backend.core.optimized_connection_manager.OptimizedConnectionManager": {
        "locations": [
          "create_snowflake_status_report.py",
          "fix_snowflake_connection_final.py",
          "final_environment_verification.py",
          "backend/mcp_servers/sophia_mcp_base.py",
          "scripts/fix_snowflake_database_objects.py"
        ],
        "type": "internal"
      },
      "sophia_mcp_base.create_mcp_server": {
        "locations": [
          "backend/mcp_servers/mcp_registry.py"
        ],
        "type": "external"
      },
      "backend.services.enhanced_unified_chat_service.QueryContext": {
        "locations": [
          "backend/scripts/enhanced_asana_integration_test_suite.py",
          "backend/api/asana_integration_routes.py"
        ],
        "type": "internal"
      },
      "universal_chat_service.UniversalChatService": {
        "locations": [
          "backend/services/chat/__init__.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "backend.security.ephemeral_credentials.middleware.EphemeralCredentialsMiddleware": {
        "locations": [
          "backend/security/ephemeral_credentials/__init__.py"
        ],
        "type": "internal"
      },
      "backend.etl.estuary_flow_orchestrator.EstuaryFlowOrchestrator": {
        "locations": [
          "backend/etl/enhanced_unified_data_pipeline.py",
          "backend/etl/enhanced_unified_data_pipeline_backup.py"
        ],
        "type": "internal"
      },
      "core.simple_config.SophiaConfig": {
        "locations": [
          "backend/integrations/portkey_gateway_service.py",
          "backend/services/enhanced_ceo_universal_chat_service.py",
          "backend/services/advanced_ui_ux_agent_service.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.enhanced_ai_memory_mcp_server.EnhancedAiMemoryMCPServer": {
        "locations": [
          "backend/workflows/enhanced_langgraph_orchestration.py",
          "backend/workflows/langgraph_agent_orchestration.py",
          "backend/agents/core/langgraph_agent_base.py",
          "backend/agents/specialized/slack_analysis_agent.py",
          "backend/agents/specialized/linear_project_health_agent.py",
          "backend/agents/specialized/enhanced_sales_coach_agent.py",
          "backend/agents/specialized/sales_intelligence_agent.py",
          "backend/agents/specialized/marketing_analysis_agent.py",
          "backend/scripts/enhanced_estuary_integration_test_suite.py",
          "backend/scripts/enhanced_asana_integration_test_suite.py",
          "backend/mcp_servers/ai_memory_auto_discovery.py",
          "backend/api/slack_linear_knowledge_routes.py",
          "backend/api/asana_integration_routes.py",
          "backend/services/sophia_universal_chat_service.py",
          "backend/services/kb_management_service.py",
          "backend/services/cost_engineering_service.py",
          "backend/services/vector_intelligence_router.py",
          "backend/services/unified_intelligence_service.py"
        ],
        "type": "internal"
      },
      "manager.PromptManager": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/prompts/__init__.py"
        ],
        "type": "external"
      },
      "backend.services.unified_ai_orchestration_service.get_unified_ai_service": {
        "locations": [
          "backend/api/unified_ai_routes.py"
        ],
        "type": "internal"
      },
      "event_store": {
        "locations": [
          "external/anthropic-mcp-python-sdk/examples/servers/simple-streamablehttp/mcp_simple_streamablehttp/server.py"
        ],
        "type": "external"
      },
      "deal_repository": {
        "locations": [
          "backend/application/ports/repositories/__init__.py"
        ],
        "type": "external"
      },
      "backend.services.cortex_agent_service.get_cortex_agent_service": {
        "locations": [
          "backend/api/cortex_routes.py"
        ],
        "type": "internal"
      },
      "services.sophia_universal_chat_service": {
        "locations": [
          "backend/api/unified_chat_routes_v2.py"
        ],
        "type": "external"
      },
      "backend.security.ephemeral_credentials.service.EphemeralCredentialsService": {
        "locations": [
          "tests/test_ephemeral_credentials.py",
          "backend/security/ephemeral_credentials/__init__.py",
          "backend/security/ephemeral_credentials/middleware.py",
          "backend/security/ephemeral_credentials/routes.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.adapters.usergems_adapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "clients.ticket_client.TicketClient": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/hubspot_client.py"
        ],
        "type": "external"
      },
      "backend.services.event_driven_ingestion_service.create_event_driven_ingestion_service": {
        "locations": [
          "backend/services/sse_progress_streaming_service.py",
          "backend/services/chat_driven_metadata_service.py"
        ],
        "type": "internal"
      },
      "backend.security.rbac.dependencies.get_current_user": {
        "locations": [
          "backend/security/rbac/__init__.py",
          "backend/security/ephemeral_credentials/routes.py"
        ],
        "type": "internal"
      },
      "backend.utils.snowflake_cortex_service.find_similar_gong_calls": {
        "locations": [
          "backend/agents/specialized/call_analysis_agent.py"
        ],
        "type": "internal"
      },
      "qualify_deal.QualifyDealResponse": {
        "locations": [
          "backend/application/use_cases/__init__.py"
        ],
        "type": "external"
      },
      "backend.scripts.transform_slack_linear_data.SlackLinearTransformationService": {
        "locations": [
          "backend/api/slack_linear_knowledge_routes.py",
          "backend/api/slack_linear_knowledge_routes.py"
        ],
        "type": "internal"
      },
      "clients.contact_client.ContactClient": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/hubspot_client.py"
        ],
        "type": "external"
      },
      "mcp_servers.notion.notion_mcp_server.notion_server": {
        "locations": [
          "start_mcp_services.py"
        ],
        "type": "external"
      },
      "backend.services.snowflake_intelligence_service.SnowflakeIntelligenceService": {
        "locations": [
          "backend/agents/enhanced/cortex_agent_orchestrator.py",
          "backend/api/snowflake_intelligence_routes.py"
        ],
        "type": "internal"
      },
      "backend.scripts.estuary_gong_setup.EstuaryConfig": {
        "locations": [
          "backend/scripts/enhanced_estuary_integration_test_suite.py"
        ],
        "type": "internal"
      },
      "backend.core.snowflake_abstraction.SnowflakeAbstraction": {
        "locations": [
          "backend/services/snowflake_metadata_optimizer.py"
        ],
        "type": "internal"
      },
      "backend.services.enhanced_snowflake_cortex_service.DataProcessingMode": {
        "locations": [
          "tests/test_phase2_integration.py"
        ],
        "type": "internal"
      },
      "backend.services.sophia_universal_chat_service.SearchContext": {
        "locations": [
          "backend/api/sophia_universal_chat_routes.py"
        ],
        "type": "internal"
      },
      "mcp_server_snowflake.main": {
        "locations": [
          "external/dynamike_snowflake/snowflake_mcp_server/utils/template.py"
        ],
        "type": "external"
      },
      "backend.monitoring.mcp_metrics_collector.MCPMetricsCollector": {
        "locations": [
          "backend/core/mcp_sync_orchestrator_config.py",
          "backend/monitoring/group_health_monitoring.py",
          "backend/monitoring/mcp_monitoring_config.py"
        ],
        "type": "internal"
      },
      "backend.integrations.gong_redis_client.NotificationPriority": {
        "locations": [
          "backend/agents/integrations/gong_data_integration.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.sophia_iac_orchestrator.PlatformStatus": {
        "locations": [
          "backend/infrastructure/adapters/snowflake_adapter.py",
          "backend/infrastructure/adapters/estuary_adapter.py"
        ],
        "type": "internal"
      },
      "backend.workflows.enhanced_langgraph_orchestration.ParallelTask": {
        "locations": [
          "tests/test_phase2_integration.py"
        ],
        "type": "internal"
      },
      "backend.services.enhanced_cortex_agent_service.EnhancedCortexAgentService": {
        "locations": [
          "backend/api/enhanced_cortex_routes.py"
        ],
        "type": "internal"
      },
      "sqlparse.tokens.DML": {
        "locations": [
          "external/isaacwasserman_snowflake/src/mcp_snowflake_server/write_detector.py"
        ],
        "type": "external"
      },
      "sqlparse.tokens.Keyword": {
        "locations": [
          "external/isaacwasserman_snowflake/src/mcp_snowflake_server/write_detector.py"
        ],
        "type": "external"
      },
      "pydantic_ai.Agent": {
        "locations": [
          "external/anthropic-mcp-python-sdk/examples/fastmcp/memory.py"
        ],
        "type": "external"
      },
      "backend.integrations.gong_webhook_server.api_rate_limit_hits": {
        "locations": [
          "backend/integrations/gong_api_client.py"
        ],
        "type": "internal"
      },
      "providers.base_provider.BaseProvider": {
        "locations": [
          "backend/services/chat/__init__.py"
        ],
        "type": "external"
      },
      "backend.core.optimized_database_manager.ConnectionType": {
        "locations": [
          "backend/etl/enhanced_unified_data_pipeline.py",
          "backend/etl/enhanced_ingestion_service.py"
        ],
        "type": "internal"
      },
      "docker": {
        "locations": [
          "scripts/validate_docker_deployment.py",
          "scripts/deploy-sophia-complete-stack.py"
        ],
        "type": "external"
      },
      "sentiment": {
        "locations": [
          "backend/domain/value_objects/__init__.py"
        ],
        "type": "external"
      },
      "backend.agents.enhanced.data_models.SlackMessageData": {
        "locations": [
          "backend/services/comprehensive_memory_service.py"
        ],
        "type": "internal"
      },
      "gemini_cli_integration.gemini_cli_provider.GeminiCLIModelRouter": {
        "locations": [
          "backend/mcp_servers/optimized_mcp_server.py",
          "backend/mcp_servers/base/standardized_mcp_server.py"
        ],
        "type": "external"
      },
      "backend.services.foundational_knowledge_service.FoundationalKnowledgeService": {
        "locations": [
          "backend/app/unified_fastapi_app.py",
          "backend/app/working_fastapi_app.py",
          "backend/agents/specialized/sales_intelligence_agent.py",
          "backend/agents/specialized/marketing_analysis_agent.py",
          "backend/scripts/ingest_foundational_kb.py",
          "backend/api/foundational_knowledge_routes.py",
          "backend/services/kb_management_service.py"
        ],
        "type": "internal"
      },
      "backend.security.ephemeral_credentials.models.TokenMetadata": {
        "locations": [
          "tests/test_ephemeral_credentials.py",
          "backend/security/ephemeral_credentials/service.py",
          "backend/security/ephemeral_credentials/__init__.py",
          "backend/security/ephemeral_credentials/routes.py"
        ],
        "type": "internal"
      },
      "client.stdio.stdio_client": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/__init__.py"
        ],
        "type": "external"
      },
      "sophia_mcp_base.MCPServerHealth": {
        "locations": [
          "backend/mcp_servers/mcp_registry.py"
        ],
        "type": "external"
      },
      "mcp_server_fetch.main": {
        "locations": [
          "external/anthropic-mcp-servers/src/fetch/src/mcp_server_fetch/__main__.py"
        ],
        "type": "external"
      },
      "langgraph.checkpoint.sqlite.SqliteSaver": {
        "locations": [
          "backend/workflows/enhanced_langgraph_orchestration.py",
          "backend/workflows/langgraph_agent_orchestration.py"
        ],
        "type": "external"
      },
      "mcp_server_time.server.TimeServer": {
        "locations": [
          "external/anthropic-mcp-servers/src/time/test/time_server_test.py"
        ],
        "type": "external"
      },
      "backend.mcp.base.standardized_mcp_server.StandardizedMCPServer": {
        "locations": [
          "scripts/implement_mcp_ecosystem_optimization.py"
        ],
        "type": "internal"
      },
      "backend.services.enhanced_unified_chat_service.EnhancedUnifiedChatService": {
        "locations": [
          "backend/core/dependencies.py",
          "backend/app/unified_api.py",
          "backend/app/unified_fastapi_app.py",
          "backend/app/core/dependencies.py",
          "backend/scripts/enhanced_asana_integration_test_suite.py"
        ],
        "type": "internal"
      },
      "flask_cors": {
        "locations": [
          "backend/src/main.py",
          "api/index.py",
          "api/index_optimized.py",
          "api/mcp/index.py",
          "api/n8n/webhook.py"
        ],
        "type": "external"
      },
      "contact_repository": {
        "locations": [
          "backend/application/ports/repositories/__init__.py"
        ],
        "type": "external"
      },
      "pytest_examples": {
        "locations": [
          "external/anthropic-mcp-python-sdk/tests/test_examples.py"
        ],
        "type": "external"
      },
      "backend.security.rbac.dependencies.requires_permission": {
        "locations": [
          "backend/security/rbac/__init__.py"
        ],
        "type": "internal"
      },
      "backend.services.group_aware_orchestration_enhancement.GroupAwareOrchestrationEnhancement": {
        "locations": [
          "backend/api/mcp_integration_routes.py",
          "backend/api/mcp_integration_routes.py",
          "backend/api/mcp_integration_routes.py",
          "backend/api/mcp_integration_routes.py",
          "backend/api/mcp_integration_routes.py"
        ],
        "type": "internal"
      },
      "backend.utils.snowflake_gong_connector.SnowflakeGongConnector": {
        "locations": [
          "backend/workflows/langgraph_agent_orchestration.py",
          "backend/agents/specialized/sales_intelligence_agent.py",
          "backend/integrations/enhanced_microsoft_gong_integration.py"
        ],
        "type": "internal"
      },
      "backend.services.event_driven_ingestion_service.IngestionEvent": {
        "locations": [
          "backend/services/sse_progress_streaming_service.py",
          "backend/services/chat_driven_metadata_service.py"
        ],
        "type": "internal"
      },
      "hubspot_client.ApiException": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/company_handler.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/contact_handler.py"
        ],
        "type": "external"
      },
      "clients.contact_client": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/hubspot_client.py"
        ],
        "type": "external"
      },
      "backend.api.data_flow_routes.router": {
        "locations": [
          "backend/app/unified_api.py",
          "backend/app/unified_main.py",
          "backend/app/simple_unified_api.py",
          "backend/app/_deprecated_apps/stabilized_fastapi_app.py",
          "backend/app/_deprecated_apps/working_app.py"
        ],
        "type": "internal"
      },
      "backend.services.large_data_import_service.ImportJob": {
        "locations": [
          "backend/api/large_data_import_routes.py"
        ],
        "type": "internal"
      },
      "backend.models.api_models.DashboardMetrics": {
        "locations": [
          "backend/app/modernized_fastapi_app.py"
        ],
        "type": "internal"
      },
      "backend.services.cortex_agent_service.AgentRequest": {
        "locations": [
          "backend/api/cortex_routes.py"
        ],
        "type": "internal"
      },
      "providers.openai_provider.OpenAIProvider": {
        "locations": [
          "backend/services/chat/__init__.py"
        ],
        "type": "external"
      },
      "git": {
        "locations": [
          "scripts/generate_dev_metrics.py",
          "scripts/cursor_ai_analysis.py",
          "scripts/sync_dev_environment.py",
          "external/anthropic-mcp-servers/src/git/tests/test_server.py",
          "external/anthropic-mcp-servers/src/git/src/mcp_server_git/server.py"
        ],
        "type": "external"
      },
      "protego.Protego": {
        "locations": [
          "external/anthropic-mcp-servers/src/fetch/src/mcp_server_fetch/server.py"
        ],
        "type": "external"
      },
      "graphiti.nodes.EpisodeNode": {
        "locations": [
          "mcp-servers/graphiti/graphiti_mcp_server.py"
        ],
        "type": "external"
      },
      "mcp_servers.codacy.codacy_mcp_server.codacy_server": {
        "locations": [
          "start_enhanced_mcp_servers.py"
        ],
        "type": "external"
      },
      "backend.core.sophia_engine": {
        "locations": [
          "backend/services/payready_business_intelligence.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.adapters.gong_adapter.GongAdapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "flask": {
        "locations": [
          "backend/src/main.py",
          "api/index.py",
          "api/index_optimized.py",
          "api/middleware/security.py",
          "api/mcp/index.py",
          "api/n8n/webhook.py",
          "api/monitoring/health.py",
          "api/monitoring/health.py"
        ],
        "type": "external"
      },
      "backend.utils.snowflake_connection": {
        "locations": [
          "backend/services/intelligent_data_discovery_service.py"
        ],
        "type": "internal"
      },
      "backend.core.contextual_memory_intelligence.ContextualMemoryIntelligence": {
        "locations": [
          "mcp-servers/ai_memory/ai_memory_mcp_server.py"
        ],
        "type": "internal"
      },
      "openpyxl": {
        "locations": [
          "backend/services/large_file_ingestion_service.py",
          "backend/services/enhanced_ingestion_service.py"
        ],
        "type": "external"
      },
      "backend.core.self.cache_manager": {
        "locations": [
          "backend/api/foundational_knowledge_routes.py"
        ],
        "type": "internal"
      },
      "clients.conversation_client.ConversationClient": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/hubspot_client.py"
        ],
        "type": "external"
      },
      "backend.security.audit_logger.info": {
        "locations": [
          "tests/test_audit_logging.py",
          "backend/app/main.py",
          "backend/security/llm_audit.py",
          "backend/security/audit_middleware.py",
          "backend/security/rbac/service.py",
          "backend/security/rbac/dependencies.py",
          "backend/security/rbac/routes.py",
          "backend/security/ephemeral_credentials/service.py",
          "backend/security/ephemeral_credentials/middleware.py",
          "backend/security/ephemeral_credentials/routes.py"
        ],
        "type": "internal"
      },
      "langgraph.prebuilt": {
        "locations": [
          "backend/workflows/enhanced_langgraph_orchestration.py",
          "backend/workflows/langgraph_agent_orchestration.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.base.enhanced_standardized_mcp_server.HealthCheckLevel": {
        "locations": [
          "mcp-servers/lambda_labs_cli/lambda_labs_cli_mcp_server.py",
          "mcp-servers/snowflake_admin/snowflake_admin_mcp_server.py",
          "mcp-servers/notion/notion_mcp_server.py",
          "mcp-servers/ui_ux_agent/ui_ux_agent_mcp_server.py",
          "mcp-servers/hubspot/hubspot_mcp_server.py",
          "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py",
          "mcp-servers/github/github_mcp_server.py",
          "mcp-servers/ag_ui/enhanced_ag_ui_mcp_server.py",
          "mcp-servers/portkey_admin/portkey_admin_mcp_server.py",
          "mcp-servers/codacy/codacy_mcp_server.py",
          "mcp-servers/slack/slack_mcp_server.py",
          "mcp-servers/snowflake_cli_enhanced/snowflake_cli_enhanced_mcp_server.py",
          "mcp-servers/snowflake_cortex/production_snowflake_cortex_mcp_server.py"
        ],
        "type": "internal"
      },
      "base_handler.BaseHandler": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/ticket_handler.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/conversation_handler.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/company_handler.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/search_handler.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/contact_handler.py"
        ],
        "type": "external"
      },
      "backend.core.cache_manager.get_cache_manager": {
        "locations": [
          "backend/core/dependencies.py",
          "backend/app/main.py"
        ],
        "type": "internal"
      },
      "backend.services.vector_indexing_service.VectorIndexingService": {
        "locations": [
          "backend/services/snowflake_intelligence_service.py",
          "backend/services/automated_insights_service.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.adapters.usergems_adapter.UserGemsAdapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "core.formatters.convert_datetime_fields": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/company_client.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/conversation_client.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/contact_client.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/ticket_client.py"
        ],
        "type": "external"
      },
      "core.simple_config.get_gong_access_key": {
        "locations": [
          "backend/integrations/enhanced_gong_integration.py"
        ],
        "type": "external"
      },
      "base.Prompt": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/prompts/__init__.py"
        ],
        "type": "external"
      },
      "handlers.ticket_handler": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py"
        ],
        "type": "external"
      },
      "simple_auth_provider.SimpleOAuthProvider": {
        "locations": [
          "external/anthropic-mcp-python-sdk/examples/servers/simple-auth/mcp_simple_auth/auth_server.py",
          "external/anthropic-mcp-python-sdk/examples/servers/simple-auth/mcp_simple_auth/legacy_as_server.py"
        ],
        "type": "external"
      },
      "mcp_server_git.server": {
        "locations": [
          "external/anthropic-mcp-servers/src/git/tests/test_server.py"
        ],
        "type": "external"
      },
      "backend.services.simplified_portkey_service.SimplifiedLLMRequest": {
        "locations": [
          "backend/api/simplified_llm_routes.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.core.dependency_manager.DependencyManager": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.adapters.figma_adapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.adapters.linear_adapter.LinearAdapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.api.knowledge_dashboard_routes.knowledge_router": {
        "locations": [
          "start_backend_services.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.adapters.estuary_adapter.EstuaryAdapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.mcp.ai_memory_mcp_server.ai_memory_server": {
        "locations": [
          "start_enhanced_mcp_servers.py"
        ],
        "type": "internal"
      },
      "backend.domain.entities.call.Call": {
        "locations": [
          "backend/application/use_cases/analyze_call_sentiment.py",
          "backend/application/ports/repositories/call_repository.py",
          "backend/infrastructure/persistence/repositories/snowflake_call_repository.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.sophia_iac_orchestrator.PlatformType": {
        "locations": [
          "backend/infrastructure/adapters/snowflake_adapter.py",
          "backend/infrastructure/adapters/estuary_adapter.py"
        ],
        "type": "internal"
      },
      "aiomysql": {
        "locations": [
          "backend/core/optimized_connection_manager.py",
          "backend/core/optimized_database_manager.py"
        ],
        "type": "external"
      },
      "backend.core.enhanced_cache_manager.EnhancedCacheManager": {
        "locations": [
          "tests/test_enhanced_cache.py",
          "backend/core/cache_manager.py",
          "backend/workflows/enhanced_langgraph_orchestration.py",
          "backend/services/sophia_universal_chat_service.py",
          "backend/services/cost_engineering_service.py",
          "backend/services/enhanced_snowflake_cortex_service.py"
        ],
        "type": "internal"
      },
      "handlers.contact_handler": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py"
        ],
        "type": "external"
      },
      "backend.services.chat.unified_chat_service.UnifiedChatService": {
        "locations": [
          "backend/app/modernized_fastapi_app.py"
        ],
        "type": "internal"
      },
      "backend.services.sophia_universal_chat_service.SophiaPersonality": {
        "locations": [
          "backend/api/sophia_universal_chat_routes.py"
        ],
        "type": "internal"
      },
      "backend.services.sophia_ai_orchestrator.OrchestrationMode": {
        "locations": [
          "backend/api/sophia_ai_phase1_routes.py"
        ],
        "type": "internal"
      },
      "backend.services.simplified_portkey_service.SophiaLLM": {
        "locations": [
          "backend/api/simplified_llm_routes.py"
        ],
        "type": "internal"
      },
      "mcp_server_snowflake.main.get_snowflake_config": {
        "locations": [
          "external/dynamike_snowflake/snowflake_mcp_server/utils/template.py"
        ],
        "type": "external"
      },
      "deal_repository.DealRepository": {
        "locations": [
          "backend/application/ports/repositories/__init__.py"
        ],
        "type": "external"
      },
      "agents.bi_deployer.BusinessIntelligenceDeployer": {
        "locations": [
          "infrastructure/__init__.py"
        ],
        "type": "external"
      },
      "user": {
        "locations": [
          "backend/domain/entities/__init__.py"
        ],
        "type": "external"
      },
      "qualify_deal": {
        "locations": [
          "backend/application/use_cases/__init__.py"
        ],
        "type": "external"
      },
      "backend.models.conversation.IntegratedConversationRecord": {
        "locations": [
          "backend/services/comprehensive_memory_service.py"
        ],
        "type": "internal"
      },
      "backend.etl.estuary.estuary_configuration_manager.SourceType": {
        "locations": [
          "backend/etl/enhanced_ingestion_service.py"
        ],
        "type": "internal"
      },
      "get_closed_ticket_conversations.get_ticket_conversations": {
        "locations": [
          "mcp-servers/hubspot/tests/__init__.py"
        ],
        "type": "external"
      },
      "backend.core.optimized_database_manager.OptimizedDatabaseManager": {
        "locations": [
          "backend/etl/enhanced_unified_data_pipeline.py",
          "backend/etl/enhanced_ingestion_service.py"
        ],
        "type": "internal"
      },
      "backend.domain.entities.deal.Deal": {
        "locations": [
          "backend/application/use_cases/qualify_deal.py",
          "backend/application/ports/repositories/deal_repository.py"
        ],
        "type": "internal"
      },
      "mcp_servers.ai_memory.ai_memory_mcp_server.EnhancedAiMemoryMCPServer": {
        "locations": [
          "backend/agents/specialized/asana_project_intelligence_agent.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.server.models": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py"
        ],
        "type": "internal"
      },
      "simple_auth_provider.SimpleAuthSettings": {
        "locations": [
          "external/anthropic-mcp-python-sdk/examples/servers/simple-auth/mcp_simple_auth/auth_server.py",
          "external/anthropic-mcp-python-sdk/examples/servers/simple-auth/mcp_simple_auth/legacy_as_server.py"
        ],
        "type": "external"
      },
      "mcp_server_hubspot.hubspot_client": {
        "locations": [
          "mcp-servers/hubspot/tests/get_closed_ticket_conversations.py"
        ],
        "type": "external"
      },
      "langgraph.graph.message.add_messages": {
        "locations": [
          "backend/workflows/enhanced_langgraph_orchestration.py"
        ],
        "type": "external"
      },
      "gong_data_quality.MappingReport": {
        "locations": [
          "backend/monitoring/__init__.py"
        ],
        "type": "external"
      },
      "backend.services.knowledge_service.SearchFilters": {
        "locations": [
          "backend/api/knowledge_dashboard_routes.py"
        ],
        "type": "internal"
      },
      "backend.mcp.base.standardized_mcp_server.SyncPriority": {
        "locations": [
          "scripts/implement_mcp_ecosystem_optimization.py"
        ],
        "type": "internal"
      },
      "backend.core.dependencies.get_request_chat_service": {
        "locations": [
          "backend/api/universal_chat_routes.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.base.standardized_mcp_server.SyncPriority": {
        "locations": [
          "backend/core/cross_platform_sync_orchestrator.py",
          "backend/core/mcp_sync_orchestrator_config.py",
          "mcp-servers/lambda_labs_cli/lambda_labs_cli_mcp_server.py",
          "mcp-servers/ui_ux_agent/ui_ux_agent_mcp_server.py",
          "mcp-servers/ai_memory/ai_memory_mcp_server.py",
          "mcp-servers/ai_memory/enhanced_ai_memory_server.py",
          "mcp-servers/ag_ui/ag_ui_mcp_server.py",
          "mcp-servers/portkey_admin/portkey_admin_mcp_server.py",
          "mcp-servers/codacy/enhanced_codacy_server.py",
          "mcp-servers/codacy/codacy_mcp_server.py",
          "mcp-servers/snowflake_cli_enhanced/snowflake_cli_enhanced_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.server.stdio": {
        "locations": [
          "backend/mcp_servers/optimized_ai_memory_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.agents.specialized.marketing_analysis_agent.MarketingAnalysisAgent": {
        "locations": [
          "backend/agents/integrations/gong_data_integration.py",
          "backend/agents/enhanced/cortex_agent_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.agents.core.base_agent.BaseAgent": {
        "locations": [
          "backend/agents/specialized/slack_analysis_agent.py",
          "backend/agents/specialized/linear_project_health_agent.py",
          "backend/agents/specialized/enhanced_sales_coach_agent.py",
          "backend/agents/specialized/interactive_sales_coach_agent.py",
          "backend/agents/specialized/sales_intelligence_agent.py",
          "backend/agents/specialized/call_analysis_agent.py",
          "backend/agents/specialized/marketing_analysis_agent.py",
          "backend/agents/enhanced/cortex_agent_orchestrator.py",
          "backend/services/payready_business_intelligence.py"
        ],
        "type": "internal"
      },
      "user.UserRole": {
        "locations": [
          "backend/domain/entities/__init__.py"
        ],
        "type": "external"
      },
      "backend.security.ephemeral_credentials.models.CredentialStatus": {
        "locations": [
          "backend/security/ephemeral_credentials/service.py",
          "backend/security/ephemeral_credentials/__init__.py"
        ],
        "type": "internal"
      },
      "langgraph.graph": {
        "locations": [
          "backend/workflows/enhanced_langgraph_orchestration.py",
          "backend/workflows/langgraph_agent_orchestration.py"
        ],
        "type": "external"
      },
      "backend.integrations.gong_redis_client.RedisNotificationClient": {
        "locations": [
          "backend/agents/integrations/gong_data_integration.py"
        ],
        "type": "internal"
      },
      "deal": {
        "locations": [
          "backend/domain/entities/__init__.py"
        ],
        "type": "external"
      },
      "backend.integrations.redis_service.RedisService": {
        "locations": [
          "scripts/ai_enhanced_dns_manager.py"
        ],
        "type": "internal"
      },
      "backend.services.analytics_service.AnalyticsService": {
        "locations": [
          "backend/api/project_dashboard_routes.py"
        ],
        "type": "internal"
      },
      "backend.services.team_service.TeamService": {
        "locations": [
          "backend/api/project_dashboard_routes.py"
        ],
        "type": "internal"
      },
      "comprehensive_memory_manager": {
        "locations": [
          "backend/core/contextual_memory_intelligence.py"
        ],
        "type": "external"
      },
      "analyze_call_sentiment.AnalyzeCallRequest": {
        "locations": [
          "backend/application/use_cases/__init__.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.server.fastmcp": {
        "locations": [
          "backend/mcp_servers/enhanced_mcp_base.py",
          "mcp-servers/snowflake_cortex/production_snowflake_cortex_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.security.ephemeral_credentials.models.CredentialValidationResponse": {
        "locations": [
          "backend/security/ephemeral_credentials/service.py",
          "backend/security/ephemeral_credentials/__init__.py",
          "backend/security/ephemeral_credentials/routes.py"
        ],
        "type": "internal"
      },
      "backend.services.knowledge_service.UploadResponse": {
        "locations": [
          "backend/api/knowledge_dashboard_routes.py"
        ],
        "type": "internal"
      },
      "backend.models.api_models.ChatResponse": {
        "locations": [
          "backend/app/modernized_fastapi_app.py"
        ],
        "type": "internal"
      },
      "mcp_servers.hubspot.hubspot_mcp_server": {
        "locations": [
          "start_mcp_services.py"
        ],
        "type": "external"
      },
      "providers.portkey_provider.PortkeyProvider": {
        "locations": [
          "backend/services/chat/__init__.py"
        ],
        "type": "external"
      },
      "examples.fastmcp.desktop": {
        "locations": [
          "external/anthropic-mcp-python-sdk/tests/test_examples.py"
        ],
        "type": "external"
      },
      "examples.fastmcp.desktop.mcp": {
        "locations": [
          "external/anthropic-mcp-python-sdk/tests/test_examples.py"
        ],
        "type": "external"
      },
      "mcp_servers.github.github_mcp_server.github_server": {
        "locations": [
          "start_mcp_services.py"
        ],
        "type": "external"
      },
      "snowflake_call_repository.SnowflakeCallRepository": {
        "locations": [
          "backend/infrastructure/persistence/repositories/__init__.py"
        ],
        "type": "external"
      },
      "backend.services.memory_preservation_service.MemorySourceSystem": {
        "locations": [
          "backend/services/sophia_ai_orchestrator.py"
        ],
        "type": "internal"
      },
      "langgraph.graph.StateGraph": {
        "locations": [
          "backend/workflows/enhanced_langgraph_orchestration.py",
          "backend/workflows/langgraph_agent_orchestration.py"
        ],
        "type": "external"
      },
      "backend.agents.specialized.call_analysis_agent.CallAnalysisAgent": {
        "locations": [
          "backend/agents/integrations/gong_data_integration.py",
          "backend/agents/enhanced/cortex_agent_orchestrator.py"
        ],
        "type": "internal"
      },
      "core.simple_config.config": {
        "locations": [
          "backend/services/enhanced_data_ingestion.py"
        ],
        "type": "external"
      },
      "backend.api.knowledge_base_routes": {
        "locations": [
          "backend/app/unified_fastapi_app.py",
          "backend/app/unified_main.py"
        ],
        "type": "internal"
      },
      "backend.integrations.gong_webhook_server.RetryManager": {
        "locations": [
          "backend/integrations/gong_api_client.py"
        ],
        "type": "internal"
      },
      "backend.services.unified_ai_orchestration_service.UnifiedAIOrchestrationService": {
        "locations": [
          "backend/api/unified_ai_routes.py"
        ],
        "type": "internal"
      },
      "backend.core.dependencies.get_audit_logger": {
        "locations": [
          "backend/api/enhanced_unified_chat_routes.py"
        ],
        "type": "internal"
      },
      "backend.core.enhanced_cache_manager.initialize_cache_system": {
        "locations": [
          "backend/core/cache_manager.py"
        ],
        "type": "internal"
      },
      "backend.security.ephemeral_credentials.models.CredentialType": {
        "locations": [
          "tests/test_ephemeral_credentials.py",
          "backend/security/ephemeral_credentials/service.py",
          "backend/security/ephemeral_credentials/__init__.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.adapters.apollo_adapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.api.monitoring_routes": {
        "locations": [
          "backend/app/unified_fastapi_app.py"
        ],
        "type": "internal"
      },
      "backend.integrations.enhanced_microsoft_gong_integration.enhanced_microsoft_gong_integration": {
        "locations": [
          "scripts/test_enhanced_coaching.py"
        ],
        "type": "internal"
      },
      "backend.mcp.costar_mcp_server.CoStarMCPServer": {
        "locations": [
          "scripts/ingest_costar_data.py"
        ],
        "type": "internal"
      },
      "settings": {
        "locations": [
          "backend/core/security.py"
        ],
        "type": "external"
      },
      "mcp_servers.github.github_mcp_server": {
        "locations": [
          "start_mcp_services.py"
        ],
        "type": "external"
      },
      "werkzeug.exceptions.TooManyRequests": {
        "locations": [
          "api/middleware/security.py"
        ],
        "type": "external"
      },
      "backend.infrastructure.adapters.openrouter_adapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.utils.optimized_snowflake_cortex_service.optimized_cortex_service": {
        "locations": [
          "backend/app/_deprecated_apps/phase2_optimized_fastapi_app.py",
          "backend/app/_deprecated_apps/phase2_optimized_app.py",
          "backend/agents/integrations/optimized_gong_data_integration.py",
          "backend/mcp_servers/optimized_ai_memory_mcp_server.py",
          "scripts/deploy_performance_optimizations.py"
        ],
        "type": "internal"
      },
      "backend.services.enhanced_sentiment_analyzer.EnhancedSentimentAnalyzer": {
        "locations": [
          "backend/integrations/enhanced_microsoft_gong_integration.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.base.enhanced_standardized_mcp_server.EnhancedStandardizedMCPServer": {
        "locations": [
          "mcp-servers/lambda_labs_cli/lambda_labs_cli_mcp_server.py",
          "mcp-servers/snowflake_admin/snowflake_admin_mcp_server.py",
          "mcp-servers/notion/notion_mcp_server.py",
          "mcp-servers/ui_ux_agent/ui_ux_agent_mcp_server.py",
          "mcp-servers/hubspot/hubspot_mcp_server.py",
          "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py",
          "mcp-servers/github/github_mcp_server.py",
          "mcp-servers/ag_ui/enhanced_ag_ui_mcp_server.py",
          "mcp-servers/portkey_admin/portkey_admin_mcp_server.py",
          "mcp-servers/codacy/codacy_mcp_server.py",
          "mcp-servers/slack/slack_mcp_server.py",
          "mcp-servers/snowflake_cli_enhanced/snowflake_cli_enhanced_mcp_server.py",
          "mcp-servers/snowflake_cortex/production_snowflake_cortex_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.security.rbac.setup_rbac": {
        "locations": [
          "backend/app/main.py"
        ],
        "type": "internal"
      },
      "gong_data_quality": {
        "locations": [
          "backend/monitoring/quality_rules.py",
          "backend/monitoring/alert_manager.py",
          "backend/monitoring/__init__.py"
        ],
        "type": "external"
      },
      "scripts.dns_manager": {
        "locations": [
          "scripts/ai_enhanced_dns_manager.py"
        ],
        "type": "internal"
      },
      "websockets.server": {
        "locations": [
          "backend/services/real_time_streaming_service.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.optimized_network.MCPNetworkConfig": {
        "locations": [
          "backend/mcp_servers/optimized_mcp_client.py",
          "backend/mcp_servers/optimized_mcp_server.py"
        ],
        "type": "internal"
      },
      "n8n.webhook": {
        "locations": [
          "api/index_optimized.py"
        ],
        "type": "external"
      },
      "backend.services.enhanced_portkey_orchestrator.EnhancedLLMResponse": {
        "locations": [
          "backend/api/enhanced_ceo_chat_routes.py"
        ],
        "type": "internal"
      },
      "backend.services.intelligent_data_discovery_service.DataQuality": {
        "locations": [
          "backend/services/sophia_universal_chat_service.py"
        ],
        "type": "internal"
      },
      "backend.services.sophia_universal_chat_service.SophiaUniversalChatService": {
        "locations": [
          "backend/core/dependencies.py",
          "backend/app/working_fastapi_app.py",
          "backend/api/sophia_universal_chat_routes.py",
          "backend/api/asana_integration_routes.py"
        ],
        "type": "internal"
      },
      "websockets.server.WebSocketServerProtocol": {
        "locations": [
          "backend/services/real_time_streaming_service.py"
        ],
        "type": "external"
      },
      "contact.ContactType": {
        "locations": [
          "backend/domain/entities/__init__.py"
        ],
        "type": "external"
      },
      "backend.services.cost_engineering_service.TaskRequest": {
        "locations": [
          "tests/test_phase2_integration.py",
          "backend/services/enhanced_snowflake_cortex_service.py"
        ],
        "type": "internal"
      },
      "agents.secret_manager.SecretComplianceManager": {
        "locations": [
          "infrastructure/__init__.py"
        ],
        "type": "external"
      },
      "backend.utils.snowflake_gong_connector.get_gong_connector": {
        "locations": [
          "backend/agents/specialized/call_analysis_agent.py"
        ],
        "type": "internal"
      },
      "backend.core.integrated_performance_monitoring.get_performance_dashboard": {
        "locations": [
          "scripts/activate_performance_optimizations.py",
          "scripts/activate_performance_optimizations.py"
        ],
        "type": "internal"
      },
      "backend.api.llm_strategy_routes.router": {
        "locations": [
          "backend/app/unified_api.py",
          "backend/app/unified_main.py",
          "backend/app/simple_unified_api.py",
          "backend/app/_deprecated_apps/stabilized_fastapi_app.py",
          "backend/app/_deprecated_apps/working_app.py"
        ],
        "type": "internal"
      },
      "backend.models.api_models.ErrorResponse": {
        "locations": [
          "backend/app/modernized_fastapi_app.py"
        ],
        "type": "internal"
      },
      "gong_data_quality.EnhancementReport": {
        "locations": [
          "backend/monitoring/__init__.py"
        ],
        "type": "external"
      },
      "backend.security.rbac.models.Role": {
        "locations": [
          "backend/security/rbac/service.py",
          "backend/security/rbac/__init__.py",
          "backend/security/rbac/routes.py"
        ],
        "type": "internal"
      },
      "backend.core.integration_registry.IntegrationRegistry": {
        "locations": [
          "backend/core/intelligent_data_ingestion.py",
          "backend/agents/core/langgraph_agent_base.py",
          "backend/agents/integrations/gong_data_integration.py",
          "backend/mcp_servers/costar_mcp_server.py"
        ],
        "type": "internal"
      },
      "tests.server.fastmcp.auth.test_auth_integration": {
        "locations": [
          "external/anthropic-mcp-python-sdk/tests/server/auth/test_error_handling.py"
        ],
        "type": "internal"
      },
      "mcp_servers.snowflake.snowflake_mcp_server": {
        "locations": [
          "start_mcp_services.py"
        ],
        "type": "external"
      },
      "backend.services.cost_engineering_service.CostOptimizationStrategy": {
        "locations": [
          "tests/test_phase2_integration.py"
        ],
        "type": "internal"
      },
      "backend.core.auto_esc_config.EnhancedSettings": {
        "locations": [
          "backend/security/secret_management.py"
        ],
        "type": "internal"
      },
      "backend.core.integrated_performance_monitoring.track_metric": {
        "locations": [
          "scripts/activate_performance_optimizations.py"
        ],
        "type": "internal"
      },
      "backend.agents.enhanced.data_models.GongCallData": {
        "locations": [
          "backend/services/comprehensive_memory_service.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.adapters.gong_adapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "router": {
        "locations": [
          "backend/presentation/api/__init__.py"
        ],
        "type": "external"
      },
      "astor": {
        "locations": [
          "scripts/add_type_annotations.py",
          "scripts/add_type_annotations.py"
        ],
        "type": "external"
      },
      "models.chat_models.ChatResponse": {
        "locations": [
          "backend/services/chat/base_chat_service.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "backend.core.security_config.SecurityConfig": {
        "locations": [
          "backend/core/auto_esc_config.py",
          "scripts/security/setup_pulumi_esc_secrets.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.core.policy_engine.PolicyEngine": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "sqlparse.sql": {
        "locations": [
          "external/isaacwasserman_snowflake/src/mcp_snowflake_server/write_detector.py"
        ],
        "type": "external"
      },
      "client.session_group.ClientSessionGroup": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/__init__.py"
        ],
        "type": "external"
      },
      "backend.infrastructure.adapters.openrouter_adapter.OpenRouterAdapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.agents.specialized.snowflake_admin_agent.confirm_snowflake_admin_task": {
        "locations": [
          "backend/services/snowflake_admin_chat_integration.py"
        ],
        "type": "internal"
      },
      "contact": {
        "locations": [
          "backend/domain/entities/__init__.py"
        ],
        "type": "external"
      },
      "auto_esc_config.AutoESCConfig": {
        "locations": [
          "backend/core/config.py",
          "backend/core/secure_credential_manager.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.server.stdio.stdio_server": {
        "locations": [
          "backend/mcp_servers/optimized_ai_memory_mcp_server.py"
        ],
        "type": "internal"
      },
      "faiss": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/faiss_manager.py"
        ],
        "type": "external"
      },
      "backend.services.smart_ai_service.PerformanceTier": {
        "locations": [
          "backend/api/smart_ai_routes.py"
        ],
        "type": "internal"
      },
      "backend.api.linear_integration_routes.router": {
        "locations": [
          "backend/app/unified_api.py",
          "backend/app/unified_main.py"
        ],
        "type": "internal"
      },
      "backend.utils.snowflake_cortex_service.summarize_gong_call_with_context": {
        "locations": [
          "backend/agents/specialized/call_analysis_agent.py"
        ],
        "type": "internal"
      },
      "backend.core.snowflake_override.get_snowflake_connection_params": {
        "locations": [
          "implement_phase2a_advanced.py",
          "start_sophia_fixed.py",
          "fix_snowflake_codewide.py",
          "final_snowflake_fix.py",
          "backend/core/optimized_connection_manager.py",
          "backend/mcp_servers/mcp_health.py"
        ],
        "type": "internal"
      },
      "backend.integrations.enhanced_microsoft_gong_integration.RealTimeCoachingInsight": {
        "locations": [
          "backend/agents/specialized/enhanced_sales_coach_agent.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.server.Server": {
        "locations": [
          "backend/mcp_servers/optimized_ai_memory_mcp_server.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py",
          "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py"
        ],
        "type": "internal"
      },
      "mcp_server_snowflake.utils.snowflake_conn": {
        "locations": [
          "external/dynamike_snowflake/snowflake_mcp_server/utils/template.py"
        ],
        "type": "external"
      },
      "cli.app": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/cli/__init__.py"
        ],
        "type": "external"
      },
      "backend.services.snowflake_intelligence_service.IntelligenceQuery": {
        "locations": [
          "backend/api/snowflake_intelligence_routes.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.sophia_iac_orchestrator.PlatformAdapter": {
        "locations": [
          "backend/infrastructure/adapters/snowflake_adapter.py",
          "backend/infrastructure/adapters/estuary_adapter.py"
        ],
        "type": "internal"
      },
      "mcp_simple_auth.server": {
        "locations": [
          "external/anthropic-mcp-python-sdk/examples/servers/simple-auth/mcp_simple_auth/__main__.py"
        ],
        "type": "external"
      },
      "gong_data_quality.QualityReport": {
        "locations": [
          "backend/monitoring/alert_manager.py",
          "backend/monitoring/__init__.py"
        ],
        "type": "external"
      },
      "backend.core.settings.Settings": {
        "locations": [
          "backend/app/modernized_fastapi_app.py"
        ],
        "type": "internal"
      },
      "backend.core.self_optimization.SophiaSelfOptimizer": {
        "locations": [
          "scripts/test_unified_intelligence.py"
        ],
        "type": "internal"
      },
      "cline_v3_18_features.get_capabilities": {
        "locations": [
          "backend/mcp_servers/mixins/__init__.py"
        ],
        "type": "external"
      },
      "backend.services.semantic_layer_service.SemanticLayerService": {
        "locations": [
          "fix_critical_startup_issues.py",
          "backend/etl/enhanced_ingestion_service.py",
          "backend/services/snowflake_intelligence_service.py",
          "backend/services/automated_insights_service.py",
          "backend/services/predictive_analytics_service.py",
          "backend/services/schema_discovery_service.py",
          "backend/services/vector_indexing_service.py"
        ],
        "type": "internal"
      },
      "backend.services.mcp_orchestration_service.ServerStatus": {
        "locations": [
          "backend/monitoring/group_health_monitoring.py",
          "backend/services/group_aware_orchestration_enhancement.py",
          "backend/services/enhanced_mcp_orchestration_service.py"
        ],
        "type": "internal"
      },
      "handlers.company_handler.CompanyHandler": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py"
        ],
        "type": "external"
      },
      "examples.fastmcp.complex_inputs": {
        "locations": [
          "external/anthropic-mcp-python-sdk/tests/test_examples.py"
        ],
        "type": "external"
      },
      "backend.workflows.multi_agent_workflow.WorkflowResult": {
        "locations": [
          "backend/agents/specialized/sales_intelligence_agent.py"
        ],
        "type": "internal"
      },
      "server.Context": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/__init__.py"
        ],
        "type": "external"
      },
      "backend.core.logger.logger": {
        "locations": [
          "backend/api/slack_linear_knowledge_routes.py",
          "backend/api/kb_management_routes.py",
          "backend/api/project_dashboard_routes.py",
          "backend/api/large_data_import_routes.py",
          "backend/api/foundational_knowledge_routes.py",
          "backend/services/foundational_knowledge_service.py",
          "backend/services/large_data_import_service.py"
        ],
        "type": "internal"
      },
      "graphiti.edges": {
        "locations": [
          "mcp-servers/graphiti/graphiti_mcp_server.py"
        ],
        "type": "external"
      },
      "backend.services.enhanced_cortex_agent_service.get_enhanced_cortex_agent_service": {
        "locations": [
          "deploy_comprehensive_upgrade.py",
          "backend/api/enhanced_cortex_routes.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.adapters.figma_adapter.FigmaAdapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "scripts.snowflake_config_manager.SnowflakeConfigManager": {
        "locations": [
          "backend/infrastructure/adapters/snowflake_adapter.py"
        ],
        "type": "internal"
      },
      "qualify_deal.QualifyDealUseCase": {
        "locations": [
          "backend/application/use_cases/__init__.py"
        ],
        "type": "external"
      },
      "backend.services.intelligent_data_discovery_service.ChunkingStrategy": {
        "locations": [
          "backend/services/sophia_universal_chat_service.py"
        ],
        "type": "internal"
      },
      "cline_v3_18_features": {
        "locations": [
          "backend/mcp_servers/mixins/__init__.py"
        ],
        "type": "external"
      },
      "backend.agents.specialized.snowflake_admin_agent.AdminTaskResponse": {
        "locations": [
          "backend/services/snowflake_admin_chat_integration.py"
        ],
        "type": "internal"
      },
      "mcp_server_git.server.git_checkout": {
        "locations": [
          "external/anthropic-mcp-servers/src/git/tests/test_server.py"
        ],
        "type": "external"
      },
      "opentelemetry": {
        "locations": [
          "infrastructure/agents/base_agent_template.py"
        ],
        "type": "external"
      },
      "inline_snapshot.snapshot": {
        "locations": [
          "external/anthropic-mcp-python-sdk/tests/shared/test_sse.py"
        ],
        "type": "external"
      },
      "backend.services.enhanced_snowflake_cortex_service.AIFunctionType": {
        "locations": [
          "tests/test_phase2_integration.py"
        ],
        "type": "internal"
      },
      "radon.metrics": {
        "locations": [
          "mcp-servers/codacy/codacy_mcp_server.py"
        ],
        "type": "external"
      },
      "msgpack": {
        "locations": [
          "scripts/security_fixes_examples.py"
        ],
        "type": "external"
      },
      "backend.core.secure_snowflake_config.SecureSnowflakeConfig": {
        "locations": [
          "backend/etl/enhanced_unified_data_pipeline_backup.py"
        ],
        "type": "internal"
      },
      "backend.agents.infrastructure.sophia_infrastructure_agent.InfrastructureContext": {
        "locations": [
          "scripts/ai_enhanced_dns_manager.py"
        ],
        "type": "internal"
      },
      "backend.core.cache_manager.initialize_cache_system": {
        "locations": [
          "backend/app/main.py"
        ],
        "type": "internal"
      },
      "mcp_servers.snowflake.snowflake_mcp_server.snowflake_server": {
        "locations": [
          "start_mcp_services.py"
        ],
        "type": "external"
      },
      "agents.enhanced_sophia_agent": {
        "locations": [
          "infrastructure/__init__.py"
        ],
        "type": "external"
      },
      "backend.security.audit_logger.AuditEventType": {
        "locations": [
          "tests/test_audit_logging.py",
          "backend/app/main.py",
          "backend/security/llm_audit.py",
          "backend/security/audit_middleware.py",
          "backend/security/rbac/service.py",
          "backend/security/rbac/dependencies.py",
          "backend/security/rbac/routes.py",
          "backend/security/ephemeral_credentials/service.py",
          "backend/security/ephemeral_credentials/middleware.py",
          "backend/security/ephemeral_credentials/routes.py"
        ],
        "type": "internal"
      },
      "backend.services.enhanced_mcp_orchestration_service.EnhancedMCPOrchestrationService": {
        "locations": [
          "backend/app/unified_fastapi_app.py"
        ],
        "type": "internal"
      },
      "backend.security.ephemeral_credentials.models.CredentialRequest": {
        "locations": [
          "tests/test_ephemeral_credentials.py",
          "backend/security/ephemeral_credentials/service.py",
          "backend/security/ephemeral_credentials/__init__.py",
          "backend/security/ephemeral_credentials/routes.py"
        ],
        "type": "internal"
      },
      "backend.workflows.enhanced_langgraph_orchestration.WorkflowEvent": {
        "locations": [
          "backend/services/sophia_universal_chat_service.py"
        ],
        "type": "internal"
      },
      "gemini_cli_integration.gemini_cli_provider.GeminiCLIProvider": {
        "locations": [
          "backend/mcp_servers/optimized_mcp_server.py",
          "backend/mcp_servers/base/standardized_mcp_server.py"
        ],
        "type": "external"
      },
      "hubspot_client": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/__init__.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/company_handler.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/contact_handler.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/base_handler.py"
        ],
        "type": "external"
      },
      "backend.services.sophia_universal_chat_service.UserAccessLevel": {
        "locations": [
          "backend/api/sophia_universal_chat_routes.py"
        ],
        "type": "internal"
      },
      "backend.integrations.advanced_estuary_flow_manager.get_advanced_estuary_flow_manager": {
        "locations": [
          "deploy_comprehensive_upgrade.py",
          "backend/api/enhanced_cortex_routes.py"
        ],
        "type": "internal"
      },
      "core.error_handler": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/company_client.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/conversation_client.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/contact_client.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/ticket_client.py"
        ],
        "type": "external"
      },
      "money.Currency": {
        "locations": [
          "backend/domain/value_objects/__init__.py"
        ],
        "type": "external"
      },
      "client.stdio": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/__init__.py"
        ],
        "type": "external"
      },
      "backend.mcp.costar_mcp_server.CoStarImportResult": {
        "locations": [
          "scripts/ingest_costar_data.py"
        ],
        "type": "internal"
      },
      "tool_manager.ToolManager": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/tools/__init__.py"
        ],
        "type": "external"
      },
      "backend.api.snowflake_admin_routes": {
        "locations": [
          "backend/app/unified_fastapi_app.py",
          "backend/app/unified_main.py"
        ],
        "type": "internal"
      },
      "backend.core.cross_platform_sync_orchestrator.SyncPriority": {
        "locations": [
          "backend/core/mcp_sync_orchestrator_config.py"
        ],
        "type": "internal"
      },
      "backend.integrations.estuary_flow_manager.EstuaryFlowManager": {
        "locations": [
          "deploy_estuary_foundation.py",
          "scripts/migrate_to_estuary.py"
        ],
        "type": "internal"
      },
      "backend.agents.specialized.asana_project_intelligence_agent.AsanaProjectIntelligenceAgent": {
        "locations": [
          "backend/scripts/enhanced_asana_integration_test_suite.py",
          "backend/api/asana_integration_routes.py"
        ],
        "type": "internal"
      },
      "mcp_server_snowflake.utils.snowflake_conn.get_snowflake_connection": {
        "locations": [
          "external/dynamike_snowflake/snowflake_mcp_server/utils/template.py"
        ],
        "type": "external"
      },
      "lowlevel.Server": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/__init__.py"
        ],
        "type": "external"
      },
      "get_closed_ticket_conversations.main": {
        "locations": [
          "mcp-servers/hubspot/tests/__init__.py"
        ],
        "type": "external"
      },
      "mcp_server_time.server": {
        "locations": [
          "external/anthropic-mcp-servers/src/time/test/time_server_test.py"
        ],
        "type": "external"
      },
      "backend.services.enhanced_sentiment_analyzer.SentimentChannel": {
        "locations": [
          "enhanced_startup.py",
          "simple_startup.py",
          "backend/integrations/enhanced_microsoft_gong_integration.py"
        ],
        "type": "internal"
      },
      "langgraph.graph.END": {
        "locations": [
          "backend/workflows/enhanced_langgraph_orchestration.py",
          "backend/workflows/langgraph_agent_orchestration.py"
        ],
        "type": "external"
      },
      "backend.infrastructure.core.webhook_router.WebhookRouter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.security.rbac.models.ActionType": {
        "locations": [
          "tests/test_rbac.py",
          "backend/security/rbac/service.py",
          "backend/security/rbac/__init__.py",
          "backend/security/rbac/dependencies.py",
          "backend/security/rbac/routes.py",
          "backend/security/ephemeral_credentials/routes.py"
        ],
        "type": "internal"
      },
      "backend.api.knowledge_base_routes.router": {
        "locations": [
          "backend/app/unified_main.py"
        ],
        "type": "internal"
      },
      "backend.security.ephemeral_credentials.models.CredentialScope": {
        "locations": [
          "tests/test_ephemeral_credentials.py",
          "backend/security/ephemeral_credentials/service.py",
          "backend/security/ephemeral_credentials/__init__.py",
          "backend/security/ephemeral_credentials/middleware.py"
        ],
        "type": "internal"
      },
      "backend.services.enhanced_cortex_agent_service.MultimodalAgentRequest": {
        "locations": [
          "deploy_comprehensive_upgrade.py"
        ],
        "type": "internal"
      },
      "backend.websocket.resilient_websocket_manager.ResilientWebSocketManager": {
        "locations": [
          "backend/services/sse_progress_streaming_service.py"
        ],
        "type": "internal"
      },
      "backend.security.rbac.dependencies.require_system_admin": {
        "locations": [
          "backend/security/rbac/__init__.py",
          "backend/security/rbac/routes.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.optimized_network.OptimizedMCPNetwork": {
        "locations": [
          "backend/mcp_servers/optimized_mcp_client.py",
          "backend/mcp_servers/optimized_mcp_server.py"
        ],
        "type": "internal"
      },
      "server": {
        "locations": [
          "external/anthropic-mcp-servers/src/time/src/mcp_server_time/__init__.py",
          "external/anthropic-mcp-servers/src/fetch/src/mcp_server_fetch/__init__.py",
          "external/anthropic-mcp-servers/src/git/src/mcp_server_git/__init__.py",
          "external/anthropic-mcp-python-sdk/examples/servers/simple-prompt/mcp_simple_prompt/__main__.py",
          "external/anthropic-mcp-python-sdk/examples/servers/simple-tool/mcp_simple_tool/__main__.py",
          "external/anthropic-mcp-python-sdk/examples/servers/simple-streamablehttp/mcp_simple_streamablehttp/__main__.py",
          "external/anthropic-mcp-python-sdk/examples/servers/simple-streamablehttp-stateless/mcp_simple_streamablehttp_stateless/__main__.py",
          "external/anthropic-mcp-python-sdk/examples/servers/simple-resource/mcp_simple_resource/__main__.py",
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/__init__.py",
          "external/anthropic-mcp-python-sdk/src/mcp/server/lowlevel/__init__.py"
        ],
        "type": "external"
      },
      "backend.api.chat_routes": {
        "locations": [
          "backend/app/unified_fastapi_app.py"
        ],
        "type": "internal"
      },
      "backend.integrations.buzz_integration.BuzzAISystem": {
        "locations": [
          "backend/services/payready_business_intelligence.py"
        ],
        "type": "internal"
      },
      "backend.workflows.enhanced_langgraph_orchestration.HumanCheckpoint": {
        "locations": [
          "tests/test_phase2_integration.py"
        ],
        "type": "internal"
      },
      "token_verifier": {
        "locations": [
          "external/anthropic-mcp-python-sdk/examples/servers/simple-auth/mcp_simple_auth/server.py"
        ],
        "type": "external"
      },
      "backend.services.foundational_knowledge_service.FoundationalDataType": {
        "locations": [
          "backend/scripts/ingest_foundational_kb.py",
          "backend/api/foundational_knowledge_routes.py"
        ],
        "type": "internal"
      },
      "handlers.search_handler": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py"
        ],
        "type": "external"
      },
      "backend.infrastructure.adapters.lambda_labs_adapter.LambdaLabsAdapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.core.absolute_snowflake_override": {
        "locations": [
          "start_sophia_absolute_fix.py",
          "comprehensive_infrastructure_audit.py"
        ],
        "type": "internal"
      },
      "backend.security.ephemeral_credentials.models.CredentialResponse": {
        "locations": [
          "backend/security/ephemeral_credentials/service.py",
          "backend/security/ephemeral_credentials/__init__.py",
          "backend/security/ephemeral_credentials/routes.py"
        ],
        "type": "internal"
      },
      "radon.complexity": {
        "locations": [
          "mcp-servers/codacy/codacy_mcp_server.py"
        ],
        "type": "external"
      },
      "bandit.core": {
        "locations": [
          "mcp-servers/codacy/codacy_mcp_server.py",
          "mcp-servers/codacy/codacy_mcp_server.py"
        ],
        "type": "external"
      },
      "backend.presentation.api.router.create_application_router": {
        "locations": [
          "backend/app/main.py",
          "backend/app/fastapi_app.py"
        ],
        "type": "internal"
      },
      "user.PermissionLevel": {
        "locations": [
          "backend/domain/entities/__init__.py"
        ],
        "type": "external"
      },
      "shared.exceptions": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/__init__.py"
        ],
        "type": "external"
      },
      "backend.agents.infrastructure.sophia_infrastructure_agent.SophiaInfrastructureAgent": {
        "locations": [
          "backend/services/infrastructure_chat/sophia_infrastructure_chat.py",
          "scripts/performance_baseline.py",
          "scripts/comprehensive_health_check.py"
        ],
        "type": "internal"
      },
      "backend.etl.estuary.estuary_configuration_manager.EstuaryConfigurationManager": {
        "locations": [
          "backend/etl/netsuite/estuary_netsuite_setup.py"
        ],
        "type": "internal"
      },
      "handlers.conversation_handler.ConversationHandler": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.optimized_network.RetryStrategy": {
        "locations": [
          "backend/mcp_servers/optimized_mcp_client.py",
          "backend/mcp_servers/optimized_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.application.ports.repositories.deal_repository.DealRepository": {
        "locations": [
          "backend/application/use_cases/qualify_deal.py"
        ],
        "type": "internal"
      },
      "faiss_manager.FaissManager": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/utils.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/search_handler.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/base_handler.py"
        ],
        "type": "external"
      },
      "models.chat_models.ChatUsage": {
        "locations": [
          "backend/services/chat/base_chat_service.py"
        ],
        "type": "external"
      },
      "utils.search_in_faiss": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/search_handler.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.server.lowlevel.NotificationOptions": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py"
        ],
        "type": "internal"
      },
      "backend.security.audit_logger.AuditLogLevel": {
        "locations": [
          "tests/test_audit_logging.py",
          "backend/security/llm_audit.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.base.standardized_mcp_server.MCPServerConfig": {
        "locations": [
          "backend/core/mcp_sync_orchestrator_config.py",
          "mcp-servers/lambda_labs_cli/lambda_labs_cli_mcp_server.py",
          "mcp-servers/snowflake_admin/snowflake_admin_mcp_server.py",
          "mcp-servers/ui_ux_agent/ui_ux_agent_mcp_server.py",
          "mcp-servers/ai_memory/ai_memory_mcp_server.py",
          "mcp-servers/ai_memory/enhanced_ai_memory_server.py",
          "mcp-servers/ag_ui/ag_ui_mcp_server.py",
          "mcp-servers/portkey_admin/portkey_admin_mcp_server.py",
          "mcp-servers/codacy/enhanced_codacy_server.py",
          "mcp-servers/codacy/codacy_mcp_server.py",
          "mcp-servers/snowflake_cli_enhanced/snowflake_cli_enhanced_mcp_server.py"
        ],
        "type": "internal"
      },
      "context_manager": {
        "locations": [
          "backend/services/chat/__init__.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "backend.infrastructure.adapters.slack_adapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.agents.core.langgraph_agent_base.LangGraphAgentBase": {
        "locations": [
          "backend/agents/specialized/asana_project_intelligence_agent.py",
          "backend/agents/infrastructure/sophia_infrastructure_agent.py"
        ],
        "type": "internal"
      },
      "models.chat_models.ChatConfiguration": {
        "locations": [
          "backend/services/chat/session_manager.py"
        ],
        "type": "external"
      },
      "templates": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/resources/__init__.py"
        ],
        "type": "external"
      },
      "handlers.contact_handler.ContactHandler": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py"
        ],
        "type": "external"
      },
      "gong_data_quality.QualityMetricsCollector": {
        "locations": [
          "backend/monitoring/__init__.py"
        ],
        "type": "external"
      },
      "db_client.SnowflakeDB": {
        "locations": [
          "external/isaacwasserman_snowflake/src/mcp_snowflake_server/server.py"
        ],
        "type": "external"
      },
      "call_participant.ParticipantRole": {
        "locations": [
          "backend/domain/value_objects/__init__.py"
        ],
        "type": "external"
      },
      "backend.core.absolute_snowflake_override.get_snowflake_connection_params": {
        "locations": [
          "start_sophia_absolute_fix.py",
          "comprehensive_infrastructure_audit.py"
        ],
        "type": "internal"
      },
      "backend.core.sql_security_validator.validate_schema_name": {
        "locations": [
          "backend/services/real_time_streaming_service.py",
          "scripts/enhanced_batch_embed_data.py"
        ],
        "type": "internal"
      },
      "backend.security.audit_logger.clear_request_context": {
        "locations": [
          "backend/security/audit_middleware.py"
        ],
        "type": "internal"
      },
      "backend.core.config_manager.ConfigManager": {
        "locations": [
          "backend/app/unified_api.py",
          "backend/app/core/dependencies.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.base.standardized_mcp_server.ModelProvider": {
        "locations": [
          "mcp-servers/lambda_labs_cli/lambda_labs_cli_mcp_server.py",
          "mcp-servers/ui_ux_agent/ui_ux_agent_mcp_server.py",
          "mcp-servers/ai_memory/enhanced_ai_memory_server.py",
          "mcp-servers/portkey_admin/portkey_admin_mcp_server.py",
          "mcp-servers/codacy/enhanced_codacy_server.py",
          "mcp-servers/snowflake_cli_enhanced/snowflake_cli_enhanced_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.mcp.optimized_ai_memory_mcp_server.optimized_memory_server": {
        "locations": [
          "scripts/deploy_performance_optimizations.py"
        ],
        "type": "internal"
      },
      "backend.integrations.gong_redis_client.NotificationType": {
        "locations": [
          "backend/agents/integrations/gong_data_integration.py"
        ],
        "type": "internal"
      },
      "backend.core.simple_auth.get_current_user": {
        "locations": [
          "backend/api/unified_intelligence_routes.py"
        ],
        "type": "internal"
      },
      "win32.create_windows_process": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/client/stdio/__init__.py"
        ],
        "type": "external"
      },
      "agents.secret_manager": {
        "locations": [
          "infrastructure/__init__.py"
        ],
        "type": "external"
      },
      "backend.utils.enhanced_snowflake_cortex_service.EnhancedSnowflakeCortexService": {
        "locations": [
          "backend/core/cross_platform_sync_orchestrator.py",
          "backend/agents/specialized/interactive_sales_coach_agent.py",
          "backend/services/semantic_layer_service.py",
          "backend/services/comprehensive_memory_service.py",
          "mcp-servers/ai_memory/ai_memory_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.api.workflow_routes": {
        "locations": [
          "backend/app/unified_fastapi_app.py"
        ],
        "type": "internal"
      },
      "backend.core.cache_manager.DashboardCacheManager": {
        "locations": [
          "backend/api/slack_linear_knowledge_routes.py",
          "backend/api/kb_management_routes.py",
          "backend/api/project_dashboard_routes.py"
        ],
        "type": "internal"
      },
      "agents.enhanced_sophia_agent.EnhancedSophiaIntelligenceAgent": {
        "locations": [
          "infrastructure/__init__.py"
        ],
        "type": "external"
      },
      "mcp_servers.slack.slack_mcp_server": {
        "locations": [
          "start_mcp_services.py"
        ],
        "type": "external"
      },
      "backend.utils.snowflake_cortex_service.SnowflakeCortexService": {
        "locations": [
          "backend/etl/enhanced_unified_data_pipeline.py",
          "backend/etl/enhanced_unified_data_pipeline_backup.py",
          "backend/etl/payready_core/ingest_core_sql_data.py",
          "backend/etl/estuary/estuary_configuration_manager.py",
          "backend/workflows/enhanced_langgraph_orchestration.py",
          "backend/workflows/langgraph_agent_orchestration.py",
          "backend/agents/core/langgraph_agent_base.py",
          "backend/agents/specialized/slack_analysis_agent.py",
          "backend/agents/specialized/asana_project_intelligence_agent.py",
          "backend/agents/specialized/linear_project_health_agent.py",
          "backend/agents/specialized/sales_intelligence_agent.py",
          "backend/agents/specialized/marketing_analysis_agent.py",
          "backend/utils/enhanced_snowflake_cortex_service.py",
          "backend/integrations/enhanced_microsoft_gong_integration.py",
          "backend/scripts/enhanced_deploy_gong_snowflake_setup.py",
          "backend/scripts/batch_embed_data.py",
          "backend/scripts/deploy_asana_snowflake_setup.py",
          "backend/scripts/sophia_data_pipeline_ultimate.py",
          "backend/scripts/enhanced_estuary_integration_test_suite.py",
          "backend/scripts/enhanced_asana_integration_test_suite.py",
          "backend/scripts/transform_slack_linear_data.py",
          "backend/scripts/deploy_snowflake_application_layer.py",
          "backend/scripts/integrate_gong_pipeline.py",
          "backend/scripts/ingest_foundational_kb.py",
          "backend/mcp_servers/optimized_mcp_server.py",
          "backend/mcp_servers/base/standardized_mcp_server.py",
          "backend/mcp_servers/base/enhanced_standardized_mcp_server.py",
          "backend/api/slack_linear_knowledge_routes.py",
          "backend/api/asana_integration_routes.py",
          "backend/api/smart_ai_routes.py",
          "backend/monitoring/deployment_tracker.py",
          "backend/infrastructure/persistence/repositories/snowflake_call_repository.py",
          "backend/services/sophia_universal_chat_service.py",
          "backend/services/foundational_knowledge_service.py",
          "backend/services/kb_management_service.py",
          "backend/services/cost_engineering_service.py",
          "backend/services/enhanced_snowflake_cortex_service.py",
          "backend/services/smart_ai_service.py",
          "backend/services/large_data_import_service.py",
          "backend/services/vector_intelligence_router.py",
          "backend/services/unified_intelligence_service.py",
          "scripts/deploy_snowflake_stability.py",
          "scripts/enhanced_batch_embed_data.py",
          "scripts/property_assets_ingestion_stub.py",
          "scripts/ceo_intelligence_ingestion_stub.py",
          "scripts/ai_web_research_ingestion_stub.py"
        ],
        "type": "internal"
      },
      "server.main": {
        "locations": [
          "external/anthropic-mcp-python-sdk/examples/servers/simple-prompt/mcp_simple_prompt/__main__.py",
          "external/anthropic-mcp-python-sdk/examples/servers/simple-tool/mcp_simple_tool/__main__.py",
          "external/anthropic-mcp-python-sdk/examples/servers/simple-streamablehttp/mcp_simple_streamablehttp/__main__.py",
          "external/anthropic-mcp-python-sdk/examples/servers/simple-streamablehttp-stateless/mcp_simple_streamablehttp_stateless/__main__.py",
          "external/anthropic-mcp-python-sdk/examples/servers/simple-resource/mcp_simple_resource/__main__.py"
        ],
        "type": "external"
      },
      "backend.services.sophia_universal_chat_service.ChatMessageType": {
        "locations": [
          "tests/test_phase2_integration.py"
        ],
        "type": "internal"
      },
      "flask.request": {
        "locations": [
          "backend/src/main.py",
          "api/index.py",
          "api/index_optimized.py",
          "api/middleware/security.py",
          "api/mcp/index.py",
          "api/n8n/webhook.py"
        ],
        "type": "external"
      },
      "backend.models.llm_models.LLMRequest": {
        "locations": [
          "backend/api/llm_strategy_routes.py"
        ],
        "type": "internal"
      },
      "backend.mcp.base.standardized_mcp_server.MCPServerConfig": {
        "locations": [
          "scripts/implement_mcp_ecosystem_optimization.py"
        ],
        "type": "internal"
      },
      "backend.core.security_config.SecretType": {
        "locations": [
          "scripts/security/setup_pulumi_esc_secrets.py"
        ],
        "type": "internal"
      },
      "flask.Flask": {
        "locations": [
          "backend/src/main.py",
          "api/index.py",
          "api/index_optimized.py",
          "api/middleware/security.py",
          "api/mcp/index.py",
          "api/n8n/webhook.py",
          "api/monitoring/health.py"
        ],
        "type": "external"
      },
      "bandit.core.manager": {
        "locations": [
          "mcp-servers/codacy/codacy_mcp_server.py"
        ],
        "type": "external"
      },
      "handlers.ticket_handler.TicketHandler": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py"
        ],
        "type": "external"
      },
      "backend.workflows.enhanced_langgraph_orchestration.enhanced_orchestrator": {
        "locations": [
          "tests/test_phase2_integration.py",
          "backend/api/enhanced_unified_chat_routes.py",
          "backend/services/sophia_universal_chat_service.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.core.webhook_router": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "graphiti.nodes": {
        "locations": [
          "mcp-servers/graphiti/graphiti_mcp_server.py"
        ],
        "type": "external"
      },
      "protego": {
        "locations": [
          "external/anthropic-mcp-servers/src/fetch/src/mcp_server_fetch/server.py"
        ],
        "type": "external"
      },
      "backend.integrations.estuary_flow_manager.EstuaryCredentials": {
        "locations": [
          "deploy_estuary_foundation.py"
        ],
        "type": "internal"
      },
      "lambda_labs_provisioner.LambdaLabsConfig": {
        "locations": [
          "infrastructure/lambda-labs-integration.py"
        ],
        "type": "external"
      },
      "sqlglot": {
        "locations": [
          "external/dynamike_snowflake/snowflake_mcp_server/main.py"
        ],
        "type": "external"
      },
      "langgraph.checkpoint.sqlite": {
        "locations": [
          "backend/workflows/enhanced_langgraph_orchestration.py",
          "backend/workflows/langgraph_agent_orchestration.py"
        ],
        "type": "external"
      },
      "contact_repository.ContactRepository": {
        "locations": [
          "backend/application/ports/repositories/__init__.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.types.Tool": {
        "locations": [
          "backend/mcp_servers/optimized_ai_memory_mcp_server.py",
          "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py"
        ],
        "type": "internal"
      },
      "lowlevel": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/__init__.py"
        ],
        "type": "external"
      },
      "mcp_servers.notion.notion_mcp_server": {
        "locations": [
          "start_mcp_services.py"
        ],
        "type": "external"
      },
      "backend.security.audit_logger.debug": {
        "locations": [
          "tests/test_audit_logging.py"
        ],
        "type": "internal"
      },
      "backend.security.rbac.service.RBACService": {
        "locations": [
          "tests/test_rbac.py",
          "backend/security/rbac/__init__.py"
        ],
        "type": "internal"
      },
      "backend.services.enhanced_snowflake_cortex_service.CortexSearchMode": {
        "locations": [
          "tests/test_phase2_integration.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.core.policy_engine": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "langchain_openai.ChatOpenAI": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "external"
      },
      "backend.services.snowflake_cortex_service.SnowflakeCortexService": {
        "locations": [
          "backend/services/intelligent_data_discovery_service.py"
        ],
        "type": "internal"
      },
      "backend.agents.enhanced.data_models.MemoryRecord": {
        "locations": [
          "backend/services/comprehensive_memory_service.py",
          "mcp-servers/ai_memory/ai_memory_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.workflows.multi_agent_workflow.WorkflowTask": {
        "locations": [
          "backend/agents/specialized/sales_intelligence_agent.py"
        ],
        "type": "internal"
      },
      "backend.api.notion_integration_routes.router": {
        "locations": [
          "backend/app/unified_api.py",
          "backend/app/unified_main.py",
          "backend/app/_deprecated_apps/stabilized_fastapi_app.py",
          "backend/app/_deprecated_apps/working_app.py"
        ],
        "type": "internal"
      },
      "backend.integrations.gong_webhook_server.AsyncRateLimiter": {
        "locations": [
          "backend/integrations/gong_api_client.py"
        ],
        "type": "internal"
      },
      "backend.mcp.base.standardized_mcp_server.HealthCheckResult": {
        "locations": [
          "scripts/implement_mcp_ecosystem_optimization.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.adapters.lambda_labs_adapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.agents.specialized.interactive_sales_coach_agent.InteractiveSalesCoachAgent": {
        "locations": [
          "backend/services/sophia_ai_orchestrator.py"
        ],
        "type": "internal"
      },
      "gong_data_quality.AlertType": {
        "locations": [
          "backend/monitoring/alert_manager.py",
          "backend/monitoring/__init__.py"
        ],
        "type": "external"
      },
      "websockets.asyncio.client": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/client/websocket.py"
        ],
        "type": "external"
      },
      "backend.integrations.enhanced_microsoft_gong_integration.CoachingPriority": {
        "locations": [
          "backend/agents/specialized/enhanced_sales_coach_agent.py"
        ],
        "type": "internal"
      },
      "analyze_call_sentiment.NoTranscriptError": {
        "locations": [
          "backend/application/use_cases/__init__.py"
        ],
        "type": "external"
      },
      "agents.orchestrator": {
        "locations": [
          "infrastructure/__init__.py"
        ],
        "type": "external"
      },
      "models.chat_models.ChatStatus": {
        "locations": [
          "backend/services/chat/base_chat_service.py"
        ],
        "type": "external"
      },
      "graphiti.nodes.EntityNode": {
        "locations": [
          "mcp-servers/graphiti/graphiti_mcp_server.py"
        ],
        "type": "external"
      },
      "backend.services.enhanced_ingestion_service.EnhancedIngestionService": {
        "locations": [
          "backend/services/event_driven_ingestion_service.py"
        ],
        "type": "internal"
      },
      "gong_data_quality.QualityRuleEngine": {
        "locations": [
          "backend/monitoring/__init__.py"
        ],
        "type": "external"
      },
      "win32": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/client/stdio/__init__.py"
        ],
        "type": "external"
      },
      "server.stdio": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/__init__.py"
        ],
        "type": "external"
      },
      "backend.security.rbac.models.RoleAssignment": {
        "locations": [
          "backend/security/rbac/service.py",
          "backend/security/rbac/__init__.py",
          "backend/security/rbac/routes.py"
        ],
        "type": "internal"
      },
      "server.serve": {
        "locations": [
          "external/anthropic-mcp-servers/src/time/src/mcp_server_time/__init__.py",
          "external/anthropic-mcp-servers/src/fetch/src/mcp_server_fetch/__init__.py",
          "external/anthropic-mcp-servers/src/git/src/mcp_server_git/__init__.py"
        ],
        "type": "external"
      },
      "gong_data_quality.GongDataQualityMonitor": {
        "locations": [
          "backend/monitoring/__init__.py"
        ],
        "type": "external"
      },
      "backend.services.event_driven_ingestion_service.EventDrivenIngestionService": {
        "locations": [
          "backend/services/sse_progress_streaming_service.py",
          "backend/services/chat_driven_metadata_service.py"
        ],
        "type": "internal"
      },
      "backend.services.memory_preservation_service.MemoryPreservationService": {
        "locations": [
          "backend/services/sophia_ai_orchestrator.py"
        ],
        "type": "internal"
      },
      "hubspot_client.HubSpotClient": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/__init__.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/base_handler.py"
        ],
        "type": "external"
      },
      "handlers.search_handler.SearchHandler": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py"
        ],
        "type": "external"
      },
      "backend.models.api_models.HealthResponse": {
        "locations": [
          "backend/app/modernized_fastapi_app.py"
        ],
        "type": "internal"
      },
      "backend.scripts.sophia_data_pipeline_ultimate.SophiaDataPipelineUltimate": {
        "locations": [
          "backend/scripts/enhanced_gong_pipeline_test_suite.py"
        ],
        "type": "internal"
      },
      "backend.models.project.Project": {
        "locations": [
          "backend/api/project_dashboard_routes.py"
        ],
        "type": "internal"
      },
      "base_handler": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/ticket_handler.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/conversation_handler.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/company_handler.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/search_handler.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/contact_handler.py"
        ],
        "type": "external"
      },
      "win32.get_windows_executable_command": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/client/stdio/__init__.py"
        ],
        "type": "external"
      },
      "universal_chat_service": {
        "locations": [
          "backend/services/chat/__init__.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "pytest_examples.find_examples": {
        "locations": [
          "external/anthropic-mcp-python-sdk/tests/test_examples.py"
        ],
        "type": "external"
      },
      "werkzeug.exceptions.BadRequest": {
        "locations": [
          "api/middleware/security.py"
        ],
        "type": "external"
      },
      "backend.core.dependencies.get_chat_service": {
        "locations": [
          "backend/app/main.py",
          "backend/app/_deprecated_apps/fastapi_app.py"
        ],
        "type": "internal"
      },
      "backend.security.audit_logger.audit_decorator": {
        "locations": [
          "tests/test_audit_logging.py"
        ],
        "type": "internal"
      },
      "backend.services.enhanced_portkey_orchestrator.SophiaAI": {
        "locations": [
          "backend/api/enhanced_ceo_chat_routes.py"
        ],
        "type": "internal"
      },
      "backend.workflows.enhanced_langgraph_orchestration.EventType": {
        "locations": [
          "backend/services/sophia_universal_chat_service.py"
        ],
        "type": "internal"
      },
      "client.session": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/__init__.py"
        ],
        "type": "external"
      },
      "pydantic_ai": {
        "locations": [
          "external/anthropic-mcp-python-sdk/examples/fastmcp/memory.py"
        ],
        "type": "external"
      },
      "backend.utils.logging.get_logger": {
        "locations": [
          "scripts/monitor_all_mcp_servers.py",
          "mcp-servers/codacy/codacy_api_client.py"
        ],
        "type": "internal"
      },
      "tests.server.fastmcp.auth.test_auth_integration.MockOAuthProvider": {
        "locations": [
          "external/anthropic-mcp-python-sdk/tests/server/auth/test_error_handling.py"
        ],
        "type": "internal"
      },
      "PyPDF2": {
        "locations": [
          "backend/services/large_file_ingestion_service.py",
          "backend/services/enhanced_ingestion_service.py"
        ],
        "type": "external"
      },
      "server.session.ServerSession": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/__init__.py"
        ],
        "type": "external"
      },
      "base.Tool": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/tools/__init__.py"
        ],
        "type": "external"
      },
      "backend.infrastructure.adapters.asana_adapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "sophia_mcp_base.SophiaMCPServer": {
        "locations": [
          "backend/mcp_servers/mcp_registry.py"
        ],
        "type": "external"
      },
      "mcp_server_hubspot.hubspot_client.HubSpotClient": {
        "locations": [
          "mcp-servers/hubspot/tests/get_closed_ticket_conversations.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.types.ImageContent": {
        "locations": [
          "backend/mcp_servers/sophia_mcp_base.py"
        ],
        "type": "internal"
      },
      "utils.enhanced_snowflake_cortex_service.EnhancedSnowflakeCortexService": {
        "locations": [
          "backend/integrations/enhanced_gong_integration.py",
          "backend/services/intelligent_query_router.py",
          "backend/services/enhanced_data_ingestion.py",
          "backend/services/progressive_autonomy_manager.py",
          "backend/services/okr_tracking_service.py"
        ],
        "type": "external"
      },
      "backend.services.smart_ai_service.experimental_query": {
        "locations": [
          "backend/api/smart_ai_routes.py"
        ],
        "type": "internal"
      },
      "backend.security.rbac.service.get_rbac_service": {
        "locations": [
          "backend/security/rbac/__init__.py",
          "backend/security/rbac/dependencies.py",
          "backend/security/rbac/routes.py"
        ],
        "type": "internal"
      },
      "sophia_universal_chat_service.SophiaUniversalChatService": {
        "locations": [
          "backend/services/enhanced_unified_chat_service.py"
        ],
        "type": "external"
      },
      "backend.app.core.config.settings": {
        "locations": [
          "backend/app/unified_main.py",
          "backend/app/core/dependencies.py"
        ],
        "type": "internal"
      },
      "sqlparse.tokens.DDL": {
        "locations": [
          "external/isaacwasserman_snowflake/src/mcp_snowflake_server/write_detector.py"
        ],
        "type": "external"
      },
      "backend.mcp.optimized_ai_memory_mcp_server.OptimizedMemoryRecord": {
        "locations": [
          "scripts/deploy_performance_optimizations.py"
        ],
        "type": "internal"
      },
      "backend.core.hierarchical_cache.CacheLevel": {
        "locations": [
          "backend/core/enhanced_cache_manager.py",
          "backend/app/_deprecated_apps/phase2_optimized_fastapi_app.py",
          "backend/app/_deprecated_apps/phase2_optimized_app.py"
        ],
        "type": "internal"
      },
      "event_store.InMemoryEventStore": {
        "locations": [
          "external/anthropic-mcp-python-sdk/examples/servers/simple-streamablehttp/mcp_simple_streamablehttp/server.py"
        ],
        "type": "external"
      },
      "backend.utils.snowflake_connection.get_snowflake_connection": {
        "locations": [
          "backend/services/intelligent_data_discovery_service.py"
        ],
        "type": "internal"
      },
      "manager": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/prompts/__init__.py"
        ],
        "type": "external"
      },
      "backend.services.smart_ai_service.generate_executive_insight": {
        "locations": [
          "backend/agents/specialized/sales_intelligence_agent.py",
          "backend/api/smart_ai_routes.py"
        ],
        "type": "internal"
      },
      "backend.services.sophia_ai_orchestrator.RequestType": {
        "locations": [
          "backend/api/sophia_ai_phase1_routes.py"
        ],
        "type": "internal"
      },
      "backend.api.gong_integration_routes": {
        "locations": [
          "backend/app/unified_fastapi_app.py"
        ],
        "type": "internal"
      },
      "backend.core.sophia_engine.SophiaAIEngine": {
        "locations": [
          "backend/services/payready_business_intelligence.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.adapters.portkey_adapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.server.lowlevel": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py"
        ],
        "type": "internal"
      },
      "backend.core.cross_platform_sync_orchestrator.SyncConfiguration": {
        "locations": [
          "backend/core/mcp_sync_orchestrator_config.py"
        ],
        "type": "internal"
      },
      "flask.g": {
        "locations": [
          "api/index_optimized.py",
          "api/middleware/security.py"
        ],
        "type": "external"
      },
      "backend.services.enhanced_unified_chat_service.snowflake_service": {
        "locations": [
          "backend/api/knowledge_dashboard_routes.py"
        ],
        "type": "internal"
      },
      "langgraph.prebuilt.ToolExecutor": {
        "locations": [
          "backend/workflows/enhanced_langgraph_orchestration.py",
          "backend/workflows/langgraph_agent_orchestration.py"
        ],
        "type": "external"
      },
      "backend.domain.entities.contact.Contact": {
        "locations": [
          "backend/application/ports/repositories/contact_repository.py"
        ],
        "type": "internal"
      },
      "backend.mcp.base.standardized_mcp_server": {
        "locations": [
          "scripts/implement_mcp_ecosystem_optimization.py"
        ],
        "type": "internal"
      },
      "backend.services.cost_engineering_service.ModelTier": {
        "locations": [
          "tests/test_phase2_integration.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.core.state_manager.InfrastructureStateManager": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.workflows.langgraph_agent_orchestration.LangGraphWorkflowOrchestrator": {
        "locations": [
          "backend/scripts/deploy_snowflake_application_layer.py"
        ],
        "type": "internal"
      },
      "snowflake_mcp_server.utils.snowflake_conn.connection_manager": {
        "locations": [
          "external/dynamike_snowflake/snowflake_mcp_server/main.py"
        ],
        "type": "external"
      },
      "backend.services.enhanced_knowledge_base_service.EnhancedKnowledgeBaseService": {
        "locations": [
          "backend/agents/specialized/interactive_sales_coach_agent.py",
          "backend/services/sophia_ai_orchestrator.py"
        ],
        "type": "internal"
      },
      "backend.security.ephemeral_credentials.models.CredentialValidationRequest": {
        "locations": [
          "tests/test_ephemeral_credentials.py",
          "backend/security/ephemeral_credentials/service.py",
          "backend/security/ephemeral_credentials/__init__.py",
          "backend/security/ephemeral_credentials/middleware.py",
          "backend/security/ephemeral_credentials/routes.py"
        ],
        "type": "internal"
      },
      "backend.services.predictive_analytics_service.PredictiveAnalyticsService": {
        "locations": [
          "backend/api/snowflake_intelligence_routes.py",
          "backend/services/automated_insights_service.py"
        ],
        "type": "internal"
      },
      "executive_chat_service.ExecutiveChatService": {
        "locations": [
          "backend/services/chat/__init__.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "backend.core.config_manager.get_snowflake_connection": {
        "locations": [
          "backend/services/cortex_agent_service.py"
        ],
        "type": "internal"
      },
      "backend.application.ports.repositories.call_repository.CallRepository": {
        "locations": [
          "backend/application/use_cases/analyze_call_sentiment.py",
          "backend/application/use_cases/qualify_deal.py",
          "backend/infrastructure/persistence/repositories/snowflake_call_repository.py"
        ],
        "type": "internal"
      },
      "backend.core.auto_esc_config.get_snowflake_config": {
        "locations": [
          "create_snowflake_status_report.py",
          "comprehensive_infrastructure_audit.py",
          "final_environment_verification.py"
        ],
        "type": "internal"
      },
      "backend.workflows.multi_agent_workflow.TaskStatus": {
        "locations": [
          "backend/agents/specialized/sales_intelligence_agent.py"
        ],
        "type": "internal"
      },
      "backend.services.smart_ai_service.SmartAIService": {
        "locations": [
          "backend/app/unified_fastapi_app.py",
          "backend/app/modernized_fastapi_app.py",
          "backend/app/working_fastapi_app.py",
          "backend/agents/core/langgraph_agent_base.py",
          "backend/agents/specialized/asana_project_intelligence_agent.py",
          "backend/services/intelligent_data_discovery_service.py"
        ],
        "type": "internal"
      },
      "backend.services.task_service.TaskService": {
        "locations": [
          "backend/api/project_dashboard_routes.py"
        ],
        "type": "internal"
      },
      "backend.services.enhanced_snowflake_cortex_service.enhanced_cortex_service": {
        "locations": [
          "tests/test_phase2_integration.py"
        ],
        "type": "internal"
      },
      "opentelemetry.metrics": {
        "locations": [
          "infrastructure/agents/base_agent_template.py"
        ],
        "type": "external"
      },
      "backend.utils.snowflake_hubspot_connector.SnowflakeHubSpotConnector": {
        "locations": [
          "backend/workflows/langgraph_agent_orchestration.py",
          "backend/agents/specialized/sales_intelligence_agent.py",
          "backend/agents/specialized/marketing_analysis_agent.py"
        ],
        "type": "internal"
      },
      "clients.company_client.CompanyClient": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/hubspot_client.py"
        ],
        "type": "external"
      },
      "sophia_mcp_base": {
        "locations": [
          "backend/mcp_servers/mcp_registry.py"
        ],
        "type": "external"
      },
      "backend.models.conversation": {
        "locations": [
          "backend/services/comprehensive_memory_service.py"
        ],
        "type": "internal"
      },
      "backend.domain.entities.contact.ContactType": {
        "locations": [
          "backend/application/ports/repositories/contact_repository.py"
        ],
        "type": "internal"
      },
      "lowlevel.NotificationOptions": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/__init__.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.enhanced_ai_memory_mcp_server.MemoryCategory": {
        "locations": [
          "backend/agents/specialized/sales_intelligence_agent.py",
          "backend/agents/specialized/marketing_analysis_agent.py",
          "backend/mcp_servers/ai_memory_auto_discovery.py"
        ],
        "type": "internal"
      },
      "pytest_examples.CodeExample": {
        "locations": [
          "external/anthropic-mcp-python-sdk/tests/test_examples.py"
        ],
        "type": "external"
      },
      "gong_data_quality.ValidationResult": {
        "locations": [
          "backend/monitoring/quality_rules.py"
        ],
        "type": "external"
      },
      "mcp_server_time": {
        "locations": [
          "external/anthropic-mcp-servers/src/time/src/mcp_server_time/__main__.py"
        ],
        "type": "external"
      },
      "settings.Settings": {
        "locations": [
          "backend/core/security.py"
        ],
        "type": "external"
      },
      "deal.DealStage": {
        "locations": [
          "backend/domain/entities/__init__.py"
        ],
        "type": "external"
      },
      "mcp_server_git.server.git_branch": {
        "locations": [
          "external/anthropic-mcp-servers/src/git/tests/test_server.py"
        ],
        "type": "external"
      },
      "backend.services.mcp_orchestration_service.MCPOrchestrationService": {
        "locations": [
          "backend/app/unified_api.py",
          "backend/app/core/dependencies.py",
          "backend/n8n_bridge/main.py",
          "backend/monitoring/group_health_monitoring.py",
          "backend/services/group_aware_orchestration_enhancement.py",
          "backend/services/enhanced_mcp_orchestration_service.py"
        ],
        "type": "internal"
      },
      "session_manager": {
        "locations": [
          "backend/services/chat/__init__.py",
          "backend/services/chat/unified_chat_service.py"
        ],
        "type": "external"
      },
      "lambda_labs_provisioner": {
        "locations": [
          "infrastructure/lambda-labs-integration.py"
        ],
        "type": "external"
      },
      "backend.services.enhanced_slack_integration_service.SlackIntegrationService": {
        "locations": [
          "mcp-servers/slack/go_slack_integration.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.base.standardized_mcp_server.EnhancedStandardizedMCPServer": {
        "locations": [
          "mcp-servers/lambda_labs_cli/lambda_labs_cli_mcp_server.py",
          "mcp-servers/snowflake_admin/snowflake_admin_mcp_server.py",
          "mcp-servers/ui_ux_agent/ui_ux_agent_mcp_server.py",
          "mcp-servers/ai_memory/ai_memory_mcp_server.py",
          "mcp-servers/portkey_admin/portkey_admin_mcp_server.py",
          "mcp-servers/codacy/codacy_mcp_server.py",
          "mcp-servers/snowflake_cli_enhanced/snowflake_cli_enhanced_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.core.auto_esc_config._load_esc_environment": {
        "locations": [
          "scripts/test_mcp_pulumi_esc_integration.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.optimized_network.CompressionType": {
        "locations": [
          "backend/mcp_servers/optimized_mcp_client.py"
        ],
        "type": "internal"
      },
      "backend.etl.enhanced_unified_data_pipeline.get_sophia_pipeline_status": {
        "locations": [
          "scripts/deploy-complete-sophia-stack.py"
        ],
        "type": "internal"
      },
      "backend.api.hubspot_integration_routes": {
        "locations": [
          "backend/app/unified_fastapi_app.py"
        ],
        "type": "internal"
      },
      "backend.services.enhanced_cortex_agent_service.AdvancedAnalyticsQuery": {
        "locations": [
          "deploy_comprehensive_upgrade.py"
        ],
        "type": "internal"
      },
      "backend.utils.enhanced_snowflake_cortex_service.CortexModel": {
        "locations": [
          "mcp-servers/ai_memory/ai_memory_mcp_server.py"
        ],
        "type": "internal"
      },
      "core.simple_config": {
        "locations": [
          "backend/integrations/enhanced_gong_integration.py",
          "backend/integrations/portkey_gateway_service.py",
          "backend/services/enhanced_data_ingestion.py",
          "backend/services/enhanced_ceo_universal_chat_service.py",
          "backend/services/advanced_ui_ux_agent_service.py"
        ],
        "type": "external"
      },
      "deal.Deal": {
        "locations": [
          "backend/domain/entities/__init__.py"
        ],
        "type": "external"
      },
      "backend.agents.infrastructure.sophia_infrastructure_agent.SophiaDNSIntelligenceAgent": {
        "locations": [
          "scripts/ai_enhanced_dns_manager.py"
        ],
        "type": "internal"
      },
      "qualify_deal.QualifyDealRequest": {
        "locations": [
          "backend/application/use_cases/__init__.py"
        ],
        "type": "external"
      },
      "agents.orchestrator.InfrastructureOrchestrator": {
        "locations": [
          "infrastructure/__init__.py"
        ],
        "type": "external"
      },
      "resource_manager.ResourceManager": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/fastmcp/resources/__init__.py"
        ],
        "type": "external"
      },
      "backend.security.rbac.service.initialize_rbac_service": {
        "locations": [
          "backend/security/rbac/__init__.py",
          "backend/security/rbac/dependencies.py"
        ],
        "type": "internal"
      },
      "opentelemetry.instrumentation.logging.LoggingInstrumentor": {
        "locations": [
          "infrastructure/agents/base_agent_template.py"
        ],
        "type": "external"
      },
      "backend.scripts.batch_embed_data.EmbeddingTable": {
        "locations": [
          "backend/scripts/deploy_snowflake_application_layer.py"
        ],
        "type": "internal"
      },
      "shared.exceptions.McpError": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/__init__.py"
        ],
        "type": "external"
      },
      "services.enhanced_unified_chat_service.EnhancedUnifiedChatService": {
        "locations": [
          "backend/api/unified_chat_routes_v2.py"
        ],
        "type": "external"
      },
      "client.session.ClientSession": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/__init__.py"
        ],
        "type": "external"
      },
      "backend.domain.entities.deal.DealStage": {
        "locations": [
          "backend/application/use_cases/qualify_deal.py",
          "backend/application/ports/repositories/deal_repository.py"
        ],
        "type": "internal"
      },
      "money.Money": {
        "locations": [
          "backend/domain/value_objects/__init__.py"
        ],
        "type": "external"
      },
      "backend.core.aligned_snowflake_config.aligned_snowflake_config": {
        "locations": [
          "backend/core/optimized_database_manager.py",
          "backend/etl/enhanced_unified_data_pipeline.py"
        ],
        "type": "internal"
      },
      "backend.mcp.ai_memory_mcp_server": {
        "locations": [
          "start_enhanced_mcp_servers.py",
          "scripts/performance_baseline.py",
          "scripts/comprehensive_health_check.py"
        ],
        "type": "internal"
      },
      "backend.services.event_driven_ingestion_service.EventType": {
        "locations": [
          "backend/services/sse_progress_streaming_service.py"
        ],
        "type": "internal"
      },
      "call_participant": {
        "locations": [
          "backend/domain/value_objects/__init__.py"
        ],
        "type": "external"
      },
      "backend.infrastructure.adapters.linear_adapter": {
        "locations": [
          "backend/infrastructure/sophia_iac_orchestrator.py"
        ],
        "type": "internal"
      },
      "gong_data_quality.QualityDimension": {
        "locations": [
          "backend/monitoring/alert_manager.py",
          "backend/monitoring/__init__.py"
        ],
        "type": "external"
      },
      "backend.services.intelligent_data_discovery_service.DataDiscoveryResult": {
        "locations": [
          "backend/services/sophia_universal_chat_service.py"
        ],
        "type": "internal"
      },
      "backend.scripts.batch_embed_data.BatchEmbeddingProcessor": {
        "locations": [
          "backend/scripts/deploy_snowflake_application_layer.py"
        ],
        "type": "internal"
      },
      "backend.agents.core.langgraph_agent_base.LangGraphAgentPool": {
        "locations": [
          "backend/agents/integrations/gong_data_integration.py"
        ],
        "type": "internal"
      },
      "core.storage": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/hubspot_client.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/clients/conversation_client.py"
        ],
        "type": "external"
      },
      "unified_chat_service": {
        "locations": [
          "backend/services/chat/__init__.py"
        ],
        "type": "external"
      },
      "backend.security.ephemeral_credentials.models.CredentialRevocationRequest": {
        "locations": [
          "tests/test_ephemeral_credentials.py",
          "backend/security/ephemeral_credentials/service.py",
          "backend/security/ephemeral_credentials/__init__.py",
          "backend/security/ephemeral_credentials/routes.py"
        ],
        "type": "internal"
      },
      "mcp_servers.slack.slack_mcp_server.slack_server": {
        "locations": [
          "start_mcp_services.py"
        ],
        "type": "external"
      },
      "backend.utils.logging": {
        "locations": [
          "scripts/monitor_all_mcp_servers.py",
          "mcp-servers/codacy/codacy_api_client.py"
        ],
        "type": "internal"
      },
      "sophia_universal_chat_service": {
        "locations": [
          "backend/services/enhanced_unified_chat_service.py"
        ],
        "type": "external"
      },
      "backend.core.auth.get_current_user": {
        "locations": [
          "backend/api/slack_linear_knowledge_routes.py",
          "backend/api/asana_integration_routes.py",
          "backend/api/snowflake_intelligence_routes.py",
          "backend/api/kb_management_routes.py",
          "backend/api/project_dashboard_routes.py",
          "backend/api/large_data_import_routes.py",
          "backend/api/foundational_knowledge_routes.py"
        ],
        "type": "internal"
      },
      "backend.core.performance_monitor.performance_monitor": {
        "locations": [
          "backend/core/optimized_connection_manager.py",
          "backend/core/hierarchical_cache.py",
          "backend/app/_deprecated_apps/phase2_optimized_fastapi_app.py",
          "backend/app/_deprecated_apps/phase2_optimized_app.py",
          "backend/agents/integrations/optimized_gong_data_integration.py",
          "backend/utils/optimized_snowflake_cortex_service.py",
          "backend/mcp_servers/optimized_ai_memory_mcp_server.py",
          "backend/services/enhanced_chat_context_service.py",
          "backend/services/enhanced_ingestion_service.py",
          "backend/services/semantic_layer_service.py",
          "scripts/deploy_performance_optimizations.py"
        ],
        "type": "internal"
      },
      "backend.mcp_servers.base.standardized_mcp_server.StandardizedMCPServer": {
        "locations": [
          "mcp-servers/ai_memory/enhanced_ai_memory_server.py",
          "mcp-servers/ag_ui/ag_ui_mcp_server.py",
          "mcp-servers/codacy/enhanced_codacy_server.py"
        ],
        "type": "internal"
      },
      "backend.infrastructure.sophia_iac_orchestrator.SophiaIaCOrchestrator": {
        "locations": [
          "scripts/deploy_comprehensive_iac.py"
        ],
        "type": "internal"
      },
      "analyze_call_sentiment.CallNotFoundError": {
        "locations": [
          "backend/application/use_cases/__init__.py"
        ],
        "type": "external"
      },
      "backend.mcp_servers.base.enhanced_standardized_mcp_server.MCPServerConfig": {
        "locations": [
          "mcp-servers/lambda_labs_cli/lambda_labs_cli_mcp_server.py",
          "mcp-servers/snowflake_admin/snowflake_admin_mcp_server.py",
          "mcp-servers/notion/notion_mcp_server.py",
          "mcp-servers/ui_ux_agent/ui_ux_agent_mcp_server.py",
          "mcp-servers/hubspot/hubspot_mcp_server.py",
          "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py",
          "mcp-servers/github/github_mcp_server.py",
          "mcp-servers/ag_ui/enhanced_ag_ui_mcp_server.py",
          "mcp-servers/portkey_admin/portkey_admin_mcp_server.py",
          "mcp-servers/codacy/codacy_mcp_server.py",
          "mcp-servers/slack/slack_mcp_server.py",
          "mcp-servers/snowflake_cli_enhanced/snowflake_cli_enhanced_mcp_server.py",
          "mcp-servers/snowflake_cortex/production_snowflake_cortex_mcp_server.py"
        ],
        "type": "internal"
      },
      "backend.security.rbac.models.has_permission": {
        "locations": [
          "backend/security/rbac/service.py",
          "backend/security/rbac/__init__.py"
        ],
        "type": "internal"
      },
      "backend.services.unified_intelligence_service.unified_intelligence_service": {
        "locations": [
          "backend/api/llm_strategy_routes.py"
        ],
        "type": "internal"
      },
      "call_repository.CallRepository": {
        "locations": [
          "backend/application/ports/repositories/__init__.py"
        ],
        "type": "external"
      },
      "backend.security.ephemeral_credentials.middleware.setup_ephemeral_credentials_middleware": {
        "locations": [
          "backend/security/ephemeral_credentials/__init__.py"
        ],
        "type": "internal"
      },
      "backend.core.hierarchical_cache.HierarchicalCache": {
        "locations": [
          "backend/core/enhanced_cache_manager.py",
          "backend/services/comprehensive_memory_service.py",
          "mcp-servers/ai_memory/ai_memory_mcp_server.py"
        ],
        "type": "internal"
      },
      "codacy_api_client": {
        "locations": [
          "mcp-servers/codacy/enhanced_codacy_server.py",
          "mcp-servers/codacy/codacy_mcp_server.py"
        ],
        "type": "external"
      },
      "faiss_manager": {
        "locations": [
          "mcp-servers/hubspot/src/mcp_server_hubspot/server.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/utils.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/search_handler.py",
          "mcp-servers/hubspot/src/mcp_server_hubspot/handlers/base_handler.py"
        ],
        "type": "external"
      },
      "ai_service.AIService": {
        "locations": [
          "backend/application/ports/services/__init__.py"
        ],
        "type": "external"
      },
      "backend.services.snowflake_cortex_service": {
        "locations": [
          "backend/services/intelligent_data_discovery_service.py"
        ],
        "type": "internal"
      },
      "cli": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/cli/__init__.py"
        ],
        "type": "external"
      },
      "call_participant.CallParticipant": {
        "locations": [
          "backend/domain/value_objects/__init__.py"
        ],
        "type": "external"
      },
      "analyze_call_sentiment": {
        "locations": [
          "backend/application/use_cases/__init__.py"
        ],
        "type": "external"
      },
      "models.InitializationOptions": {
        "locations": [
          "external/anthropic-mcp-python-sdk/src/mcp/server/__init__.py"
        ],
        "type": "external"
      }
    }
  },
  "circular_dependencies": [],
  "most_imported": {
    "logging": 459,
    "typing": 446,
    "typing.Any": 406,
    "datetime": 364,
    "datetime.datetime": 343,
    "asyncio": 288,
    "json": 283,
    "pathlib": 210,
    "pathlib.Path": 208,
    "os": 204,
    "dataclasses": 202,
    "dataclasses.dataclass": 201,
    "sys": 159,
    "pydantic": 148,
    "enum": 139,
    "enum.Enum": 139,
    "time": 117,
    "backend.core.auto_esc_config": 116,
    "subprocess": 109,
    "mcp.types": 106
  },
  "recommendations": [
    "Install 355 missing external dependencies"
  ]
}