/**
 * Ultra-Enhanced KPI Card Component
 * Next-generation executive KPI display with AI insights and advanced glassmorphism
 * Generated by Sophia AI UI/UX Agent System - Phase 2
 */

import React, { useState, useEffect } from 'react';
import { 
  TrendingUp, 
  TrendingDown, 
  Minus, 
  Target, 
  AlertTriangle, 
  Brain,
  Zap,
  Eye,
  MoreHorizontal,
  ExternalLink,
  RefreshCw
} from 'lucide-react';
import { glassmorphism, colors, typography, animations } from '../../lib/design-system.js';

const UltraEnhancedKPICard = ({
  title,
  value,
  unit = '',
  trend = null,
  trendValue = null,
  description = '',
  status = 'neutral',
  icon: Icon = Target,
  variant = 'default',
  className = '',
  onClick = null,
  aiInsight = null,
  confidence = null,
  historicalData = [],
  realTimeUpdates = false,
  drillDownUrl = null,
  customActions = []
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const [showDetails, setShowDetails] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);

  // Simulate real-time updates
  useEffect(() => {
    if (realTimeUpdates) {
      const interval = setInterval(() => {
        setIsUpdating(true);
        setTimeout(() => setIsUpdating(false), 1000);
      }, 30000); // Update every 30 seconds

      return () => clearInterval(interval);
    }
  }, [realTimeUpdates]);

  // Determine trend icon and color
  const getTrendIcon = () => {
    if (trend === 'up') return TrendingUp;
    if (trend === 'down') return TrendingDown;
    return Minus;
  };

  const getTrendColor = () => {
    if (trend === 'up') return 'text-green-400';
    if (trend === 'down') return 'text-red-400';
    return 'text-gray-400';
  };

  const getStatusColor = () => {
    switch (status) {
      case 'success': return 'border-green-400/30 bg-green-500/10';
      case 'warning': return 'border-yellow-400/30 bg-yellow-500/10';
      case 'error': return 'border-red-400/30 bg-red-500/10';
      case 'info': return 'border-blue-400/30 bg-blue-500/10';
      default: return 'border-white/20 bg-white/5';
    }
  };

  const TrendIcon = getTrendIcon();

  // Enhanced glassmorphism styles
  const cardStyles = {
    background: isHovered 
      ? 'linear-gradient(135deg, rgba(255,255,255,0.15) 0%, rgba(255,255,255,0.08) 100%)'
      : 'linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%)',
    backdropFilter: 'blur(20px)',
    border: isHovered ? '1px solid rgba(255,255,255,0.3)' : '1px solid rgba(255,255,255,0.2)',
    borderRadius: '16px',
    boxShadow: isHovered 
      ? '0 12px 40px rgba(0,0,0,0.15), inset 0 1px 0 rgba(255,255,255,0.3)'
      : '0 8px 32px rgba(0,0,0,0.1), inset 0 1px 0 rgba(255,255,255,0.2)',
    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
    transform: isHovered ? 'translateY(-4px) scale(1.02)' : 'translateY(0) scale(1)',
    cursor: onClick ? 'pointer' : 'default',
    position: 'relative',
    overflow: 'hidden'
  };

  const handleCardClick = () => {
    if (onClick) {
      onClick();
    } else if (drillDownUrl) {
      window.open(drillDownUrl, '_blank');
    }
  };

  return (
    <div
      style={cardStyles}
      className={`p-6 ${getStatusColor()} ${className}`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      onClick={handleCardClick}
    >
      {/* Animated background gradient */}
      <div className="absolute inset-0 opacity-30">
        <div className="absolute inset-0 bg-gradient-to-br from-blue-500/20 via-transparent to-purple-500/20 animate-pulse"></div>
      </div>

      {/* Real-time update indicator */}
      {realTimeUpdates && (
        <div className="absolute top-3 right-3 flex items-center gap-1">
          <div className={`w-2 h-2 rounded-full ${isUpdating ? 'bg-green-400 animate-pulse' : 'bg-green-400'}`}></div>
          <span className="text-xs text-green-400 font-medium">LIVE</span>
        </div>
      )}

      {/* AI Insight Badge */}
      {aiInsight && (
        <div className="absolute top-3 right-12 bg-gradient-to-r from-purple-500/30 to-blue-500/30 border border-purple-400/40 rounded-full px-2 py-1">
          <div className="flex items-center gap-1">
            <Brain className="w-3 h-3 text-purple-300" />
            <span className="text-xs text-purple-300 font-medium">AI</span>
          </div>
        </div>
      )}

      {/* Header */}
      <div className="relative z-10 flex items-start justify-between mb-4">
        <div className="flex items-center gap-3">
          <div className="p-3 bg-white/10 backdrop-blur-sm rounded-xl border border-white/20">
            <Icon className="w-6 h-6 text-blue-400" />
          </div>
          <div>
            <h3 className="text-white font-semibold text-lg">{title}</h3>
            <p className="text-gray-300 text-sm">{description}</p>
          </div>
        </div>

        {/* Actions Menu */}
        <div className="flex items-center gap-2">
          {customActions.length > 0 && (
            <button
              onClick={(e) => {
                e.stopPropagation();
                setShowDetails(!showDetails);
              }}
              className="p-2 bg-white/10 hover:bg-white/20 rounded-lg transition-colors"
            >
              <MoreHorizontal className="w-4 h-4 text-gray-300" />
            </button>
          )}
          
          {drillDownUrl && (
            <button
              onClick={(e) => {
                e.stopPropagation();
                window.open(drillDownUrl, '_blank');
              }}
              className="p-2 bg-white/10 hover:bg-white/20 rounded-lg transition-colors"
            >
              <ExternalLink className="w-4 h-4 text-gray-300" />
            </button>
          )}
        </div>
      </div>

      {/* Main Value */}
      <div className="relative z-10 mb-4">
        <div className="flex items-baseline gap-3 mb-2">
          <span className="text-4xl font-bold text-white tracking-tight">
            {value}
            {unit && <span className="text-2xl text-gray-300 ml-1">{unit}</span>}
          </span>
          
          {trend && trendValue && (
            <div className={`flex items-center gap-1 px-2 py-1 rounded-full bg-white/10 ${getTrendColor()}`}>
              <TrendIcon className="w-4 h-4" />
              <span className="text-sm font-medium">{trendValue}</span>
            </div>
          )}
        </div>

        {/* Confidence Indicator */}
        {confidence && (
          <div className="flex items-center gap-3 mb-3">
            <div className="flex-1 bg-white/10 rounded-full h-2 overflow-hidden">
              <div 
                className="bg-gradient-to-r from-blue-400 to-purple-400 h-2 rounded-full transition-all duration-1000 ease-out"
                style={{ width: `${confidence}%` }}
              ></div>
            </div>
            <span className="text-sm text-gray-300 font-medium">{confidence}% confidence</span>
          </div>
        )}

        {/* Mini Chart */}
        {historicalData.length > 0 && (
          <div className="h-12 mb-3">
            <svg className="w-full h-full" viewBox="0 0 200 48">
              <defs>
                <linearGradient id="chartGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                  <stop offset="0%" stopColor="rgba(59, 130, 246, 0.3)" />
                  <stop offset="100%" stopColor="rgba(59, 130, 246, 0.0)" />
                </linearGradient>
              </defs>
              
              {/* Chart path */}
              <path
                d={`M 0,${48 - (historicalData[0] / Math.max(...historicalData)) * 48} ${historicalData.map((point, index) => 
                  `L ${(index / (historicalData.length - 1)) * 200},${48 - (point / Math.max(...historicalData)) * 48}`
                ).join(' ')}`}
                fill="url(#chartGradient)"
                stroke="rgba(59, 130, 246, 0.8)"
                strokeWidth="2"
                className="drop-shadow-sm"
              />
            </svg>
          </div>
        )}
      </div>

      {/* AI Insight */}
      {aiInsight && (
        <div className="relative z-10 bg-gradient-to-r from-purple-500/15 to-blue-500/15 border border-purple-400/30 rounded-lg p-4 mb-4">
          <div className="flex items-start gap-3">
            <div className="p-1 bg-purple-500/20 rounded-lg">
              <Zap className="w-4 h-4 text-purple-300" />
            </div>
            <div className="flex-1">
              <div className="flex items-center gap-2 mb-1">
                <span className="text-sm text-purple-300 font-medium">AI Insight</span>
                {confidence && (
                  <span className="text-xs text-purple-400">({confidence}% confidence)</span>
                )}
              </div>
              <p className="text-sm text-gray-200 leading-relaxed">{aiInsight}</p>
            </div>
          </div>
        </div>
      )}

      {/* Custom Actions */}
      {showDetails && customActions.length > 0 && (
        <div className="relative z-10 border-t border-white/10 pt-4">
          <div className="flex flex-wrap gap-2">
            {customActions.map((action, index) => (
              <button
                key={index}
                onClick={(e) => {
                  e.stopPropagation();
                  action.onClick();
                }}
                className="px-3 py-1 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg text-sm text-white transition-colors"
              >
                {action.label}
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Hover Effects */}
      {isHovered && (
        <div className="absolute inset-0 bg-gradient-to-br from-blue-500/10 via-transparent to-purple-500/10 rounded-16 pointer-events-none"></div>
      )}

      {/* Loading Overlay */}
      {isUpdating && (
        <div className="absolute inset-0 bg-white/5 backdrop-blur-sm rounded-16 flex items-center justify-center">
          <div className="flex items-center gap-2 text-white">
            <RefreshCw className="w-4 h-4 animate-spin" />
            <span className="text-sm">Updating...</span>
          </div>
        </div>
      )}
    </div>
  );
};

// Enhanced Revenue Card variant
export const UltraEnhancedRevenueCard = (props) => (
  <UltraEnhancedKPICard
    {...props}
    variant="revenue"
    className="border-green-400/30 bg-green-500/10"
    realTimeUpdates={true}
    historicalData={[2.1, 2.2, 2.3, 2.4, 2.4]} // Sample data
  />
);

// Enhanced Metric Card variant
export const UltraEnhancedMetricCard = (props) => (
  <UltraEnhancedKPICard
    {...props}
    variant="metric"
    className="border-blue-400/30 bg-blue-500/10"
  />
);

// Enhanced Alert Card variant
export const UltraEnhancedAlertCard = (props) => (
  <UltraEnhancedKPICard
    {...props}
    variant="alert"
    className="border-yellow-400/30 bg-yellow-500/10"
    icon={AlertTriangle}
  />
);

export default UltraEnhancedKPICard;

