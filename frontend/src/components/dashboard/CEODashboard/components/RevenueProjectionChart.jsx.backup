import React, { useRef, useEffect } from 'react';
import { Line } from 'react-chartjs-2';
import { 
  chartColors, 
  createLineChartData, 
  revenueChartOptions 
} from '../../../../utils/chartUtils';

const RevenueProjectionChart = ({ data, loading, error, timeRange }) => {
  if (loading) {
    return (
      <div className="glassmorphism-card p-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-3">
            <div className="executive-icon gradient-green">
              <i className="fas fa-chart-line"></i>
            </div>
            <div>
              <h3 className="text-xl font-bold text-white">Revenue Projections</h3>
              <p className="text-executive-secondary">Financial performance tracking</p>
            </div>
          </div>
        </div>
        <div className="chart-container skeleton"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="glassmorphism-card p-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-3">
            <div className="executive-icon gradient-red">
              <i className="fas fa-exclamation-triangle"></i>
            </div>
            <div>
              <h3 className="text-xl font-bold text-white">Revenue Projections</h3>
              <p className="text-executive-secondary">Error loading data</p>
            </div>
          </div>
        </div>
        <div className="glassmorphism-light p-4 rounded-lg alert-error">
          <div className="flex items-center space-x-3">
            <i className="fas fa-exclamation-triangle text-red-500"></i>
            <span className="text-executive-secondary">
              Failed to load revenue data: {error}
            </span>
          </div>
        </div>
      </div>
    );
  }

  // Generate mock data if no data provided
  const chartData = data || [
    { month: 'Jan', revenue: 2200000, target: 2000000, forecast: 2400000 },
    { month: 'Feb', revenue: 2400000, target: 2200000, forecast: 2600000 },
    { month: 'Mar', revenue: 2350000, target: 2300000, forecast: 2550000 },
    { month: 'Apr', revenue: 2600000, target: 2400000, forecast: 2700000 },
    { month: 'May', revenue: 2500000, target: 2500000, forecast: 2750000 },
    { month: 'Jun', revenue: 2700000, target: 2600000, forecast: 2800000 }
  ];

  if (!chartData || !Array.isArray(chartData)) {
    return (
      <div className="glassmorphism-card p-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-3">
            <div className="executive-icon gradient-orange">
              <i className="fas fa-info-circle"></i>
            </div>
            <div>
              <h3 className="text-xl font-bold text-white">Revenue Projections</h3>
              <p className="text-executive-secondary">No data available</p>
            </div>
          </div>
        </div>
        <div className="text-center py-12 text-executive-muted">
          <i className="fas fa-chart-line text-4xl mb-4"></i>
          <p>No revenue data available for the selected period</p>
        </div>
      </div>
    );
  }

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  // Prepare Chart.js data
  const chartJsData = createLineChartData(
    chartData.map(d => d.month),
    [
      {
        label: 'Actual Revenue',
        data: chartData.map(d => d.revenue),
        borderColor: chartColors.success,
        backgroundColor: chartColors.success + '20',
        fill: true,
        tension: 0.4
      },
      {
        label: 'Target',
        data: chartData.map(d => d.target),
        borderColor: chartColors.warning,
        backgroundColor: 'transparent',
        borderDash: [5, 5],
        fill: false,
        pointRadius: 4
      },
      {
        label: 'Forecast',
        data: chartData.map(d => d.forecast),
        borderColor: chartColors.primary,
        backgroundColor: 'transparent',
        borderDash: [3, 3],
        fill: false,
        pointRadius: 4
      }
    ]
  );

  // Calculate performance metrics
  const totalRevenue = chartData.reduce((sum, d) => sum + d.revenue, 0);
  const totalTarget = chartData.reduce((sum, d) => sum + d.target, 0);
  const performance = ((totalRevenue - totalTarget) / totalTarget) * 100;
  const latestMonth = chartData[chartData.length - 1];

  return (
    <div className="glassmorphism-card p-6 hover-scale">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <div className="executive-icon gradient-green">
            <i className="fas fa-chart-line"></i>
          </div>
          <div>
            <h3 className="text-xl font-bold text-white">Revenue Projections</h3>
            <p className="text-executive-secondary">Financial performance tracking</p>
          </div>
        </div>
        
        {/* Performance indicator */}
        <div className="text-right">
          <div className={`text-lg font-bold ${performance >= 0 ? 'trend-up' : 'trend-down'}`}>
            <i className={`fas ${performance >= 0 ? 'fa-arrow-up' : 'fa-arrow-down'} mr-2`}></i>
            {performance >= 0 ? '+' : ''}{performance.toFixed(1)}%
          </div>
          <p className="text-xs text-executive-muted">vs target</p>
        </div>
      </div>

      {/* Chart */}
      <div className="chart-wrapper mb-6">
        <div className="chart-container">
          <Line data={chartJsData} options={revenueChartOptions} />
        </div>
      </div>

      {/* Legend */}
      <div className="flex items-center justify-center space-x-6 mb-6">
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 bg-green-500 rounded-full"></div>
          <span className="text-sm text-executive-secondary">Actual</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-3 h-1 bg-yellow-500"></div>
          <span className="text-sm text-executive-secondary">Target</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-3 h-1 bg-purple-500" style={{ borderStyle: 'dashed' }}></div>
          <span className="text-sm text-executive-secondary">Forecast</span>
        </div>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-3 gap-4 mb-6">
        <div className="text-center p-3 glassmorphism-light rounded-lg">
          <div className="text-lg font-bold text-white">
            {formatCurrency(totalRevenue)}
          </div>
          <div className="text-xs text-executive-muted">Total Revenue</div>
        </div>
        <div className="text-center p-3 glassmorphism-light rounded-lg">
          <div className="text-lg font-bold text-white">
            {formatCurrency(totalTarget)}
          </div>
          <div className="text-xs text-executive-muted">Total Target</div>
        </div>
        <div className="text-center p-3 glassmorphism-light rounded-lg">
          <div className="text-lg font-bold text-white">
            {formatCurrency(latestMonth?.forecast || 0)}
          </div>
          <div className="text-xs text-executive-muted">Next Forecast</div>
        </div>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-2 gap-4 text-sm">
        <div className="flex justify-between">
          <span className="text-executive-muted">Best Month:</span>
          <span className="text-executive-secondary font-medium">
            {chartData.reduce((best, curr) => curr.revenue > best.revenue ? curr : best).month}
          </span>
        </div>
        <div className="flex justify-between">
          <span className="text-executive-muted">Growth Rate:</span>
          <span className={`font-medium ${performance >= 0 ? 'trend-up' : 'trend-down'}`}>
            {performance >= 0 ? '+' : ''}{performance.toFixed(1)}%
          </span>
        </div>
      </div>
    </div>
  );
};

export default RevenueProjectionChart;
