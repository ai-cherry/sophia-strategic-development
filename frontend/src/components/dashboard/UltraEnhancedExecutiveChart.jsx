/**
 * Ultra-Enhanced Executive Chart Component
 * Next-generation data visualization with AI insights and advanced interactivity
 * Generated by Sophia AI UI/UX Agent System - Phase 2
 */

import React, { useState, useEffect, useMemo } from 'react';
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  ReferenceLine,
  Brush
} from 'recharts';
import {
  TrendingUp,
  TrendingDown,
  BarChart3,
  PieChart as PieChartIcon,
  Activity,
  Zap,
  Brain,
  Download,
  Maximize2,
  Settings,
  RefreshCw,
  Eye,
  EyeOff
} from 'lucide-react';

// Enhanced mock data with AI predictions
const generateRevenueData = (timeRange) => {
  const baseData = [
    { month: 'Jan', revenue: 2100000, target: 2000000, prediction: 2150000, confidence: 92 },
    { month: 'Feb', revenue: 2250000, target: 2100000, prediction: 2300000, confidence: 89 },
    { month: 'Mar', revenue: 2400000, target: 2200000, prediction: 2450000, confidence: 94 },
    { month: 'Apr', revenue: 2350000, target: 2300000, prediction: 2400000, confidence: 87 },
    { month: 'May', revenue: 2500000, target: 2400000, prediction: 2550000, confidence: 91 },
    { month: 'Jun', revenue: 2650000, target: 2500000, prediction: 2700000, confidence: 93 }
  ];

  return baseData.map(item => ({
    ...item,
    growth: ((item.revenue - 2000000) / 2000000 * 100).toFixed(1),
    efficiency: (item.revenue / item.target * 100).toFixed(1)
  }));
};

const generatePerformanceData = () => [
  { metric: 'Sales', current: 94, target: 90, trend: 'up' },
  { metric: 'Marketing', current: 87, target: 85, trend: 'up' },
  { metric: 'Operations', current: 91, target: 88, trend: 'up' },
  { metric: 'Support', current: 96, target: 92, trend: 'up' },
  { metric: 'Product', current: 89, target: 85, trend: 'up' }
];

const generateMarketShareData = () => [
  { name: 'Sophia AI', value: 23.7, color: '#3B82F6', growth: '+1.8%' },
  { name: 'Competitor A', value: 19.2, color: '#EF4444', growth: '-0.5%' },
  { name: 'Competitor B', value: 15.8, color: '#F59E0B', growth: '+0.2%' },
  { name: 'Competitor C', value: 12.3, color: '#10B981', growth: '-0.3%' },
  { name: 'Others', value: 29.0, color: '#6B7280', growth: '-1.2%' }
];

const UltraEnhancedExecutiveChart = ({
  type = 'revenue',
  title,
  timeRange = '6m',
  showAIInsights = true,
  showPredictions = true,
  interactive = true,
  className = ''
}) => {
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [chartConfig, setChartConfig] = useState({
    showGrid: true,
    showTooltip: true,
    showLegend: true,
    animationDuration: 1000,
    theme: 'dark'
  });
  const [hoveredData, setHoveredData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  // Memoized data generation for performance
  const chartData = useMemo(() => {
    switch (type) {
      case 'revenue':
        return generateRevenueData(timeRange);
      case 'performance':
        return generatePerformanceData();
      case 'market':
        return generateMarketShareData();
      default:
        return generateRevenueData(timeRange);
    }
  }, [type, timeRange]);

  // AI Insights generation
  const aiInsights = useMemo(() => {
    if (!showAIInsights) return null;

    switch (type) {
      case 'revenue':
        return {
          trend: 'Strong upward trajectory with 12.5% growth',
          prediction: 'AI forecasts 18% growth next quarter',
          confidence: 94,
          recommendation: 'Maintain current strategy, consider expansion'
        };
      case 'performance':
        return {
          trend: 'All departments exceeding targets',
          prediction: 'Support team likely to achieve 98% by Q4',
          confidence: 91,
          recommendation: 'Focus on scaling successful practices'
        };
      case 'market':
        return {
          trend: 'Market share growing faster than competitors',
          prediction: 'Potential to reach 25% market share by Q4',
          confidence: 89,
          recommendation: 'Accelerate competitive differentiation'
        };
      default:
        return null;
    }
  }, [type, showAIInsights]);

  // Custom tooltip component
  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-black/80 backdrop-blur-lg border border-white/20 rounded-lg p-4 shadow-xl">
          <p className="text-white font-semibold mb-2">{label}</p>
          {payload.map((entry, index) => (
            <div key={index} className="flex items-center gap-2 mb-1">
              <div 
                className="w-3 h-3 rounded-full" 
                style={{ backgroundColor: entry.color }}
              ></div>
              <span className="text-gray-300 text-sm">
                {entry.name}: <span className="text-white font-medium">{entry.value}</span>
              </span>
            </div>
          ))}
          {showAIInsights && (
            <div className="border-t border-white/20 pt-2 mt-2">
              <div className="flex items-center gap-1 mb-1">
                <Brain className="w-3 h-3 text-purple-400" />
                <span className="text-xs text-purple-300">AI Insight</span>
              </div>
              <p className="text-xs text-gray-300">Click for detailed analysis</p>
            </div>
          )}
        </div>
      );
    }
    return null;
  };

  // Chart refresh function
  const handleRefresh = async () => {
    setIsLoading(true);
    await new Promise(resolve => setTimeout(resolve, 1500));
    setIsLoading(false);
  };

  // Export function
  const handleExport = () => {
    // In a real implementation, this would export the chart data
    console.log('Exporting chart data:', chartData);
  };

  // Render different chart types
  const renderChart = () => {
    const commonProps = {
      data: chartData,
      margin: { top: 20, right: 30, left: 20, bottom: 20 }
    };

    switch (type) {
      case 'revenue':
        return (
          <ResponsiveContainer width="100%" height="100%">
            <AreaChart {...commonProps}>
              {chartConfig.showGrid && (
                <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
              )}
              <XAxis 
                dataKey="month" 
                stroke="rgba(255,255,255,0.6)"
                fontSize={12}
              />
              <YAxis 
                stroke="rgba(255,255,255,0.6)"
                fontSize={12}
                tickFormatter={(value) => `$${(value / 1000000).toFixed(1)}M`}
              />
              {chartConfig.showTooltip && <Tooltip content={<CustomTooltip />} />}
              {chartConfig.showLegend && (
                <Legend 
                  wrapperStyle={{ color: 'rgba(255,255,255,0.8)' }}
                />
              )}
              
              <defs>
                <linearGradient id="revenueGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#3B82F6" stopOpacity={0.3}/>
                  <stop offset="95%" stopColor="#3B82F6" stopOpacity={0.0}/>
                </linearGradient>
                <linearGradient id="predictionGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#8B5CF6" stopOpacity={0.2}/>
                  <stop offset="95%" stopColor="#8B5CF6" stopOpacity={0.0}/>
                </linearGradient>
              </defs>

              <Area
                type="monotone"
                dataKey="revenue"
                stroke="#3B82F6"
                strokeWidth={3}
                fill="url(#revenueGradient)"
                name="Actual Revenue"
                animationDuration={chartConfig.animationDuration}
              />
              
              {showPredictions && (
                <Area
                  type="monotone"
                  dataKey="prediction"
                  stroke="#8B5CF6"
                  strokeWidth={2}
                  strokeDasharray="5 5"
                  fill="url(#predictionGradient)"
                  name="AI Prediction"
                  animationDuration={chartConfig.animationDuration}
                />
              )}

              <Line
                type="monotone"
                dataKey="target"
                stroke="#10B981"
                strokeWidth={2}
                strokeDasharray="3 3"
                name="Target"
                dot={false}
              />
            </AreaChart>
          </ResponsiveContainer>
        );

      case 'performance':
        return (
          <ResponsiveContainer width="100%" height="100%">
            <BarChart {...commonProps}>
              {chartConfig.showGrid && (
                <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
              )}
              <XAxis 
                dataKey="metric" 
                stroke="rgba(255,255,255,0.6)"
                fontSize={12}
              />
              <YAxis 
                stroke="rgba(255,255,255,0.6)"
                fontSize={12}
                domain={[0, 100]}
              />
              {chartConfig.showTooltip && <Tooltip content={<CustomTooltip />} />}
              {chartConfig.showLegend && (
                <Legend wrapperStyle={{ color: 'rgba(255,255,255,0.8)' }} />
              )}

              <Bar
                dataKey="current"
                fill="#3B82F6"
                name="Current Performance"
                radius={[4, 4, 0, 0]}
                animationDuration={chartConfig.animationDuration}
              />
              <Bar
                dataKey="target"
                fill="rgba(16, 185, 129, 0.3)"
                name="Target"
                radius={[4, 4, 0, 0]}
                animationDuration={chartConfig.animationDuration}
              />
            </BarChart>
          </ResponsiveContainer>
        );

      case 'market':
        return (
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={chartData}
                cx="50%"
                cy="50%"
                innerRadius={60}
                outerRadius={120}
                paddingAngle={2}
                dataKey="value"
                animationDuration={chartConfig.animationDuration}
              >
                {chartData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              {chartConfig.showTooltip && <Tooltip content={<CustomTooltip />} />}
              {chartConfig.showLegend && (
                <Legend 
                  wrapperStyle={{ color: 'rgba(255,255,255,0.8)' }}
                  formatter={(value, entry) => (
                    <span style={{ color: entry.color }}>
                      {value} ({entry.payload.value}%)
                    </span>
                  )}
                />
              )}
            </PieChart>
          </ResponsiveContainer>
        );

      default:
        return null;
    }
  };

  const chartStyles = {
    background: 'linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%)',
    backdropFilter: 'blur(20px)',
    border: '1px solid rgba(255,255,255,0.2)',
    borderRadius: '16px',
    boxShadow: '0 8px 32px rgba(0,0,0,0.1), inset 0 1px 0 rgba(255,255,255,0.2)',
    position: 'relative',
    overflow: 'hidden'
  };

  return (
    <div 
      style={chartStyles}
      className={`p-6 ${className} ${isFullscreen ? 'fixed inset-4 z-50' : ''}`}
    >
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h3 className="text-xl font-bold text-white mb-1 flex items-center gap-2">
            {type === 'revenue' && <BarChart3 className="w-5 h-5 text-blue-400" />}
            {type === 'performance' && <Activity className="w-5 h-5 text-green-400" />}
            {type === 'market' && <PieChartIcon className="w-5 h-5 text-purple-400" />}
            {title}
          </h3>
          <p className="text-gray-300 text-sm">
            {timeRange === '6m' ? 'Last 6 months' : 'Current period'} • 
            <span className="text-blue-400 ml-1">Live data</span>
          </p>
        </div>

        <div className="flex items-center gap-2">
          {/* AI Insights Indicator */}
          {showAIInsights && aiInsights && (
            <div className="flex items-center gap-1 px-2 py-1 bg-purple-500/20 border border-purple-400/30 rounded-lg">
              <Brain className="w-4 h-4 text-purple-400" />
              <span className="text-xs text-purple-300">AI: {aiInsights.confidence}%</span>
            </div>
          )}

          {/* Controls */}
          <button
            onClick={handleRefresh}
            disabled={isLoading}
            className="p-2 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg transition-colors"
          >
            <RefreshCw className={`w-4 h-4 text-gray-300 ${isLoading ? 'animate-spin' : ''}`} />
          </button>

          <button
            onClick={handleExport}
            className="p-2 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg transition-colors"
          >
            <Download className="w-4 h-4 text-gray-300" />
          </button>

          <button
            onClick={() => setShowSettings(!showSettings)}
            className="p-2 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg transition-colors"
          >
            <Settings className="w-4 h-4 text-gray-300" />
          </button>

          <button
            onClick={() => setIsFullscreen(!isFullscreen)}
            className="p-2 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg transition-colors"
          >
            <Maximize2 className="w-4 h-4 text-gray-300" />
          </button>
        </div>
      </div>

      {/* Settings Panel */}
      {showSettings && (
        <div className="absolute top-16 right-6 bg-black/80 backdrop-blur-lg border border-white/20 rounded-lg p-4 z-10 min-w-48">
          <h4 className="text-white font-medium mb-3">Chart Settings</h4>
          <div className="space-y-2">
            <label className="flex items-center gap-2 text-sm text-gray-300">
              <input
                type="checkbox"
                checked={chartConfig.showGrid}
                onChange={(e) => setChartConfig(prev => ({ ...prev, showGrid: e.target.checked }))}
                className="rounded"
              />
              Show Grid
            </label>
            <label className="flex items-center gap-2 text-sm text-gray-300">
              <input
                type="checkbox"
                checked={chartConfig.showTooltip}
                onChange={(e) => setChartConfig(prev => ({ ...prev, showTooltip: e.target.checked }))}
                className="rounded"
              />
              Show Tooltip
            </label>
            <label className="flex items-center gap-2 text-sm text-gray-300">
              <input
                type="checkbox"
                checked={chartConfig.showLegend}
                onChange={(e) => setChartConfig(prev => ({ ...prev, showLegend: e.target.checked }))}
                className="rounded"
              />
              Show Legend
            </label>
          </div>
        </div>
      )}

      {/* Chart Container */}
      <div className="h-80 mb-4">
        {renderChart()}
      </div>

      {/* AI Insights Panel */}
      {showAIInsights && aiInsights && (
        <div className="bg-gradient-to-r from-purple-500/15 to-blue-500/15 border border-purple-400/30 rounded-lg p-4">
          <div className="flex items-start gap-3">
            <div className="p-2 bg-purple-500/20 rounded-lg">
              <Zap className="w-4 h-4 text-purple-300" />
            </div>
            <div className="flex-1">
              <div className="flex items-center gap-2 mb-2">
                <span className="text-sm text-purple-300 font-medium">AI Analysis</span>
                <span className="text-xs text-purple-400">({aiInsights.confidence}% confidence)</span>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                <div>
                  <span className="text-gray-400">Trend:</span>
                  <p className="text-gray-200">{aiInsights.trend}</p>
                </div>
                <div>
                  <span className="text-gray-400">Prediction:</span>
                  <p className="text-gray-200">{aiInsights.prediction}</p>
                </div>
                <div>
                  <span className="text-gray-400">Recommendation:</span>
                  <p className="text-gray-200">{aiInsights.recommendation}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Loading Overlay */}
      {isLoading && (
        <div className="absolute inset-0 bg-black/50 backdrop-blur-sm rounded-16 flex items-center justify-center">
          <div className="flex items-center gap-3 text-white">
            <RefreshCw className="w-5 h-5 animate-spin" />
            <span>Updating chart data...</span>
          </div>
        </div>
      )}
    </div>
  );
};

// Enhanced chart variants
export const UltraEnhancedRevenueChart = (props) => (
  <UltraEnhancedExecutiveChart
    {...props}
    type="revenue"
    title="Revenue Analytics"
  />
);

export const UltraEnhancedPerformanceChart = (props) => (
  <UltraEnhancedExecutiveChart
    {...props}
    type="performance"
    title="Performance Metrics"
  />
);

export const UltraEnhancedMarketShareChart = (props) => (
  <UltraEnhancedExecutiveChart
    {...props}
    type="market"
    title="Market Share Analysis"
  />
);

export default UltraEnhancedExecutiveChart;

