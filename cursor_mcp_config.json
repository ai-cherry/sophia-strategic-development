{
  "version": "1.0",
  "description": "Sophia AI MCP Server Configuration with Environment Stabilization",
  "environment": {
    "ENVIRONMENT": "prod",
    "PULUMI_ORG": "scoobyjava-org",
    "PULUMI_ACCESS_TOKEN": "${PULUMI_ACCESS_TOKEN}"
  },
  "servers": {
    "ai_memory": {
      "command": "python",
      "args": [
        "-m",
        "mcp-servers.ai_memory.ai_memory_mcp_server"
      ],
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org",
        "PULUMI_ACCESS_TOKEN": "${PULUMI_ACCESS_TOKEN}"
      },
      "capabilities": {
        "memory_storage": true,
        "semantic_search": true,
        "context_awareness": true,
        "auto_discovery": true
      },
      "auto_triggers": {
        "on_conversation": true,
        "on_code_change": true,
        "on_architecture_discussion": true
      }
    },
    "codacy": {
      "command": "python",
      "args": ["-m", "mcp-servers.codacy.codacy_mcp_server"],
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org"
      },
      "capabilities": [
        "static_analysis",
        "security_scanning",
        "code_quality_metrics"
      ],
      "description": "Provides on-demand code and security analysis via the Codacy API."
    },
    "asana": {
      "command": "python",
      "args": [
        "-m",
        "mcp-servers.asana.asana_mcp_server"
      ],
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org",
        "PULUMI_ACCESS_TOKEN": "${PULUMI_ACCESS_TOKEN}"
      },
      "capabilities": {
        "task_management": true,
        "project_analytics": true,
        "team_insights": true
      }
    },
    "notion": {
      "command": "python",
      "args": [
        "-m",
        "mcp-servers.notion.notion_mcp_server"
      ],
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org",
        "PULUMI_ACCESS_TOKEN": "${PULUMI_ACCESS_TOKEN}"
      },
      "capabilities": {
        "knowledge_management": true,
        "documentation": true,
        "collaboration": true
      }
    },
    "linear": {
      "command": "python",
      "args": [
        "-m",
        "mcp-servers.linear.linear_mcp_server"
      ],
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org",
        "PULUMI_ACCESS_TOKEN": "${PULUMI_ACCESS_TOKEN}"
      },
      "capabilities": {
        "issue_management": true,
        "project_tracking": true,
        "team_velocity": true,
        "ai_insights": true
      }
    },
    "github": {
      "type": "http",
      "description": "GitHub MCP Server - Repository management and CI/CD integration",
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org"
      },
      "capabilities": [
        "repository_management",
        "ci_cd_integration",
        "issue_tracking",
        "pull_request_management"
      ]
    },
    "slack": {
      "type": "http",
      "description": "Slack MCP Server - Team communication and workflow automation",
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org"
      },
      "capabilities": [
        "team_communication",
        "workflow_automation",
        "notification_management",
        "sentiment_analysis"
      ]
    },
    "postgres": {
      "type": "http",
      "description": "PostgreSQL MCP Server - Database operations and analytics",
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org"
      },
      "capabilities": [
        "database_operations",
        "data_analytics",
        "schema_management",
        "performance_monitoring"
      ]
    },
    "sophia_data": {
      "type": "http",
      "description": "Sophia Data Intelligence MCP Server - Handles data processing, ETL, and data pipeline management",
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org"
      },
      "capabilities": [
        "data_processing",
        "etl_pipelines",
        "database_operations",
        "data_quality"
      ]
    },
    "sophia_infrastructure": {
      "type": "http",
      "description": "Sophia Infrastructure MCP Server - Manages deployments, scaling, and infrastructure operations",
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org"
      },
      "capabilities": [
        "deployment_management",
        "infrastructure_scaling",
        "monitoring_setup",
        "security_configuration"
      ]
    },
    "snowflake_admin": {
      "command": "python",
      "args": [
        "-m",
        "mcp-servers.snowflake_admin.snowflake_admin_mcp_server"
      ],
      "env": {
        "ENVIRONMENT": "prod",
        "PULUMI_ORG": "scoobyjava-org",
        "PULUMI_STACK": "sophia-ai-production"
      },
      "capabilities": {
        "sql_agent": true,
        "multi_environment": true,
        "safety_checks": true,
        "natural_language": true
      },
      "security": {
        "dangerous_operation_detection": true,
        "confirmation_required": true,
        "environment_restrictions": true,
        "audit_logging": true
      },
      "environments": {
        "dev": {
          "restrictions": "minimal",
          "confirmation_required": false
        },
        "staging": {
          "restrictions": "moderate",
          "confirmation_required": true
        },
        "production": {
          "restrictions": "strict",
          "confirmation_required": true,
          "read_only": true
        }
      }
    }
  },
  "settings": {
    "timeout": 30000,
    "retries": 3,
    "healthCheckInterval": 60000,
    "logLevel": "info",
    "autoMemoryStorage": true,
    "intelligentRouting": true,
    "contextAwareness": true,
    "environmentValidation": true
  },
  "globalEnvironment": {
    "ENVIRONMENT": "prod",
    "PULUMI_ORG": "scoobyjava-org",
    "LOG_LEVEL": "INFO"
  },
  "autoTriggers": {
    "onFileChange": [
      "ai_memory.auto_store_context",
      "codacy.analyze_file"
    ],
    "onCommit": [
      "ai_memory.store_conversation",
      "codacy.security_scan"
    ],
    "onPullRequest": [
      "codacy.analyze_code",
      "ai_memory.recall_memory"
    ]
  },
  "workflows": {
    "code_review": {
      "triggers": ["file_save", "commit"],
      "sequence": [
        "codacy.analyze_code",
        "ai_memory.smart_recall",
        "ai_memory.auto_store_context"
      ]
    },
    "architecture_discussion": {
      "triggers": ["conversation_keywords"],
      "keywords": ["architecture", "design", "pattern", "structure"],
      "sequence": [
        "ai_memory.recall_memory",
        "ai_memory.store_conversation"
      ]
    },
    "bug_analysis": {
      "triggers": ["error_detection", "bug_keywords"],
      "keywords": ["bug", "error", "issue", "fix"],
      "sequence": [
        "ai_memory.recall_memory",
        "codacy.security_scan",
        "ai_memory.store_conversation"
      ]
    }
  },
  "healthChecks": {
    "enabled": true,
    "interval": 60000
  },
  "security": {
    "secretMasking": true,
    "auditLogging": true,
    "environmentValidation": true,
    "requireHealthyServices": true
  },
  "performance": {
    "enableCaching": true,
    "parallelExecution": true,
    "intelligentRouting": true,
    "resourceOptimization": true
  },
  "monitoring": {
    "enabled": true,
    "metricsCollection": true,
    "performanceTracking": true,
    "errorReporting": true
  }
}