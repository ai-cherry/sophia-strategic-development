"""
Advanced Estuary Flow Manager for Sophia AI
Enhanced real-time data processing with multimodal support and AI-powered analytics
"""

"""
File Decomposition Plan (auto-generated by Phase 3)
Current size: 871 lines

Recommended decomposition:
- advanced_estuary_flow_manager_core.py - Core functionality
- advanced_estuary_flow_manager_utils.py - Utility functions  
- advanced_estuary_flow_manager_models.py - Data models
- advanced_estuary_flow_manager_handlers.py - Request handlers

TODO: Implement file decomposition
"""

import logging
from typing import Dict, Any

from backend.core.auto_esc_config import get_config_value

logger = logging.getLogger(__name__)


# Base EstuaryFlowManager for compatibility
class EstuaryFlowManager:
    """Base Estuary Flow Manager for compatibility"""

    def __init__(self):
        self.estuary_token = get_config_value("estuary_access_token")
        self.tenant = get_config_value("estuary_tenant", "Pay_Ready")

    async def get_flow_statistics(self):
        """Get basic flow statistics"""
        return {"avg_latency": 1500, "throughput": 1000, "error_rate": 0.01}


class AdvancedEstuaryFlowManager(EstuaryFlowManager):
    """Advanced Estuary Flow Manager with multimodal and AI-powered capabilities"""

    def __init__(self):
        super().__init__()
        self.advanced_database = "SOPHIA_AI_ADVANCED"
        self.multimodal_schema = "RAW_MULTIMODAL"
        self.processed_schema = "PROCESSED_AI"
        self.ai_processing_enabled = True

    async def setup_multimodal_captures(self) -> Dict[str, Any]:
        """Configure captures for multimodal data sources with AI processing"""
        logger.info("🎯 Setting up advanced multimodal captures...")

        captures_config = {
            "gong_multimodal_capture": await self._create_gong_multimodal_capture(),
            "slack_multimodal_capture": await self._create_slack_multimodal_capture(),
            "hubspot_multimodal_capture": await self._create_hubspot_multimodal_capture(),
            "intercom_capture": await self._create_intercom_capture(),
        }

        # Deploy all captures
        deployment_results = {}
        for capture_name, config in captures_config.items():
            try:
                result = await self._deploy_capture(capture_name, config)
                deployment_results[capture_name] = result
                logger.info(f"✅ Deployed {capture_name}")
            except Exception as e:
                logger.error(f"❌ Failed to deploy {capture_name}: {e}")
                deployment_results[capture_name] = {"error": str(e)}

        return deployment_results

    async def _create_gong_multimodal_capture(self) -> Dict[str, Any]:
        """Create Gong capture with multimodal support for audio and transcripts"""
        return {
            "type": "capture",
            "name": "Pay_Ready/gong-multimodal",
            "endpoint": {
                "connector": {
                    "image": "ghcr.io/estuary/source-gong:dev",
                    "config": {
                        "access_key": get_config_value("gong_access_key"),
                        "access_key_secret": get_config_value("gong_access_key_secret"),
                        "start_date": "2025-01-01T00:00:00Z",
                        "include_audio": True,
                        "include_transcripts": True,
                        "include_metadata": True,
                    },
                }
            },
            "bindings": [
                {
                    "resource": {"stream": "calls", "syncMode": "incremental"},
                    "target": "Pay_Ready/gong-calls-multimodal",
                    "transform": {"lambda": "gong_multimodal_transform.py"},
                },
                {
                    "resource": {
                        "stream": "call_transcripts",
                        "syncMode": "incremental",
                    },
                    "target": "Pay_Ready/gong-transcripts",
                    "transform": {"lambda": "gong_transcript_transform.py"},
                },
            ],
        }

    async def _create_slack_multimodal_capture(self) -> Dict[str, Any]:
        """Create Slack capture with attachment and media processing"""
        return {
            "type": "capture",
            "name": "Pay_Ready/slack-multimodal",
            "endpoint": {
                "connector": {
                    "image": "ghcr.io/estuary/source-slack:dev",
                    "config": {
                        "bot_token": get_config_value("slack_bot_token"),
                        "channels": [
                            "general",
                            "sales",
                            "customer-success",
                            "collections",
                        ],
                        "include_private_channels": True,
                        "include_attachments": True,
                        "include_files": True,
                        "lookback_window": "P7D",
                        "start_date": "2025-01-01T00:00:00Z",
                    },
                }
            },
            "bindings": [
                {
                    "resource": {"stream": "messages", "syncMode": "incremental"},
                    "target": "Pay_Ready/slack-messages-multimodal",
                    "transform": {"lambda": "slack_multimodal_transform.py"},
                },
                {
                    "resource": {"stream": "files", "syncMode": "incremental"},
                    "target": "Pay_Ready/slack-files",
                    "transform": {"lambda": "slack_files_transform.py"},
                },
            ],
        }

    async def _create_hubspot_multimodal_capture(self) -> Dict[str, Any]:
        """Create HubSpot capture with document and attachment processing"""
        return {
            "type": "capture",
            "name": "Pay_Ready/hubspot-multimodal",
            "endpoint": {
                "connector": {
                    "image": "ghcr.io/estuary/source-hubspot:dev",
                    "config": {
                        "access_token": get_config_value("hubspot_access_token"),
                        "start_date": "2025-01-01T00:00:00Z",
                        "include_attachments": True,
                        "include_documents": True,
                        "objects": [
                            "contacts",
                            "deals",
                            "companies",
                            "tickets",
                            "engagements",
                        ],
                    },
                }
            },
            "bindings": [
                {
                    "resource": {"stream": "contacts", "syncMode": "incremental"},
                    "target": "Pay_Ready/hubspot-contacts-multimodal",
                },
                {
                    "resource": {"stream": "deals", "syncMode": "incremental"},
                    "target": "Pay_Ready/hubspot-deals-multimodal",
                },
                {
                    "resource": {"stream": "companies", "syncMode": "incremental"},
                    "target": "Pay_Ready/hubspot-companies-multimodal",
                },
            ],
        }

    async def _create_intercom_capture(self) -> Dict[str, Any]:
        """Create Intercom capture for customer service data"""
        return {
            "type": "capture",
            "name": "Pay_Ready/intercom",
            "endpoint": {
                "connector": {
                    "image": "ghcr.io/estuary/source-intercom:dev",
                    "config": {
                        "access_token": get_config_value("intercom_access_token"),
                        "start_date": "2025-01-01T00:00:00Z",
                        "include_conversations": True,
                        "include_contacts": True,
                        "include_attachments": True,
                    },
                }
            },
            "bindings": [
                {
                    "resource": {"stream": "conversations", "syncMode": "incremental"},
                    "target": "Pay_Ready/intercom-conversations",
                },
                {
                    "resource": {"stream": "contacts", "syncMode": "incremental"},
                    "target": "Pay_Ready/intercom-contacts",
                },
            ],
        }

    async def deploy_ai_powered_materializations(self) -> Dict[str, Any]:
        """Deploy materializations with real-time AI processing"""
        logger.info("🧠 Deploying AI-powered materializations...")

        materializations_config = {
            "snowflake_multimodal_materialization": await self._create_snowflake_multimodal_materialization(),
            "real_time_analytics_materialization": await self._create_realtime_analytics_materialization(),
            "compliance_monitoring_materialization": await self._create_compliance_monitoring_materialization(),
        }

        # Deploy all materializations
        deployment_results = {}
        for mat_name, config in materializations_config.items():
            try:
                result = await self._deploy_materialization(mat_name, config)
                deployment_results[mat_name] = result
                logger.info(f"✅ Deployed {mat_name}")
            except Exception as e:
                logger.error(f"❌ Failed to deploy {mat_name}: {e}")
                deployment_results[mat_name] = {"error": str(e)}

        return deployment_results

    async def _create_snowflake_multimodal_materialization(self) -> Dict[str, Any]:
        """Create Snowflake materialization with multimodal support"""
        return {
            "type": "materialization",
            "name": "Pay_Ready/snowflake-multimodal-ai",
            "endpoint": {
                "connector": {
                    "image": "ghcr.io/estuary/materialize-snowflake:dev",
                    "config": {
                        "host": f"{get_config_value('snowflake_account')}.snowflakecomputing.com",
                        "account": get_config_value("snowflake_account"),
                        "user": get_config_value("snowflake_user"),
                        "password": get_config_value("snowflake_password"),
                        "role": "ACCOUNTADMIN",
                        "warehouse": "AI_COMPUTE_WH",
                        "database": self.advanced_database,
                        "schema": self.multimodal_schema,
                        "advanced": {
                            "updateDelay": "0s",
                            "deltaUpdates": True,
                            "hardDelete": True,
                            "aiProcessing": True,
                        },
                    },
                }
            },
            "bindings": [
                {
                    "resource": {"table": "GONG_CALLS_MULTIMODAL"},
                    "source": "Pay_Ready/gong-calls-multimodal",
                    "fields": {"recommended": True},
                    "transform": {"lambda": "ai_sentiment_analysis.py"},
                },
                {
                    "resource": {"table": "SLACK_MESSAGES_MULTIMODAL"},
                    "source": "Pay_Ready/slack-messages-multimodal",
                    "fields": {"recommended": True},
                    "transform": {"lambda": "ai_message_classification.py"},
                },
                {
                    "resource": {"table": "HUBSPOT_UNIFIED_MULTIMODAL"},
                    "source": "Pay_Ready/hubspot-contacts-multimodal",
                    "fields": {"recommended": True},
                    "transform": {"lambda": "ai_customer_intelligence.py"},
                },
                {
                    "resource": {"table": "INTERCOM_CONVERSATIONS"},
                    "source": "Pay_Ready/intercom-conversations",
                    "fields": {"recommended": True},
                    "transform": {"lambda": "ai_support_analysis.py"},
                },
            ],
        }

    async def _create_realtime_analytics_materialization(self) -> Dict[str, Any]:
        """Create real-time analytics materialization"""
        return {
            "type": "materialization",
            "name": "Pay_Ready/realtime-analytics",
            "endpoint": {
                "connector": {
                    "image": "ghcr.io/estuary/materialize-snowflake:dev",
                    "config": {
                        "host": f"{get_config_value('snowflake_account')}.snowflakecomputing.com",
                        "account": get_config_value("snowflake_account"),
                        "user": get_config_value("snowflake_user"),
                        "password": get_config_value("snowflake_password"),
                        "role": "ACCOUNTADMIN",
                        "warehouse": "REALTIME_ANALYTICS_WH",
                        "database": self.advanced_database,
                        "schema": "REAL_TIME_ANALYTICS",
                        "advanced": {
                            "updateDelay": "0s",
                            "deltaUpdates": True,
                            "realTimeProcessing": True,
                        },
                    },
                }
            },
            "bindings": [
                {
                    "resource": {"table": "CUSTOMER_HEALTH_REALTIME"},
                    "source": "Pay_Ready/customer-health-stream",
                    "fields": {"recommended": True},
                },
                {
                    "resource": {"table": "SALES_PIPELINE_REALTIME"},
                    "source": "Pay_Ready/sales-pipeline-stream",
                    "fields": {"recommended": True},
                },
                {
                    "resource": {"table": "COMPLIANCE_ALERTS_REALTIME"},
                    "source": "Pay_Ready/compliance-alerts-stream",
                    "fields": {"recommended": True},
                },
            ],
        }

    async def _create_compliance_monitoring_materialization(self) -> Dict[str, Any]:
        """Create compliance monitoring materialization"""
        return {
            "type": "materialization",
            "name": "Pay_Ready/compliance-monitoring",
            "endpoint": {
                "connector": {
                    "image": "ghcr.io/estuary/materialize-snowflake:dev",
                    "config": {
                        "host": f"{get_config_value('snowflake_account')}.snowflakecomputing.com",
                        "account": get_config_value("snowflake_account"),
                        "user": get_config_value("snowflake_user"),
                        "password": get_config_value("snowflake_password"),
                        "role": "ACCOUNTADMIN",
                        "warehouse": "AI_COMPUTE_WH",
                        "database": self.advanced_database,
                        "schema": "COMPLIANCE_MONITORING",
                        "advanced": {
                            "updateDelay": "0s",
                            "deltaUpdates": True,
                            "complianceChecking": True,
                        },
                    },
                }
            },
            "bindings": [
                {
                    "resource": {"table": "FDCPA_COMPLIANCE_LOG"},
                    "source": "Pay_Ready/fdcpa-compliance-stream",
                    "fields": {"recommended": True},
                },
                {
                    "resource": {"table": "PRIVACY_COMPLIANCE_LOG"},
                    "source": "Pay_Ready/privacy-compliance-stream",
                    "fields": {"recommended": True},
                },
                {
                    "resource": {"table": "DATA_GOVERNANCE_LOG"},
                    "source": "Pay_Ready/data-governance-stream",
                    "fields": {"recommended": True},
                },
            ],
        }

    async def setup_ai_processing_transforms(self) -> Dict[str, Any]:
        """Set up AI processing transforms for real-time data enhancement"""
        logger.info("🤖 Setting up AI processing transforms...")

        transforms = {
            "ai_sentiment_analysis": await self._create_sentiment_analysis_transform(),
            "ai_message_classification": await self._create_message_classification_transform(),
            "ai_customer_intelligence": await self._create_customer_intelligence_transform(),
            "ai_compliance_monitoring": await self._create_compliance_monitoring_transform(),
        }

        # Deploy transforms
        for transform_name, config in transforms.items():
            await self._deploy_transform(transform_name, config)

        return transforms

    async def _create_sentiment_analysis_transform(self) -> Dict[str, Any]:
        """Create sentiment analysis transform for real-time processing"""
        return {
            "name": "ai_sentiment_analysis",
            "type": "typescript",
            "code": """
            import { Document } from 'flow/document';
            
            export function transform(doc: Document): Document[] {
                // Real-time sentiment analysis using Snowflake Cortex
                if (doc.transcript_text || doc.message_text) {
                    const text = doc.transcript_text || doc.message_text;
                    
                    // Add AI processing metadata
                    doc.ai_processing = {
                        sentiment_analysis_required: true,
                        processing_timestamp: new Date().toISOString(),
                        text_length: text.length
                    };
                    
                    // Extract key entities for further processing
                    doc.extracted_entities = extractEntities(text);
                    
                    // Flag for compliance review if needed
                    if (containsComplianceKeywords(text)) {
                        doc.compliance_review_required = true;
                    }
                }
                
                return [doc];
            }
            
            function extractEntities(text: string): string[] {
                // Simple entity extraction (in production, use advanced NLP)
                const entities = [];
                const patterns = {
                    phone: /\\b\\d{3}-\\d{3}-\\d{4}\\b/g,
                    email: /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g,
                    amount: /\\$[\\d,]+\\.?\\d*/g
                };
                
                for (const [type, pattern] of Object.entries(patterns)) {
                    const matches = text.match(pattern);
                    if (matches) {
                        entities.push(...matches.map(match => `${type}:${match}`));
                    }
                }
                
                return entities;
            }
            
            function containsComplianceKeywords(text: string): boolean {
                const keywords = ['lawsuit', 'attorney', 'legal action', 'harassment', 'dispute'];
                return keywords.some(keyword => text.toLowerCase().includes(keyword));
            }
            """,
        }

    async def _create_message_classification_transform(self) -> Dict[str, Any]:
        """Create message classification transform"""
        return {
            "name": "ai_message_classification",
            "type": "typescript",
            "code": """
            import { Document } from 'flow/document';
            
            export function transform(doc: Document): Document[] {
                if (doc.message_text) {
                    // Classify message type and urgency
                    doc.ai_classification = {
                        message_type: classifyMessageType(doc.message_text),
                        urgency_level: determineUrgency(doc.message_text),
                        requires_response: requiresResponse(doc.message_text),
                        processing_timestamp: new Date().toISOString()
                    };
                    
                    // Add channel context
                    if (doc.channel_id) {
                        doc.channel_context = getChannelContext(doc.channel_id);
                    }
                }
                
                return [doc];
            }
            
            function classifyMessageType(text: string): string {
                if (text.includes('?')) return 'question';
                if (text.includes('update') || text.includes('status')) return 'update';
                if (text.includes('issue') || text.includes('problem')) return 'concern';
                if (text.includes('great') || text.includes('excellent')) return 'celebration';
                return 'general';
            }
            
            function determineUrgency(text: string): string {
                const urgentKeywords = ['urgent', 'asap', 'emergency', 'critical'];
                const highKeywords = ['important', 'priority', 'deadline'];
                
                if (urgentKeywords.some(keyword => text.toLowerCase().includes(keyword))) {
                    return 'urgent';
                }
                if (highKeywords.some(keyword => text.toLowerCase().includes(keyword))) {
                    return 'high';
                }
                return 'normal';
            }
            
            function requiresResponse(text: string): boolean {
                return text.includes('?') || text.includes('please') || text.includes('need');
            }
            
            function getChannelContext(channelId: string): object {
                // Map channel IDs to business context
                const channelMap = {
                    'sales': { department: 'sales', priority: 'high' },
                    'customer-success': { department: 'customer_success', priority: 'high' },
                    'collections': { department: 'collections', priority: 'critical' },
                    'general': { department: 'general', priority: 'normal' }
                };
                
                return channelMap[channelId] || { department: 'unknown', priority: 'normal' };
            }
            """,
        }

    async def _create_customer_intelligence_transform(self) -> Dict[str, Any]:
        """Create customer intelligence transform"""
        return {
            "name": "ai_customer_intelligence",
            "type": "typescript",
            "code": """
            import { Document } from 'flow/document';
            
            export function transform(doc: Document): Document[] {
                if (doc.properties) {
                    // Enhance customer data with AI insights
                    doc.ai_insights = {
                        customer_tier: determineCustomerTier(doc.properties),
                        engagement_score: calculateEngagementScore(doc.properties),
                        churn_risk_factors: identifyChurnRiskFactors(doc.properties),
                        next_best_actions: suggestNextActions(doc.properties),
                        processing_timestamp: new Date().toISOString()
                    };
                    
                    // Add predictive scores
                    doc.predictive_scores = {
                        churn_probability: calculateChurnProbability(doc.properties),
                        lifetime_value: estimateLifetimeValue(doc.properties),
                        conversion_likelihood: assessConversionLikelihood(doc.properties)
                    };
                }
                
                return [doc];
            }
            
            function determineCustomerTier(properties: any): string {
                const dealValue = parseFloat(properties.deal_value || '0');
                if (dealValue > 100000) return 'enterprise';
                if (dealValue > 50000) return 'premium';
                if (dealValue > 10000) return 'standard';
                return 'basic';
            }
            
            function calculateEngagementScore(properties: any): number {
                let score = 0;
                if (properties.last_activity_date) {
                    const daysSinceActivity = Math.floor((Date.now() - new Date(properties.last_activity_date).getTime()) / (1000 * 60 * 60 * 24));
                    score += Math.max(0, 100 - daysSinceActivity * 2);
                }
                if (properties.email_opens) score += Math.min(50, properties.email_opens * 5);
                if (properties.website_visits) score += Math.min(30, properties.website_visits * 3);
                return Math.min(100, score);
            }
            
            function identifyChurnRiskFactors(properties: any): string[] {
                const riskFactors = [];
                if (properties.last_activity_date) {
                    const daysSinceActivity = Math.floor((Date.now() - new Date(properties.last_activity_date).getTime()) / (1000 * 60 * 60 * 24));
                    if (daysSinceActivity > 30) riskFactors.push('low_engagement');
                }
                if (properties.support_tickets > 5) riskFactors.push('high_support_volume');
                if (properties.payment_delays > 2) riskFactors.push('payment_issues');
                return riskFactors;
            }
            
            function suggestNextActions(properties: any): string[] {
                const actions = [];
                const engagementScore = calculateEngagementScore(properties);
                
                if (engagementScore < 30) {
                    actions.push('schedule_check_in_call');
                    actions.push('send_value_proposition_email');
                }
                if (properties.deal_stage === 'proposal') {
                    actions.push('follow_up_on_proposal');
                }
                if (properties.contract_renewal_date) {
                    const daysToRenewal = Math.floor((new Date(properties.contract_renewal_date).getTime() - Date.now()) / (1000 * 60 * 60 * 24));
                    if (daysToRenewal < 60) {
                        actions.push('initiate_renewal_discussion');
                    }
                }
                
                return actions;
            }
            
            function calculateChurnProbability(properties: any): number {
                const riskFactors = identifyChurnRiskFactors(properties);
                const baseRisk = 0.1; // 10% base churn rate
                const riskMultiplier = 1 + (riskFactors.length * 0.3);
                return Math.min(0.9, baseRisk * riskMultiplier);
            }
            
            function estimateLifetimeValue(properties: any): number {
                const monthlyValue = parseFloat(properties.monthly_recurring_revenue || '0');
                const churnProb = calculateChurnProbability(properties);
                const expectedLifetime = 1 / (churnProb / 12); // months
                return monthlyValue * expectedLifetime;
            }
            
            function assessConversionLikelihood(properties: any): number {
                let score = 0.5; // Base 50%
                
                if (properties.demo_completed) score += 0.2;
                if (properties.proposal_sent) score += 0.15;
                if (properties.decision_maker_engaged) score += 0.1;
                if (properties.budget_confirmed) score += 0.1;
                
                return Math.min(0.95, score);
            }
            """,
        }

    async def _create_compliance_monitoring_transform(self) -> Dict[str, Any]:
        """Create compliance monitoring transform"""
        return {
            "name": "ai_compliance_monitoring",
            "type": "typescript",
            "code": """
            import { Document } from 'flow/document';
            
            export function transform(doc: Document): Document[] {
                if (doc.message_text || doc.transcript_text) {
                    const text = doc.message_text || doc.transcript_text;
                    
                    // Perform compliance analysis
                    doc.compliance_analysis = {
                        fdcpa_compliance: checkFDCPACompliance(text),
                        privacy_compliance: checkPrivacyCompliance(text),
                        professional_tone: assessProfessionalTone(text),
                        risk_level: determineRiskLevel(text),
                        flagged_phrases: identifyFlaggedPhrases(text),
                        processing_timestamp: new Date().toISOString()
                    };
                    
                    // Generate compliance score
                    doc.compliance_score = calculateComplianceScore(doc.compliance_analysis);
                    
                    // Flag for review if needed
                    if (doc.compliance_score < 0.7) {
                        doc.requires_compliance_review = true;
                        doc.review_priority = doc.compliance_score < 0.5 ? 'high' : 'medium';
                    }
                }
                
                return [doc];
            }
            
            function checkFDCPACompliance(text: string): object {
                const violations = [];
                const warnings = [];
                
                // Check for prohibited language
                const prohibitedPhrases = [
                    'pay or else',
                    'legal action will be taken',
                    'arrest warrant',
                    'garnish wages immediately'
                ];
                
                prohibitedPhrases.forEach(phrase => {
                    if (text.toLowerCase().includes(phrase)) {
                        violations.push(`Prohibited phrase: "${phrase}"`);
                    }
                });
                
                // Check for required disclosures
                if (text.includes('debt') && !text.includes('validation')) {
                    warnings.push('Missing debt validation notice');
                }
                
                return {
                    violations,
                    warnings,
                    compliant: violations.length === 0
                };
            }
            
            function checkPrivacyCompliance(text: string): object {
                const issues = [];
                
                // Check for PII exposure
                const piiPatterns = {
                    ssn: /\\b\\d{3}-\\d{2}-\\d{4}\\b/g,
                    creditCard: /\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b/g,
                    bankAccount: /\\b\\d{8,17}\\b/g
                };
                
                for (const [type, pattern] of Object.entries(piiPatterns)) {
                    if (pattern.test(text)) {
                        issues.push(`Potential ${type} exposure`);
                    }
                }
                
                return {
                    issues,
                    compliant: issues.length === 0
                };
            }
            
            function assessProfessionalTone(text: string): object {
                const unprofessionalIndicators = [
                    'stupid', 'idiot', 'ridiculous', 'pathetic',
                    'URGENT!!!', 'PAY NOW!!!', 'FINAL NOTICE!!!'
                ];
                
                const issues = unprofessionalIndicators.filter(indicator => 
                    text.toLowerCase().includes(indicator.toLowerCase())
                );
                
                return {
                    professional: issues.length === 0,
                    issues: issues.map(issue => `Unprofessional language: "${issue}"`)
                };
            }
            
            function determineRiskLevel(text: string): string {
                const highRiskKeywords = ['lawsuit', 'court', 'attorney', 'legal action'];
                const mediumRiskKeywords = ['final notice', 'immediate action', 'consequences'];
                
                if (highRiskKeywords.some(keyword => text.toLowerCase().includes(keyword))) {
                    return 'high';
                }
                if (mediumRiskKeywords.some(keyword => text.toLowerCase().includes(keyword))) {
                    return 'medium';
                }
                return 'low';
            }
            
            function identifyFlaggedPhrases(text: string): string[] {
                const flaggedPhrases = [
                    'pay immediately or face consequences',
                    'we will take legal action',
                    'your credit will be ruined',
                    'we know where you work',
                    'we will contact your employer'
                ];
                
                return flaggedPhrases.filter(phrase => 
                    text.toLowerCase().includes(phrase.toLowerCase())
                );
            }
            
            function calculateComplianceScore(analysis: any): number {
                let score = 1.0;
                
                // Deduct for FDCPA violations
                if (analysis.fdcpa_compliance.violations.length > 0) {
                    score -= 0.4;
                }
                if (analysis.fdcpa_compliance.warnings.length > 0) {
                    score -= 0.1 * analysis.fdcpa_compliance.warnings.length;
                }
                
                // Deduct for privacy issues
                if (analysis.privacy_compliance.issues.length > 0) {
                    score -= 0.2 * analysis.privacy_compliance.issues.length;
                }
                
                // Deduct for unprofessional tone
                if (!analysis.professional_tone.professional) {
                    score -= 0.15;
                }
                
                // Deduct for high risk content
                if (analysis.risk_level === 'high') {
                    score -= 0.2;
                } else if (analysis.risk_level === 'medium') {
                    score -= 0.1;
                }
                
                return Math.max(0, score);
            }
            """,
        }

    async def monitor_flow_performance(self) -> Dict[str, Any]:
        """Monitor Estuary Flow performance with AI-powered insights"""
        logger.info("📊 Monitoring Estuary Flow performance...")

        try:
            # Get flow statistics
            stats = await self.get_flow_statistics()

            # Analyze performance (simplified without circular import)
            performance_analysis = {
                "overall_health": "healthy",
                "latency_metrics": stats.get("latency", {}),
                "throughput_metrics": stats.get("throughput", {}),
                "error_rates": stats.get("errors", {}),
                "recommendations": [],
                "alerts": [],
            }

            # Check for performance issues
            if stats.get("avg_latency", 0) > 5000:  # 5 seconds
                performance_analysis["alerts"].append(
                    {
                        "severity": "high",
                        "message": "High latency detected",
                        "recommendation": "Consider scaling warehouse or optimizing queries",
                    }
                )

            if stats.get("error_rate", 0) > 0.05:  # 5% error rate
                performance_analysis["alerts"].append(
                    {
                        "severity": "critical",
                        "message": "High error rate detected",
                        "recommendation": "Investigate connector configurations and data quality",
                    }
                )

            return performance_analysis

        except Exception as e:
            logger.error(f"Error monitoring flow performance: {e}")
            return {"error": str(e)}

    async def optimize_flow_configuration(self) -> Dict[str, Any]:
        """AI-powered flow configuration optimization"""
        logger.info("🎯 Optimizing flow configuration with AI...")

        try:
            # Analyze current performance
            performance = await self.monitor_flow_performance()

            optimizations = {
                "warehouse_scaling": [],
                "connector_tuning": [],
                "schema_optimizations": [],
                "cost_optimizations": [],
            }

            # Generate optimization recommendations
            if performance.get("avg_latency", 0) > 2000:
                optimizations["warehouse_scaling"].append(
                    {
                        "action": "scale_up_warehouse",
                        "target": "AI_COMPUTE_WH",
                        "recommendation": "Increase to LARGE for better performance",
                    }
                )

            if performance.get("throughput", 0) < 1000:
                optimizations["connector_tuning"].append(
                    {
                        "action": "increase_batch_size",
                        "recommendation": "Increase batch size for better throughput",
                    }
                )

            return optimizations

        except Exception as e:
            logger.error(f"Error optimizing flow configuration: {e}")
            return {"error": str(e)}


# Service instance
advanced_estuary_manager = None


async def get_advanced_estuary_flow_manager() -> AdvancedEstuaryFlowManager:
    """Get advanced Estuary Flow manager instance"""
    global advanced_estuary_manager
    if advanced_estuary_manager is None:
        advanced_estuary_manager = AdvancedEstuaryFlowManager()
    return advanced_estuary_manager
