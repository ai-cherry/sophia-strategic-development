"""
Centralized Settings Configuration
Uses Pydantic for validation and environment variable loading
"""

from backend.services.unified_memory_service_v3 import UnifiedMemoryServiceV3
from functools import lru_cache
from typing import Any

from pydantic import Field, validator
from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    """
    Application settings with validation and type safety
    Loads from environment variables and .env file
    """

    # Application
    app_name: str = "Sophia AI"
    app_version: str = "2.3.0"
    environment: str = Field(default="production", env="ENVIRONMENT")
    debug: bool = Field(default=False, env="DEBUG")

    # API Configuration
    api_prefix: str = "/api/v3"
    cors_origins: list[str] = Field(
        default=["http://localhost:3000", "https://app.sophia-intel.ai"],
        env="CORS_ORIGINS",
    )

    # Infrastructure
    lambda_api_key: str = Field(..., env="LAMBDA_API_KEY")
    lambda_ssh_private_key: str | None = Field(None, env="LAMBDA_SSH_PRIVATE_KEY")

    # AI/ML Providers
    openai_api_key: str = Field(..., env="OPENAI_API_KEY")
    anthropic_api_key: str = Field(..., env="ANTHROPIC_API_KEY")
    openrouter_api_key: str | None = Field(None, env="OPENROUTER_API_KEY")
    portkey_api_key: str | None = Field(None, env="PORTKEY_API_KEY")

    # modern_stack
    # REMOVED: modern_stack dependency"modern_stack_ACCOUNT")
    # REMOVED: modern_stack dependency"modern_stack_USER")
    # REMOVED: modern_stack dependency"modern_stack_PASSWORD")
    # REMOVED: modern_stack dependency"modern_stack_WAREHOUSE")
    # REMOVED: modern_stack dependency"modern_stack_DATABASE")
    # REMOVED: modern_stack dependency"modern_stack_SCHEMA")
    # REMOVED: modern_stack dependency"modern_stack_ROLE")

    # Vector Databases
    pinecone_api_key: str | None = Field(None, env="PINECONE_API_KEY")
    weaviate_api_key: str | None = Field(None, env="WEAVIATE_API_KEY")
    weaviate_url: str | None = Field(None, env="WEAVIATE_URL")

    # Traditional Databases
    postgres_user: str = Field(default="sophia", env="POSTGRES_USER")
    postgres_password: str = Field(..., env="POSTGRES_PASSWORD")
    postgres_db: str = Field(default="sophia_ai", env="POSTGRES_DB")
    postgres_host: str = Field(default="localhost", env="POSTGRES_HOST")
    postgres_port: int = Field(default=5432, env="POSTGRES_PORT")

    redis_password: str | None = Field(None, env="REDIS_PASSWORD")
    redis_host: str = Field(default="localhost", env="REDIS_HOST")
    redis_port: int = Field(default=6379, env="REDIS_PORT")

    # Business Intelligence
    gong_access_key: str | None = Field(None, env="GONG_ACCESS_KEY")
    gong_access_key_secret: str | None = Field(None, env="GONG_ACCESS_KEY_SECRET")
    hubspot_api_key: str | None = Field(None, env="HUBSPOT_API_KEY")

    # Communication
    slack_webhook: str | None = Field(None, env="SLACK_WEBHOOK")
    slack_bot_token: str | None = Field(None, env="SLACK_BOT_TOKEN")
    linear_api_key: str | None = Field(None, env="LINEAR_API_KEY")
    asana_api_token: str | None = Field(None, env="ASANA_API_TOKEN")
    notion_api_key: str | None = Field(None, env="NOTION_API_KEY")

    # Development Tools
    github_token: str | None = Field(None, env="GITHUB_TOKEN")
    figma_pat: str | None = Field(None, env="FIGMA_PAT")
    figma_project_id: str | None = Field(None, env="FIGMA_PROJECT_ID")

    # Deployment
    vercel_token: str | None = Field(None, env="VERCEL_TOKEN")
    vercel_org_id: str | None = Field(None, env="VERCEL_ORG_ID")
    vercel_project_id: str | None = Field(None, env="VERCEL_PROJECT_ID")

    docker_hub_username: str | None = Field(None, env="DOCKERHUB_USERNAME")
    docker_hub_access_token: str | None = Field(None, env="DOCKER_TOKEN")

    # Monitoring
    grafana_api_key: str | None = Field(None, env="GRAFANA_API_KEY")
    grafana_url: str | None = Field(None, env="GRAFANA_URL")

    # Pulumi
    pulumi_access_token: str | None = Field(None, env="PULUMI_ACCESS_TOKEN")
    pulumi_org: str = Field(default="ai-cherry", env="PULUMI_ORG")
    pulumi_project: str = Field(default="lambda-labs-production", env="PULUMI_PROJECT")

    # Lambda Labs - using API key only
    lambda_labs_api_key: str | None = Field(None, env="LAMBDA_LABS_API_KEY")

    # Model configuration
    model_config = SettingsConfigDict(
        env_file=".env", env_file_encoding="utf-8", case_sensitive=False, extra="ignore"
    )

    @validator("environment")
    def validate_environment(self, v):
        """Ensure environment is valid"""
        allowed = ["development", "staging", "production"]
        if v not in allowed:
            raise ValueError(f"Environment must be one of {allowed}")
        return v

    @validator("postgres_port", "redis_port")
    def validate_port(self, v):
        """Ensure port is in valid range"""
        if not 1 <= v <= 65535:
            raise ValueError("Port must be between 1 and 65535")
        return v

    @property
    def database_url(self) -> str:
        """Construct PostgreSQL database URL"""
        return (
            f"postgresql+asyncpg://{self.postgres_user}:{self.postgres_password}"
            f"@{self.postgres_host}:{self.postgres_port}/{self.postgres_db}"
        )

    @property
    def redis_url(self) -> str:
        """Construct Redis URL"""
        if self.redis_password:
            return f"redis://:{self.redis_password}@{self.redis_host}:{self.redis_port}"
        return f"redis://{self.redis_host}:{self.redis_port}"

    @property
    def is_production(self) -> bool:
        """Check if running in production"""
        return self.environment == "production"

    @property
    def is_development(self) -> bool:
        """Check if running in development"""
        return self.environment == "development"

    def get_secret(self, key: str, default: str | None = None) -> str | None:
        """Get a secret value with fallback"""
        return getattr(self, key, default)

    def mask_secrets(self) -> dict[str, Any]:
        """Return settings with masked secret values"""
        data = self.model_dump()
        secret_keys = ["password", "key", "token", "secret", "pat", "webhook"]

        for key, value in data.items():
            if value and any(secret in key.lower() for secret in secret_keys):
                if isinstance(value, str) and len(value) > 4:
                    data[key] = f"{value[:4]}...{value[-4:]}"
                else:
                    data[key] = "***"

        return data


@lru_cache
def get_settings() -> Settings:
    """
    Get cached settings instance
    Use this function to access settings throughout the application
    """
    return Settings()


# Create a singleton instance
settings = get_settings()


# Export commonly used settings
__all__ = ["Settings", "get_settings", "settings"]
