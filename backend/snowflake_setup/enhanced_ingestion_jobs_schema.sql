-- ===============================================================================
-- ENHANCED INGESTION JOBS SCHEMA
-- Critical missing table for async large file processing
-- ===============================================================================

USE DATABASE SOPHIA_AI_PROD;
USE SCHEMA UNIVERSAL_CHAT;

-- Ingestion Jobs Table for Async File Processing
CREATE TABLE IF NOT EXISTS INGESTION_JOBS (
    JOB_ID VARCHAR(50) PRIMARY KEY,
    USER_ID VARCHAR(100) NOT NULL,
    FILENAME VARCHAR(500) NOT NULL,
    FILE_TYPE VARCHAR(100) NOT NULL,
    FILE_SIZE_BYTES INTEGER NOT NULL,
    ORIGINAL_PATH VARCHAR(1000),
    
    -- Processing Status
    STATUS VARCHAR(50) NOT NULL DEFAULT 'pending',
    PROGRESS_PERCENTAGE FLOAT DEFAULT 0.0,
    CHUNKS_PROCESSED INTEGER DEFAULT 0,
    TOTAL_CHUNKS INTEGER DEFAULT 0,
    
    -- Processing Details
    CHUNK_SIZE INTEGER DEFAULT 4000,
    CHUNK_OVERLAP INTEGER DEFAULT 200,
    
    -- Results
    KNOWLEDGE_ENTRY_IDS ARRAY,
    FINAL_CATEGORY_ID VARCHAR(50),
    FINAL_IMPORTANCE_SCORE FLOAT,
    
    -- Timing
    STARTED_AT TIMESTAMP_NTZ,
    COMPLETED_AT TIMESTAMP_NTZ,
    ESTIMATED_COMPLETION_AT TIMESTAMP_NTZ,
    
    -- Error Handling
    ERROR_MESSAGE TEXT,
    ERROR_COUNT INTEGER DEFAULT 0,
    
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Search Analytics Table
CREATE TABLE IF NOT EXISTS SEARCH_ANALYTICS (
    SEARCH_ID VARCHAR(50) PRIMARY KEY,
    USER_ID VARCHAR(100) NOT NULL,
    QUERY_TEXT TEXT NOT NULL,
    SEARCH_TYPE VARCHAR(50) DEFAULT 'hybrid',
    RESULTS_COUNT INTEGER,
    RESPONSE_TIME_MS INTEGER,
    RELEVANCE_SCORES ARRAY,
    CLICKED_RESULTS ARRAY,
    CACHE_HIT BOOLEAN DEFAULT FALSE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Real-Time Streams Table for Event Processing
CREATE TABLE IF NOT EXISTS REAL_TIME_STREAMS (
    STREAM_ID VARCHAR(50) PRIMARY KEY,
    STREAM_TYPE VARCHAR(100) NOT NULL,  -- 'knowledge_update', 'user_activity', 'system_metric'
    SOURCE_TABLE VARCHAR(200) NOT NULL,
    SOURCE_SCHEMA VARCHAR(100) NOT NULL,
    
    -- Stream Configuration
    STREAM_DEFINITION TEXT,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    PROCESSING_MODE VARCHAR(50) DEFAULT 'append_only',  -- 'append_only', 'delta', 'full_refresh'
    
    -- Processing Status
    LAST_PROCESSED_AT TIMESTAMP_NTZ,
    RECORDS_PROCESSED INTEGER DEFAULT 0,
    PROCESSING_LAG_SECONDS INTEGER,
    
    -- Performance Metrics
    AVERAGE_PROCESSING_TIME_MS FLOAT,
    ERROR_COUNT INTEGER DEFAULT 0,
    SUCCESS_RATE FLOAT DEFAULT 100.0,
    
    -- Configuration
    BATCH_SIZE INTEGER DEFAULT 100,
    PROCESSING_INTERVAL_SECONDS INTEGER DEFAULT 30,
    
    -- Metadata
    METADATA VARIANT,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Hierarchical Cache Management Table
CREATE TABLE IF NOT EXISTS CACHE_MANAGEMENT (
    CACHE_ID VARCHAR(50) PRIMARY KEY,
    CACHE_KEY VARCHAR(500) NOT NULL,
    CACHE_TIER VARCHAR(50) NOT NULL,  -- 'hot', 'warm', 'cold'
    
    -- Cache Content
    CACHE_TYPE VARCHAR(100) NOT NULL,  -- 'query_result', 'embedding', 'analytics', 'user_session'
    CACHE_DATA VARIANT,
    CACHE_SIZE_BYTES INTEGER,
    
    -- Cache Lifecycle
    TTL_SECONDS INTEGER DEFAULT 3600,
    EXPIRES_AT TIMESTAMP_NTZ,
    ACCESS_COUNT INTEGER DEFAULT 0,
    LAST_ACCESSED_AT TIMESTAMP_NTZ,
    
    -- Performance Tracking
    HIT_COUNT INTEGER DEFAULT 0,
    MISS_COUNT INTEGER DEFAULT 0,
    HIT_RATIO FLOAT DEFAULT 0.0,
    AVERAGE_RESPONSE_TIME_MS FLOAT,
    
    -- Cache Strategy
    EVICTION_POLICY VARCHAR(50) DEFAULT 'LRU',  -- 'LRU', 'LFU', 'TTL', 'FIFO'
    COMPRESSION_USED BOOLEAN DEFAULT FALSE,
    
    -- Metadata
    SOURCE_QUERY_HASH VARCHAR(100),
    DEPENDENCY_TABLES ARRAY,
    INVALIDATION_TRIGGERS ARRAY,
    
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Unified Intelligence Security Table
CREATE TABLE IF NOT EXISTS Unified_INTELLIGENCE_ACCESS_LOG (
    ACCESS_ID VARCHAR(50) PRIMARY KEY,
    USER_ID VARCHAR(100) NOT NULL,
    ACCESSED_TABLE VARCHAR(200) NOT NULL,
    
    -- Access Details
    ACCESS_TYPE VARCHAR(50) NOT NULL,  -- 'read', 'write', 'delete', 'export'
    QUERY_EXECUTED TEXT,
    RECORDS_ACCESSED INTEGER,
    SENSITIVE_DATA_ACCESSED BOOLEAN DEFAULT FALSE,
    
    -- Security Context
    ACCESS_LEVEL VARCHAR(50) NOT NULL,  -- 'Unified_ONLY', 'EXECUTIVE', 'RESTRICTED'
    AUTHENTICATION_METHOD VARCHAR(100),
    IP_ADDRESS VARCHAR(50),
    USER_AGENT TEXT,
    
    -- Business Context
    ACCESS_REASON TEXT,
    BUSINESS_JUSTIFICATION TEXT,
    APPROVAL_REQUIRED BOOLEAN DEFAULT TRUE,
    APPROVED_BY VARCHAR(100),
    
    -- Audit Trail
    SESSION_ID VARCHAR(50),
    REQUEST_ID VARCHAR(50),
    CORRELATION_ID VARCHAR(50),
    
    -- Security Metrics
    RISK_SCORE FLOAT DEFAULT 0.0,
    ANOMALY_DETECTED BOOLEAN DEFAULT FALSE,
    SECURITY_ALERTS ARRAY,
    
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    METADATA VARIANT
);

-- Performance Indexes
-- Snowflake does not support traditional indexes; consider search optimization or clustering.
-- CREATE INDEX IF NOT EXISTS idx_ingestion_jobs_status ON INGESTION_JOBS(STATUS);
-- -- Snowflake does not support traditional indexes; consider search optimization or clustering.
-- CREATE INDEX IF NOT EXISTS idx_ingestion_jobs_user ON INGESTION_JOBS(USER_ID);
-- -- Snowflake does not support traditional indexes; consider search optimization or clustering.
-- CREATE INDEX IF NOT EXISTS idx_search_analytics_user ON SEARCH_ANALYTICS(USER_ID);
-- -- Snowflake does not support traditional indexes; consider search optimization or clustering.
-- CREATE INDEX IF NOT EXISTS idx_search_analytics_created ON SEARCH_ANALYTICS(CREATED_AT);
-- 
-- Performance Views
CREATE OR REPLACE VIEW INGESTION_PERFORMANCE_SUMMARY AS
SELECT 
    DATE(CREATED_AT) as PROCESSING_DATE,
    COUNT(*) as TOTAL_JOBS,
    COUNT(CASE WHEN STATUS = 'completed' THEN 1 END) as COMPLETED_JOBS,
    COUNT(CASE WHEN STATUS = 'failed' THEN 1 END) as FAILED_JOBS,
    AVG(PROCESSING_TIME_MS) as AVG_PROCESSING_TIME,
    AVG(CHUNKS_PROCESSED) as AVG_CHUNKS_PROCESSED,
    SUM(FILE_SIZE_BYTES) as TOTAL_BYTES_PROCESSED
FROM INGESTION_JOBS
WHERE CREATED_AT >= DATEADD(day, -30, CURRENT_TIMESTAMP())
GROUP BY DATE(CREATED_AT)
ORDER BY PROCESSING_DATE DESC;

CREATE OR REPLACE VIEW SEARCH_PERFORMANCE_SUMMARY AS
SELECT 
    DATE(CREATED_AT) as SEARCH_DATE,
    COUNT(*) as TOTAL_SEARCHES,
    AVG(RESPONSE_TIME_MS) as AVG_RESPONSE_TIME,
    AVG(RESULTS_COUNT) as AVG_RESULTS_COUNT,
    AVG(AVERAGE_RELEVANCE_SCORE) as AVG_RELEVANCE_SCORE,
    COUNT(CASE WHEN CACHE_HIT = TRUE THEN 1 END) as CACHE_HITS,
    COUNT(CASE WHEN CACHE_HIT = TRUE THEN 1 END) * 100.0 / COUNT(*) as CACHE_HIT_RATE
FROM SEARCH_ANALYTICS
WHERE CREATED_AT >= DATEADD(day, -30, CURRENT_TIMESTAMP())
GROUP BY DATE(CREATED_AT)
ORDER BY SEARCH_DATE DESC;

CREATE OR REPLACE VIEW CACHE_EFFICIENCY_SUMMARY AS
SELECT 
    CACHE_TIER,
    COUNT(*) as TOTAL_ENTRIES,
    SUM(ACCESS_COUNT) as TOTAL_ACCESSES,
    AVG(HIT_RATIO) as AVG_HIT_RATIO,
    AVG(AVERAGE_RESPONSE_TIME_MS) as AVG_RESPONSE_TIME,
    SUM(CACHE_SIZE_BYTES) as TOTAL_CACHE_SIZE
FROM CACHE_MANAGEMENT
WHERE EXPIRES_AT > CURRENT_TIMESTAMP()
GROUP BY CACHE_TIER
ORDER BY CACHE_TIER;

-- Sample Data for Testing
INSERT INTO INGESTION_JOBS (
    JOB_ID, USER_ID, FILENAME, FILE_TYPE, FILE_SIZE_BYTES, STATUS,
    AUTO_DETECTED_CATEGORY, ESTIMATED_IMPORTANCE_SCORE, METADATA
) VALUES (
    'job_sample_001', 'ceo_user', 'sample_customer_data.csv', 'text/csv', 156000, 'completed',
    'customers', 2.0, '{"processing_note": "Sample data for testing"}'
);

SELECT 'Enhanced Ingestion and Performance Schema Creation Complete!' as STATUS,
       CURRENT_DATABASE() as DATABASE_NAME,
       CURRENT_SCHEMA() as SCHEMA_NAME,
       CURRENT_TIMESTAMP() as COMPLETION_TIME; 