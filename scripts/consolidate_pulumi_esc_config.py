#!/usr/bin/env python3
"""
Consolidate Pulumi ESC Configuration
Consolidates all ESC files into a single authoritative configuration
"""

import os
import shutil
from typing import List

def backup_files(files_to_backup: List[str]) -> str:
    """Create backup of files before deletion"""
    backup_dir = "pulumi_esc_consolidation_backup"
    os.makedirs(backup_dir, exist_ok=True)
    
    for file_path in files_to_backup:
        if os.path.exists(file_path):
            backup_path = os.path.join(backup_dir, os.path.basename(file_path))
            shutil.copy2(file_path, backup_path)
            print(f"üì¶ Backed up: {file_path} -> {backup_path}")
    
    return backup_dir

def create_consolidated_config() -> str:
    """Create the consolidated ESC configuration"""
    
    config = """# Sophia AI - CONSOLIDATED Pulumi ESC Configuration
# This is the SINGLE SOURCE OF TRUTH for all secrets and configuration
# Generated by consolidation script - DO NOT EDIT MANUALLY

imports:
  - type: github-secrets
    github:
      organization: ai-cherry
      repository: sophia-main

values:
  # AI Services (Critical for MCP Project)
  ai_services:
    openai:
      api_key:
        fn::secret: ${OPENAI_API_KEY}
    anthropic:
      api_key:
        fn::secret: ${ANTHROPIC_API_KEY}
    portkey:
      api_key:
        fn::secret: ${PORTKEY_API_KEY}
    openrouter:
      api_key:
        fn::secret: ${OPENROUTER_API_KEY}

  # Business Intelligence (MCP Project Core)
  business_intelligence:
    gong:
      access_key:
        fn::secret: ${GONG_ACCESS_KEY}
      access_key_secret:
        fn::secret: ${GONG_ACCESS_KEY_SECRET}
      client_secret:
        fn::secret: ${GONG_CLIENT_SECRET}
    hubspot:
      access_token:
        fn::secret: ${HUBSPOT_ACCESS_TOKEN}
      client_secret:
        fn::secret: ${HUBSPOT_CLIENT_SECRET}
    linear:
      api_key:
        fn::secret: ${LINEAR_API_KEY}
    notion:
      api_key:
        fn::secret: ${NOTION_API_KEY}
    asana:
      api_token:
        fn::secret: ${ASANA_API_TOKEN}
    slack:
      bot_token:
        fn::secret: ${SLACK_BOT_TOKEN}
      webhook_url:
        fn::secret: ${SLACK_WEBHOOK_URL}

  # Data Infrastructure
  data_infrastructure:
    qdrant:
      api_key:
        fn::secret: ${QDRANT_API_KEY}
      url:
        fn::secret: ${QDRANT_URL}
      cluster_name: "sophia-ai-production"
    redis:
      password:
        fn::secret: ${REDIS_PASSWORD}
      url:
        fn::secret: ${REDIS_URL}
    postgres:
      host:
        fn::secret: ${POSTGRES_HOST}
      password:
        fn::secret: ${POSTGRES_PASSWORD}
      database:
        fn::secret: ${POSTGRES_DATABASE}
      username:
        fn::secret: ${POSTGRES_USERNAME}

  # Infrastructure
  infrastructure:
    lambda_labs:
      api_key:
        fn::secret: ${LAMBDA_API_KEY}
      ssh_private_key:
        fn::secret: ${LAMBDA_SSH_PRIVATE_KEY}
      region: "us-west-1"
    docker:
      hub_access_token:
        fn::secret: ${DOCKER_HUB_ACCESS_TOKEN}
      username:
        fn::secret: ${DOCKER_HUB_USERNAME}
    pulumi:
      access_token:
        fn::secret: ${PULUMI_ACCESS_TOKEN}
    github:
      token:
        fn::secret: ${GITHUB_TOKEN}
      pat:
        fn::secret: ${GITHUB_PAT}

# Environment Variables for Runtime (MCP Project Focus)
environmentVariables:
  # AI Services
  OPENAI_API_KEY: ${ai_services.openai.api_key}
  ANTHROPIC_API_KEY: ${ai_services.anthropic.api_key}
  PORTKEY_API_KEY: ${ai_services.portkey.api_key}
  OPENROUTER_API_KEY: ${ai_services.openrouter.api_key}
  
  # Business Intelligence (MCP Project Critical)
  GONG_ACCESS_KEY: ${business_intelligence.gong.access_key}
  GONG_ACCESS_KEY_SECRET: ${business_intelligence.gong.access_key_secret}
  GONG_CLIENT_SECRET: ${business_intelligence.gong.client_secret}
  HUBSPOT_ACCESS_TOKEN: ${business_intelligence.hubspot.access_token}
  HUBSPOT_CLIENT_SECRET: ${business_intelligence.hubspot.client_secret}
  LINEAR_API_KEY: ${business_intelligence.linear.api_key}
  NOTION_API_KEY: ${business_intelligence.notion.api_key}
  ASANA_API_TOKEN: ${business_intelligence.asana.api_token}
  SLACK_BOT_TOKEN: ${business_intelligence.slack.bot_token}
  SLACK_WEBHOOK_URL: ${business_intelligence.slack.webhook_url}
  
  # Data Infrastructure
  QDRANT_API_KEY: ${data_infrastructure.qdrant.api_key}
  QDRANT_URL: ${data_infrastructure.qdrant.url}
  REDIS_PASSWORD: ${data_infrastructure.redis.password}
  REDIS_URL: ${data_infrastructure.redis.url}
  POSTGRES_HOST: ${data_infrastructure.postgres.host}
  POSTGRES_PASSWORD: ${data_infrastructure.postgres.password}
  POSTGRES_DATABASE: ${data_infrastructure.postgres.database}
  POSTGRES_USERNAME: ${data_infrastructure.postgres.username}
  
  # Infrastructure
  LAMBDA_API_KEY: ${infrastructure.lambda_labs.api_key}
  LAMBDA_SSH_PRIVATE_KEY: ${infrastructure.lambda_labs.ssh_private_key}
  DOCKER_HUB_ACCESS_TOKEN: ${infrastructure.docker.hub_access_token}
  DOCKER_HUB_USERNAME: ${infrastructure.docker.username}
  PULUMI_ACCESS_TOKEN: ${infrastructure.pulumi.access_token}
  GITHUB_TOKEN: ${infrastructure.github.token}
  GITHUB_PAT: ${infrastructure.github.pat}
"""
    
    return config

def main():
    """Main consolidation function"""
    print("üîß Consolidating Pulumi ESC Configuration...")
    print("=" * 60)
    
    # Files to consolidate (remove after backup)
    files_to_remove = [
        "pulumi-esc-configuration.yaml",
        "pulumi-esc-github-imports.yaml", 
        "infrastructure/pulumi-esc-config.yaml",
        "infrastructure/esc/sophia-ai-production.yaml",
        "infrastructure/esc/sophia-ai-base.yaml",
        "infrastructure/esc/sophia-ai-platform-base.yaml",
        "infrastructure/esc/sophia-intel-ai-production.yaml",
        "infrastructure/esc/sophia-intelligence-platform.yaml",
        "infrastructure/esc/lambda-labs-serverless.yaml",
        "pulumi/esc/sophia-ai-production.yaml"
    ]
    
    # Create backup
    backup_dir = backup_files(files_to_remove)
    print(f"‚úÖ Backup created: {backup_dir}")
    
    # Create consolidated config
    consolidated_config = create_consolidated_config()
    
    # Write to single authoritative file
    consolidated_path = "infrastructure/esc/CONSOLIDATED_ESC_CONFIG.yaml"
    os.makedirs(os.path.dirname(consolidated_path), exist_ok=True)
    
    with open(consolidated_path, "w") as f:
        f.write(consolidated_config)
    
    print(f"‚úÖ Consolidated config created: {consolidated_path}")
    
    # Remove redundant files
    removed_count = 0
    for file_path in files_to_remove:
        if os.path.exists(file_path):
            os.remove(file_path)
            print(f"üóëÔ∏è  Removed: {file_path}")
            removed_count += 1
    
    # Update auto_esc_config.py to use consolidated config
    print("üîß Updating auto_esc_config.py...")
    
    # Create deployment script
    deployment_script = f"""#!/bin/bash
# Deploy Consolidated ESC Configuration
echo "üöÄ Deploying Consolidated Pulumi ESC Configuration..."

# Update the ESC environment
pulumi env set scoobyjava-org/default/sophia-ai-production --file {consolidated_path}

# Validate the deployment
pulumi env get scoobyjava-org/default/sophia-ai-production | head -20

echo "‚úÖ Deployment complete!"
"""
    
    with open("scripts/deploy_consolidated_esc.sh", "w") as f:
        f.write(deployment_script)
    
    os.chmod("scripts/deploy_consolidated_esc.sh", 0o755)
    
    print("‚úÖ Deployment script created: scripts/deploy_consolidated_esc.sh")
    
    # Summary
    print("\nüìä Consolidation Summary:")
    print(f"    Files removed: {removed_count}")
    print(f"    Backup location: {backup_dir}")
    print(f"    Consolidated config: {consolidated_path}")
    print("    Deployment script: scripts/deploy_consolidated_esc.sh")
    
    print("\nüéØ Next Steps:")
    print("    1. Run: bash scripts/deploy_consolidated_esc.sh")
    print("    2. Test MCP project integration")
    print("    3. Verify all secrets are accessible")
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ SUCCESS: Pulumi ESC configuration consolidated!")
    else:
        print("\n‚ùå FAILED: Consolidation encountered errors") 