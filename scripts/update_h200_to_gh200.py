#!/usr/bin/env python3
"""
Update all H200 references to GH200 to match actual deployment
Generated by GH200 Deployment Validator
"""

import os
import re
import shutil
from pathlib import Path


def update_h200_to_gh200():
    """Update all H200 references to GH200"""

    # Files to rename
    renames = [
        ("Dockerfile.h200", "Dockerfile.gh200"),
        ("requirements-h200.txt", "requirements-gh200.txt"),
        (
            "infrastructure/pulumi/enhanced-h200-stack.ts",
            "infrastructure/pulumi/enhanced-gh200-stack.ts",
        ),
    ]

    # Perform renames
    for old_name, new_name in renames:
        if os.path.exists(old_name):
            shutil.move(old_name, new_name)
            print(f"‚úÖ Renamed {old_name} ‚Üí {new_name}")

    # Files to update content
    files_to_update = [
        "Dockerfile.gh200",
        "requirements-gh200.txt",
        "infrastructure/enhanced_lambda_labs_provisioner.py",
        "backend/core/enhanced_memory_architecture.py",
        "infrastructure/pulumi/enhanced-gh200-stack.ts",
        "infrastructure/ENHANCED_LAMBDA_LABS_SETUP_GUIDE.md",
        "ENHANCED_INFRASTRUCTURE_IMPLEMENTATION_REPORT.md",
        "docs/system_handbook/00_SOPHIA_AI_SYSTEM_HANDBOOK.md",
    ]

    # Replacement patterns
    replacements = [
        (r"H200", "GH200"),
        (r"h200", "gh200"),
        (r"141GB", "96GB"),
        (r"141\s*GB", "96 GB"),
        (r"gpu_1x_h200", "gpu_1x_gh200"),
        (r'active_models:\s*str\s*=\s*"60GB"', 'active_models: str = "40GB"'),
        (r'inference_cache:\s*str\s*=\s*"40GB"', 'inference_cache: str = "30GB"'),
        (r'vector_cache:\s*str\s*=\s*"30GB"', 'vector_cache: str = "20GB"'),
        (r'buffer:\s*str\s*=\s*"11GB"', 'buffer: str = "6GB"'),
    ]

    # Apply replacements
    for file_path in files_to_update:
        if os.path.exists(file_path):
            print(f"üìù Updating {file_path}...")

            with open(file_path) as f:
                content = f.read()

            original_content = content
            for pattern, replacement in replacements:
                content = re.sub(pattern, replacement, content)

            if content != original_content:
                with open(file_path, "w") as f:
                    f.write(content)
                print(f"‚úÖ Updated {file_path}")
            else:
                print(f"‚ÑπÔ∏è No changes needed in {file_path}")

    print("\n‚úÖ All H200 ‚Üí GH200 updates completed!")


if __name__ == "__main__":
    update_h200_to_gh200()
