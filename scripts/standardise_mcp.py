#!/usr/bin/env python3
"""
Standardise MCP Servers Script
- Reads config/unified_mcp_port_registry.json
- Updates all MCP server configs and Python files
- Adds missing __init__.py files
- Inserts /health endpoints if missing
- Generates a validation report
"""
import json
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)

MCP_ROOT = Path('mcp-servers')
PORT_REGISTRY = Path('config/unified_mcp_port_registry.json')
REPORT_PATH = Path('scripts/standardise_mcp_report.json')


def load_port_registry():
    with open(PORT_REGISTRY) as f:
        return json.load(f)

def ensure_init_py(directory):
    init_path = directory / '__init__.py'
    if not init_path.exists():
        init_path.write_text('# Auto-generated by standardise_mcp.py\n')
        logging.info(f'Added missing __init__.py: {init_path}')

def insert_health_endpoint(py_file):
    # Only add if not present
    with open(py_file) as f:
        content = f.read()
    if '/health' in content:
        return False
    # Insert a minimal FastAPI health endpoint at the end
    health_code = '\n\n# --- Auto-inserted health endpoint ---\n' \
        'try:\n' \
        '    from fastapi import APIRouter\n' \
        '    router = APIRouter()\n' \
        '    @router.get("/health")\n' \
        '    async def health():\n' \
        '        return {"status": "ok"}\n' \
        'except ImportError:\n' \
        '    pass\n'
    with open(py_file, 'a') as f:
        f.write(health_code)
    logging.info(f'Inserted /health endpoint in {py_file}')
    return True

def update_ports_and_health():
    registry = load_port_registry()
    port_map = {}
    for _category, servers in registry['port_allocation'].items():
        for name, port in servers.items():
            port_map[name] = port
    report = {"updated_ports": [], "added_inits": [], "added_health": []}
    for server_dir in MCP_ROOT.iterdir():
        if not server_dir.is_dir():
            continue
        ensure_init_py(server_dir)
        report["added_inits"].append(str(server_dir / '__init__.py'))
        # Find main server file (by convention)
        py_files = list(server_dir.glob("*_mcp_server.py"))
        for py_file in py_files:
            # Update port assignment if present
            with open(py_file) as f:
                lines = f.readlines()
            new_lines = []
            changed = False
            for line in lines:
                if 'port =' in line or 'PORT =' in line:
                    for name, port in port_map.items():
                        if name in py_file.name:
                            new_line = f"port = {port}\n"
                            if line != new_line:
                                new_lines.append(new_line)
                                changed = True
                                report["updated_ports"].append({"file": str(py_file), "port": port})
                                break
                    else:
                        new_lines.append(line)
                else:
                    new_lines.append(line)
            if changed:
                with open(py_file, 'w') as f:
                    f.writelines(new_lines)
            # Insert health endpoint if missing
            if insert_health_endpoint(py_file):
                report["added_health"].append(str(py_file))
    with open(REPORT_PATH, 'w') as f:
        json.dump(report, f, indent=2)
    logging.info(f"Standardisation complete. Report: {REPORT_PATH}")

if __name__ == "__main__":
    update_ports_and_health()
