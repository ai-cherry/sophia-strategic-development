-- =====================================================================
-- Minimal Foundational Knowledge Schema for Sophia AI
-- Phase 1: Essential Structure Only
-- =====================================================================

USE DATABASE SOPHIA_AI;
CREATE SCHEMA IF NOT EXISTS FOUNDATIONAL_KNOWLEDGE;
USE SCHEMA FOUNDATIONAL_KNOWLEDGE;

-- =====================================================================
-- 1. CORE TABLES (Simplified)
-- =====================================================================

-- Employees table - Just the essentials
CREATE TABLE IF NOT EXISTS EMPLOYEES (
    EMPLOYEE_ID VARCHAR(255) PRIMARY KEY DEFAULT UUID_STRING(),
    EMAIL VARCHAR(255) UNIQUE NOT NULL,
    FIRST_NAME VARCHAR(255) NOT NULL,
    LAST_NAME VARCHAR(255) NOT NULL,
    JOB_TITLE VARCHAR(255),
    DEPARTMENT VARCHAR(255),
    MANAGER_ID VARCHAR(255),
    STATUS VARCHAR(50) DEFAULT 'active',
    
    -- External IDs (for future integration)
    SLACK_USER_ID VARCHAR(255),
    GONG_USER_ID VARCHAR(255),
    HUBSPOT_OWNER_ID VARCHAR(255),
    
    -- Metadata
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CREATED_BY VARCHAR(255) DEFAULT CURRENT_USER,
    
    -- Self-referential foreign key
    FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
);

-- Customers table - Just the essentials
CREATE TABLE IF NOT EXISTS CUSTOMERS (
    CUSTOMER_ID VARCHAR(255) PRIMARY KEY DEFAULT UUID_STRING(),
    COMPANY_NAME VARCHAR(500) NOT NULL,
    INDUSTRY VARCHAR(255),
    STATUS VARCHAR(50) DEFAULT 'active', -- active, prospect, churned
    TIER VARCHAR(50), -- enterprise, mid-market, smb
    
    -- Key relationships
    SUCCESS_MANAGER_ID VARCHAR(255),
    
    -- External IDs
    HUBSPOT_COMPANY_ID VARCHAR(255),
    SALESFORCE_ACCOUNT_ID VARCHAR(255),
    GONG_COMPANY_ID VARCHAR(255),
    
    -- Basic metrics (to be populated later)
    ANNUAL_REVENUE DECIMAL(15,2),
    EMPLOYEE_COUNT INTEGER,
    
    -- Metadata
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CREATED_BY VARCHAR(255) DEFAULT CURRENT_USER,
    
    FOREIGN KEY (SUCCESS_MANAGER_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
);

-- Products table - Just the essentials
CREATE TABLE IF NOT EXISTS PRODUCTS (
    PRODUCT_ID VARCHAR(255) PRIMARY KEY DEFAULT UUID_STRING(),
    PRODUCT_NAME VARCHAR(500) NOT NULL,
    PRODUCT_CATEGORY VARCHAR(255),
    DESCRIPTION TEXT,
    STATUS VARCHAR(50) DEFAULT 'active', -- active, deprecated, planned
    
    -- Key relationship
    PRODUCT_MANAGER_ID VARCHAR(255),
    
    -- Basic pricing (details can be added later)
    BASE_PRICE DECIMAL(15,2),
    PRICING_MODEL VARCHAR(100), -- subscription, one-time, usage-based
    
    -- Metadata
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CREATED_BY VARCHAR(255) DEFAULT CURRENT_USER,
    
    FOREIGN KEY (PRODUCT_MANAGER_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
);

-- Competitors table - Just the essentials
CREATE TABLE IF NOT EXISTS COMPETITORS (
    COMPETITOR_ID VARCHAR(255) PRIMARY KEY DEFAULT UUID_STRING(),
    COMPANY_NAME VARCHAR(500) NOT NULL,
    WEBSITE VARCHAR(500),
    INDUSTRY VARCHAR(255),
    THREAT_LEVEL VARCHAR(50), -- high, medium, low
    NOTES TEXT,
    
    -- Metadata
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CREATED_BY VARCHAR(255) DEFAULT CURRENT_USER
);

-- =====================================================================
-- 2. SIMPLE RELATIONSHIP TABLE
-- =====================================================================

-- Generic relationships table (can be specialized later)
CREATE TABLE IF NOT EXISTS ENTITY_RELATIONSHIPS (
    RELATIONSHIP_ID VARCHAR(255) PRIMARY KEY DEFAULT UUID_STRING(),
    SOURCE_TYPE VARCHAR(50) NOT NULL, -- employee, customer, product, competitor
    SOURCE_ID VARCHAR(255) NOT NULL,
    TARGET_TYPE VARCHAR(50) NOT NULL,
    TARGET_ID VARCHAR(255) NOT NULL,
    RELATIONSHIP_TYPE VARCHAR(100), -- manages, sells_to, competes_with, etc.
    
    -- Metadata
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CREATED_BY VARCHAR(255) DEFAULT CURRENT_USER,
    
    UNIQUE(SOURCE_TYPE, SOURCE_ID, TARGET_TYPE, TARGET_ID, RELATIONSHIP_TYPE)
);

-- =====================================================================
-- 3. BASIC SEARCH VIEW
-- =====================================================================

CREATE OR REPLACE VIEW VW_KNOWLEDGE_SEARCH AS
SELECT 
    'EMPLOYEE' AS ENTITY_TYPE,
    EMPLOYEE_ID AS ENTITY_ID,
    CONCAT(FIRST_NAME, ' ', LAST_NAME) AS NAME,
    EMAIL AS PRIMARY_IDENTIFIER,
    DEPARTMENT AS CATEGORY,
    STATUS,
    CREATED_AT,
    UPDATED_AT
FROM EMPLOYEES

UNION ALL

SELECT 
    'CUSTOMER' AS ENTITY_TYPE,
    CUSTOMER_ID AS ENTITY_ID,
    COMPANY_NAME AS NAME,
    COMPANY_NAME AS PRIMARY_IDENTIFIER,
    INDUSTRY AS CATEGORY,
    STATUS,
    CREATED_AT,
    UPDATED_AT
FROM CUSTOMERS

UNION ALL

SELECT 
    'PRODUCT' AS ENTITY_TYPE,
    PRODUCT_ID AS ENTITY_ID,
    PRODUCT_NAME AS NAME,
    PRODUCT_NAME AS PRIMARY_IDENTIFIER,
    PRODUCT_CATEGORY AS CATEGORY,
    STATUS,
    CREATED_AT,
    UPDATED_AT
FROM PRODUCTS

UNION ALL

SELECT 
    'COMPETITOR' AS ENTITY_TYPE,
    COMPETITOR_ID AS ENTITY_ID,
    COMPANY_NAME AS NAME,
    WEBSITE AS PRIMARY_IDENTIFIER,
    INDUSTRY AS CATEGORY,
    'active' AS STATUS,
    CREATED_AT,
    UPDATED_AT
FROM COMPETITORS;

-- =====================================================================
-- 4. BASIC INDEXES
-- =====================================================================

-- Employee indexes
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEES_EMAIL ON EMPLOYEES(EMAIL);
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEES_DEPARTMENT ON EMPLOYEES(DEPARTMENT);
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEES_STATUS ON EMPLOYEES(STATUS);

-- Customer indexes
CREATE INDEX IF NOT EXISTS IDX_CUSTOMERS_NAME ON CUSTOMERS(COMPANY_NAME);
CREATE INDEX IF NOT EXISTS IDX_CUSTOMERS_STATUS ON CUSTOMERS(STATUS);
CREATE INDEX IF NOT EXISTS IDX_CUSTOMERS_TIER ON CUSTOMERS(TIER);

-- Product indexes
CREATE INDEX IF NOT EXISTS IDX_PRODUCTS_NAME ON PRODUCTS(PRODUCT_NAME);
CREATE INDEX IF NOT EXISTS IDX_PRODUCTS_CATEGORY ON PRODUCTS(PRODUCT_CATEGORY);
CREATE INDEX IF NOT EXISTS IDX_PRODUCTS_STATUS ON PRODUCTS(STATUS);

-- Competitor indexes
CREATE INDEX IF NOT EXISTS IDX_COMPETITORS_NAME ON COMPETITORS(COMPANY_NAME);
CREATE INDEX IF NOT EXISTS IDX_COMPETITORS_THREAT ON COMPETITORS(THREAT_LEVEL);

-- =====================================================================
-- 5. BASIC SECURITY
-- =====================================================================

-- Create simple roles
CREATE ROLE IF NOT EXISTS FK_ADMIN COMMENT = 'Full access to foundational knowledge';
CREATE ROLE IF NOT EXISTS FK_USER COMMENT = 'Read/write access to foundational knowledge';
CREATE ROLE IF NOT EXISTS FK_READONLY COMMENT = 'Read-only access to foundational knowledge';

-- Grant permissions
GRANT ALL ON SCHEMA FOUNDATIONAL_KNOWLEDGE TO ROLE FK_ADMIN;
GRANT USAGE ON SCHEMA FOUNDATIONAL_KNOWLEDGE TO ROLE FK_USER;
GRANT USAGE ON SCHEMA FOUNDATIONAL_KNOWLEDGE TO ROLE FK_READONLY;

GRANT ALL ON ALL TABLES IN SCHEMA FOUNDATIONAL_KNOWLEDGE TO ROLE FK_ADMIN;
GRANT SELECT, INSERT, UPDATE ON ALL TABLES IN SCHEMA FOUNDATIONAL_KNOWLEDGE TO ROLE FK_USER;
GRANT SELECT ON ALL TABLES IN SCHEMA FOUNDATIONAL_KNOWLEDGE TO ROLE FK_READONLY;

GRANT SELECT ON ALL VIEWS IN SCHEMA FOUNDATIONAL_KNOWLEDGE TO ROLE FK_ADMIN;
GRANT SELECT ON ALL VIEWS IN SCHEMA FOUNDATIONAL_KNOWLEDGE TO ROLE FK_USER;
GRANT SELECT ON ALL VIEWS IN SCHEMA FOUNDATIONAL_KNOWLEDGE TO ROLE FK_READONLY;

-- =====================================================================
-- 6. SIMPLE STORED PROCEDURES
-- =====================================================================

-- Basic search procedure
CREATE OR REPLACE PROCEDURE SEARCH_KNOWLEDGE(SEARCH_TERM STRING)
RETURNS TABLE (
    ENTITY_TYPE STRING,
    ENTITY_ID STRING,
    NAME STRING,
    PRIMARY_IDENTIFIER STRING,
    CATEGORY STRING
)
LANGUAGE SQL
AS
$$
BEGIN
    RETURN TABLE(
        SELECT 
            ENTITY_TYPE,
            ENTITY_ID,
            NAME,
            PRIMARY_IDENTIFIER,
            CATEGORY
        FROM VW_KNOWLEDGE_SEARCH
        WHERE LOWER(NAME) LIKE LOWER(CONCAT('%', SEARCH_TERM, '%'))
           OR LOWER(PRIMARY_IDENTIFIER) LIKE LOWER(CONCAT('%', SEARCH_TERM, '%'))
           OR LOWER(CATEGORY) LIKE LOWER(CONCAT('%', SEARCH_TERM, '%'))
        ORDER BY 
            CASE 
                WHEN LOWER(NAME) = LOWER(SEARCH_TERM) THEN 1
                WHEN LOWER(NAME) LIKE LOWER(CONCAT(SEARCH_TERM, '%')) THEN 2
                ELSE 3
            END,
            NAME
        LIMIT 50
    );
END;
$$;

-- Get entity details procedure
CREATE OR REPLACE PROCEDURE GET_ENTITY_DETAILS(ENTITY_TYPE STRING, ENTITY_ID STRING)
RETURNS VARIANT
LANGUAGE SQL
AS
$$
DECLARE
    result VARIANT;
BEGIN
    CASE UPPER(ENTITY_TYPE)
        WHEN 'EMPLOYEE' THEN
            SELECT OBJECT_CONSTRUCT(*) INTO result
            FROM EMPLOYEES
            WHERE EMPLOYEE_ID = ENTITY_ID;
        WHEN 'CUSTOMER' THEN
            SELECT OBJECT_CONSTRUCT(*) INTO result
            FROM CUSTOMERS
            WHERE CUSTOMER_ID = ENTITY_ID;
        WHEN 'PRODUCT' THEN
            SELECT OBJECT_CONSTRUCT(*) INTO result
            FROM PRODUCTS
            WHERE PRODUCT_ID = ENTITY_ID;
        WHEN 'COMPETITOR' THEN
            SELECT OBJECT_CONSTRUCT(*) INTO result
            FROM COMPETITORS
            WHERE COMPETITOR_ID = ENTITY_ID;
        ELSE
            result := NULL;
    END CASE;
    
    RETURN result;
END;
$$;

-- =====================================================================
-- 7. SAMPLE DATA (Just a few records to test)
-- =====================================================================

-- Insert a few sample employees
INSERT INTO EMPLOYEES (FIRST_NAME, LAST_NAME, EMAIL, JOB_TITLE, DEPARTMENT) 
SELECT 'John', 'Doe', 'john.doe@company.com', 'CEO', 'Executive'
WHERE NOT EXISTS (SELECT 1 FROM EMPLOYEES WHERE EMAIL = 'john.doe@company.com');

INSERT INTO EMPLOYEES (FIRST_NAME, LAST_NAME, EMAIL, JOB_TITLE, DEPARTMENT, MANAGER_ID) 
SELECT 'Jane', 'Smith', 'jane.smith@company.com', 'CTO', 'Engineering', 
       (SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE EMAIL = 'john.doe@company.com')
WHERE NOT EXISTS (SELECT 1 FROM EMPLOYEES WHERE EMAIL = 'jane.smith@company.com');

-- Insert a few sample customers
INSERT INTO CUSTOMERS (COMPANY_NAME, INDUSTRY, STATUS, TIER) 
SELECT 'Acme Corp', 'Technology', 'active', 'enterprise'
WHERE NOT EXISTS (SELECT 1 FROM CUSTOMERS WHERE COMPANY_NAME = 'Acme Corp');

INSERT INTO CUSTOMERS (COMPANY_NAME, INDUSTRY, STATUS, TIER) 
SELECT 'TechStart Inc', 'Software', 'prospect', 'smb'
WHERE NOT EXISTS (SELECT 1 FROM CUSTOMERS WHERE COMPANY_NAME = 'TechStart Inc');

-- Insert a few sample products
INSERT INTO PRODUCTS (PRODUCT_NAME, PRODUCT_CATEGORY, STATUS, PRICING_MODEL) 
SELECT 'Core Platform', 'Infrastructure', 'active', 'subscription'
WHERE NOT EXISTS (SELECT 1 FROM PRODUCTS WHERE PRODUCT_NAME = 'Core Platform');

INSERT INTO PRODUCTS (PRODUCT_NAME, PRODUCT_CATEGORY, STATUS, PRICING_MODEL) 
SELECT 'Analytics Module', 'Add-on', 'active', 'usage-based'
WHERE NOT EXISTS (SELECT 1 FROM PRODUCTS WHERE PRODUCT_NAME = 'Analytics Module');

-- Insert a few sample competitors
INSERT INTO COMPETITORS (COMPANY_NAME, WEBSITE, THREAT_LEVEL) 
SELECT 'BigCorp Solutions', 'www.bigcorp.com', 'high'
WHERE NOT EXISTS (SELECT 1 FROM COMPETITORS WHERE COMPANY_NAME = 'BigCorp Solutions');

-- =====================================================================
-- 8. HELPFUL QUERIES FOR GETTING STARTED
-- =====================================================================

/*
-- Count records in each table
SELECT 'Employees' as TABLE_NAME, COUNT(*) as RECORD_COUNT FROM EMPLOYEES
UNION ALL
SELECT 'Customers', COUNT(*) FROM CUSTOMERS
UNION ALL
SELECT 'Products', COUNT(*) FROM PRODUCTS
UNION ALL
SELECT 'Competitors', COUNT(*) FROM COMPETITORS;

-- Search for entities
CALL SEARCH_KNOWLEDGE('john');

-- Get entity details
CALL GET_ENTITY_DETAILS('EMPLOYEE', '<employee_id_here>');

-- View all active employees
SELECT * FROM EMPLOYEES WHERE STATUS = 'active';

-- View customers by tier
SELECT TIER, COUNT(*) as COUNT 
FROM CUSTOMERS 
WHERE STATUS = 'active' 
GROUP BY TIER;
*/

-- =====================================================================
-- SETUP COMPLETE
-- =====================================================================

SELECT 'Foundational Knowledge minimal schema created successfully!' AS STATUS; 