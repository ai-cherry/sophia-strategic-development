"""Demonstrates a high-level content strategy workflow using Sophia's agents."""

import asyncio
import logging

from backend.agents.brain_agent import BrainAgent
from backend.agents.core.base_agent import AgentConfig, Task
from backend.agents.research_agent import ResearchAgent
from backend.integrations.portkey_client import PortkeyClient  # Assuming it exists

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


async def run_content_creation_task(topic: str):
    """Orchestrates a content creation task from research to final draft.

        Args:
            topic: The high-level topic for the content (e.g., a blog post title).
    """logger.info(f"--- Starting Content Creation Workflow for: '{topic}' ---").

    # In a real system, the BrainAgent would be a long-running service.
    # Here, we instantiate it for this specific task.
    # The PortkeyClient would also be properly initialized.
    brain_agent = BrainAgent(
        AgentConfig(name="BrainAgent"),
        portkey_client=PortkeyClient(),  # Placeholder
    )

    # This is a conceptual plan that the BrainAgent would generate and execute.
    # This demonstrates how the different agents and tools would be used.

    # Step 1: BrainAgent delegates the high-level topic to the ResearchAgent.
    # The new ResearchAgent will intelligently deconstruct the topic into specific queries.
    logger.info(f"[BRAIN] Delegating topic '{topic}' to ResearchAgent...")
    research_agent = ResearchAgent(AgentConfig(name="ResearchAgent"))
    research_task = Task(command=topic)
    research_result = await research_agent.execute_task(research_task)

    if research_result.status != "success":
        logger.error("Research phase failed. Aborting content creation.")
        return

    research_brief = research_result.output
    logger.info("[RESEARCH AGENT] Research complete and brief synthesized.")

    # Step 2: BrainAgent uses the research to generate a blog post draft.
    logger.info("[BRAIN] Generating blog post draft from research...")
    drafting_prompt = f"""You are a world-class content strategist for Pay Ready, a leader in the property management technology space.

    Your task is to write a compelling, insightful, and SEO-optimized blog post based on the research brief provided.
    The title of the post is: "{topic}"
    The tone should be authoritative, helpful, and clearly articulate Pay Ready's unique advantages.

    Research Brief:
    ---
    {research_brief}
    ---

    Please produce the full blog post in markdown format.
    """

    # In a real system, the BrainAgent would use its LLM to generate the text.
    # final_draft = await brain_agent.generate_text(drafting_prompt)
    final_draft = f"# {topic}\n\nThis is a placeholder for the full, compelling blog post. It would be generated by an LLM based on the detailed research brief provided by the ResearchAgent. The brief contained information on market size, key players, and future trends."  # Simulated result
    logger.info("[BRAIN] Draft generation complete.")

    # Step 3 (Conceptual): BrainAgent plans for content enrichment.
    logger.info("[BRAIN] Planning content enrichment...")
    logger.info(
        "Next steps would be to use the auto-extracted tags from the research briefs to find related internal data (e.g., case studies about 'Entrata') to link to within the blog post, further strengthening the content."
    )

    print("\n--- FINAL CONTENT DRAFT ---")
    print(final_draft)
    print("--------------------------")


if __name__ == "__main__":
    content_topic = "Why Pay Ready is the Superior Choice Over Entrata"
    asyncio.run(run_content_creation_task(content_topic))
