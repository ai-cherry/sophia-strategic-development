name: 🌐 Deploy Sophia Intelligence DNS Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'infrastructure/dns/**':
      - 'infrastructure/esc/sophia-intelligence-platform.yaml':
      - 'scripts/dns-manager.py':
      - '.github/workflows/deploy-sophia-dns.yml':
  
  pull_request:
    branches: [main]
    paths:
      - 'infrastructure/dns/**':
      - 'infrastructure/esc/sophia-intelligence-platform.yaml':
      - 'scripts/dns-manager.py':
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - development:
          - staging:
          - production:
      domain:
        description: 'Domain to deploy'
        required: true
        default: 'sophia-intel.ai'
        type: string
      validate_only:
        description: 'Only validate DNS records (no deployment)'
        required: false
        default: false
        type: boolean

env:
  PULUMI_ORG: scoobyjava-org
  PULUMI_PROJECT: default
  PULUMI_STACK_ENV: sophia-intelligence-platform
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  context-detection:
    name: 🔍 Detect Deployment Context
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.detect.outputs.environment }}
      domain: ${{ steps.detect.outputs.domain }}
      client_ip: ${{ steps.detect.outputs.client_ip }}
      validate_only: ${{ steps.detect.outputs.validate_only }}
    steps:
      - name: Detect Environment Context
        id: detect
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_ENV: ${{ github.event.inputs.environment }}
          INPUT_DOMAIN: ${{ github.event.inputs.domain }}
          INPUT_VALIDATE: ${{ github.event.inputs.validate_only }}
          REF: ${{ github.ref }}
        run: |
          # Determine environment:
          if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            echo "environment=$INPUT_ENV" >> $GITHUB_OUTPUT
            echo "domain=$INPUT_DOMAIN" >> $GITHUB_OUTPUT
            echo "validate_only=$INPUT_VALIDATE" >> $GITHUB_OUTPUT
          elif [[ "$REF" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "domain=sophia-intel.ai" >> $GITHUB_OUTPUT
            echo "validate_only=false" >> $GITHUB_OUTPUT
          else:
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "domain=sophia-intel.ai" >> $GITHUB_OUTPUT
            echo "validate_only=true" >> $GITHUB_OUTPUT
          fi:
          
          # Set GitHub Actions IP for Namecheap API:
          echo "client_ip=${{ secrets.GH_IP_ADDRESS }}" >> $GITHUB_OUTPUT
          
          echo "🔍 Deployment Context:"
          echo "  Environment: $(cat $GITHUB_OUTPUT | grep environment | cut -d'=' -f2)"
          echo "  Domain: $(cat $GITHUB_OUTPUT | grep domain | cut -d'=' -f2)"
          echo "  Client IP: $(cat $GITHUB_OUTPUT | grep client_ip | cut -d'=' -f2)"
          echo "  Validate Only: $(cat $GITHUB_OUTPUT | grep validate_only | cut -d'=' -f2)"

  pulumi-esc-validation:
    name: 🔐 Validate Pulumi ESC Configuration
    runs-on: ubuntu-latest
    needs: context-detection
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Pulumi CLI
        uses: pulumi/actions@v4
        with:
          pulumi-version: 'latest'

      - name: Configure Pulumi ESC
        run: |
          echo "📡 Configuring Pulumi ESC access...":
          pulumi login:
          export PULUMI_ORG="${{ env.PULUMI_ORG }}"
          export PULUMI_PROJECT="${{ env.PULUMI_PROJECT }}"
          export PULUMI_STACK="${{ env.PULUMI_STACK_ENV }}"
          
          echo "🔍 Validating Pulumi ESC environment...":
          pulumi env get $PULUMI_ORG/$PULUMI_PROJECT/$PULUMI_STACK --show-secrets:
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Validate Required Secrets
        run: |
          echo "🔐 Validating required secrets availability...":
          
          # Check each secret individually since GitHub Actions doesn't support dynamic secret access:
          MISSING_SECRETS=()
          
          # Check LAMBDA_IP_ADDRESS:
          if [[ -z "${{ secrets.LAMBDA_IP_ADDRESS }}" ]]; then:
            MISSING_SECRETS+=("LAMBDA_IP_ADDRESS")
            echo "❌ Missing secret: LAMBDA_IP_ADDRESS"
          else:
            echo "✅ Secret available: LAMBDA_IP_ADDRESS"
          fi:
          
          # Check GH_IP_ADDRESS:
          if [[ -z "${{ secrets.GH_IP_ADDRESS }}" ]]; then:
            MISSING_SECRETS+=("GH_IP_ADDRESS")
            echo "❌ Missing secret: GH_IP_ADDRESS"
          else:
            echo "✅ Secret available: GH_IP_ADDRESS"
          fi:
          
          # Check PULUMI_IP_ADDRESS:
          if [[ -z "${{ secrets.PULUMI_IP_ADDRESS }}" ]]; then:
            MISSING_SECRETS+=("PULUMI_IP_ADDRESS")
            echo "❌ Missing secret: PULUMI_IP_ADDRESS"
          else:
            echo "✅ Secret available: PULUMI_IP_ADDRESS"
          fi:
          
          # Check NAMECHEAP_API_USER:
          if [[ -z "${{ secrets.NAMECHEAP_API_USER }}" ]]; then:
            MISSING_SECRETS+=("NAMECHEAP_API_USER")
            echo "❌ Missing secret: NAMECHEAP_API_USER"
          else:
            echo "✅ Secret available: NAMECHEAP_API_USER"
          fi:
          
          # Check NAMECHEAP_API_KEY:
          if [[ -z "${{ secrets.NAMECHEAP_API_KEY }}" ]]; then:
            MISSING_SECRETS+=("NAMECHEAP_API_KEY")
            echo "❌ Missing secret: NAMECHEAP_API_KEY"
          else:
            echo "✅ Secret available: NAMECHEAP_API_KEY"
          fi:
          
          # Check NAMECHEAP_USERNAME:
          if [[ -z "${{ secrets.NAMECHEAP_USERNAME }}" ]]; then:
            MISSING_SECRETS+=("NAMECHEAP_USERNAME")
            echo "❌ Missing secret: NAMECHEAP_USERNAME"
          else:
            echo "✅ Secret available: NAMECHEAP_USERNAME"
          fi:
          
          if [[ ${#MISSING_SECRETS[@]} -gt 0 ]]; then:
            echo "❌ Missing required secrets: ${MISSING_SECRETS[*]}"
            exit 1:
          fi:
          
          echo "✅ All required secrets are available"

  dns-validation:
    name: 🔍 Validate DNS Configuration
    runs-on: ubuntu-latest
    needs: [context-detection, pulumi-esc-validation]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python Dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH:
          uv add requests python-dotenv aiohttp

      - name: Setup Pulumi CLI
        uses: pulumi/actions@v4
        with:
          pulumi-version: 'latest'

      - name: Validate Current DNS Records
        run: |
          echo "🔍 Validating current DNS records for ${{ needs.context-detection.outputs.domain }}...":
          
          export PULUMI_ORG="${{ env.PULUMI_ORG }}"
          export PULUMI_ACCESS_TOKEN="${{ secrets.PULUMI_ACCESS_TOKEN }}"
          
          # Make DNS manager script executable:
          chmod +x scripts/dns-manager.py:
          
          # Run DNS validation:
          python scripts/dns-manager.py validate --domain "${{ needs.context-detection.outputs.domain }}":
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  typescript-infrastructure:
    name: 🏗️ Deploy TypeScript Infrastructure
    runs-on: ubuntu-latest
    needs: [context-detection, pulumi-esc-validation, dns-validation]
    if: needs.context-detection.outputs.validate_only != 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: infrastructure/dns/package.json

      - name: Setup Pulumi CLI
        uses: pulumi/actions@v4
        with:
          pulumi-version: 'latest'

      - name: Install Dependencies
        working-directory: infrastructure/dns
        run: |
          echo "📦 Installing TypeScript infrastructure dependencies...":
          npm ci

      - name: Build TypeScript Infrastructure
        working-directory: infrastructure/dns
        run: |
          echo "🔨 Building TypeScript infrastructure...":
          npm run build

      - name: Preview Infrastructure Changes
        working-directory: infrastructure/dns
        run: |
          echo "👀 Previewing infrastructure changes...":
          export PULUMI_ORG="${{ env.PULUMI_ORG }}"
          export PULUMI_CONFIG_PASSPHRASE=""
          
          # Initialize Pulumi stack if needed:
          pulumi stack select ${{ env.PULUMI_ORG }}/sophia-intelligence-dns/${{ needs.context-detection.outputs.environment }} || \:
          pulumi stack init ${{ env.PULUMI_ORG }}/sophia-intelligence-dns/${{ needs.context-detection.outputs.environment }}:
          
          # Run preview:
          pulumi preview --diff:
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          AWS_REGION: us-east-1

      - name: Deploy Infrastructure
        working-directory: infrastructure/dns
        run: |
          echo "🚀 Deploying DNS infrastructure...":
          export PULUMI_ORG="${{ env.PULUMI_ORG }}"
          export PULUMI_CONFIG_PASSPHRASE=""
          
          # Deploy infrastructure:
          pulumi up --yes --diff:
          
          # Export stack outputs:
          pulumi stack output --json > deployment-outputs.json:
          
          echo "📊 Deployment outputs:"
          cat deployment-outputs.json | jq '.':
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          AWS_REGION: us-east-1

      - name: Upload Deployment Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dns-deployment-outputs
          path: infrastructure/dns/deployment-outputs.json
          retention-days: 30

  dns-deployment:
    name: 🌐 Deploy DNS Records
    runs-on: ubuntu-latest
    needs: [context-detection, pulumi-esc-validation, dns-validation]
    if: needs.context-detection.outputs.validate_only != 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python Dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH:
          uv add requests python-dotenv aiohttp

      - name: Setup Pulumi CLI
        uses: pulumi/actions@v4
        with:
          pulumi-version: 'latest'

      - name: Deploy DNS Records
        run: |
          echo "🌐 Deploying DNS records for ${{ needs.context-detection.outputs.domain }}...":
          
          export PULUMI_ORG="${{ env.PULUMI_ORG }}"
          export PULUMI_ACCESS_TOKEN="${{ secrets.PULUMI_ACCESS_TOKEN }}"
          
          # Make DNS manager script executable:
          chmod +x scripts/dns-manager.py:
          
          # Deploy DNS records:
          python scripts/dns-manager.py setup --domain "${{ needs.context-detection.outputs.domain }}":
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  post-deployment-validation:
    name: ✅ Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [context-detection, typescript-infrastructure, dns-deployment]
    if: always() && (needs.typescript-infrastructure.result == 'success' || needs.dns-deployment.result == 'success')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python Dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH:
          uv add requests python-dotenv aiohttp

      - name: Setup Pulumi CLI
        uses: pulumi/actions@v4
        with:
          pulumi-version: 'latest'

      - name: Wait for DNS Propagation
        run: |
          echo "⏳ Waiting for DNS propagation (60 seconds)...":
          sleep 60

      - name: Validate DNS Deployment
        run: |
          echo "🔍 Validating DNS deployment for ${{ needs.context-detection.outputs.domain }}...":
          
          export PULUMI_ORG="${{ env.PULUMI_ORG }}"
          export PULUMI_ACCESS_TOKEN="${{ secrets.PULUMI_ACCESS_TOKEN }}"
          
          # Make DNS manager script executable:
          chmod +x scripts/dns-manager.py:
          
          # Validate DNS records:
          python scripts/dns-manager.py validate --domain "${{ needs.context-detection.outputs.domain }}":
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Test Endpoint Health
        run: |
          echo "🏥 Testing endpoint health...":
          
          DOMAIN="${{ needs.context-detection.outputs.domain }}"
          ENDPOINTS=(
            "https://$DOMAIN"
            "https://api.$DOMAIN"
            "https://dashboard.$DOMAIN"
            "https://sophia.$DOMAIN"
          ):
          
          for endpoint in "${ENDPOINTS[@]}"; do:
            echo "Testing $endpoint...":
            if curl -sSf --max-time 10 --connect-timeout 5 "$endpoint" > /dev/null 2>&1; then:
              echo "  ✅ $endpoint is responding":
            else:
              echo "  ⚠️  $endpoint is not responding (may be expected if service not deployed yet)":
            fi:
          done

  notification:
    name: 📢 Send Deployment Notification
    runs-on: ubuntu-latest
    needs: [context-detection, typescript-infrastructure, dns-deployment, post-deployment-validation]
    if: always()
    steps:
      - name: Determine Deployment Status
        id: status
        run: |
          if [[ "${{ needs.typescript-infrastructure.result }}" == "success" && "${{ needs.dns-deployment.result }}" == "success" && "${{ needs.post-deployment-validation.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "message=DNS infrastructure deployed successfully" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.context-detection.outputs.validate_only }}" == "true" ]]; then
            echo "status=validation" >> $GITHUB_OUTPUT
            echo "emoji=🔍" >> $GITHUB_OUTPUT
            echo "message=DNS validation completed" >> $GITHUB_OUTPUT
          else:
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "message=DNS deployment failed" >> $GITHUB_OUTPUT
          fi

      - name: Create Deployment Summary
        run: |
          echo "## ${{ steps.status.outputs.emoji }} Sophia Intelligence DNS Deployment" >> $GITHUB_STEP_SUMMARY:
          echo "" >> $GITHUB_STEP_SUMMARY:
          echo "**Status:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "**Domain:** ${{ needs.context-detection.outputs.domain }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.context-detection.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY:
          
          if [[ "${{ steps.status.outputs.status }}" == "success" ]]; then
            echo "### 🎯 Deployed Endpoints" >> $GITHUB_STEP_SUMMARY:
            echo "- [Main Site](https://${{ needs.context-detection.outputs.domain }})" >> $GITHUB_STEP_SUMMARY
            echo "- [API](https://api.${{ needs.context-detection.outputs.domain }})" >> $GITHUB_STEP_SUMMARY
            echo "- [Dashboard](https://dashboard.${{ needs.context-detection.outputs.domain }})" >> $GITHUB_STEP_SUMMARY
            echo "- [Sophia AI](https://sophia.${{ needs.context-detection.outputs.domain }})" >> $GITHUB_STEP_SUMMARY
            echo "- [Development](https://dev.${{ needs.context-detection.outputs.domain }})" >> $GITHUB_STEP_SUMMARY
          fi:
          
          echo "" >> $GITHUB_STEP_SUMMARY:
          echo "### 📊 Job Results" >> $GITHUB_STEP_SUMMARY:
          echo "- Context Detection: ${{ needs.context-detection.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Infrastructure: ${{ needs.typescript-infrastructure.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- DNS Deployment: ${{ needs.dns-deployment.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Validation: ${{ needs.post-deployment-validation.result }}" >> $GITHUB_STEP_SUMMARY
