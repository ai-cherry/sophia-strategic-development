# Sophia AI Optimized Dockerfile
# Multi-stage build with ML/AI optimizations

# -----------------------------------------------------------------------------
# Stage 1: Base Python dependencies
# -----------------------------------------------------------------------------
FROM python:3.12-slim AS builder

# Install UV
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv

# Install UV
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv AS python-base

# Configure environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONFAULTHANDLER=1 \
    PYTHONHASHSEED=random \
    # Pip configuration
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    # Poetry configuration
    POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_CREATE=false

# Working directory
WORKDIR /app

# -----------------------------------------------------------------------------
# Stage 2: Builder stage for dependencies
# -----------------------------------------------------------------------------
FROM python-base AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create Python virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements files
COPY pyproject.toml uv.lock ./equirements-dev.txt ./

# Install Python dependencies with pip caching
# Hash the requirements file to cache dependencies
RUN --mount=type=cache,target=/root/.cache/pip \
    # UV handles package management automatically && \
    uv sync --frozen

# For ML model optimization - create cache directory for pretrained models
RUN mkdir -p /root/.cache/torch \
    /root/.cache/huggingface \
    /root/.cache/sentence_transformers

# -----------------------------------------------------------------------------
# Stage 3: Development image
# -----------------------------------------------------------------------------
FROM python-base AS development

# Install development tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy all application code
COPY . .

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/data /app/cache \
    && chmod -R 755 /app/logs \
    && chmod -R 755 /app/data \
    && chmod -R 755 /app/cache

# Expose development port
EXPOSE 8000

# Set development command
CMD ["uvicorn", "backend.app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# -----------------------------------------------------------------------------
# Stage 4: Production build
# -----------------------------------------------------------------------------
FROM builder AS production-builder

# Copy application code for final build
COPY . .

# Install production dependencies only
RUN --mount=type=cache,target=/root/.cache/pip \
    uv sync --frozen --no-cache

# Precompile Python bytecode to reduce startup time
RUN python -m compileall /app

# -----------------------------------------------------------------------------
# Stage 5: Final production image
# -----------------------------------------------------------------------------
FROM python:3.12-slim AS builder

# Install UV
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv

# Install UV
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv AS production

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONFAULTHANDLER=1 \
    PYTHONHASHSEED=random \
    PORT=8000 \
    ENVIRONMENT=production \
    # ML model optimization settings
    OMP_NUM_THREADS=1 \
    MKL_NUM_THREADS=1 \
    NUMEXPR_NUM_THREADS=1

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    libpq-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder
COPY --from=production-builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy only necessary files from production-builder
COPY --from=production-builder /app/backend /app/backend
COPY --from=production-builder /app/config /app/config

# Copy model cache for faster startup
COPY --from=production-builder /root/.cache/torch /root/.cache/torch
COPY --from=production-builder /root/.cache/huggingface /root/.cache/huggingface
COPY --from=production-builder /root/.cache/sentence_transformers /root/.cache/sentence_transformers

# Create ML model cache directories with proper permissions
RUN mkdir -p /app/model-cache /app/logs /app/data
ENV TRANSFORMERS_CACHE=/app/model-cache \
    TORCH_HOME=/app/model-cache \
    HF_HOME=/app/model-cache

# Set working directory
WORKDIR /app

# Create non-root user
RUN groupadd -g 1001 sophia && \
    useradd -u 1001 -g sophia -s /bin/bash -m sophia && \
    chown -R sophia:sophia /app /root/.cache

# Create volume mount points with proper permissions
RUN mkdir -p /app/logs /app/data /app/model-cache \
    && chown -R sophia:sophia /app/logs /app/data /app/model-cache

# Switch to non-root user
USER sophia

# Expose port
EXPOSE ${PORT:-8000}

# Add optimized health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=45s --retries=3 \
    CMD curl -f http://localhost:${PORT:-8000}/health || exit 1

# Command with optimized workers and thread settings for ML workloads
CMD ["uvicorn", "backend.app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4", "--limit-concurrency", "50"]

# -----------------------------------------------------------------------------
# Stage 6: GPU-enabled production (optional)
# -----------------------------------------------------------------------------
FROM production AS production-gpu

# Set GPU-specific environment variables
ENV NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Install CUDA runtime libraries (minimal)
USER root
RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-minimal-build-11-7 \
    libcudnn8 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Switch back to non-root user
USER sophia

# Use optimized settings for GPU
ENV OMP_NUM_THREADS=1 \
    MKL_NUM_THREADS=1

# CMD remains the same as production