name: üöÄ Deploy MCP Servers to Production

on:
  workflow_dispatch:
    inputs:
      servers:
        description: 'MCP servers to deploy (comma-separated: codacy,linear,ai_memory)'
        required: true
        default: 'codacy,linear'
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - staging
  push:
    branches: [main]
    paths:
      - 'mcp-servers/**'
      - 'docker-compose.cloud.yml'
      - '.github/workflows/deploy-mcp-production.yml'

env:
  DOCKER_REGISTRY: scoobyjava15
  LAMBDA_LABS_HOST: 165.1.69.44
  LAMBDA_LABS_USER: root

jobs:
  validate-mcp-servers:
    name: üîç Validate MCP Servers
    runs-on: ubuntu-latest
    outputs:
      servers: ${{ steps.validate.outputs.servers }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Validate MCP servers
        id: validate
        run: |
          servers="${{ github.event.inputs.servers || 'codacy,linear' }}"
          echo "üîç Validating servers: $servers"

          validated_servers=""
          IFS=',' read -ra SERVER_LIST <<< "$servers"

          for server in "${SERVER_LIST[@]}"; do
            server=$(echo $server | xargs)  # trim whitespace
            case $server in
              codacy)
                if [ -f "mcp-servers/codacy/production_codacy_server.py" ]; then
                  echo "‚úÖ Codacy MCP server found"
                  validated_servers="${validated_servers},codacy"
                else
                  echo "‚ùå Codacy MCP server not found"
                fi
                ;;
              linear)
                if [ -f "mcp-servers/linear/linear_mcp_server.py" ]; then
                  echo "‚úÖ Linear MCP server found"
                  validated_servers="${validated_servers},linear"
                else
                  echo "‚ùå Linear MCP server not found"
                fi
                ;;
              ai_memory)
                if [ -f "mcp-servers/ai_memory/enhanced_ai_memory_server.py" ]; then
                  echo "‚úÖ AI Memory MCP server found"
                  validated_servers="${validated_servers},ai_memory"
                else
                  echo "‚ùå AI Memory MCP server not found"
                fi
                ;;
              *)
                echo "‚ùå Unknown server: $server"
                ;;
            esac
          done

          validated_servers=$(echo $validated_servers | sed 's/^,//')
          echo "servers=$validated_servers" >> $GITHUB_OUTPUT
          echo "üìä Validated servers: $validated_servers"

  build-and-deploy:
    name: üèóÔ∏è Build & Deploy MCP Servers
    runs-on: ubuntu-latest
    needs: validate-mcp-servers
    if: needs.validate-mcp-servers.outputs.servers != ''

    strategy:
      matrix:
        server: ['codacy', 'linear']
      max-parallel: 2

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_REGISTRY }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Check if server is validated
        run: |
          server="${{ matrix.server }}"
          validated_servers="${{ needs.validate-mcp-servers.outputs.servers }}"

          if [[ ",$validated_servers," != *",$server,"* ]]; then
            echo "‚è≠Ô∏è Skipping $server - not in validated list: $validated_servers"
            echo "SKIP_SERVER=true" >> $GITHUB_ENV
          else
            echo "‚úÖ $server is validated for deployment"
            echo "SKIP_SERVER=false" >> $GITHUB_ENV
          fi

      - name: Build MCP server image
        if: env.SKIP_SERVER == 'false'
        run: |
          server="${{ matrix.server }}"
          echo "üèóÔ∏è Building $server MCP server..."

          case $server in
            codacy)
              docker build -t ${{ env.DOCKER_REGISTRY }}/sophia-codacy-mcp:latest \
                -f mcp-servers/codacy/Dockerfile mcp-servers/codacy/
              ;;
            linear)
              docker build -t ${{ env.DOCKER_REGISTRY }}/sophia-linear-mcp:latest \
                -f docker/Dockerfile.mcp-server \
                --build-arg SERVER_NAME=linear \
                --build-arg SERVER_PATH=mcp-servers/linear \
                .
              ;;
            ai_memory)
              docker build -t ${{ env.DOCKER_REGISTRY }}/sophia-ai-memory-mcp:latest \
                -f docker/Dockerfile.mcp-server \
                --build-arg SERVER_NAME=ai_memory \
                --build-arg SERVER_PATH=mcp-servers/ai_memory \
                .
              ;;
          esac

      - name: Push image to Docker Hub
        if: env.SKIP_SERVER == 'false'
        run: |
          server="${{ matrix.server }}"
          echo "üì§ Pushing $server image to Docker Hub..."
          docker push ${{ env.DOCKER_REGISTRY }}/sophia-$server-mcp:latest

      - name: Deploy to Lambda Labs
        if: env.SKIP_SERVER == 'false'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.LAMBDA_LABS_HOST }}
          username: ${{ env.LAMBDA_LABS_USER }}
          key: ${{ secrets.LAMBDA_LABS_SSH_KEY }}
          script: |
            server="${{ matrix.server }}"
            echo "üöÄ Deploying $server MCP server to Lambda Labs..."

            # Pull latest image
            docker pull ${{ env.DOCKER_REGISTRY }}/sophia-$server-mcp:latest

            # Stop existing container if running
            docker stop sophia-$server-mcp 2>/dev/null || true
            docker rm sophia-$server-mcp 2>/dev/null || true

            # Run new container
            case $server in
              codacy)
                docker run -d \
                  --name sophia-codacy-mcp \
                  --restart unless-stopped \
                  -p 3008:3008 \
                  -e ENVIRONMENT=prod \
                  ${{ env.DOCKER_REGISTRY }}/sophia-codacy-mcp:latest
                ;;
              linear)
                docker run -d \
                  --name sophia-linear-mcp \
                  --restart unless-stopped \
                  -p 9004:9004 \
                  -e ENVIRONMENT=prod \
                  ${{ env.DOCKER_REGISTRY }}/sophia-linear-mcp:latest
                ;;
              ai_memory)
                docker run -d \
                  --name sophia-ai-memory-mcp \
                  --restart unless-stopped \
                  -p 9001:9001 \
                  -e ENVIRONMENT=prod \
                  ${{ env.DOCKER_REGISTRY }}/sophia-ai-memory-mcp:latest
                ;;
            esac

            # Verify deployment
            sleep 10
            if docker ps | grep -q sophia-$server-mcp; then
              echo "‚úÖ $server MCP server deployed successfully"
            else
              echo "‚ùå $server MCP server deployment failed"
              exit 1
            fi

  health-check:
    name: üè• Health Check Deployed Servers
    runs-on: ubuntu-latest
    needs: [validate-mcp-servers, build-and-deploy]
    if: always() && needs.build-and-deploy.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Health check deployed servers
        run: |
          servers="${{ needs.validate-mcp-servers.outputs.servers }}"
          echo "üè• Running health checks for: $servers"

          IFS=',' read -ra SERVER_LIST <<< "$servers"
          failed_servers=""

          for server in "${SERVER_LIST[@]}"; do
            server=$(echo $server | xargs)
            case $server in
              codacy)
                port=3008
                ;;
              linear)
                port=9004
                ;;
              ai_memory)
                port=9001
                ;;
            esac

            echo "üîç Checking $server on port $port..."

            # Wait for server to be ready
            for i in {1..12}; do
              if curl -sf http://${{ env.LAMBDA_LABS_HOST }}:$port/health; then
                echo "‚úÖ $server MCP server is healthy"
                break
              else
                if [ $i -eq 12 ]; then
                  echo "‚ùå $server MCP server health check failed"
                  failed_servers="${failed_servers},$server"
                else
                  echo "‚è≥ Waiting for $server to be ready (attempt $i/12)..."
                  sleep 10
                fi
              fi
            done
          done

          if [ -n "$failed_servers" ]; then
            echo "‚ùå Failed servers: $failed_servers"
            exit 1
          else
            echo "‚úÖ All MCP servers are healthy!"
          fi

  notify-completion:
    name: üìß Notify Deployment Completion
    runs-on: ubuntu-latest
    needs: [validate-mcp-servers, build-and-deploy, health-check]
    if: always()

    steps:
      - name: Generate deployment report
        run: |
          servers="${{ needs.validate-mcp-servers.outputs.servers }}"
          environment="${{ github.event.inputs.environment || 'prod' }}"

          echo "üìä SOPHIA AI MCP DEPLOYMENT REPORT"
          echo "=================================="
          echo "üéØ Target: Lambda Labs $environment (165.1.69.44)"
          echo "üìÖ Date: $(date)"
          echo "üë§ Triggered by: ${{ github.actor }}"
          echo "üîÑ Workflow: ${{ github.run_id }}"
          echo ""
          echo "üìã DEPLOYED SERVERS:"

          IFS=',' read -ra SERVER_LIST <<< "$servers"
          for server in "${SERVER_LIST[@]}"; do
            server=$(echo $server | xargs)
            case $server in
              codacy)
                echo "  ‚úÖ Codacy MCP (port 3008) - Code analysis & security"
                ;;
              linear)
                echo "  ‚úÖ Linear MCP (port 9004) - Project management"
                ;;
              ai_memory)
                echo "  ‚úÖ AI Memory MCP (port 9001) - Memory & context"
                ;;
            esac
          done

          echo ""
          echo "üéØ BUSINESS VALUE DELIVERED:"
          echo "  - Real-time code quality analysis"
          echo "  - Project health monitoring"
          echo "  - AI-powered development assistance"
          echo "  - Enterprise-grade MCP orchestration"
          echo ""
          echo "üîó Access URLs:"
          echo "  - Codacy: http://165.1.69.44:3008/health"
          echo "  - Linear: http://165.1.69.44:9004/health"
          - AI Memory: http://165.1.69.44:9001/health"
          echo ""
          echo "‚úÖ Deployment Status: SUCCESS"
          echo "üöÄ Sophia AI MCP ecosystem is now operational!"
