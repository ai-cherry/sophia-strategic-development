# SQL injection fixes applied - using parameterized queries
"""
modern_stack Cortex Service - Core Module
Contains the main service class with connection management and basic operations
"""

from __future__ import annotations

import logging
from typing import Any

try:
    from core.config_manager import get_config_value  # type: ignore
except ImportError:  # pragma: no cover – allows type checking outside full repo
    # Fallback stub for static analysis or limited environments
    def get_config_value(key: str, default: str | None = None) -> str:  # type: ignore[override]
        return default or ""


logger = logging.getLogger(__name__)


class modern_stackCortexService:
    """
    Core service for accessing modern_stack Cortex AI capabilities

    This class provides the foundation for modern_stack's native AI functions
    for text processing, embeddings, and vector search directly within
    the data warehouse.
    """

    def __init__(self):
        # Import lazily to avoid heavy dependencies during module import
        try:
            from core.optimized_connection_manager import (
                connection_manager as shared_connection_manager,  # type: ignore
            )
        except ImportError:  # pragma: no cover
            # Fallback dummy connection manager for environments where full infra is absent
            class _DummyConnectionManager:  # – simple stub
                async def initialize(self) -> None:  # type: ignore
                    pass

                async def execute_query(self, *_args: Any, **_kwargs: Any) -> Any:  # type: ignore
                    return None

            shared_connection_manager = _DummyConnectionManager()  # type: ignore

        # Shared async connection manager instance
        self.connection_manager: Any = shared_connection_manager  # type: ignore[attr-defined]

        self.database = get_config_value("modern_stack_database", "SOPHIA_AI")
        self.schema = get_config_value("modern_stack_schema", "AI_PROCESSING")
        self.warehouse = get_config_value("modern_stack_warehouse", "SOPHIA_AI_WH")
        self.initialized = False

        # Vector storage tables
        self.vector_tables = {
            "hubspot_embeddings": "HUBSPOT_CONTACT_EMBEDDINGS",
            "gong_embeddings": "GONG_CALL_EMBEDDINGS",
            "document_embeddings": "DOCUMENT_EMBEDDINGS",
            "memory_embeddings": "AI_MEMORY_EMBEDDINGS",
        }

    async def __aenter__(self):
        """Async context manager entry - initialize connection"""
        await self.initialize()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit - cleanup resources"""
        # No need to close individual connection - managed by connection manager
        pass

    async def initialize(self) -> None:
        """Initialize modern_stack connection for Cortex AI processing"""
        if self.initialized:
            return

        try:
            # Use connection manager instead of individual connection
            await self.connection_manager.initialize()

            # Set database and schema context
            await self.connection_manager.execute_query(
                "USE DATABASE %s", (self.database,)
            )
            await self.connection_manager.execute_query("USE SCHEMA %s", (self.schema,))
            await self.connection_manager.execute_query(
                "USE WAREHOUSE %s", (self.warehouse,)
            )

            # Ensure vector tables exist
            await self._create_vector_tables()

            self.initialized = True
            logger.info(
                "✅ modern_stack Cortex service initialized successfully with optimized connection manager"
            )

        except Exception as e:
            logger.error(f"Failed to initialize modern_stack Cortex service: {e}")
            raise

    async def _create_vector_tables(self):
        """Create vector storage tables if they don't exist"""
        for _table_type, table_name in self.vector_tables.items():
            create_query = f"""
            CREATE TABLE IF NOT EXISTS {table_name} (
                id VARCHAR(255) PRIMARY KEY,
                original_text TEXT,
                embedding_vector VECTOR(FLOAT, 768),
                metadata VARIANT,
                source_table VARCHAR(255),
                source_id VARCHAR(255),
                embedding_model VARCHAR(100),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
            )
            """
            try:
                await self.connection_manager.execute_query(create_query)
                logger.info(f"✅ Vector table {table_name} ready")
            except Exception as e:
                logger.error(f"Error creating vector table {table_name}: {e}")

    async def close(self):
        """Close modern_stack connection"""
        # Connection is managed by connection manager
        self.initialized = False
        logger.info("modern_stack Cortex service closed")

    async def get_connection(self):
        """Get the current connection (for backward compatibility)"""
        if not self.initialized:
            await self.initialize()
        return self.connection_manager

    async def execute_query(self, query: str, params: tuple | None = None) -> Any:
        """Execute a query using the connection manager.

        Returns whatever the underlying connection manager returns (often
        `AsyncCursor` or iterable of rows).  We use `Any` for broader
        compatibility across different DB back-ends.
        """
        if not self.initialized:
            await self.initialize()
        return await self.connection_manager.execute_query(query, params)
