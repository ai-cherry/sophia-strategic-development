{
  "timestamp": "2025-07-07T20:15:38.331335",
  "modules": {
    "enhanced_sentiment_startup.py": [
      "asynccontextmanager",
      "FastAPI,",
      "typing",
      "contextlib",
      "uvicorn",
      "os",
      "Any",
      "logging",
      "fastapi.middleware.cors",
      "fastapi",
      "asyncio",
      "CORSMiddleware"
    ],
    "enhanced_startup.py": [
      "asynccontextmanager",
      "FastAPI,",
      "typing",
      "contextlib",
      "backend.services.enhanced_sentiment_analyzer",
      "uvicorn",
      "environment",
      "os",
      "Any",
      "logging",
      "fastapi.middleware.cors",
      "fastapi",
      "asyncio",
      "sys",
      "(",
      "CORSMiddleware"
    ],
    "enhanced_coding_workflow_integration.py": [
      "typing",
      "external",
      "Sophia",
      "issue",
      "subprocess",
      "Any",
      "{platform}:",
      "argparse",
      "logging",
      "pathlib",
      "Path",
      "UI/UX",
      "asyncio",
      "json",
      "requests",
      "GitHub"
    ],
    "estuary_advanced_integration.py": [
      "subprocess",
      "os",
      "get_config_value",
      "backend.core.auto_esc_config",
      "logging",
      "datetime",
      "yaml",
      "json"
    ],
    "example_enhanced_workflow.py": [
      "asyncio",
      "subprocess",
      "json"
    ],
    "example_unified_mcp_server.py": [
      "backend.mcp_servers.base.unified_mcp_base",
      "typing",
      "Any",
      "asyncio",
      "("
    ],
    "execute_strategic_plan.py": [
      "execute_strategic_plan",
      "typing",
      "StrategicPlanExecutor",
      "subprocess",
      "backend.core.config_manager;",
      "logging",
      "pathlib",
      "organization",
      "traceback",
      "Path",
      "datetime",
      "Dict,",
      "snowflake.connector",
      "asyncio",
      "sys",
      "json",
      "pytest"
    ],
    "final_environment_verification.py": [
      "get_snowflake_config",
      "OptimizedConnectionManager",
      "backend.core.optimized_connection_manager",
      "os",
      "backend.core.snowflake_config_override",
      "backend.core.auto_esc_config",
      "logging",
      "asyncio",
      "sys",
      "("
    ],
    "final_snowflake_fix.py": [
      "get_snowflake_connection_params\",",
      "insert_idx",
      "is",
      "os",
      "subprocess",
      "Path",
      "backend.core.snowflake_override",
      "re",
      "after",
      "pathlib",
      "get_snowflake_connection_params",
      "backend.core.\")",
      "get_snowflake_connection_params\"",
      "sys"
    ],
    "fix_alignment_issues.py": [
      "backend.core.auto_esc_config",
      "logging",
      "snowflake.connector",
      "datetime",
      "get_config_value"
    ],
    "fix_imports.py": [
      "found",
      "__future__",
      "future_import_line",
      "lines.pop(future_import_index)",
      "annotations\":",
      "os",
      "annotations'"
    ],
    "performance_analysis.py": [
      "ast",
      "collections",
      "defaultdict",
      "Any",
      "pathlib",
      "Path",
      "typing"
    ],
    "refactor_long_functions.py": [
      "ast",
      "os",
      "dataclasses",
      "logging",
      "re",
      "dataclass"
    ],
    "fix_connection_manager.py": [
      "override"
    ],
    "fix_critical_startup_issues.py": [
      "issue\"\"\"",
      "issue...\")",
      "failed:",
      "successful\")",
      "ModuleType",
      "SemanticLayerService",
      "os",
      "logging",
      "pathlib",
      "types",
      "snowflake.connector",
      "Path",
      "backend.services.semantic_layer_service",
      "asyncio",
      "sys",
      "errors"
    ],
    "fix_snowflake_codewide.py": [
      "\"):",
      "if",
      "os",
      "backend.core.snowflake_config_override",
      "apply_startup_configuration\"",
      "logging",
      "and",
      "backend.core.auto_esc_config",
      "override",
      "lines.insert(",
      "at",
      "ESC",
      "pathlib",
      "after",
      "line",
      "get_snowflake_connection_params",
      "backend.core.startup_config",
      "backend.core.\")",
      "apply_startup_configuration",
      "asyncio",
      "get_snowflake_connection_params\",",
      "startup",
      "-",
      "\")",
      "backend.core.snowflake_override",
      "re",
      "Pulumi",
      "2.",
      "uvicorn",
      "apply_startup_configuration\",",
      "Path",
      "get_snowflake_connection_params\"",
      "get_config_value"
    ],
    "fix_pulumi_esc_structure_mismatch.py": [
      "get_config_value",
      "backend.core.auto_esc_config",
      "subprocess",
      "re"
    ],
    "fix_snowflake_connection_final.py": [
      "backend.core.optimized_connection_manager",
      "backend.core.snowflake_config_override",
      "os",
      "logging",
      "asyncio",
      "sys",
      "("
    ],
    "github_organization_comprehensive_analysis.py": [
      "config",
      "logging",
      "datetime",
      "json",
      "GitHub"
    ],
    "simple_startup.py": [
      "asynccontextmanager",
      "FastAPI,",
      "typing",
      "contextlib",
      "backend.services.enhanced_sentiment_analyzer",
      "uvicorn",
      "environment",
      "os",
      "Any",
      "logging",
      "fastapi.middleware.cors",
      "fastapi",
      "asyncio",
      "(",
      "CORSMiddleware"
    ],
    "implement_phase1a_foundation.py": [
      "backend.\")",
      "os",
      "time",
      "apply_startup_configuration\"",
      "dataclass,",
      "get_config_value",
      "mcp_registry",
      "logging",
      "backend.core.auto_esc_config",
      "datetime",
      "typing",
      "OptimizedConnectionManager",
      "SophiaMCPServer,",
      "abc",
      "at",
      "backend.mcp_servers.mcp_registry",
      "pathlib",
      "mcp.types",
      "lines",
      "backend.core.startup_config",
      "asyncio",
      "dataclass",
      "sys",
      "ABC,",
      "startup",
      "TextContent,",
      "Server,",
      "Pulumi",
      "backend.core.optimized_connection_manager",
      "subprocess",
      "dataclasses",
      "Dict,",
      "mcp",
      "Path",
      ".sophia_mcp_base",
      "Any,"
    ],
    "implement_phase1b_services.py": [
      "for",
      "backend.\")",
      "mcp_servers.notion.notion_mcp_server",
      "os",
      "get_config_value",
      "slack_server",
      "logging",
      "backend.core.auto_esc_config",
      "snowflake_server",
      "hubspot_server",
      "datetime",
      "mcp_servers.github.github_mcp_server",
      "typing",
      "at",
      "github_server",
      "mcp_servers.hubspot.hubspot_mcp_server",
      "pathlib",
      "mcp.types",
      "get_snowflake_connection_params",
      "asyncio",
      "sys",
      "get_snowflake_connection_params\",",
      "{service_name}_server\")",
      "TextContent,",
      "notion_server",
      "Server,",
      "mcp_servers.snowflake.snowflake_mcp_server",
      "backend.core.snowflake_override",
      "json",
      "OptimizedConnectionManager,",
      "backend.core.optimized_connection_manager",
      "mcp_servers.slack.slack_mcp_server",
      "exec(f\"from",
      "mcp",
      "Path",
      "get_snowflake_connection_params\"",
      "Any,"
    ],
    "implement_phase2a_advanced.py": [
      "os",
      "dataclass,",
      "logging",
      "backend.core.auto_esc_config",
      "backend.mcp_servers.mcp_health",
      "datetime",
      "typing",
      "health_monitor",
      "pathlib",
      "get_snowflake_connection_params",
      "mcp_auth",
      "asyncio",
      "sys",
      "backend.core.snowflake_override",
      "Pulumi",
      "json",
      "subprocess",
      "dataclasses",
      "Dict,",
      "backend.mcp_servers.mcp_auth",
      "Path",
      "datetime,",
      "get_config_value"
    ],
    "github_integration_strategy.py": [
      "subprocess",
      "os",
      "logging",
      "pathlib",
      "URL",
      "Path",
      "datetime",
      "unsafe",
      "datetime,",
      "git",
      "sys",
      "json",
      "requests"
    ],
    "implement_tier1_mcp_repositories.py": [
      "subprocess",
      "logging",
      "pathlib",
      "Pulumi",
      "Path",
      "asyncio",
      "sys"
    ],
    "sophia_workflow_runner.py": [
      "subprocess",
      "pathlib",
      "Path",
      "asyncio",
      "sys",
      "json"
    ],
    "main.py": [],
    "test_sales_modules_only.py": [
      "os",
      "traceback",
      "from",
      "sys",
      "("
    ],
    "start_enhanced_mcp_servers.py": [
      "os",
      "time",
      "logging",
      "backend.core.auto_esc_config",
      "web",
      "pathlib",
      "codacy_server",
      "aiohttp",
      "asyncio",
      "sys",
      "backend.mcp.ai_memory_mcp_server",
      "enhanced_ai_memory_server",
      "(",
      "subprocess",
      "mcp_servers.codacy.codacy_mcp_server",
      "fails",
      "Path",
      "get_config_value",
      "backend.mcp.ai_memory_auto_discovery"
    ],
    "test_refactoring.py": [
      "SnowflakeCortexService",
      "os",
      "#",
      "return",
      "backend.utils.snowflake_cortex_service",
      "sys",
      "("
    ],
    "start_sophia_live.py": [
      "sophia-main",
      "signal",
      "subprocess",
      "os",
      "time",
      "logging",
      "pathlib",
      "Path",
      "sys"
    ],
    "sophia_ecosystem_diagnostic.py": [
      "subprocess",
      "os",
      "Any",
      "logging",
      "datetime",
      "typing",
      "json",
      "socket"
    ],
    "start_mcp_services.py": [
      "notion_server",
      "github_server",
      "mcp_servers.notion.notion_mcp_server",
      "hubspot_server",
      "mcp_servers.snowflake.snowflake_mcp_server",
      "mcp_servers.hubspot.hubspot_mcp_server",
      "mcp_servers.slack.slack_mcp_server",
      "slack_server",
      "logging",
      "pathlib",
      "snowflake_server",
      "Path",
      "mcp_servers.github.github_mcp_server",
      "asyncio",
      "sys"
    ],
    "test_sales_agent_refactoring.py": [
      "os",
      "#",
      "return",
      "backend.agents.specialized.sales_intelligence_agent",
      "traceback",
      "backend.agents.specialized.sales_intelligence_agent_models",
      "backend.agents.specialized.sales_intelligence_agent_utils",
      "sys",
      "("
    ],
    "unified_ai_assistant.py": [
      "subprocess",
      "query\"\"\"",
      "shlex",
      "asyncio",
      "sys",
      "requests"
    ],
    "sophia_prompt_manager.py": [
      "argparse",
      "pathlib",
      "json",
      "Path"
    ],
    "start_sophia_enhanced.py": [
      "psutil",
      "signal",
      "subprocess",
      "os",
      "time",
      "logging",
      "pathlib",
      "Path",
      "sys",
      "requests"
    ],
    "start_sophia_absolute_fix.py": [
      "uvicorn",
      "os",
      "pathlib",
      "get_snowflake_connection_params",
      "Path",
      "backend.core.absolute_snowflake_override",
      "sys"
    ],
    "test_sales_simple.py": [
      "os",
      "#",
      "return",
      "traceback",
      "backend.agents.specialized.sales_intelligence_agent_models",
      "backend.agents.specialized.sales_intelligence_agent_utils",
      "sys",
      "("
    ],
    "setup_enhanced_coding_workflow.py": [
      "'axios';",
      "subprocess",
      "os",
      "'vscode';",
      "axios",
      "argparse",
      "pathlib",
      "*",
      "Path",
      "asyncio",
      "sys",
      "json"
    ],
    "simple_test.py": [
      "os",
      "#",
      "traceback",
      "from",
      "sys",
      "("
    ],
    "simple_validation_fix.py": [
      "subprocess",
      "structures",
      "logging",
      "pathlib",
      "Path",
      "datetime",
      "json",
      "GitHub"
    ],
    "snowflake_advanced_features_implementation.py": [
      "backend.core.auto_esc_config",
      "logging",
      "get_config_value",
      "snowflake.connector"
    ],
    "start_sophia_complete.py": [
      "uvicorn",
      "fastapi.responses",
      "signal",
      "subprocess",
      "os",
      "time",
      "JSONResponse",
      "FastAPI",
      "pathlib",
      "Path",
      "datetime",
      "fastapi",
      "asyncio",
      "sys",
      "aiohttp",
      "socket"
    ],
    "test_startup.py": [
      "traceback",
      "sys",
      "os"
    ],
    "lambda_labs_access_and_config.py": [
      "sys",
      "os",
      "dataclasses",
      "various",
      "get_config_value",
      "backend.core.auto_esc_config",
      "common",
      "dataclass",
      "json",
      "requests"
    ],
    "start_mcp_servers.py": [
      "web,",
      "signal",
      "subprocess",
      "os",
      "time",
      "json",
      "backend.core.auto_esc_config",
      "pathlib",
      "aiohttp",
      "logging",
      "Path",
      "datetime",
      "asyncio",
      "sys",
      "get_config_value",
      "requests"
    ],
    "start_sophia_fixed.py": [
      "subprocess",
      "os",
      "pathlib",
      "backend.core.snowflake_override",
      "get_snowflake_connection_params",
      "Path",
      "sys"
    ],
    "configure_dns.py": [
      "subprocess",
      "os",
      "time",
      "json",
      "requests"
    ],
    "launch_production_cluster.py": [
      "subprocess",
      "os",
      "time",
      "datetime",
      "json"
    ],
    "unified_ai_coding_assistant.py": [
      "typing",
      "httpx",
      "subprocess",
      "os",
      "Any",
      "logging",
      "datetime",
      "asyncio",
      "sys",
      "natural"
    ],
    "verify_complete_secrets_sync.py": [
      "subprocess",
      "backend.core.auto_esc_config",
      "shlex",
      "asyncio",
      "sys",
      "get_config_value"
    ],
    "complete_snowflake_setup.py": [
      "successful",
      "logging",
      "json",
      "snowflake.connector"
    ],
    "comprehensive_alignment_analysis_and_fix.py": [
      "os",
      "Any",
      "Estuary",
      "backend.core.auto_esc_config",
      "logging",
      "business",
      "snowflake.connector",
      "datetime",
      "typing",
      "get_config_value"
    ],
    "comprehensive_codebase_alignment.py": [
      "config",
      "json",
      "os",
      "shutil"
    ],
    "comprehensive_infrastructure_audit.py": [
      "(",
      "both",
      "try:",
      "dataclass",
      "get_snowflake_config",
      "subprocess",
      "os",
      "dataclasses",
      "Any",
      "backend.core.auto_esc_config",
      "datetime",
      "backend.core.absolute_snowflake_override",
      "typing",
      "sys",
      "json",
      "errors"
    ],
    "cortex_agents_advanced_implementation.py": [
      "backend.core.auto_esc_config",
      "logging",
      "Gong",
      "snowflake.connector",
      "get_config_value"
    ],
    "create_forks.py": [
      "requests",
      "git",
      "subprocess",
      "time"
    ],
    "create_pull_request.py": [],
    "create_snowflake_status_report.py": [
      "get_snowflake_config",
      "backend.core.optimized_connection_manager",
      "backend.core.auto_esc_config",
      "logging",
      "asyncio",
      "OptimizedConnectionManager"
    ],
    "demo_enhanced_mcp_integration.py": [
      "functools",
      "secrets",
      "wraps",
      "hashlib",
      "logging",
      "datetime",
      "asyncio",
      "aiohttp"
    ],
    "deploy_complete_platform.py": [
      "typing",
      "subprocess",
      "UTC,",
      "os",
      "Any",
      "backend.core.auto_esc_config",
      "logging",
      "snowflake.connector",
      "datetime",
      "asyncio",
      "json",
      "get_config_value"
    ],
    "deploy_complete_platform_uv.py": [
      "subprocess",
      "os",
      "pathlib",
      "snowflake.connector",
      "Path",
      "datetime",
      "asyncio",
      "sys",
      "json"
    ],
    "deploy_comprehensive_upgrade.py": [
      "backend.integrations.advanced_estuary_flow_manager",
      "(",
      "subprocess",
      "shutil",
      "argparse",
      "get_config_value",
      "logging",
      "pathlib",
      "backend.core.auto_esc_config",
      "Path",
      "datetime",
      "asyncio",
      "sys",
      "json",
      "backend.services.enhanced_cortex_agent_service"
    ],
    "deploy_estuary_foundation.py": [
      "(",
      "backend.integrations.estuary_flow_manager",
      "os",
      "backend.core.auto_esc_config",
      "logging",
      "pathlib",
      "Path",
      "yaml",
      "sys",
      "get_config_value"
    ],
    "deploy_estuary_foundation_corrected.py": [
      "subprocess",
      "os",
      "backend.core.auto_esc_config",
      "logging",
      "pathlib",
      "Path",
      "yaml",
      "get_config_value"
    ],
    "deploy_mcp_servers.py": [
      "contextlib",
      "subprocess",
      "os",
      "time",
      "logging",
      "pathlib",
      "Path",
      "sys",
      "requests"
    ],
    "deploy_snowflake_stability_simple.py": [
      "backend.core.auto_esc_config",
      "logging",
      "snowflake.connector",
      "dependencies",
      "sys",
      "get_config_value"
    ],
    "deploy_with_uv.py": [
      "subprocess"
    ],
    "load_github_secrets.py": [
      "ESC\")",
      "local",
      "all",
      "multiple",
      "subprocess",
      "os",
      "ESC",
      "logging",
      "Pulumi",
      "environment\")",
      "json",
      "GitHub"
    ],
    "load_github_secrets_permanently.py": [
      "subprocess",
      "os",
      "Any",
      "logging",
      "Pulumi",
      "GitHub\")",
      "typing",
      "json",
      "GitHub"
    ],
    "api/index.py": [
      "FastAPI,",
      "BaseModel",
      "pydantic",
      "the",
      "fastapi.middleware.cors",
      "datetime",
      "fastapi",
      "CORSMiddleware"
    ],
    "backend/test_unified_server.py": [
      "uvicorn",
      "FastAPI",
      "fastapi.middleware.cors",
      "fastapi",
      "CORSMiddleware"
    ],
    "backend/__init__.py": [],
    "backend/fastapi_main.py": [
      "backend.api.lambda_labs_health_routes",
      "router",
      "backend.services.unified_chat_service",
      "logging",
      "datetime",
      "typing",
      "backend.api.ai_memory_health_routes",
      "backend.api.deployment_status_routes",
      "fastapi.middleware.cors",
      "UnifiedChatService",
      "fastapi",
      "CORSMiddleware",
      "FastAPI,",
      "the",
      "(",
      "fastapi.responses",
      "backend.api.unified_health_routes",
      "BaseModel",
      "uvicorn",
      "StreamingResponse",
      "pydantic",
      "Any,"
    ],
    "claude-cli-integration/claude_cli.py": [
      "typing",
      "os",
      "Any",
      "argparse",
      "logging",
      "pathlib",
      "aiohttp",
      "MCP",
      "Path",
      "asyncio",
      "json"
    ],
    "claude-cli-integration/setup_claude_api.py": [
      "subprocess",
      "os",
      "pathlib",
      "Path",
      "environment\"\"\""
    ],
    "gemini-cli-integration/gemini_cli_provider.py": [
      "typing",
      "{url}",
      "subprocess",
      "UTC,",
      "os",
      "Any",
      "logging",
      "datetime",
      "asyncio",
      "json"
    ],
    "gemini-cli-integration/gemini_mcp_integration.py": [
      "{self.config_path}\")",
      "contextlib",
      "os",
      "time",
      "logging",
      "configuration.\"\"\"",
      "typing",
      "Any",
      "pathlib",
      "asyncio",
      "dataclass",
      "Enum",
      "psutil",
      "JSON",
      "json",
      "environment",
      "subprocess",
      "dataclasses",
      "enum",
      "argparse",
      "Path",
      "aiohttp"
    ],
    "gong-webhook-service/main.py": [
      "FastAPI,",
      "JSONResponse,",
      "uvicorn",
      "environment",
      "os",
      "{request.client.host}\")",
      "logging",
      "datetime",
      "fastapi",
      "UTC,",
      "fastapi.responses"
    ],
    "implementation_scripts/setup_forks.py": [
      "os",
      "requests"
    ],
    "infrastructure/__init__.py": [
      ".agents.orchestrator",
      ".agents.bi_deployer",
      "InfrastructureOrchestrator",
      "BusinessIntelligenceDeployer",
      "SecretComplianceManager",
      ".agents.enhanced_sophia_agent",
      "EnhancedSophiaIntelligenceAgent",
      ".agents.secret_manager"
    ],
    "infrastructure/enhanced_lambda_labs_provisioner.py": [
      "Any,",
      "typing",
      "master",
      "master\"\"\"",
      "subprocess",
      "os",
      "time",
      "dataclasses",
      "get_config_value",
      "logging",
      "backend.core.auto_esc_config",
      "tempfile",
      "asyncio",
      "dataclass",
      "json",
      "requests",
      "failed"
    ],
    "infrastructure/index.py": [
      "pulumi"
    ],
    "infrastructure/lambda-labs-deployment.py": [
      "redis",
      "flask",
      "subprocess",
      "Any",
      "dataclasses",
      "time",
      "json",
      "os",
      "setup",
      "logging",
      "backend.core.auto_esc_config",
      "psycopg2",
      "tempfile",
      "Flask,",
      "typing",
      "dataclass",
      "get_config_value",
      "requests"
    ],
    "infrastructure/lambda-labs-integration.py": [
      "LambdaLabsConfig,",
      "urllib.parse",
      "os",
      "lambda_labs_provisioner",
      "get_config_value",
      "logging",
      "backend.core.auto_esc_config",
      "aiohttp",
      "datetime",
      "asyncio",
      "sys",
      "json"
    ],
    "infrastructure/migrate_service_registry.py": [
      "__future__",
      "annotations",
      "Any",
      "pathlib",
      "``path``",
      "Path",
      "typing",
      "json"
    ],
    "infrastructure/pulumi-esc-comprehensive-update.py": [
      "subprocess",
      "Any",
      "ai-cherry",
      "logging",
      "typing",
      "sys",
      "GitHub"
    ],
    "infrastructure/pulumi-esc-update.py": [
      "subprocess",
      "Any",
      "os",
      "logging",
      "tempfile",
      "typing",
      "GitHub"
    ],
    "mcp-servers/__init__.py": [],
    "mcp-servers/health_check.py": [
      "datetime",
      "asyncio",
      "aiohttp"
    ],
    "n8n-integration/enhanced_n8n_cli_manager.py": [
      "typing",
      "BaseModel",
      "httpx",
      "pydantic",
      "failed:",
      "{import_dir}...\")",
      "subprocess",
      "Any",
      "logging",
      "pathlib",
      "Path",
      "datetime",
      "asyncio",
      "sys",
      "json"
    ],
    "n8n-integration/n8n_mcp_gateway.py": [
      "FastMCP",
      "uvicorn",
      "user",
      "httpx",
      "logging",
      "pathlib",
      "FastAPI",
      "backend.mcp_servers.server.fastmcp",
      "Path",
      "the",
      "fastapi",
      "asyncio",
      "sys"
    ],
    "patches/snowflake_test_util_fix.py": [
      "errors"
    ],
    "scripts/activate_performance_optimizations.py": [
      "time",
      "deploy_redis_for_sophia_ai",
      "logging",
      "typing",
      "Any",
      "pathlib",
      "asyncio",
      "sys",
      "psutil",
      "connection_manager",
      "backend.core.integrated_performance_monitoring",
      "track_metric",
      "(",
      "json",
      "backend.core.optimized_connection_manager",
      "backend.core.optimized_cache",
      "Path",
      "optimized_cache",
      "scripts.deploy_redis_infrastructure"
    ],
    "scripts/activate_sophia_production.py": [
      "subprocess",
      "time",
      "logging",
      "pathlib",
      "Path",
      "asyncio",
      "sys",
      "json",
      "requests"
    ],
    "scripts/add_type_annotations.py": [
      "ast",
      "Path\")",
      "astor",
      "\")",
      "logging",
      "pathlib",
      "Dict,",
      "Path",
      "\"))",
      "typing",
      "json"
    ],
    "scripts/ai_analyze_salesforce_data.py": [
      "failures\",",
      "Any",
      "logging",
      "pathlib",
      "Path",
      "datetime",
      "typing",
      "sys",
      "json"
    ],
    "scripts/ai_memory_code_quality_analyzer.py": [
      "os",
      "dataclass,",
      "datetime",
      "typing",
      "patterns",
      "analyze",
      "pathlib",
      "sys",
      "radon.complexity",
      "radon.metrics",
      "re",
      "json",
      "ast",
      "subprocess",
      "dataclasses",
      "argparse",
      "radon.raw",
      "Path",
      "Any,"
    ],
    "scripts/analyze_entire_codebase_with_codacy.py": [
      "rich.progress",
      "typing",
      "os",
      "Any",
      "rich.table",
      "Console",
      "dirs",
      "Table",
      "pathlib",
      "aiohttp",
      "BarColumn,",
      "Path",
      "datetime",
      "asyncio",
      "json",
      "rich.console"
    ],
    "scripts/analyze_knowledge_gaps.py": [
      "backend.utils.snowflake_connector",
      "SnowflakeConnector",
      "#",
      "logging",
      "datetime",
      "asyncio"
    ],
    "scripts/analyze_technical_debt.py": [
      "asdict,",
      "subprocess",
      "os",
      "dataclasses",
      "Any",
      "logging",
      "pathlib",
      "re",
      "Path",
      "datetime",
      "datetime,",
      "typing",
      "complexity",
      "json"
    ],
    "scripts/archive_obsolete_docs.py": [
      "datetime",
      "os",
      "shutil"
    ],
    "scripts/assess_all_mcp_servers.py": [
      "consolidated",
      "ast",
      "typing",
      "asdict,",
      "typing\"",
      "time",
      "dataclasses",
      "logging",
      "pathlib",
      "aiohttp",
      "and",
      "Path",
      "datetime",
      "immediate",
      "asyncio",
      "json",
      "="
    ],
    "scripts/audit_secret_usage.py": [
      "collections",
      "defaultdict",
      "pathlib",
      "re",
      "Path",
      "json"
    ],
    "scripts/automated_system_validation.py": [
      "datetime",
      "asyncio",
      "json"
    ],
    "scripts/check_internal_service_health.py": [
      "datetime",
      "asyncio",
      "logging",
      "httpx"
    ],
    "scripts/comprehensive_archive_cleanup.py": [
      "subprocess",
      "os",
      "shutil",
      "Path",
      "argparse",
      "references",
      "pathlib",
      "Dict,",
      "Sophia",
      "datetime",
      "typing",
      "sys",
      "json"
    ],
    "scripts/comprehensive_dockcloud_cleanup.py": [
      "Docker",
      "os",
      "dataclasses",
      "shutil",
      "argparse",
      "logging",
      "pathlib",
      "re",
      "Path",
      "datetime",
      "dataclass",
      "json"
    ],
    "scripts/comprehensive_linting_remediation.py": [
      "functools",
      "get_config_value\"",
      "subprocess",
      "os",
      "backend\\.core\\.cache_manager",
      "cached_property\"",
      "if",
      "with",
      "in",
      "line",
      "re",
      "lru_cache\",",
      "backend.core.auto_esc_config",
      "\",",
      "\"))",
      "CacheManager\\n\",",
      "get_config_value\",",
      "="
    ],
    "scripts/comprehensive_secret_codebase_update.py": [
      "already",
      "or",
      "at",
      "get_config_value\"",
      "updates",
      "if",
      "logging",
      "pathlib",
      "re",
      "backend.core.auto_esc_config",
      "Path",
      "datetime",
      "updates\"\"\""
    ],
    "scripts/consolidate_documentation.py": [
      "existing",
      "{doc['name']})\\n\\n\"",
      "documentation",
      "shutil",
      "9020",
      "other",
      "logging",
      "pathlib",
      "re",
      "source",
      "Path",
      "datetime"
    ],
    "scripts/dns-manager.py": [
      "dataclass",
      "subprocess",
      "os",
      "dataclasses",
      "argparse",
      "xml.etree.ElementTree",
      "Pulumi",
      "requests",
      "asyncio",
      "sys",
      "json",
      "socket"
    ],
    "scripts/enhance_ai_memory_mcp.py": [
      "typing",
      "stored",
      "memory",
      "Any",
      "time",
      "patterns",
      "logging",
      "datetime",
      "asyncio",
      "sys",
      "aiohttp"
    ],
    "scripts/expand_strategic_repositories.py": [
      "subprocess",
      "logging",
      "pathlib",
      "Path",
      "datetime",
      "sys",
      "json"
    ],
    "scripts/generate_orchestration_research_report.py": [
      "os",
      "backend.agents.research.orchestration_research_agent",
      "asyncio",
      "json",
      "("
    ],
    "scripts/ingest_costar_data.py": [
      "data",
      "{file_path.name}\")",
      "{args.directory}\")",
      "__future__",
      "annotations",
      "operations",
      "argparse",
      "{file_path.name}\"",
      "logging",
      "pathlib",
      "pandas",
      "traceback",
      "Path",
      "asyncio",
      "sys",
      "CoStarImportResult,",
      "backend.mcp.costar_mcp_server"
    ],
    "scripts/advanced_architecture_implementation.py": [
      "logging",
      "pathlib",
      "Path",
      "datetime",
      "yaml",
      "asyncio",
      "json"
    ],
    "scripts/ai_enhanced_dns_manager.py": [
      "typing",
      "backend.integrations.redis_service",
      "RedisService",
      "Any",
      "SophiaDNSManager",
      "random",
      "pathlib",
      "backend.agents.infrastructure.sophia_infrastructure_agent",
      "Path",
      "datetime",
      "asyncio",
      "sys",
      "(",
      "scripts.dns_manager"
    ],
    "scripts/analyze_documentation_chaos.py": [
      "collections",
      "defaultdict",
      "os",
      "shutil",
      "re",
      "datetime"
    ],
    "scripts/analyze_external_repositories.py": [
      "argparse",
      "logging",
      "pathlib",
      "the",
      "Path"
    ],
    "scripts/analyze_snowflake_config.py": [
      "datetime",
      "logging",
      "snowflake.connector"
    ],
    "scripts/archive_legacy_docker_files.py": [
      "os",
      "shutil",
      "logging",
      "pathlib",
      "Path",
      "datetime"
    ],
    "scripts/archive_remaining_docs.py": [
      "datetime",
      "os",
      "shutil"
    ],
    "scripts/assess_core_infrastructure.py": [
      "subprocess",
      "get_config_value",
      "logging",
      "pathlib",
      "aiohttp",
      "backend.core.auto_esc_config",
      "Path",
      "snowflake.connector",
      "config,",
      "asyncio",
      "sys",
      "json"
    ],
    "scripts/automated_maintenance_system.py": [
      "subprocess",
      "time",
      "argparse",
      "logging",
      "pathlib",
      "Dict,",
      "Path",
      "datetime",
      "datetime,",
      "typing",
      "sys",
      "json"
    ],
    "scripts/automated_webhook_manager.py": [
      "typing",
      "os",
      "Any",
      "get_config_value",
      "backend.core.auto_esc_config",
      "pathlib",
      "Path",
      "datetime",
      "asyncio",
      "json"
    ],
    "scripts/check_deployment_status.py": [
      "typing",
      "subprocess",
      "Any",
      "time",
      "aiohttp",
      "datetime",
      "asyncio",
      "json"
    ],
    "scripts/check_syntax_status.py": [
      "pathlib",
      "json",
      "validation",
      "Path"
    ],
    "scripts/codebase_audit.py": [
      "code\"\"\"",
      "collections",
      "defaultdict",
      "pathlib",
      "re",
      "Path",
      "datetime",
      "json"
    ],
    "scripts/comprehensive_dependency_audit.py": [
      "path",
      "graph",
      "importlib.util",
      "os",
      "typing",
      "a",
      "Any",
      "pathlib",
      "that",
      "sys",
      "to",
      "re",
      "json",
      "dependency",
      "=",
      "ast",
      "collections",
      "defaultdict",
      "details",
      "is",
      "dependencies\"\"\"",
      "Path"
    ],
    "scripts/comprehensive_lambda_labs_validation.py": [
      "subprocess",
      "os",
      "time",
      "datetime",
      "sys",
      "json",
      "requests"
    ],
    "scripts/comprehensive_monitoring.py": [
      "typing",
      "datetime",
      "Any",
      "time",
      "statistics",
      "asyncio",
      "requests"
    ],
    "scripts/consolidate_backend_structure.py": [
      "26",
      "current",
      "os",
      "shutil"
    ],
    "scripts/critical_security_remediation.py": [
      "os\\n\"",
      "shlex\\n\"",
      "if",
      "Any",
      "os\"",
      "argparse",
      "logging",
      "pathlib",
      "re",
      "Path",
      "shlex\"",
      "typing",
      "sys"
    ],
    "scripts/deployment_validation_pipeline.py": [
      "subprocess",
      "argparse",
      "backend.core.auto_esc_config",
      "pathlib",
      "Path",
      "sys",
      "get_config_value"
    ],
    "scripts/documentation_enhancer.py": [
      "markdown",
      "first",
      "logging",
      "pathlib",
      "re",
      "file",
      "Path",
      "datetime",
      "content",
      "json"
    ],
    "scripts/enhanced_batch_embed_data.py": [
      "(",
      "SnowflakeCortexService",
      "typing",
      "config,",
      "Any",
      "dataclasses",
      "backend.core.sql_security_validator",
      "logging",
      "backend.core.auto_esc_config",
      "snowflake.connector",
      "backend.utils.snowflake_cortex_service",
      "asyncio",
      "dataclass",
      "get_config_value"
    ],
    "scripts/generate_dev_insights.py": [
      "analysis",
      "Any",
      "argparse",
      "logging",
      "pathlib",
      "file\"\"\"",
      "code\",",
      "Path",
      "datetime",
      "typing",
      "sys",
      "json"
    ],
    "scripts/identify_existing_error_files.py": [
      "pathlib",
      "json",
      "the",
      "Path"
    ],
    "scripts/k3s_migration_analyzer.py": [
      "backup\",",
      "subprocess",
      "os",
      "efficiency",
      "Dict,",
      "datetime",
      "yaml",
      "typing",
      "json",
      "requests"
    ],
    "scripts/find_all_llm_files_to_migrate.py": [
      "re",
      "pathlib",
      "os",
      "Path"
    ],
    "scripts/github_actions_consolidation.py": [
      "asdict,",
      "collections",
      "defaultdict",
      "dataclasses",
      "25+",
      "pathlib",
      "re",
      "Path",
      "yaml",
      "json"
    ],
    "scripts/automated_platform_integration.py": [
      "pathlib",
      "asyncio",
      "sys",
      "Path"
    ],
    "scripts/build_all_mcp_images.py": [
      "subprocess",
      "time",
      "argparse",
      "FastAPI'",
      "pathlib",
      "Dict,",
      "Path",
      "fastapi",
      "typing",
      "sys",
      "json",
      "concurrent.futures",
      "mcp'"
    ],
    "scripts/check_function_length.py": [
      "ast",
      "dataclass",
      "os",
      "dataclasses",
      "argparse",
      "sys"
    ],
    "scripts/clean_pyproject_dependencies.py": [
      "pyproject.toml",
      "last",
      "logging",
      "re"
    ],
    "scripts/comprehensive_code_remediation.py": [
      "shlex\",",
      "\"))",
      "sys",
      "subprocess",
      "dataclasses",
      "gc\",",
      "logging",
      "pathlib",
      "backend.core.auto_esc_config",
      "get_config_value\",",
      "Path",
      "datetime",
      "datetime\",",
      "\",",
      "dataclass"
    ],
    "scripts/comprehensive_documentation_update.py": [
      "$15,156)",
      "36+",
      "pathlib",
      "re",
      "9",
      "Path",
      "datetime",
      "9)"
    ],
    "scripts/comprehensive_mcp_debug_final.py": [
      "typing",
      "subprocess",
      "os",
      "time",
      "Any",
      "logging",
      "pathlib",
      "aiohttp",
      "\",",
      "Path",
      "datetime",
      "\"))",
      "server",
      "asyncio",
      "json"
    ],
    "scripts/comprehensive_syntax_scanner.py": [
      "ast",
      "subprocess",
      "Any",
      "logging",
      "pathlib",
      "Path",
      "datetime",
      "yaml",
      "typing",
      "sys",
      "json"
    ],
    "scripts/create_docker_swarm_secrets.py": [
      "subprocess",
      "argparse",
      "pathlib",
      "Dict,",
      "Pulumi",
      "Path",
      "the",
      "typing",
      "sys",
      "json"
    ],
    "scripts/deploy_production_complete.py": [
      "typing",
      "subprocess",
      "os",
      "time",
      "logging",
      "pathlib",
      "Dict,",
      "Path",
      "datetime",
      "asyncio",
      "sys",
      "json"
    ],
    "scripts/docker_deployment_consolidation_plan.py": [
      "asdict,",
      "Optional",
      "subprocess",
      "dataclasses",
      "shutil",
      "argparse",
      "get_config_value",
      "backend.core.auto_esc_config",
      "pathlib",
      "builder",
      "Path",
      "datetime",
      "yaml",
      "typing",
      "sys",
      "json"
    ],
    "scripts/generate_deployment_report.py": [
      "Any,",
      "subprocess",
      "argparse",
      "datetime",
      "typing",
      "json"
    ],
    "scripts/implement_batch_processing.py": [
      "ast",
      "location",
      "os",
      "logging",
      "pathlib",
      "backend.core.optimized_database_manager",
      "batch",
      "Path",
      "("
    ],
    "scripts/debug_all_mcp_servers.py": [
      "asdict,",
      "Optional",
      "{self.config_path}:",
      "dataclasses",
      "time",
      "argparse",
      "pathlib",
      "Path",
      "datetime",
      "requests",
      "typing",
      "json",
      "concurrent.futures"
    ],
    "scripts/diagnose_gong_webhook.py": [
      "requests",
      "ssl",
      "socket"
    ],
    "scripts/enable_semantic_caching.py": [
      "backend.services.unified_llm_service",
      "get_unified_llm_service",
      "pathlib",
      "Path",
      "datetime",
      "asyncio",
      "json"
    ],
    "scripts/estuary_integration_manager.py": [
      "typing",
      "os",
      "Any",
      "get_config_value",
      "backend.core.auto_esc_config",
      "pathlib",
      "secure",
      "Path",
      "datetime",
      "asyncio",
      "sys",
      "json",
      "requests"
    ],
    "scripts/generate_executive_quality_report.py": [
      "Panel",
      "rich.panel",
      "Any",
      "rich",
      "rich.table",
      "Console",
      "box",
      "Table",
      "pathlib",
      "quality",
      "Path",
      "datetime",
      "typing",
      "json",
      "rich.console"
    ],
    "scripts/infrastructure_modernization_kickoff.py": [
      "production",
      "logging",
      "pathlib",
      "YAML",
      "Path",
      "datetime",
      "asyncio",
      "json"
    ],
    "scripts/comprehensive_health_check.py": [
      "(",
      "typing",
      "AiMemoryMCPServer",
      "UTC,",
      "Any",
      "#",
      "config",
      "argparse",
      "backend.mcp.ai_memory_mcp_server",
      "logging",
      "pathlib",
      "backend.agents.infrastructure.sophia_infrastructure_agent",
      "backend.core.auto_esc_config",
      "Path",
      "datetime",
      "asyncio",
      "sys",
      "json"
    ],
    "scripts/comprehensive_mcp_deep_analysis.py": [
      "this",
      "configuration\\\"\\\"\\\"\\n",
      "collections",
      "dependencies\\\")\\n",
      "Path\\nfrom",
      "subprocess\\nimport",
      "dependencies\\\"\\\"\\\"\\n",
      "ast\\nimport",
      "Dict,",
      "graph\\n",
      "defaultdict\\nfrom",
      "os\\nimport"
    ],
    "scripts/configure_github_organization_security.py": [
      "base64",
      "dataclasses",
      "get_config_value",
      "logging",
      "backend.core.auto_esc_config",
      "dataclass",
      "json",
      "requests"
    ],
    "scripts/cursor_ai_analysis.py": [
      "ast",
      "asdict,",
      "Any",
      "dataclasses",
      "git",
      "argparse",
      "logging",
      "pathlib",
      "Path",
      "datetime",
      "typing",
      "sys",
      "json"
    ],
    "scripts/enhance_mcp_servers.py": [
      "58%",
      "logging",
      "pathlib",
      "Path",
      "datetime",
      "json"
    ],
    "scripts/fix_lambda_labs_ssh_access.py": [
      "subprocess",
      "os",
      "datetime",
      "sys",
      "json"
    ],
    "scripts/github_alignment_optimizer.py": [
      "subprocess",
      "pathlib",
      "Dict,",
      "Path",
      "datetime",
      "typing",
      "sys",
      "json"
    ],
    "scripts/snowflake_alignment_setup.py": [
      "user",
      "Estuary",
      "logging",
      "snowflake.connector",
      "sys",
      "json"
    ],
    "scripts/snowflake_config_manager.py": [
      "typing",
      "contextlib",
      "DictCursor",
      "os",
      "Any",
      "conversation",
      "argparse",
      "get_config_value",
      "backend.core.auto_esc_config",
      "pathlib",
      "snowflake.connector",
      "Path",
      "datetime",
      "secure",
      "asyncio",
      "sys",
      "json",
      "GitHub"
    ],
    "scripts/standardize_mcp_servers.py": [
      "typing",
      "os",
      "configuration",
      "logging",
      "pathlib",
      "aiohttp",
      "Dict,",
      "Path",
      "datetime",
      "asyncio",
      "json"
    ],
    "scripts/start_all_mcp_servers.py": [
      "subprocess",
      "pathlib",
      "Path",
      "asyncio",
      "sys",
      "json",
      "requests"
    ],
    "scripts/start_mcp_servers.py": [
      "subprocess",
      "os",
      "unified",
      "logging",
      "pathlib",
      "Path",
      "asyncio",
      "json"
    ],
    "scripts/start_unified_api.py": [
      "FastAPI,",
      "uvicorn",
      "backend.api.llm_strategy_routes",
      "subprocess",
      "os",
      "router",
      "fastapi.middleware.cors",
      "backend.api.data_flow_routes",
      "logging",
      "pathlib",
      "backend.api.mcp_integration_routes",
      "Path",
      "datetime",
      "fastapi",
      "sys",
      "MCPServerEndpoint",
      "CORSMiddleware"
    ],
    "scripts/sync_mcp_servers.py": [
      "config",
      "pathlib",
      "aiohttp",
      "snowflake.connector",
      "Path",
      "datetime",
      "asyncio",
      "json"
    ],
    "scripts/type_safety_audit.py": [
      "Any,",
      "ast",
      "Any",
      "logging",
      "pathlib",
      "Path",
      "datetime",
      "typing",
      "json"
    ],
    "scripts/unified_deployment_cleanup.py": [
      "os",
      "shutil",
      "pathlib",
      "Path",
      "datetime"
    ],
    "scripts/unified_secret_management_audit.py": [
      "Any,",
      "sync",
      "subprocess",
      "os",
      "workflow",
      "get_config_value",
      "workflow:",
      "backend.core.auto_esc_config",
      "pathlib",
      "re",
      "Path",
      "datetime",
      "typing",
      "sys",
      "json",
      "GitHub"
    ],
    "scripts/update-github-secrets-template.py": [
      "cryptography.hazmat.primitives.asymmetric",
      "padding",
      "cryptography.hazmat.primitives",
      "base64",
      "environment",
      "os",
      "logging",
      "hashes,",
      "requests"
    ],
    "scripts/update_lambda_labs_config.py": [
      "re",
      "subprocess",
      "the",
      "dashboard"
    ],
    "scripts/update_service_optimizations.py": [
      "if",
      "time",
      "logging",
      "\",",
      "backend.core.performance_monitor",
      "typing",
      "Any",
      "snowflake\\.connector\",",
      "connection_manager\",",
      "pathlib",
      "after",
      "asyncio",
      "connection_manager",
      "optimized_cache\",",
      "connection_manager\"",
      "re",
      "\"))",
      "optimized_cache",
      "backend\\.core\\.hierarchical_cache",
      "performance_monitor\"",
      "performance_monitor",
      "backend.core.optimized_connection_manager",
      "backend.core.optimized_cache",
      "section\"\"\"",
      "Path",
      "performance_monitor\","
    ],
    "scripts/uv_conflict_resolution.py": [
      "subprocess",
      "shutil",
      "logging",
      "pathlib",
      "re",
      "Path",
      "datetime",
      "sys"
    ],
    "scripts/validate_lambda_infrastructure.py": [
      "Any,",
      "get_lambda_labs_config",
      "subprocess",
      "os",
      "Lambda",
      "backend.core.auto_esc_config",
      "not",
      "datetime",
      "typing",
      "sys",
      "json",
      "requests"
    ],
    "scripts/vercel_optimization.py": [
      "asdict,",
      "environment",
      "subprocess",
      "os",
      "time",
      "dataclasses",
      "get_config_value",
      "backend.core.auto_esc_config",
      "aiohttp",
      "datetime",
      "asyncio",
      "json"
    ],
    "scripts/large_file_analyzer.py": [
      "dependencies\")",
      "ast",
      "subprocess",
      "os",
      "dataclasses",
      "dataclass,",
      "pathlib",
      "re",
      "Dict,",
      "Path",
      "datetime",
      "line",
      "typing",
      "json"
    ],
    "scripts/launch_ai_server_alternative.py": [
      "requests",
      "time"
    ],
    "scripts/mcp_analysis_simple.py": [],
    "scripts/mcp_ecosystem_validator.py": [
      "dataclass,",
      "time",
      "validation",
      "logging",
      "a",
      "socket",
      "pathlib",
      "asyncio",
      "Enum",
      "psutil",
      "the",
      "json",
      "environment",
      "subprocess",
      "dataclasses",
      "enum",
      "argparse",
      "Path",
      "aiohttp"
    ],
    "scripts/mcp_health_dashboard.py": [
      "typing",
      "all",
      "time",
      "pathlib",
      "Dict,",
      "Path",
      "datetime",
      "asyncio",
      "json"
    ],
    "scripts/mcp_health_monitor.py": [
      "typing",
      "ClientTimeout",
      "argparse",
      "aiohttp",
      "datetime",
      "asyncio",
      "json",
      "Any,"
    ],
    "scripts/mcp_orchestration_audit.py": [
      "Any",
      "Path",
      "argparse",
      "logging",
      "pathlib",
      "glob",
      "datetime",
      "yaml",
      "typing",
      "json"
    ],
    "scripts/mcp_orchestration_optimizer.py": [
      "backend.core.intelligent_llm_router",
      "DevelopmentContextManager",
      "os",
      "datetime",
      "typing",
      "MCP",
      "backend.integrations.claude_service",
      "15+",
      "all",
      "shutil",
      "docker-compose.yml",
      "pathlib",
      "docker-compose.yml\")",
      "backend.context.development_context_manager",
      "fastapi",
      "asyncio",
      "IntelligentLLMRouter",
      "Enum",
      "FastAPI,",
      "ClaudeService",
      "json",
      "{config_file}\")",
      "BaseModel",
      "uvicorn",
      "pydantic",
      "enum",
      "argparse",
      "Dict,",
      "Path"
    ],
    "scripts/mcp_version_validator.py": [
      "sys",
      "Optional",
      "dataclasses",
      "enum",
      "argparse",
      "Enum",
      "pathlib",
      "re",
      "Path",
      "yaml",
      "typing",
      "dataclass",
      "json"
    ],
    "scripts/modernize_fastapi_applications.py": [
      "BaseHTTPMiddleware",
      "Limiter\")",
      "backend.mcp_servers.base.standardized_mcp_server",
      "Limiter\"",
      "contextlib",
      "AsyncGenerator",
      "\"):",
      "SecurityHeadersMiddleware",
      "PlainTextResponse\\n\"",
      "Request,",
      "if",
      "time",
      "PlainTextResponse",
      "logging",
      "asynccontextmanager\\nfrom",
      "datetime",
      "typing",
      "asynccontextmanager\"",
      "MonitoringMiddleware",
      "JSONResponse\\n\"",
      ".cors",
      "Any",
      "BaseSettings\\n\"",
      "BackgroundTasks\"",
      ".monitoring",
      "pathlib",
      "fastapi.middleware.cors",
      "fastapi.middleware.gzip",
      "List",
      "fastapi",
      "asyncio",
      "prometheus_client",
      "CORSMiddleware",
      "StandardizedMCPServer\\n\"",
      "Request",
      "fastapi.middleware.trustedhost",
      "Limiter,",
      "GZipMiddleware",
      "structlog",
      "BaseSettings",
      "\")",
      "statement",
      "re",
      "pydantic_settings",
      "BaseSettings\"",
      "Counter,",
      "fastapi.responses",
      "get_remote_address\\n\"",
      "=",
      ".rate_limiting",
      "asynccontextmanager",
      "TrustedHostMiddleware",
      "lines.insert(import_end_idx,",
      "starlette.middleware.base",
      "collections",
      "defaultdict,",
      "RateLimitingMiddleware",
      "slowapi.errors",
      ".security",
      "get_remote_address",
      "uuid",
      "slowapi.util",
      "Dict,",
      "slowapi",
      "Path",
      "AsyncGenerator\\n\"",
      "RateLimitExceeded"
    ],
    "scripts/monitor_all_mcp_servers.py": [
      "subprocess",
      "os",
      "time",
      "rich.table",
      "Console",
      "backend.utils.logging",
      "Table",
      "logging",
      "pathlib",
      "aiohttp",
      "get_logger",
      "Path",
      "shlex",
      "{server_name}\")",
      "asyncio",
      "sys",
      "json",
      "rich.console"
    ],
    "scripts/monitor_automated_deployment.py": [
      "subprocess",
      "time",
      "URL",
      "Dict,",
      "datetime",
      "typing",
      "json"
    ],
    "scripts/monitor_codacy_mcp_server.py": [
      "asdict,",
      "dataclasses",
      "time",
      "argparse",
      "Optional",
      "datetime",
      "datetime,",
      "typing",
      "json",
      "requests"
    ],
    "scripts/monitor_mcp_ecosystem.py": [
      "curses",
      "typing",
      "Any",
      "logging",
      "aiohttp",
      "asyncio",
      "json"
    ],
    "scripts/n8n-workflow-automation.py": [
      "typing",
      "os",
      "dataclasses",
      "Any",
      "argparse",
      "logging",
      "pathlib",
      "aiohttp",
      "Path",
      "datetime",
      "asyncio",
      "dataclass",
      "json"
    ],
    "scripts/notify_deployment_status.py": [
      "os",
      "argparse",
      "datetime",
      "json",
      "requests"
    ],
    "scripts/optimize_cursor_config.py": [
      "Any",
      "argparse",
      "logging",
      "pathlib",
      "Path",
      "typing",
      "sys",
      "json"
    ],
    "scripts/optimize_docker_swarm_resources.py": [
      "Any",
      "configuration\"\"\"",
      "argparse",
      "pathlib",
      "Path",
      "yaml",
      "typing",
      "sys"
    ],
    "scripts/optimize_snowflake_for_sophia.py": [
      "datetime",
      "logging",
      "json",
      "snowflake.connector"
    ],
    "scripts/performance_baseline.py": [
      "datetime",
      "os",
      "time",
      "aiohttp",
      "statistics",
      "asyncio",
      "sys",
      "json"
    ],
    "scripts/performance_optimizer.py": [
      "typing",
      "Any",
      "time",
      "datetime",
      "asyncio",
      "json",
      "requests"
    ],
    "scripts/performance_validation.py": [
      "os",
      "time",
      "aiohttp",
      "asyncio",
      "sys",
      "json"
    ],
    "scripts/permanent_ssh_key_solution.py": [
      "subprocess",
      "os",
      "time",
      "Lambda",
      "Dict,",
      "datetime",
      "typing",
      "json",
      "requests"
    ],
    "scripts/phase2_mcp_optimization.py": [
      "HealthMonitor",
      "MemoryEntry",
      "MemorySearchException",
      "contextlib",
      "os",
      "time",
      ".core.models",
      "logging",
      "datetime",
      "typing",
      "..core.exceptions",
      "AIMemoryConfig",
      "SearchHandler",
      "wraps",
      "Resource,",
      "all",
      ".handlers.memory_handlers",
      "pathlib",
      "mcp.types",
      ".core.performance",
      "MemoryEntry,",
      "asyncio",
      "dataclass",
      "sys",
      ".handlers.search_handlers",
      "..core.models",
      "Any,",
      "psutil",
      "PerformanceMonitor",
      ".core.config",
      "ConfigurationException",
      "json",
      "asynccontextmanager",
      "functools",
      "Optional,",
      "collections",
      "defaultdict,",
      "subprocess",
      "dataclasses",
      "mcp.server",
      "MemoryHandler",
      "Server",
      ".utils.monitoring",
      "uuid",
      "Dict,",
      "Path",
      "..core.config",
      "datetime,",
      "MemoryStorageException",
      "requests;"
    ],
    "scripts/pre_deployment_checklist.py": [
      "subprocess",
      "os",
      "pathlib",
      "Path",
      "datetime",
      "sys",
      "json"
    ],
    "scripts/project_chimera_implementation.py": [
      "os",
      "dataclass,",
      "time",
      "logging",
      "datetime",
      "typing",
      "text',",
      "all",
      "multiple",
      "{source}\",",
      "pathlib",
      "asyncio",
      "dataclass",
      "Enum",
      "sys",
      "{node_id}\"",
      "natural",
      "json",
      "collections",
      "defaultdict,",
      "subprocess",
      "dataclasses",
      "enum",
      "Dict,",
      "Path",
      "datetime,"
    ],
    "scripts/real_time_monitoring.py": [
      "typing",
      "datetime",
      "os",
      "time",
      "Any",
      "statistics",
      "asyncio",
      "aiohttp"
    ],
    "scripts/recreate_lambda_labs_instances.py": [
      "os",
      "time",
      "datetime",
      "json",
      "requests"
    ],
    "scripts/refactor_priority_functions.py": [
      "re",
      "logging",
      "os",
      "shutil"
    ],
    "scripts/run_all_mcp_servers.py": [
      "psutil",
      "subprocess",
      "os",
      "time",
      "logging",
      "pathlib",
      "Path",
      "sys",
      "json"
    ],
    "scripts/scan_outdated_docs.py": [
      "argparse",
      "pathlib",
      "re",
      "Path",
      "datetime",
      "json"
    ],
    "scripts/setup_and_optimize_all_services.py": [
      "pulumi_docker",
      "pulumi_aws",
      "os",
      "pulumi_kubernetes",
      "pathlib",
      "aiohttp",
      "snowflake.connector",
      "Path",
      "datetime",
      "yaml",
      "asyncio",
      "sys",
      "json",
      "pulumi"
    ],
    "scripts/setup_cortex_ai_complete.py": [
      "setup",
      "logging",
      "snowflake.connector",
      "datetime",
      "json"
    ],
    "scripts/snowflake_cleanup_and_standardize.py": [
      "datetime",
      "logging",
      "snowflake.connector"
    ],
    "scripts/standardise_mcp.py": [
      "APIRouter\\n\"",
      "logging",
      "pathlib",
      "Path",
      "fastapi",
      "json"
    ],
    "scripts/standardize_mcp_configurations.py": [
      "Any",
      "logging",
      "pathlib",
      "Path",
      "datetime",
      "yaml",
      "typing",
      "json"
    ],
    "scripts/standardize_snowflake_config.py": [
      "argparse",
      "logging",
      "pathlib",
      "Path",
      "json"
    ],
    "scripts/start_cline_v3_18_servers.py": [
      "signal",
      "subprocess",
      "os",
      "pathlib",
      "Path",
      "shlex",
      "asyncio",
      "sys",
      "json"
    ],
    "scripts/start_mcp_server.py": [
      "typing",
      "signal",
      "subprocess",
      "os",
      "Any",
      "logging",
      "pathlib",
      "Path",
      "asyncio",
      "sys",
      "json"
    ],
    "scripts/start_phase1_mcp_servers.py": [
      "subprocess",
      "os",
      "time",
      "logging",
      "pathlib",
      "Path",
      "asyncio",
      "sys",
      "aiohttp"
    ],
    "scripts/strategic_repository_expansion.py": [
      "trusted",
      "external/langchain_mcp_official...",
      "-",
      "multiple",
      "subprocess",
      "external/postgres_mcp_enhanced...",
      "logging",
      "pathlib",
      "the",
      "Path",
      "datetime",
      "sys",
      "json",
      "community"
    ],
    "scripts/test_secret_access.py": [
      "backend.core.auto_esc_config",
      "pathlib",
      "Path",
      "sys",
      "get_config_value"
    ],
    "scripts/unified_lambda_labs_deployment.py": [
      "subprocess",
      "time",
      "argparse",
      "pathlib",
      "Dict,",
      "Path",
      "typing",
      "sys",
      "json"
    ],
    "scripts/unified_secret_sync.py": [
      "Any,",
      "subprocess",
      "os",
      "the",
      "tempfile",
      "typing",
      "sys",
      "json",
      "GitHub"
    ],
    "scripts/update_cursor_mcp_config.py": [
      "Any",
      "argparse",
      "logging",
      "pathlib",
      "Path",
      "typing",
      "sys",
      "json"
    ],
    "scripts/update_lambda_github_secrets_template.py": [
      "nacl",
      "base64",
      "environment",
      "public",
      "subprocess",
      "os",
      "logging",
      "sys",
      "requests"
    ],
    "scripts/update_snowflake_schemas.py": [
      "sys",
      "snowflake.connector"
    ],
    "scripts/validate_complete_deployment.py": [
      "typing",
      "argparse",
      "Dict,",
      "asyncio",
      "sys",
      "json"
    ],
    "scripts/validate_secret_pipeline.py": [
      "subprocess",
      "os",
      "typing",
      "json",
      "Any,"
    ],
    "scripts/verify_and_align_snowflake.py": [
      "datetime",
      "logging",
      "json",
      "snowflake.connector"
    ],
    "scripts/verify_workspace.py": [
      "pathlib",
      "sys",
      "os",
      "Path"
    ],
    "security_patches/dependency_security_update.py": [
      "pathlib",
      "subprocess",
      "sys",
      "Path"
    ],
    "sophia-deployment-20250704-060443/optimize_docker_swarm_resources.py": [
      "Any",
      "configuration\"\"\"",
      "argparse",
      "pathlib",
      "Path",
      "yaml",
      "typing",
      "sys"
    ],
    "tests/conftest.py": [
      "asyncio",
      "pathlib",
      "pytest",
      "Path"
    ],
    "tests/test_audit_logging.py": [
      "os",
      "time",
      "backend.security.audit_logger",
      "logging",
      "asyncio",
      "sys",
      "("
    ],
    "tests/test_connection_pool_health_check.py": [
      "backend.services.snowflake.connection_pool_manager",
      "time",
      "unittest.mock",
      "pytest",
      "Mock,",
      "("
    ],
    "tests/test_cortex_service_decomposition.py": [
      "(",
      "pytest",
      "backend.utils.optimized_snowflake_cortex_service_models"
    ],
    "tests/test_enhanced_cache.py": [
      "backend.core.enhanced_cache_manager",
      "os",
      "time",
      "EnhancedCacheManager",
      "logging",
      "asyncio",
      "sys"
    ],
    "tests/test_ephemeral_credentials.py": [
      "EphemeralCredentialsService",
      "os",
      "logging",
      "backend.security.ephemeral_credentials.models",
      "backend.security.ephemeral_credentials.service",
      "asyncio",
      "sys",
      "("
    ],
    "tests/test_mcp_optimization.py": [
      "typing",
      "os",
      "time",
      "Any",
      "logging",
      "pathlib",
      "Path",
      "datetime",
      "asyncio",
      "json"
    ],
    "tests/test_phase2_integration.py": [
      "(",
      "AsyncMock,",
      "user",
      "backend.services.cost_engineering_service",
      "backend.services.sophia_universal_chat_service",
      "backend.workflows.enhanced_langgraph_orchestration",
      "uuid",
      "backend.services.enhanced_snowflake_cortex_service",
      "unittest.mock",
      "pytest",
      "ParallelTask",
      "datetime",
      "asyncio",
      "json",
      "natural"
    ],
    "tests/test_rbac.py": [
      "backend.security.rbac.service",
      "os",
      "RBACService",
      "backend.security.rbac.models",
      "logging",
      "datetime",
      "datetime,",
      "asyncio",
      "sys",
      "("
    ],
    "tests/test_simple_ephemeral_credentials.py": [
      "os",
      "UTC,",
      "uuid",
      "enum",
      "logging",
      "Enum",
      "storage.\"\"\"",
      "datetime",
      "asyncio",
      "json"
    ],
    "tests/test_strategic_plan.py": [
      "execute_strategic_plan",
      "pathlib",
      "pytest",
      "StrategicPlanExecutor",
      "Path",
      "sys"
    ],
    "tests/test_unified_chat_comprehensive.py": [
      "AsyncMock,",
      "TestClient",
      "backend.orchestration.langgraph_mcp_orchestrator",
      "os",
      "time",
      "backend.api.unified_routes",
      "router",
      "fastapi.testclient",
      "fallback\",",
      "backend.prompts.optimized_templates",
      "FastAPI",
      "unittest.mock",
      "fastapi",
      "asyncio",
      "sys",
      "MCPCapabilityRouter",
      "psutil",
      "backend.services.mcp_capability_router",
      "MCPHealthMonitor",
      "pytest",
      "(",
      "same",
      "backend.monitoring.mcp_health_monitor",
      "SophiaPromptOptimizer"
    ],
    "ui-ux-agent/phase2_enhancements.py": [
      "datetime",
      "asyncio",
      "logging",
      "UTC,"
    ],
    "ui-ux-agent/start_ui_ux_agent_system.py": [
      "psutil",
      "subprocess",
      "os",
      "logging",
      "backend.core.auto_esc_config",
      "asyncio",
      "sys",
      "get_config_value",
      "requests"
    ],
    "ui-ux-agent/mcp-servers/figma-dev-mode/figma_mcp_server.py": [
      "os",
      "e",
      "logging",
      "backend.core.auto_esc_config",
      "datetime",
      "typing",
      "Any",
      "fastapi",
      "UTC,",
      "sys",
      "Figma",
      "FastAPI,",
      "asdict,",
      "Figma\"\"\"",
      "Pulumi",
      "uvicorn",
      "environment",
      "dataclasses",
      "get_config_value",
      "requests"
    ],
    "ui-ux-agent/mcp-servers/langchain-agents/ui_ux_agent.py": [
      "React",
      "logging",
      "{{",
      "backend.core.auto_esc_config",
      "datetime",
      "typing",
      "'./components/{hints.get(\"suggested_file_name\",",
      "Any",
      "design",
      "'@testing-library/react';",
      "fastapi",
      "Figma",
      "'./{component_name}';",
      "FastAPI,",
      "uvicorn",
      "BaseModel",
      "pydantic",
      "'react';",
      "UTC",
      "'./{file_name}.types';",
      "get_config_value",
      "requests"
    ],
    "tests/ai_evals/framework.py": [
      "JSON",
      "typing",
      "dataclass,",
      "dataclasses",
      "time",
      "Any",
      "enum",
      "call",
      "logging",
      "Enum",
      "pathlib",
      "{test_file}:",
      "Path",
      "datetime",
      "recent",
      "asyncio",
      "json"
    ],
    "tests/infrastructure/run_all_tests.py": [
      "__future__",
      "annotations",
      "subprocess",
      "argparse",
      "pathlib",
      "Path"
    ],
    "tests/integration/mcp_orchestration_test_suite.py": [
      "backend.core.intelligent_llm_router",
      "time",
      "scripts.mcp_orchestration_optimizer",
      "datetime",
      "typing",
      "EnhancedAiMemoryMCPServer",
      "pathlib",
      "aiohttp",
      "non_existent_module\"},",
      "asyncio",
      "dataclass",
      "IntelligentLLMRouter",
      "Enum",
      "pytest",
      "DevelopmentTask,",
      "json",
      "configuration\"\"\"",
      "dataclasses",
      "enum",
      "Path",
      "yaml",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "Any,"
    ],
    "tests/integration/test_live_data_pipeline.py": [
      "CircuitBreaker,",
      "AsyncMock,",
      "backend.services.unified_intelligence_service",
      "backend.services.data_source_manager",
      "backend.services.circuit_breaker",
      "backend.services.data_transformer",
      "UnifiedIntelligenceService",
      "unittest.mock",
      "pytest",
      "pandas",
      "DataTransformer",
      "asyncio",
      "a",
      "("
    ],
    "tests/performance/test_data_pipeline_performance.py": [
      "locust",
      "the",
      "HttpUser,"
    ],
    "scripts/ci/deployment_health_gate.py": [
      "pathlib",
      "sys",
      "json",
      "Path"
    ],
    "scripts/dev/ai_memory_health_check.py": [
      "gateway:",
      "os",
      "logging",
      "aiohttp",
      "datetime",
      "asyncio",
      "sys",
      "json"
    ],
    "scripts/docs/generate_documentation_index.py": [
      "path",
      "dataclass,",
      "os",
      "dataclasses",
      "first",
      "file",
      "pathlib",
      "re",
      "Path",
      "datetime",
      "a",
      "content"
    ],
    "scripts/implementation/execute_comprehensive_remodel.py": [
      "phase1_foundation_setup",
      "Phase2AdvancedIntegration",
      "phase2_advanced_integration",
      "subprocess",
      "os",
      "argparse",
      "logging",
      "pathlib",
      "Phase1FoundationSetup",
      "Path",
      "datetime",
      "yaml",
      "asyncio",
      "sys",
      "json"
    ],
    "scripts/implementation/phase1_foundation_setup.py": [
      "research",
      "subprocess",
      "os",
      "toml",
      "logging",
      "pathlib",
      "Pulumi",
      "Path",
      "yaml",
      "asyncio",
      "sys",
      "builder",
      "requests;"
    ],
    "scripts/implementation/phase2_advanced_integration.py": [
      "typing",
      "sys",
      "os",
      "time",
      "logging",
      "pathlib",
      "Dict,",
      "Path",
      "yaml",
      "asyncio",
      "json",
      "aiohttp"
    ],
    "scripts/mcp-implementation/phase1_health_check.py": [
      "subprocess",
      "contextlib",
      "os"
    ],
    "scripts/mcp-implementation/phase1_integration_test.py": [
      "subprocess",
      "json",
      "os",
      "Figma\","
    ],
    "scripts/security/ai_security_assessment.py": [
      "last",
      "typing",
      "dataclass,",
      "dataclasses",
      "Any",
      "responses\",",
      "enum",
      "logging",
      "Enum",
      "re",
      "pathlib",
      "Path",
      "datetime",
      "aiofiles",
      "asyncio",
      "json"
    ],
    "scripts/security/compare_baseline.py": [
      "JSON",
      "package",
      "Any",
      "argparse",
      "pathlib",
      "Path",
      "datetime",
      "typing",
      "sys",
      "json"
    ],
    "scripts/security/comprehensive_security_remediation.py": [
      "\"):",
      "subprocess\"",
      "ElementTree\",",
      "if",
      "hashlib",
      "logging",
      "backend.core.auto_esc_config",
      "and",
      "xml.etree.ElementTree",
      "snowflake.connector\")",
      "hmac",
      "pathlib",
      "defusedxml",
      "defusedxml.ElementTree",
      "shlex\")",
      "ElementTree",
      "\")",
      "statement",
      "subprocess\")",
      "re",
      "pickle\"",
      "secure",
      "shlex\"",
      "whitelist",
      "snowflake.connector\"",
      "lines.insert(last_import_idx",
      "get_config_value\"",
      "xml.etree",
      "argparse",
      "get_config_value\",",
      "Path"
    ],
    "scripts/security/remove_exposed_secrets.py": [
      "already",
      "contextlib",
      "Sophia",
      "get_config_value\"",
      "if",
      "\")",
      "\"",
      "backend.core.auto_esc_config",
      "pathlib",
      "lines",
      "get_config_value\",",
      "Path",
      "line,",
      "before"
    ],
    "scripts/security/setup_pulumi_esc_secrets.py": [
      "getpass",
      "ESC\"\"\"",
      "subprocess",
      "https://get.pulumi.com/esc/install.sh\"",
      "get_config_value",
      "logging",
      "pathlib",
      "https://get.pulumi.com/\")",
      "backend.core.security_config",
      "Path",
      "backend.core.auto_esc_config",
      "SecretType,",
      "sys",
      "json"
    ],
    "scripts/snowflake/optimize_warehouses.py": [
      "logging",
      "snowflake.connector"
    ],
    "mcp-servers/ag_ui/__init__.py": [],
    "mcp-servers/ag_ui/enhanced_ag_ui_mcp_server.py": [
      "typing",
      "WSMsgType,",
      "__future__",
      "annotations",
      "structlog",
      "Any",
      "time",
      "dataclasses",
      "uuid",
      "enum",
      "Enum",
      "aiohttp",
      "asyncio",
      "dataclass",
      "json"
    ],
    "mcp-servers/apify_intelligence/__init__.py": [],
    "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py": [
      "competitor",
      "logging",
      "backend.core.auto_esc_config",
      "Counter",
      "typing",
      "backend.mcp_servers.types",
      "backend.mcp_servers.server",
      "Any",
      "mentions\"\"\"",
      "fastapi",
      "asyncio",
      "TextContent,",
      "APIRouter",
      "research",
      "json",
      "httpx",
      "collections",
      "Server",
      "market",
      "news",
      "get_config_value"
    ],
    "mcp-servers/apollo/__init__.py": [],
    "mcp-servers/asana/__init__.py": [],
    "mcp-servers/asana/asana_mcp_server.py": [
      "APIRouter,",
      "os",
      "load_dotenv",
      "logging",
      "datetime",
      "typing",
      "dotenv",
      "backend.mcp_servers.base.unified_mcp_base",
      "Any",
      "pathlib",
      "fastapi",
      "ApiException",
      "asyncio",
      "sys",
      "asana",
      "(",
      "asana.rest",
      "Asana",
      "uvicorn",
      "Path"
    ],
    "mcp-servers/asana/health.py": [
      "asyncio",
      "typing",
      "Dict,",
      "time"
    ],
    "mcp-servers/asana/performance.py": [
      "functools",
      "typing",
      "wraps",
      "time",
      "Dict,",
      "asyncio"
    ],
    "mcp-servers/bright_data/__init__.py": [],
    "mcp-servers/bright_data/bright_data_mcp_server.py": [
      "URL\"\"\"",
      "typing",
      "markdownify",
      "__future__",
      "annotations",
      "structlog",
      "APIRouter",
      "Any",
      "aiohttp",
      "backend.mcp_servers.base.enhanced_standardized_mcp_server",
      "fastapi",
      "bs4",
      "BeautifulSoup",
      "asyncio",
      "a",
      "("
    ],
    "mcp-servers/codacy/__init__.py": [],
    "mcp-servers/codacy/codacy_api_client.py": [
      "typing",
      "Any",
      "detected.\",",
      "get_logger",
      "asyncio",
      "aiohttp",
      "backend.utils.logging"
    ],
    "mcp-servers/codacy/codacy_server.py": [
      "contextlib",
      "os",
      "time",
      "BaseModel,",
      "config",
      "logging",
      "datetime",
      "typing",
      "Any",
      "pathlib",
      "fastapi.middleware.cors",
      "tempfile",
      "fastapi",
      "fastapi.middleware.gzip",
      "asyncio",
      "manager",
      "Enum",
      "CORSMiddleware",
      "radon.complexity",
      "GZipMiddleware",
      "BackgroundTasks,",
      "radon.metrics",
      "re",
      "fastapi.responses",
      "ast",
      "asynccontextmanager",
      "uvicorn",
      "pydantic",
      "JSONResponse",
      "enum",
      "bandit.core",
      "Path"
    ],
    "mcp-servers/codacy/enhanced_codacy_mcp_server.py": [
      "time",
      "BaseModel,",
      "logging",
      "datetime",
      "typing",
      "pathlib",
      "recent",
      "fastapi.middleware.cors",
      "fastapi",
      "CORSMiddleware",
      "history",
      "backend.services.unified_ai_orchestration_service",
      "BackgroundTasks,",
      "backend.services.snowflake_cortex_service",
      "re",
      "the",
      "(",
      "ast",
      "SnowflakeCortexService",
      "uvicorn",
      "pydantic",
      "collections",
      "defaultdict",
      "0-100",
      "Path",
      "AI",
      "Any,"
    ],
    "mcp-servers/codacy/production_codacy_server.py": [
      "contextlib",
      "time",
      "BaseModel,",
      "logging",
      "datetime",
      "typing",
      "Any",
      "pathlib",
      "fastapi.middleware.cors",
      "fastapi.middleware.gzip",
      "fastapi",
      "asyncio",
      "Enum",
      "CORSMiddleware",
      "GZipMiddleware",
      "BackgroundTasks,",
      "re",
      "fastapi.responses",
      "ast",
      "asynccontextmanager",
      "uvicorn",
      "pydantic",
      "JSONResponse",
      "enum",
      "Path"
    ],
    "mcp-servers/codacy/simple_codacy_server.py": [
      "ast",
      "FastAPI,",
      "uvicorn",
      "pydantic",
      "BaseModel,",
      "logging",
      "re",
      "fastapi.middleware.cors",
      "datetime",
      "fastapi",
      "typing",
      "Any,",
      "CORSMiddleware"
    ],
    "mcp-servers/code_modifier/code_modifier_mcp_server.py": [
      "backend.mcp_servers.base.standardized_mcp_server",
      "typing",
      "APIRouter",
      "os",
      "UTC,",
      "Any",
      "backend.services.code_modification_service",
      "logging",
      "pathlib",
      "Path",
      "datetime",
      "fastapi",
      "CodeModificationService",
      "asyncio",
      "sys",
      "(",
      "statements\")"
    ],
    "mcp-servers/figma_context/__init__.py": [],
    "mcp-servers/github/__init__.py": [],
    "mcp-servers/github/github_mcp_server.py": [
      "backend.mcp_servers.base.unified_mcp_base",
      "setup_logger",
      "APIRouter",
      "os",
      "Any",
      "config",
      "asyncio",
      "backend.core.auto_esc_config",
      "pathlib",
      "backend.utils.custom_logger",
      "necessary",
      "Path",
      "datetime",
      "fastapi",
      "typing",
      "sys",
      "("
    ],
    "mcp-servers/github/health.py": [
      "asyncio",
      "typing",
      "Dict,",
      "time"
    ],
    "mcp-servers/github/performance.py": [
      "functools",
      "typing",
      "wraps",
      "time",
      "Dict,",
      "asyncio"
    ],
    "mcp-servers/github/simple_github_server.py": [
      "FastAPI,",
      "typing",
      "uvicorn",
      "os",
      "Any",
      "logging",
      "fastapi.middleware.cors",
      "datetime",
      "fastapi",
      "asyncio",
      "CORSMiddleware"
    ],
    "mcp-servers/graphiti/__init__.py": [
      "GraphitiMCPServer",
      ".graphiti_mcp_server"
    ],
    "mcp-servers/graphiti/graphiti_mcp_server.py": [
      "graphiti.nodes",
      "BaseModel,",
      "logging",
      "backend.mcp_servers.base.enhanced_standardized_mcp_server",
      "Edge",
      "datetime",
      "typing",
      "graphiti.edges",
      "Any",
      "asdict",
      "fastapi",
      "asyncio",
      "__future__",
      "structlog",
      "APIRouter",
      "(",
      "pydantic",
      "annotations",
      "Graphiti",
      "dataclasses",
      "uuid",
      "EntityNode,",
      "graphiti",
      "AI"
    ],
    "mcp-servers/hubspot_unified/__init__.py": [],
    "mcp-servers/hubspot_unified/health.py": [
      "asyncio",
      "typing",
      "Dict,",
      "time"
    ],
    "mcp-servers/hubspot_unified/hubspot_mcp_server.py": [
      "backend.mcp_servers.base.unified_mcp_base",
      "setup_logger",
      "APIRouter",
      "os",
      "Any",
      "config",
      "asyncio",
      "backend.core.auto_esc_config",
      "pathlib",
      "backend.utils.custom_logger",
      "necessary",
      "Path",
      "datetime",
      "fastapi",
      "typing",
      "sys",
      "("
    ],
    "mcp-servers/hubspot_unified/performance.py": [
      "functools",
      "typing",
      "wraps",
      "time",
      "Dict,",
      "asyncio"
    ],
    "mcp-servers/huggingface_ai/__init__.py": [],
    "mcp-servers/huggingface_ai/huggingface_ai_mcp_server.py": [
      "typing",
      "backend.mcp_servers.types",
      "TextContent,",
      "backend.mcp_servers.server",
      "APIRouter",
      "Any",
      "Server",
      "sentence_transformers",
      "logging",
      "backend.core.auto_esc_config",
      "get_config_value",
      "backend.mcp_servers.base.enhanced_standardized_mcp_server",
      "transformers",
      "pipeline",
      "fastapi",
      "asyncio",
      "SentenceTransformer",
      "("
    ],
    "mcp-servers/intercom/intercom_mcp_server.py": [
      "Intercom\"\"\"",
      "typing",
      "Salesforce",
      "APIRouter",
      "Any",
      "previous",
      "fastapi",
      "logging",
      "backend.core.auto_esc_config",
      "mcp",
      "server",
      "datetime",
      "Pulumi",
      "asyncio",
      "get_config_value",
      "requests"
    ],
    "mcp-servers/lambda_labs_cli/__init__.py": [],
    "mcp-servers/lambda_labs_cli/lambda_labs_cli_mcp_server.py": [
      "backend.mcp_servers.base.standardized_mcp_server",
      "typing",
      "sys",
      "APIRouter",
      "UTC,",
      "Any",
      "logging",
      "pathlib",
      "backend.mcp_servers.base.enhanced_standardized_mcp_server",
      "Path",
      "datetime",
      "fastapi",
      "asyncio",
      "json",
      "("
    ],
    "mcp-servers/linear/__init__.py": [],
    "mcp-servers/linear/health.py": [
      "asyncio",
      "typing",
      "Dict,",
      "time"
    ],
    "mcp-servers/linear/linear_mcp_server.py": [
      "dotenv",
      "backend.mcp_servers.base.unified_mcp_base",
      "Linear",
      "os",
      "Any",
      "load_dotenv",
      "logging",
      "pathlib",
      "linear_sdk",
      "mcp",
      "Path",
      "datetime",
      "server",
      "LinearClient",
      "typing",
      "sys",
      "("
    ],
    "mcp-servers/linear/performance.py": [
      "functools",
      "typing",
      "wraps",
      "time",
      "Dict,",
      "asyncio"
    ],
    "mcp-servers/linear/simple_linear_server.py": [
      "FastAPI,",
      "typing",
      "uvicorn",
      "Any",
      "fastapi.middleware.cors",
      "logging",
      "pathlib",
      "Path",
      "datetime",
      "fastapi",
      "asyncio",
      "sys",
      "CORSMiddleware"
    ],
    "mcp-servers/migration_orchestrator/migration_orchestrator_mcp_server.py": [
      "typing",
      "APIRouter",
      "Any",
      "logging",
      "mcp",
      "server",
      "datetime",
      "fastapi",
      "datetime,",
      "asyncio"
    ],
    "mcp-servers/notion/__init__.py": [],
    "mcp-servers/notion/enhanced_notion_mcp_server.py": [
      "select",
      "date",
      "logging",
      "backend.core.auto_esc_config",
      "APIResponseError",
      "datetime",
      "typing",
      "notion_client",
      "Any",
      "Client",
      "title",
      "fastapi",
      "asyncio",
      "people",
      "APIRouter",
      "Pulumi",
      "mcp",
      "server",
      "datetime,",
      "notion_client.errors",
      "get_config_value"
    ],
    "mcp-servers/notion/health.py": [
      "asyncio",
      "typing",
      "Dict,",
      "time"
    ],
    "mcp-servers/notion/notion_mcp_server_standardized.py": [
      "APIRouter,",
      "os",
      "Notion",
      "load_dotenv",
      "logging",
      "APIResponseError",
      "datetime",
      "typing",
      "dotenv",
      "backend.mcp_servers.base.unified_mcp_base",
      "notion_client",
      "Any",
      "Client",
      "pathlib",
      "fastapi",
      "sys",
      "(",
      "uvicorn",
      "environment",
      "Path",
      "notion_client.errors"
    ],
    "mcp-servers/notion/performance.py": [
      "functools",
      "typing",
      "wraps",
      "time",
      "Dict,",
      "asyncio"
    ],
    "mcp-servers/overlays/__init__.py": [],
    "mcp-servers/playwright/__init__.py": [],
    "mcp-servers/portkey_admin/__init__.py": [],
    "mcp-servers/portkey_admin/portkey_admin_mcp_server.py": [
      "backend.mcp_servers.base.standardized_mcp_server",
      "typing",
      "preferred",
      "APIRouter",
      "UTC,",
      "Any",
      "logging",
      "pathlib",
      "backend.mcp_servers.base.enhanced_standardized_mcp_server",
      "Path",
      "datetime",
      "fastapi",
      "asyncio",
      "sys",
      "("
    ],
    "mcp-servers/postgres/__init__.py": [],
    "mcp-servers/prompt_optimizer/prompt_optimizer_mcp_server.py": [
      "asynccontextmanager",
      "uvicorn",
      "contextlib",
      "template",
      "pydantic",
      "backend.core.config_manager",
      "Any",
      "BaseModel,",
      "get_config_value",
      "get_mem0_service",
      "logging",
      "backend.services.mem0_integration_service",
      "re",
      "datetime",
      "fastapi",
      "typing",
      "Body,"
    ],
    "mcp-servers/pulumi/__init__.py": [],
    "mcp-servers/salesforce/salesforce_mcp_server.py": [
      "typing",
      "APIRouter",
      "Any",
      "fastapi",
      "logging",
      "backend.core.auto_esc_config",
      "mcp",
      "server",
      "datetime",
      "Pulumi",
      "datetime,",
      "asyncio",
      "get_config_value",
      "requests"
    ],
    "mcp-servers/slack_integration/simple_slack_integration_server.py": [
      "uvicorn",
      "logging",
      "FastAPI",
      "datetime",
      "fastapi"
    ],
    "mcp-servers/slack_unified/simple_slack_integration_server.py": [
      "uvicorn",
      "logging",
      "FastAPI",
      "datetime",
      "fastapi"
    ],
    "mcp-servers/snowflake_cortex/__init__.py": [],
    "mcp-servers/snowflake_cortex/production_snowflake_cortex_mcp_server.py": [
      "backend.core.secure_snowflake_config",
      "FastMCP",
      "typing",
      "APIRouter",
      "UTC,",
      "Any",
      "text",
      "question:",
      "logging",
      "backend.mcp_servers.server.fastmcp",
      "snowflake.connector",
      "datetime",
      "fastapi",
      "asyncio",
      "DictCursor",
      "secure_snowflake_config"
    ],
    "mcp-servers/snowflake_cortex/snowflake_cortex_mcp_server.py": [
      "backend.mcp_servers.base.unified_mcp_base",
      "FastMCP",
      "typing",
      "APIRouter",
      "os",
      "Any",
      "text",
      "backend.mcp_servers.server.fastmcp",
      "backend.core.auto_esc_config",
      "StandardizedMCPServer",
      "pathlib",
      "Path",
      "datetime",
      "fastapi",
      "asyncio",
      "sys",
      "get_config_value"
    ],
    "mcp-servers/snowflake_unified/unified_snowflake_server.py": [
      "backend.core.secure_snowflake_config",
      "FastMCP",
      "typing",
      "APIRouter",
      "UTC,",
      "Any",
      "text",
      "question:",
      "logging",
      "backend.mcp_servers.server.fastmcp",
      "snowflake.connector",
      "datetime",
      "fastapi",
      "asyncio",
      "DictCursor",
      "secure_snowflake_config"
    ],
    "mcp-servers/sophia_intelligence_unified/unified_sophia_intelligence_server.py": [],
    "mcp-servers/ui_ux_agent/__init__.py": [],
    "mcp-servers/ui_ux_agent/ui_ux_agent_mcp_server.py": [
      "backend.mcp_servers.base.standardized_mcp_server",
      "typing",
      "APIRouter",
      "UTC,",
      "Any",
      "hashlib",
      "logging",
      "pathlib",
      "backend.mcp_servers.base.enhanced_standardized_mcp_server",
      "Path",
      "datetime",
      "fastapi",
      "asyncio",
      "sys",
      "("
    ],
    "mcp-servers/v0dev/__init__.py": [],
    "mcp-servers/v0dev/v0dev_mcp_server.py": [
      "os",
      "BaseModel,",
      "logging",
      "backend.core.auto_esc_config",
      "datetime",
      "typing",
      "a",
      "Any",
      "mcp.types",
      "fastapi.middleware.cors",
      "fastapi",
      "prometheus_client",
      "Figma",
      "sys",
      "CORSMiddleware",
      "FastAPI,",
      "Counter,",
      "fastapi.responses",
      "json",
      "uvicorn",
      "httpx",
      "StreamingResponse",
      "pydantic",
      "mcp.server",
      "Server",
      "prompts",
      "API",
      "get_config_value"
    ],
    "mcp-servers/playwright/microsoft-playwright-mcp/__init__.py": [],
    "mcp-servers/overlays/staging/__init__.py": [],
    "mcp-servers/hubspot_unified/src/__init__.py": [],
    "mcp-servers/hubspot_unified/tests/__init__.py": [
      ".get_closed_ticket_conversations",
      "("
    ],
    "mcp-servers/hubspot_unified/tests/get_closed_ticket_conversations.py": [
      "mcp_server_hubspot.hubspot_client",
      "HubSpot.",
      "os",
      "Any",
      "HubSpotClient",
      "get_config_value",
      "logging",
      "backend.core.auto_esc_config",
      "typing",
      "sys",
      "json"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/__init__.py": [
      ".hubspot_client",
      "os",
      "HubSpotClient",
      ".",
      "argparse",
      "logging",
      "server",
      "asyncio"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/faiss_manager.py": [
      "faiss",
      "filename",
      "disk",
      "filenames",
      "os",
      "Any",
      "memory",
      "disk.",
      "logging",
      "numpy",
      "glob",
      "datetime",
      "typing",
      "json"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/hubspot_client.py": [
      ".core.storage",
      "TicketClient",
      "CompanyClient",
      "logging",
      "backend.core.auto_esc_config",
      "typing",
      "a",
      "ThreadStorage",
      "ConversationClient",
      "HubSpot.",
      "hubspot.crm.contacts.exceptions",
      "pathlib",
      "ApiException",
      "ContactClient",
      "Any,",
      "HubSpot",
      ".clients.company_client",
      ".clients.contact_client",
      ".clients.ticket_client",
      ".clients.conversation_client",
      "hubspot",
      "get_config_value"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/server.py": [
      ".handlers.search_handler",
      "NotificationOptions",
      "mcp.server.stdio",
      "os",
      "load_dotenv",
      "logging",
      "typing",
      "SentenceTransformer",
      "dotenv",
      "TicketHandler",
      "SearchHandler",
      "backend.mcp_servers.server",
      "InitializationOptions",
      "Any",
      "HuggingFace\")",
      "CompanyHandler",
      "backend.mcp_servers.server.lowlevel",
      "mcp.types",
      "ConversationHandler",
      "ContactHandler",
      "HubSpot\",",
      "asyncio",
      ".env",
      "AnyUrl",
      "HubSpot",
      ".handlers.company_handler",
      ".handlers.conversation_handler",
      ".handlers.ticket_handler",
      ".handlers.contact_handler",
      "{local_model_path}\")",
      "FaissManager",
      ".faiss_manager",
      "ApiException,",
      "pydantic",
      ".hubspot_client",
      "backend.mcp_servers.server.models",
      "sentence_transformers",
      "Server",
      "argparse"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/utils.py": [
      "FaissManager",
      ".faiss_manager",
      "Any",
      "sentence_transformers",
      "logging",
      "numpy",
      "typing",
      "SentenceTransformer",
      "json"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/__init__.py": [],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/company_client.py": [
      "hubspot.crm.companies",
      "handle_hubspot_errors",
      "HubSpot.",
      "HubSpot",
      "..core.error_handler",
      "hubspot",
      "Any",
      "associations",
      "..core.formatters",
      "logging",
      "convert_datetime_fields",
      "the",
      "API",
      "typing",
      "PublicObjectSearchRequest",
      "json"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/contact_client.py": [
      "(",
      "handle_hubspot_errors",
      "HubSpot.",
      "HubSpot",
      "..core.error_handler",
      "hubspot",
      "hubspot.crm.contacts",
      "Any",
      "..core.formatters",
      "logging",
      "convert_datetime_fields",
      "typing",
      "json"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/conversation_client.py": [
      "handle_hubspot_errors",
      "..core.error_handler",
      "API.",
      "hubspot.crm.objects.emails",
      "logging",
      "typing",
      "a",
      "ThreadStorage",
      "HubSpot.",
      "Any",
      "hubspot.crm.contacts.exceptions",
      "..core.formatters",
      "an",
      "convert_datetime_fields",
      "..core.storage",
      "ApiException",
      "HubSpot",
      "cache",
      "(",
      "hubspot",
      "requests"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/ticket_client.py": [
      "handle_hubspot_errors",
      "..core.error_handler",
      "time",
      "logging",
      "datetime",
      "typing",
      "hubspot.crm.contacts.exceptions",
      "..core.formatters",
      "convert_datetime_fields",
      "ApiException",
      "HubSpot",
      "hubspot.crm.tickets",
      "the",
      "PublicObjectSearchRequest",
      "json",
      "hubspot",
      "datetime,",
      "Any,",
      "requests"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/core/__init__.py": [],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/core/error_handler.py": [
      "functools",
      "Callable",
      "Any",
      "hubspot.crm.contacts.exceptions",
      "ApiException",
      "logging",
      "collections.abc",
      "typing",
      "json"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/core/formatters.py": [
      "tzlocal",
      "Any",
      "dateutil.tz",
      "datetime",
      "typing"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/core/storage.py": [
      "Any",
      "logging",
      "pathlib",
      "cache",
      "typing",
      "json"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/__init__.py": [],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/base_handler.py": [
      "FaissManager",
      "..hubspot_client",
      "store_in_faiss",
      "content.",
      "Any",
      "HubSpotClient",
      "..faiss_manager",
      "sentence_transformers",
      "logging",
      "mcp.types",
      "..utils",
      "typing",
      "SentenceTransformer",
      "json"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/company_handler.py": [
      "..hubspot_client",
      "SimplePublicObjectInputForCreate",
      "hubspot.crm.companies",
      "HubSpot.",
      "PublicObjectSearchRequest",
      "Any",
      "BaseHandler",
      "ApiException",
      "mcp.types",
      "typing",
      ".base_handler",
      "json"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/contact_handler.py": [
      "..hubspot_client",
      "SimplePublicObjectInputForCreate",
      "HubSpot.",
      "PublicObjectSearchRequest",
      "hubspot.crm.contacts",
      "Any",
      "BaseHandler",
      "ApiException",
      "mcp.types",
      "typing",
      ".base_handler",
      "json"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/conversation_handler.py": [
      "HubSpot",
      "Any",
      "mcp.types",
      "typing",
      ".base_handler",
      "BaseHandler"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/search_handler.py": [
      "FaissManager",
      ".base_handler",
      "Any",
      "search_in_faiss",
      "..faiss_manager",
      "sentence_transformers",
      "mcp.types",
      "..utils",
      "typing",
      "SentenceTransformer",
      "BaseHandler"
    ],
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/ticket_handler.py": [
      "HubSpot",
      "Any",
      "mcp.types",
      "typing",
      ".base_handler",
      "BaseHandler"
    ],
    "mcp-servers/figma_context/figma-context-mcp/__init__.py": [],
    "mcp-servers/apollo/apollo-io-mcp/__init__.py": [],
    "infrastructure/agents/__init__.py": [],
    "infrastructure/agents/base_agent_template.py": [
      "ABC,",
      "abc",
      "typing",
      "opentelemetry",
      "opentelemetry.instrumentation.logging",
      "LoggingInstrumentor",
      "structlog",
      "UTC,",
      "Any",
      "enum",
      "uuid",
      "metrics,",
      "datetime",
      "asyncio",
      "Enum"
    ],
    "infrastructure/esc/enhanced_secret_sync_monitor.py": [
      "os",
      "time",
      "logging",
      "datetime",
      "typing",
      "sync",
      "Any",
      "github_sync_bidirectional",
      "pathlib",
      "asyncio",
      "sys",
      "latest",
      "GitHubESCSyncManager",
      "json",
      "argparse",
      "Path",
      "yaml",
      "datetime,",
      "aiohttp"
    ],
    "infrastructure/esc/get_secret.py": [
      "PULUMI_ENV",
      "os",
      "time",
      "logging",
      "datetime",
      "typing",
      "{env_path}\")",
      "ESC",
      "ESC\"",
      "sys",
      "nested",
      "pulumi",
      "ESC\")",
      "PULUMI_ORG",
      "the",
      "Pulumi",
      "json",
      "subprocess",
      "argparse",
      "Any,"
    ],
    "infrastructure/esc/github_sync_bidirectional.py": [
      "subprocess",
      "os",
      "pathlib",
      "Path",
      "json",
      "GitHub"
    ],
    "infrastructure/esc/pulumi_auth_validator.py": [
      "subprocess",
      "os",
      "Any",
      "ESC",
      "argparse",
      "logging",
      "the",
      "ESC\",",
      "datetime",
      "typing",
      "sys",
      "json",
      "https://www.pulumi.com/docs/get-started/install/\""
    ],
    "infrastructure/esc/ssh_key_manager.py": [
      "base64",
      "pathlib",
      "subprocess",
      "Path"
    ],
    "infrastructure/esc/sync_status_validator.py": [
      "analysis",
      "dataclass",
      "os",
      "dataclasses",
      "Any",
      "_load_esc_environment",
      "argparse",
      "ESC",
      "logging",
      "backend.core.auto_esc_config",
      "backend.core.security_config",
      "datetime",
      "SecurityConfig",
      "typing",
      "sys",
      "json"
    ],
    "infrastructure/esc/validate_infrastructure.py": [
      "subprocess",
      "pathlib",
      "Path",
      "json",
      "nested"
    ],
    "backend/api/__init__.py": [],
    "backend/api/ai_memory_health_routes.py": [
      "APIRouter",
      "uuid",
      "datetime",
      "fastapi",
      "datetime,",
      "random"
    ],
    "backend/api/dashboard_data_routes.py": [
      "APIRouter,",
      "real",
      "pydantic",
      "backend.services.unified_service_registry",
      "Any",
      "BaseModel,",
      "logging",
      "datetime",
      "fastapi",
      "datetime,",
      "typing",
      "(",
      "random"
    ],
    "backend/api/deployment_status_routes.py": [
      "datetime",
      "fastapi",
      "APIRouter"
    ],
    "backend/api/enhanced_unified_chat_routes.py": [
      "APIRouter,",
      "BaseModel,",
      "backend.services.unified_chat_service",
      "logging",
      "datetime",
      "typing",
      "backend.core.dependencies",
      "Any",
      "fastapi",
      "asyncio",
      "get_audit_logger,",
      "natural",
      "backend.security.audit_logger",
      "AuditLogger",
      "get_enhanced_orchestrator",
      "(",
      "fastapi.responses",
      "json",
      "pydantic",
      "JSONResponse",
      "backend.workflows.enhanced_langgraph_orchestration"
    ],
    "backend/api/enhanced_unified_chat_routes_integration.py": [
      "backend.api.enhanced_unified_chat_routes",
      "APIRouter,",
      "orchestration\"",
      "pydantic",
      "backend.core.dependencies",
      "backend.services.unified_service_registry",
      "Any",
      "get_current_user",
      "Field",
      "logging",
      "datetime",
      "fastapi",
      "cache\"",
      "typing",
      "(",
      "backend.services.sophia_ai_orchestrator"
    ],
    "backend/api/lambda_labs_health_routes.py": [
      "APIRouter,",
      "typing",
      "BaseModel",
      "monitoring",
      "pydantic",
      "all",
      "time",
      "configuration",
      "logging",
      "Optional",
      "datetime",
      "fastapi",
      "datetime,",
      "asyncio",
      "aiohttp",
      "mapping"
    ],
    "backend/api/llm_metrics_routes.py": [
      "APIRouter,",
      "backend.services.cost_engineering_service",
      "yesterday)",
      "BaseModel,",
      "logging",
      "backend.core.auto_esc_config",
      "datetime",
      "UnifiedLLMService",
      "typing",
      "a",
      "Any",
      "fastapi",
      "CostEngineeringService",
      "historical",
      "backend.services.unified_llm_service",
      "pydantic",
      "actual",
      "datetime,",
      "get_config_value,"
    ],
    "backend/api/unified_chat_routes.py": [
      "APIRouter,",
      "pydantic",
      "Any",
      "BaseModel,",
      "backend.services.unified_chat_service",
      "logging",
      "datetime",
      "fastapi",
      "typing",
      "("
    ],
    "backend/api/unified_chat_routes_v2.py": [
      "backend.services.unified_llm_service",
      "backend.services.enhanced_unified_chat_service",
      "APIRouter,",
      "(",
      "SophiaUnifiedChatService",
      "backend.services.sophia_universal_chat_service",
      "pydantic",
      "TaskType,",
      "UTC,",
      "BaseModel,",
      "uuid",
      "enum",
      "logging",
      "Enum",
      "datetime",
      "fastapi",
      "typing",
      "Any,"
    ],
    "backend/api/unified_health_routes.py": [
      "get_ai_memory_health",
      "backend.api.lambda_labs_health_routes",
      "all",
      "APIRouter",
      "get_deployment_status",
      "other",
      "backend.api.ai_memory_health_routes",
      "get_lambda_labs_health",
      "backend.api.deployment_status_routes",
      "fastapi",
      "random"
    ],
    "backend/api/unified_routes.py": [
      "backend.services.unified_sophia_service",
      "APIRouter,",
      "pydantic",
      "Any",
      "BaseModel,",
      "uuid",
      "logging",
      "datetime",
      "fastapi",
      "typing",
      "("
    ],
    "backend/api/websocket_routes.py": [
      "(",
      "'{client_id}':",
      "APIRouter,",
      "__future__",
      "annotations",
      "backend.services.unified_chat_service",
      "WebSocket.\")",
      "logging",
      "backend.websocket.connection_manager",
      "fastapi",
      "manager",
      "json"
    ],
    "backend/app/__init__.py": [],
    "backend/app/app.py": [
      "backend.services.unified_sophia_service",
      "backend.api",
      "unified_routes",
      "contextlib",
      "os",
      "logging",
      "get_unified_llm_service",
      "datetime",
      "FoundationalKnowledgeService",
      "get_unified_sophia_service",
      "FastAPI",
      "fastapi.middleware.cors",
      "fastapi",
      "UTC,",
      "CORSMiddleware",
      "backend.services.foundational_knowledge_service",
      "fastapi.responses",
      "backend.services.unified_llm_service",
      "asynccontextmanager",
      "uvicorn",
      "JSONResponse"
    ],
    "backend/application/__init__.py": [],
    "backend/core/__init__.py": [],
    "backend/core/aligned_snowflake_config.py": [
      "contextlib",
      "DictCursor",
      "os",
      "dataclasses",
      "logging",
      "snowflake.connector",
      "actual",
      "dataclass",
      "json"
    ],
    "backend/core/auth.py": [
      "Depends",
      "OAuth2PasswordBearer",
      "your",
      "fastapi.security",
      "fastapi"
    ],
    "backend/core/auto_esc_config.py": [
      "subprocess",
      "Any",
      "os",
      "ESC",
      "logging",
      "initialize_default_config()",
      "the",
      "backend.core.security_config",
      "Pulumi",
      "SecurityConfig",
      "typing",
      "json"
    ],
    "backend/core/cache_manager.py": [
      "backend.core.enhanced_cache_manager",
      "warnings",
      "async",
      "placeholder",
      "asyncio",
      "("
    ],
    "backend/core/centralized_config_manager.py": [
      "all",
      "backend.core.config_manager",
      "os",
      "dataclasses",
      "Any",
      "available",
      "enum",
      "get_config_value",
      "logging",
      "Enum",
      "pathlib",
      "config",
      "Path",
      "typing",
      "dataclass",
      "json"
    ],
    "backend/core/comprehensive_memory_manager.py": [
      "__future__",
      "annotations",
      "collections",
      "defaultdict"
    ],
    "backend/core/comprehensive_snowflake_config.py": [
      "uuid4",
      "Snowflake\"\"\"",
      "backend.core.config_manager",
      "Any",
      "dataclasses",
      "Snowflake\")",
      "get_config_value",
      "enum",
      "logging",
      "Enum",
      "uuid",
      "snowflake.connector",
      "typing",
      "dataclass",
      "json"
    ],
    "backend/core/concurrent_agent_processor.py": [
      "typing",
      "agent",
      "pool",
      "dataclass,",
      "dataclasses",
      "time",
      "Any",
      "logging",
      "and",
      "the",
      "asyncio"
    ],
    "backend/core/config.py": [
      "BaseModel",
      "pydantic",
      "__future__",
      "annotations",
      "Any",
      ".auto_esc_config",
      "Pulumi",
      "AutoESCConfig",
      "typing"
    ],
    "backend/core/config_manager.py": [
      "backend.core.base",
      "Any",
      "auto_esc_config",
      "backend.core.auto_esc_config",
      "logging",
      "BaseConfig",
      "typing",
      "("
    ],
    "backend/core/config_validator.py": [
      "typing",
      "structlog",
      "backend.core.config_manager",
      "UTC,",
      "dataclasses",
      "time",
      "dataclass,",
      "enum",
      "Any",
      "get_config_value",
      "argparse",
      "aiohttp",
      "datetime",
      "asyncio",
      "json",
      "Enum"
    ],
    "backend/core/connection_pool.py": [
      "contextlib",
      "tracking\"\"\"",
      "pool",
      "dataclass,",
      "time",
      "tracking",
      "logging",
      "DatabaseError,",
      "snowflake.connector",
      "datetime",
      "typing",
      "backend.core.config_manager",
      "Any",
      "SnowflakeConnection",
      "asyncio",
      "snowflake.connector.errors",
      "asynccontextmanager",
      "dataclasses",
      "datetime,",
      "get_config_value"
    ],
    "backend/core/constitutional_ai.py": [
      "typing",
      "Any",
      "logging",
      "datetime",
      "UTC,"
    ],
    "backend/core/contextual_memory_intelligence.py": [
      "__future__",
      "annotations",
      "ComprehensiveMemoryManager",
      "the",
      ".comprehensive_memory_manager"
    ],
    "backend/core/cortex_ai_config.py": [
      "setup"
    ],
    "backend/core/cross_platform_sync_orchestrator.py": [
      "(",
      "backend.mcp_servers.base.standardized_mcp_server",
      "typing",
      "timedelta",
      "collections",
      "defaultdict",
      "UTC,",
      "time",
      "dataclasses",
      "dataclass,",
      "enum",
      "Any",
      "logging",
      "backend.utils.enhanced_snowflake_cortex_service",
      "datetime",
      "asyncio",
      "a",
      "Enum"
    ],
    "backend/core/data_flow_manager.py": [
      "external",
      "time",
      "queue",
      "logging",
      "datetime",
      "typing",
      "{source_name}:",
      "backend.core.config_manager",
      "Any",
      "asyncio",
      "dataclass",
      "Enum",
      "Callable",
      "redis.asyncio",
      "json",
      "dataclasses",
      "enum",
      "collections.abc",
      "get_config_value"
    ],
    "backend/core/database.py": [],
    "backend/core/dependencies.py": [
      "backend.services.enhanced_unified_chat_service",
      "functools",
      "request",
      "backend.core.cache_manager",
      "fails\"\"\"",
      "backend.services.unified_chat_service",
      "FastAPI",
      "get_cache_manager",
      "asyncio",
      "(",
      "lru_cache"
    ],
    "backend/core/enhanced_cache_manager.py": [
      "cache.",
      "cache",
      "Any",
      "time",
      "hierarchical",
      "hashlib",
      "logging",
      "value:",
      "datetime",
      "backend.core.hierarchical_cache",
      "typing",
      "("
    ],
    "backend/core/enhanced_memory_architecture.py": [
      "Any,",
      "Snowflake",
      "typing",
      "redis",
      "Redis",
      "GPU",
      "dataclasses",
      "time",
      "enum",
      "get_config_value",
      "logging",
      "Enum",
      "backend.core.auto_esc_config",
      "snowflake.connector",
      "{tier}:",
      "asyncio",
      "dataclass",
      "json"
    ],
    "backend/core/enhanced_snowflake_config.py": [
      "Any,",
      "uuid4",
      "Snowflake\"\"\"",
      "enhanced",
      "backend.core.config_manager",
      "json",
      "dataclasses",
      "UNIVERSAL_CHAT",
      "enum",
      "get_config_value",
      "logging",
      "schema",
      "uuid",
      "snowflake.connector",
      "typing",
      "dataclass",
      "Enum"
    ],
    "backend/core/hierarchical_cache.py": [
      "time",
      "hierarchical",
      "logging",
      "datetime",
      "backend.core.performance_monitor",
      "typing",
      "threading",
      "abc",
      "all",
      "gzip",
      "Any",
      "L2",
      "asyncio",
      "dataclass",
      "Enum",
      "ABC,",
      "pickle",
      "redis.asyncio",
      "performance_monitor",
      "collections",
      "dataclasses",
      "enum",
      "OrderedDict",
      "cache\"\"\"",
      "L3",
      "datetime,"
    ],
    "backend/core/integrated_performance_monitoring.py": [
      "psutil",
      "typing",
      "asdict,",
      "timedelta",
      "UTC,",
      "time",
      "dataclasses",
      "Any",
      "key",
      "logging",
      "datetime",
      "redis.asyncio",
      "asyncio",
      "json",
      "random"
    ],
    "backend/core/integration_registry.py": [
      "__future__",
      "annotations",
      "typing",
      "Any"
    ],
    "backend/core/intelligent_caching_system.py": [
      "Callable",
      "typing",
      "cache",
      "Any",
      "dataclasses",
      "enum",
      "logging",
      "collections.abc",
      "datetime",
      "asyncio",
      "dataclass",
      "Enum"
    ],
    "backend/core/intelligent_data_ingestion.py": [
      "BaseModel,",
      "logging",
      "datetime",
      "typing",
      "tabular",
      "Any",
      "document",
      "presentation",
      "{source.name}\",",
      "spreadsheet",
      "JSON",
      "__future__",
      "backend.core.integration_registry",
      "generic",
      "json",
      "pydantic",
      "annotations",
      "IntegrationRegistry",
      "uuid",
      "active",
      "source"
    ],
    "backend/core/logger.py": [
      "logging"
    ],
    "backend/core/mcp_sync_orchestrator_config.py": [
      "backend.core.cross_platform_sync_orchestrator",
      "backend.monitoring.mcp_metrics_collector",
      "backend.mcp_servers.base.standardized_mcp_server",
      "typing",
      "MCPMetricsCollector",
      "MCPServerConfig",
      "Any",
      "logging",
      "datetime",
      "datetime,",
      "asyncio",
      "("
    ],
    "backend/core/optimized_cache.py": [
      "contextlib",
      "Redis",
      "dataclass,",
      "time",
      "hierarchical",
      "logging",
      "typing",
      "all",
      "backend.core.config_manager",
      "Any",
      "L2",
      "asyncio",
      "Enum",
      "LRU",
      "redis.asyncio",
      "json",
      "L1",
      "global",
      "collections",
      "dataclasses",
      "enum",
      "OrderedDict",
      "cache\"\"\"",
      "get_config_value"
    ],
    "backend/core/optimized_connection_manager.py": [
      "contextlib",
      "aiomysql",
      "pool",
      "time",
      "logging",
      "psycopg2",
      "snowflake.connector",
      "datetime",
      "backend.core.performance_monitor",
      "typing",
      "get_secure_snowflake_config",
      "backend.core.config_manager",
      "Any",
      "asyncio",
      "dataclass",
      "Enum",
      "optional",
      "redis.asyncio",
      "global",
      "asynccontextmanager",
      "backend.core.secure_snowflake_config",
      "performance_monitor",
      "asyncpg",
      "dataclasses",
      "enum",
      "get_config_value"
    ],
    "backend/core/optimized_database_manager.py": [
      "contextlib",
      "time",
      "logging",
      "result",
      "snowflake.connector.pool",
      "datetime",
      "typing",
      "AsyncIterator",
      "backend.core.aligned_snowflake_config",
      "backend.core.config_manager",
      "Any",
      "UTC,",
      "prometheus_client",
      "asyncio",
      "dataclass",
      "Enum",
      "the",
      "Counter,",
      "redis.asyncio",
      "asynccontextmanager",
      "aligned_snowflake_config",
      "asyncpg",
      "dataclasses",
      "enum",
      "collections.abc",
      "cache\"\"\"",
      "ConnectionPool",
      "get_config_value"
    ],
    "backend/core/performance_monitor.py": [
      "dataclass,",
      "time",
      "logging",
      "datetime",
      "statistics",
      "typing",
      "threading",
      "wraps",
      "deque",
      "Any",
      "asyncio",
      "Enum",
      "psutil",
      "Callable",
      "functools",
      "collections",
      "dataclasses",
      "enum",
      "collections.abc",
      "datetime,"
    ],
    "backend/core/query_optimization_framework.py": [
      "typing",
      "Any",
      "dataclasses",
      "logging",
      "INSERT",
      "datetime",
      "asyncio",
      "dataclass",
      "query"
    ],
    "backend/core/real_time_streaming.py": [
      "__future__",
      "annotations",
      "AsyncGenerator,",
      "collections.abc"
    ],
    "backend/core/secure_credential_manager.py": [
      "__future__",
      "annotations",
      "ESC",
      ".auto_esc_config",
      "AutoESCConfig"
    ],
    "backend/core/secure_environment_validator.py": [
      "__future__",
      "annotations",
      "os"
    ],
    "backend/core/secure_snowflake_config.py": [
      "backend.core.config_manager",
      "dataclasses",
      "logging",
      "snowflake.connector",
      "dataclass",
      "get_config_value"
    ],
    "backend/core/security.py": [
      "Depends,",
      "Settings",
      "CryptContext",
      "HTTPAuthorizationCredentials,",
      "JWT",
      "jose",
      ".settings",
      "database",
      "fastapi.security",
      "datetime",
      "fastapi",
      "datetime,",
      "JWTError,",
      "passlib.context"
    ],
    "backend/core/security_config.py": [
      "Any",
      "dataclasses",
      "enum",
      "get_config_value",
      "logging",
      "backend.core.auto_esc_config",
      "def",
      "typing",
      "dataclass",
      "Enum"
    ],
    "backend/core/self_optimization.py": [
      "SophiaConstitutionalFramework",
      "usage",
      "typing",
      "collections",
      "defaultdict",
      "backend.core.constitutional_ai",
      "UTC,",
      "Any",
      "logging",
      "past",
      "datetime",
      "results",
      "asyncio"
    ],
    "backend/core/settings.py": [
      "BaseSettings",
      "pydantic_settings"
    ],
    "backend/core/simple_auth.py": [
      "typing",
      "Any"
    ],
    "backend/core/simple_config.py": [
      "Any,",
      "typing",
      "environment",
      "subprocess",
      "os",
      "logging",
      "Pulumi",
      "environment\"",
      "datetime",
      "UTC,",
      "json"
    ],
    "backend/core/simple_mcp_base.py": [
      "ABC,",
      "abc",
      "all",
      "Any",
      "logging",
      "AI",
      "typing"
    ],
    "backend/core/snowflake_abstraction.py": [
      "ABC,",
      "abc",
      "typing",
      "Any",
      "time",
      "dataclasses",
      "enum",
      "logging",
      "asyncio",
      "dataclass",
      "Enum",
      "pool\"\"\""
    ],
    "backend/core/snowflake_config_manager.py": [
      "function",
      "dataclass,",
      "get_config_value",
      "hashlib",
      "logging",
      "snowflake.connector",
      "datetime",
      "typing",
      "wraps",
      "backend.core.config_manager",
      "database",
      "asyncio",
      "Enum",
      "Snowflake",
      "__future__",
      "json",
      "functools",
      "annotations",
      "dataclasses",
      "enum",
      "datetime,",
      "Any,"
    ],
    "backend/core/snowflake_config_override.py": [
      "get_config_value",
      "backend.core.config_manager",
      "os",
      "ESC"
    ],
    "backend/core/snowflake_override.py": [
      "get_config_value",
      "logging",
      "backend.core.config_manager",
      "os"
    ],
    "backend/core/snowflake_production_config.py": [],
    "backend/core/snowflake_schema_integration.py": [
      "Snowflake\"\"\"",
      "comprehensive",
      "DictCursor",
      "backend.core.config_manager",
      "Any",
      "dataclasses",
      "get_config_value",
      "enum",
      "logging",
      "Enum",
      "the",
      "snowflake.connector",
      "schema",
      "typing",
      "dataclass",
      "json"
    ],
    "backend/core/snowflake_standard_config.py": [],
    "backend/core/sophia_env_config.py": [
      "os",
      "project",
      "logging",
      "datetime",
      "typing",
      "Any",
      "{self._stack_name}\")",
      "pathlib",
      "UTC,",
      "sys",
      "Enum",
      "__future__",
      "the",
      "Pulumi",
      "current",
      "json",
      "annotations",
      "subprocess",
      "Git",
      "enum",
      "explicit",
      "Path"
    ],
    "backend/core/sophia_intelligence_orchestrator.py": [],
    "backend/core/sql_security_validator.py": [
      "Any",
      "enum",
      "logging",
      "re",
      "typing",
      "{len(input_string)}",
      "Enum"
    ],
    "backend/core/startup_config.py": [
      "logging",
      "os"
    ],
    "backend/core/unified_connection_manager.py": [
      "contextlib",
      "pool",
      "os",
      "time",
      "get_config_value",
      "logging",
      "snowflake.connector",
      "datetime",
      "typing",
      "pool\"\"\"",
      "backend.core.config_manager",
      "UTC,",
      "asyncio",
      "dataclass",
      "Enum",
      "the",
      "optional",
      "redis.asyncio",
      "asynccontextmanager",
      "asyncpg",
      "environment",
      "dataclasses",
      "enum",
      "Any,"
    ],
    "backend/database/postgresql_staging_manager.py": [
      "asyncpg",
      "all",
      "backend.core.config_manager",
      "Any",
      "dataclasses",
      "logging",
      "typing",
      "dataclass",
      "get_config_value",
      "pool\"\"\""
    ],
    "backend/domain/__init__.py": [],
    "backend/etl/enhanced_ingestion_service.py": [
      "typing",
      "backend.etl.estuary.estuary_configuration_manager",
      "SemanticLayerService",
      "Any",
      "logging",
      "the",
      "datetime",
      "backend.services.semantic_layer_service",
      "asyncio",
      "a",
      "("
    ],
    "backend/etl/enhanced_unified_data_pipeline.py": [
      "backend.etl.estuary_flow_orchestrator",
      "dataclass,",
      "logging",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "backend.core.aligned_snowflake_config",
      "backend.core.config_manager",
      "Any",
      "multiple",
      "UTC,",
      "asyncio",
      "Enum",
      "EstuaryFlowOrchestrator",
      "redis.asyncio",
      "SnowflakeCortexService",
      "aligned_snowflake_config",
      "asyncpg",
      "environment",
      "dataclasses",
      "Estuary",
      "enum",
      "get_config_value"
    ],
    "backend/etl/enhanced_unified_data_pipeline_backup.py": [
      "backend.etl.estuary_flow_orchestrator",
      "dataclass,",
      "logging",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "multiple",
      "backend.core.config_manager",
      "Any",
      "aiohttp",
      "UTC,",
      "Enum",
      "EstuaryFlowOrchestrator",
      "redis.asyncio",
      "SnowflakeCortexService",
      "asyncpg",
      "environment",
      "dataclasses",
      "enum",
      "get_config_value"
    ],
    "backend/etl/estuary_flow_orchestrator.py": [
      "backend.core.secure_snowflake_config",
      "typing",
      "secure_snowflake_config",
      "backend.core.config_manager",
      "Any",
      "dataclasses",
      "HubSpot,",
      "get_config_value",
      "logging",
      "asyncio",
      "dataclass",
      "aiohttp"
    ],
    "backend/etl/gong_api_extractor_clean.py": [
      "base64",
      "asyncpg",
      "environment",
      "os",
      "dataclasses",
      "logging",
      "aiohttp",
      "Gong",
      "datetime",
      "last",
      "datetime,",
      "asyncio",
      "dataclass",
      "json"
    ],
    "backend/infrastructure/__init__.py": [],
    "backend/infrastructure/sophia_iac_orchestrator.py": [
      "InfrastructureStateManager",
      "backend.infrastructure.adapters.portkey_adapter",
      "DependencyManager",
      "ChatPromptTemplate",
      "backend.infrastructure.adapters.hubspot_adapter",
      "dataclass,",
      "backend.infrastructure.adapters.snowflake_adapter",
      "backend.infrastructure.adapters.gong_adapter",
      "logging",
      "backend.infrastructure.adapters.linear_adapter",
      "backend.infrastructure.core.webhook_router",
      "datetime",
      "backend.infrastructure.adapters.figma_adapter",
      "typing",
      "langchain.agents",
      "HubSpotAdapter",
      "backend.infrastructure.adapters.lambda_labs_adapter",
      "VercelAdapter",
      "abc",
      "EstuaryAdapter",
      "backend.infrastructure.adapters.asana_adapter",
      "PolicyEngine",
      "backend.infrastructure.core.dependency_manager",
      "backend.core.config_manager",
      "Any",
      "WebhookRouter",
      "ChatOpenAI",
      "AgentExecutor,",
      "pathlib",
      "langchain.tools",
      "BaseTool",
      "backend.infrastructure.adapters.apollo_adapter",
      "backend.infrastructure.adapters.estuary_adapter",
      "backend.infrastructure.core.state_manager",
      "asyncio",
      "sys",
      "Enum",
      "backend.infrastructure.core.policy_engine",
      "OpenRouterAdapter",
      "ABC,",
      "FigmaAdapter",
      "GongAdapter",
      "backend.infrastructure.adapters.vercel_adapter",
      "backend.infrastructure.adapters.slack_adapter",
      "SlackAdapter",
      "LinearAdapter",
      "UserGemsAdapter",
      "the",
      "json",
      "LambdaLabsAdapter",
      "langchain.prompts",
      "SnowflakeAdapter",
      "backend.infrastructure.adapters.usergems_adapter",
      "dataclasses",
      "AsanaAdapter",
      "enum",
      "argparse",
      "langchain_openai",
      "Path",
      "ApolloAdapter",
      "get_config_value",
      "PortkeyAdapter",
      "backend.infrastructure.adapters.openrouter_adapter"
    ],
    "backend/integrations/advanced_estuary_flow_manager.py": [
      "backend.core.config_manager",
      "Any",
      "logging",
      "{",
      "'flow/document';",
      "typing",
      "get_config_value"
    ],
    "backend/integrations/enhanced_gong_integration.py": [
      "..core.simple_config",
      "logging",
      "and",
      "backend.integrations.gong_api_client_enhanced",
      "datetime",
      "EnhancedSnowflakeCortexService",
      "typing",
      "get_gong_access_key",
      "all",
      "Any",
      "configuration",
      "asyncio",
      "Gong\"\"\"",
      "Enum",
      "asdict,",
      "(",
      "..utils.enhanced_snowflake_cortex_service",
      "dataclasses",
      "enum",
      "Gong",
      "datetime,"
    ],
    "backend/integrations/enhanced_microsoft_gong_integration.py": [
      "backend.services.enhanced_sentiment_analyzer",
      "SnowflakeGongConnector",
      "logging",
      "datetime",
      "Microsoft",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "Any",
      "Gong\"\"\"",
      "dataclass",
      "Enum",
      "you",
      "(",
      "SnowflakeCortexService",
      "backend.utils.snowflake_gong_connector",
      "dataclasses",
      "enum",
      "Gong",
      "datetime,"
    ],
    "backend/integrations/estuary_flow_manager.py": [
      "def",
      "subprocess",
      "os",
      "dataclasses",
      "Any",
      "enum",
      "logging",
      "Enum",
      "pathlib",
      "Pulumi",
      "Path",
      "datetime",
      "yaml",
      "typing",
      "dataclass",
      "json"
    ],
    "backend/integrations/gong_api_client.py": [
      "(",
      "urljoin",
      "typing",
      "backend.integrations.gong_webhook_server",
      "urllib.parse",
      "pydantic",
      "__future__",
      "annotations",
      "structlog",
      "Any",
      "BaseModel,",
      "Gong",
      "datetime",
      "UTC,",
      "aiohttp"
    ],
    "backend/integrations/gong_api_client_enhanced.py": [
      "urljoin",
      "time",
      "endpoint.\"\"\"",
      "BaseModel,",
      "hashlib",
      "webhook.\"\"\"",
      "datetime",
      "Redis.\"\"\"",
      "typing",
      "random",
      "deque",
      "Any",
      "UTC,",
      "asyncio",
      "Enum",
      "prometheus_client",
      "Callable",
      "__future__",
      "structlog",
      "Counter,",
      "email",
      "redis.asyncio",
      "json",
      "urllib.parse",
      "pydantic",
      "collections",
      "annotations",
      "endpoint",
      "enum",
      "collections.abc",
      "aiohttp"
    ],
    "backend/integrations/gong_redis_client.py": [
      "typing",
      "pydantic",
      "__future__",
      "annotations",
      "structlog",
      "Any",
      "BaseModel,",
      "enum",
      "Enum",
      "Redis\")",
      "datetime",
      "redis.asyncio",
      "UTC,",
      "json",
      "Redis.\"\"\""
    ],
    "backend/integrations/gong_snowflake_client.py": [
      "__future__",
      "annotations",
      "structlog",
      "Any",
      "hashlib",
      "snowflake.connector",
      "snowflake.connector.pool",
      "typing",
      "DictCursor",
      "json",
      "SnowflakePool"
    ],
    "backend/integrations/gong_webhook_processor.py": [
      "Any",
      "dataclasses",
      "time",
      "enum",
      "and",
      "logging",
      "datetime",
      "typing",
      "dataclass",
      "Enum"
    ],
    "backend/integrations/gong_webhook_server.py": [
      "uuid4",
      "time",
      "BaseModel,",
      "datetime",
      "jwt",
      "typing",
      "WebhookProcessor",
      "headers",
      "Any",
      "backend.integrations.gong_webhook_processor",
      "fastapi.middleware.cors",
      "fastapi",
      "UTC,",
      "asyncio",
      "prometheus_client",
      "CORSMiddleware",
      "Callable",
      "__future__",
      "structlog",
      "BackgroundTasks,",
      "BaseSettings",
      "pydantic_settings",
      "Counter,",
      "uvicorn",
      "pydantic",
      "annotations",
      "uuid",
      "collections.abc"
    ],
    "backend/integrations/portkey_gateway_service.py": [
      "typing",
      "AsyncGenerator",
      "UTC,",
      "dataclasses",
      "Any",
      "..core.simple_config",
      "enum",
      "logging",
      "collections.abc",
      "Enum",
      "aiohttp",
      "SophiaConfig",
      "datetime",
      "Portkey",
      "asyncio",
      "dataclass",
      "json"
    ],
    "backend/mcp_servers/__init__.py": [],
    "backend/mcp_servers/ai_memory_auto_discovery.py": [
      "dataclass,",
      "logging",
      "datetime",
      "typing",
      "backend.core.config_manager",
      "Any",
      "asyncio",
      "Enum",
      "conversations",
      "text\"\"\"",
      "re",
      "conversation",
      "(",
      "json",
      "openai",
      "dataclasses",
      "detected",
      "enum",
      "{len(ctx_list)}",
      "AI",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "get_config_value"
    ],
    "backend/mcp_servers/costar_mcp_server.py": [
      "history.\"\"\"",
      "hashlib",
      "logging",
      "datetime",
      "typing",
      "pandas",
      "date,",
      "backend.core.config_manager",
      "Any",
      "ESC",
      "pathlib",
      "asyncio",
      "__future__",
      "backend.core.integration_registry",
      "operation.\"\"\"",
      "log",
      "record",
      "BaseModel",
      "pydantic",
      "annotations",
      "asyncpg",
      "IntegrationRegistry",
      "status",
      "Path",
      "get_config_value"
    ],
    "backend/mcp_servers/enhanced_mcp_base.py": [
      "contextlib",
      "time",
      "logging",
      "datetime",
      "typing",
      "AsyncIterator",
      "abc",
      "backend.core.config_manager",
      "Any",
      "asyncio",
      "dataclass",
      "ABC,",
      "backend.mcp_servers.server.fastmcp",
      "Pulumi",
      "asynccontextmanager",
      "FastMCP",
      "dataclasses",
      "collections.abc",
      "get_config_value"
    ],
    "backend/mcp_servers/mcp_auth.py": [
      "logging",
      "backend.core.config_manager",
      "get_config_value",
      "Pulumi"
    ],
    "backend/mcp_servers/mcp_client.py": [
      "typing",
      "Any",
      "e",
      "logging",
      "pathlib",
      "aiohttp",
      "Path",
      "asyncio",
      "json"
    ],
    "backend/mcp_servers/mcp_health.py": [
      "typing",
      "asdict,",
      "Any",
      "dataclasses",
      "logging",
      "backend.core.snowflake_override",
      "mcp_auth",
      "backend.mcp_servers.mcp_auth",
      "datetime",
      "asyncio",
      "("
    ],
    "backend/mcp_servers/mcp_registry.py": [
      "asdict,",
      "dataclasses",
      "MCPServerHealth,",
      "logging",
      ".sophia_mcp_base",
      "asyncio"
    ],
    "backend/mcp_servers/optimized_mcp_client.py": [
      "(",
      "typing",
      "backend.mcp_servers.optimized_network",
      "Any",
      "dataclasses",
      "time",
      "e",
      "enum",
      "logging",
      "Enum",
      "pathlib",
      "the",
      "Path",
      "MCP",
      "orjson",
      "asyncio",
      "dataclass",
      "json"
    ],
    "backend/mcp_servers/optimized_mcp_server.py": [
      "APIRouter,",
      "backend.mcp_servers.optimized_network",
      "os",
      "time",
      "import_module",
      "logging",
      "datetime",
      "aiofiles",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "abc",
      "importlib",
      "gemini_cli_integration.gemini_cli_provider",
      "Any",
      "fastapi.middleware.gzip",
      "fastapi",
      "UTC,",
      "asyncio",
      "Enum",
      "dataclass",
      "prometheus_client",
      "ABC,",
      "psutil",
      "mmap",
      "GZipMiddleware",
      "the",
      "re",
      "orjson",
      "Counter,",
      "{path}:",
      "html2text",
      "json",
      "(",
      "SnowflakeCortexService",
      "uvicorn",
      "environment",
      "WebFetch",
      "I/O",
      "dataclasses",
      "enum",
      "gc",
      "centralized"
    ],
    "backend/mcp_servers/optimized_network.py": [
      "prometheus_client",
      "typing",
      "ClientSession,",
      "gzip",
      "time",
      "dataclasses",
      "Any",
      "enum",
      "logging",
      "Enum",
      "aiohttp",
      "orjson",
      "asyncio",
      "dataclass",
      "json",
      "Counter,"
    ],
    "backend/mcp_servers/server.py": [],
    "backend/mcp_servers/snowflake_admin_mcp_server.py": [
      "scripts.snowflake_config_manager",
      "backend.mcp_servers.base.standardized_mcp_server",
      "typing",
      "Any",
      "pathlib",
      "StandardizedMCPServer",
      "Path",
      "SnowflakeConfigManager",
      "asyncio",
      "sys"
    ],
    "backend/mcp_servers/sophia_mcp_base.py": [
      "os",
      "time",
      "logging",
      "datetime",
      "typing",
      "OptimizedConnectionManager",
      "abc",
      "backend.mcp_servers.types",
      "Resource,",
      "backend.core.config_manager",
      "Any",
      "dataclass",
      "ABC,",
      "Pulumi",
      "backend.core.optimized_connection_manager",
      "dataclasses",
      "ImageContent,",
      "mcp",
      "get_config_value"
    ],
    "backend/models/__init__.py": [],
    "backend/models/api_models.py": [
      "pydantic",
      "Any",
      "BaseModel,",
      "datetime",
      "typing"
    ],
    "backend/models/chat_models.py": [
      "pydantic",
      "Any",
      "BaseModel,",
      "uuid",
      "enum",
      "datetime",
      "typing",
      "Enum"
    ],
    "backend/models/conversation.py": [
      "(",
      "backend.agents.enhanced.data_models",
      "enhanced"
    ],
    "backend/models/orchestration_models.py": [
      "cross-group",
      "development",
      "dataclasses",
      "orchestration",
      "business",
      "datetime",
      "typing",
      "dataclass",
      "Any,"
    ],
    "backend/models/project.py": [
      "datetime",
      "BaseModel",
      "pydantic"
    ],
    "backend/monitoring/__init__.py": [
      "modules"
    ],
    "backend/monitoring/alert_manager.py": [
      "BaseModel,",
      "datetime",
      "typing",
      "Any",
      "AlertSeverity,",
      "recent",
      "UTC,",
      "asyncio",
      "Enum",
      "__future__",
      "structlog",
      ".gong_data_quality",
      "httpx",
      "collections",
      "annotations",
      "defaultdict,",
      "pydantic",
      "enum",
      "active"
    ],
    "backend/monitoring/comprehensive_health_monitor.py": [
      "typing",
      "Any",
      "dataclasses",
      "enum",
      "logging",
      "datetime",
      "datetime,",
      "asyncio",
      "dataclass",
      "Enum"
    ],
    "backend/monitoring/data_pipeline_metrics.py": [
      "prometheus_client",
      "a",
      "Counter,"
    ],
    "backend/monitoring/deployment_status_monitor.py": [
      "typing",
      "Any",
      "dataclasses",
      "enum",
      "logging",
      "datetime",
      "asyncio",
      "dataclass",
      "Enum"
    ],
    "backend/monitoring/deployment_tracker.py": [
      "SnowflakeCortexService",
      "typing",
      "datetime",
      "environment",
      "subprocess",
      "os",
      "dataclasses",
      "Any",
      "enum",
      "logging",
      "Enum",
      "shlex",
      "backend.utils.snowflake_cortex_service",
      "UTC,",
      "dataclass",
      "json"
    ],
    "backend/monitoring/enhanced_deployment_tracker.py": [
      "typing",
      "environment",
      "os",
      "dataclasses",
      "Any",
      "enum",
      "logging",
      "datetime",
      "UTC,",
      "dataclass",
      "Enum"
    ],
    "backend/monitoring/enhanced_sophia_monitoring.py": [
      "psutil",
      "backend.monitoring.prometheus_config",
      "SophiaSelfOptimizer",
      "existing",
      "typing",
      "SophiaMetrics",
      "all",
      "performance",
      "Any",
      "time",
      "backend.core.integrated_performance_monitoring",
      "backend.core.self_optimization",
      "historical",
      "logging",
      "datetime",
      "datetime,",
      "asyncio",
      "("
    ],
    "backend/monitoring/gong_data_quality.py": [
      "validation",
      "time",
      "BaseModel,",
      "datetime",
      "typing",
      "Any",
      "UTC,",
      "prometheus_client",
      "Enum",
      "nested",
      "__future__",
      "structlog",
      "BaseSettings",
      "pydantic_settings",
      "Counter,",
      "pydantic",
      "collections",
      "annotations",
      "defaultdict,",
      "enum",
      "API"
    ],
    "backend/monitoring/group_health_monitoring.py": [
      "(",
      "backend.monitoring.mcp_metrics_collector",
      "typing",
      "MCPMetricsCollector",
      "all",
      "dataclass,",
      "dataclasses",
      "Any",
      "configuration",
      "enum",
      "each",
      "logging",
      "backend.services.mcp_orchestration_service",
      "datetime",
      "UTC,",
      "a",
      "Enum"
    ],
    "backend/monitoring/health_monitoring_system.py": [
      "typing",
      "UTC,",
      "dataclasses",
      "Any",
      "enum",
      "logging",
      "datetime",
      "asyncio",
      "dataclass",
      "Enum"
    ],
    "backend/monitoring/intelligent_alerting_system.py": [
      "typing",
      "Any",
      "dataclasses",
      "enum",
      "logging",
      "datetime",
      "datetime,",
      "asyncio",
      "dataclass",
      "Enum"
    ],
    "backend/monitoring/llm_metrics.py": [
      "prometheus_client",
      "Counter,"
    ],
    "backend/monitoring/mcp_health_monitor.py": [
      "prometheus_client",
      "response",
      "httpx",
      "dataclasses",
      "time",
      "enum",
      "logging",
      "Counter,",
      "datetime",
      "config/consolidated_mcp_ports.json",
      "asyncio",
      "dataclass",
      "Enum"
    ],
    "backend/monitoring/mcp_metrics_collector.py": [
      "metrics.\"\"\"",
      "timedelta",
      "dataclass,",
      "logging",
      "datetime",
      "typing",
      "Any",
      "UTC,",
      "asyncio",
      "prometheus_client",
      "Enum",
      "custom",
      "psutil",
      "Callable",
      "(",
      "collections",
      "defaultdict,",
      "dataclasses",
      "enum",
      "collections.abc"
    ],
    "backend/monitoring/mcp_monitoring_config.py": [
      "(",
      "backend.monitoring.mcp_metrics_collector",
      "Callable",
      "typing",
      "all",
      "Any",
      "dataclasses",
      "enum",
      "logging",
      "collections.abc",
      "aiohttp",
      "datetime",
      "datetime,",
      "asyncio",
      "dataclass",
      "Enum"
    ],
    "backend/monitoring/memory_monitoring_service.py": [
      "prometheus_client",
      "Counter,"
    ],
    "backend/monitoring/performance_analytics.py": [
      "history",
      "Any",
      "dataclasses",
      "logging",
      "datetime",
      "datetime,",
      "typing",
      "dataclass"
    ],
    "backend/monitoring/production_mcp_monitor.py": [
      "Callable",
      "typing",
      "contextlib",
      "httpx",
      "dataclass,",
      "time",
      "dataclasses",
      "Any",
      "enum",
      "logging",
      "collections.abc",
      "Counter,",
      "datetime",
      "datetime,",
      "asyncio",
      "prometheus_client",
      "Enum"
    ],
    "backend/monitoring/prometheus_config.py": [
      "contextmanager",
      "functools",
      "contextlib",
      "wraps",
      "time",
      "logging",
      "result",
      "asyncio",
      "prometheus_client",
      "("
    ],
    "backend/monitoring/quality_rules.py": [
      "typing",
      "BaseModel",
      "pydantic",
      "__future__",
      "annotations",
      "structlog",
      "Any",
      "AlertSeverity,",
      "enum",
      "re",
      ".gong_data_quality",
      "datetime",
      "UTC,",
      "Enum"
    ],
    "backend/monitoring/security_metrics_exporter.py": [
      "BaseModel,",
      "logging",
      "datetime",
      "typing",
      "comparison",
      "Any",
      "pathlib",
      "fastapi",
      "asyncio",
      "prometheus_client",
      "FastAPI,",
      "latest",
      "BaseSettings",
      "pydantic_settings",
      "raw",
      "(",
      "json",
      "uvicorn",
      "pydantic",
      "Path",
      "yaml"
    ],
    "backend/n8n_bridge/main.py": [
      "Redis",
      "os",
      "BaseModel,",
      "logging",
      "datetime",
      "typing",
      "Any",
      "fastapi.middleware.cors",
      "fastapi",
      "UTC,",
      "asyncio",
      "CORSMiddleware",
      "MCPOrchestrationService",
      "BackgroundTasks,",
      "N8N",
      "redis.asyncio",
      "uvicorn",
      "pydantic",
      "active",
      "backend.services.mcp_orchestration_service"
    ],
    "backend/orchestration/unified_intent_engine.py": [
      "persistent",
      "logging",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "successful",
      "EnhancedAiMemoryMCPServer",
      "Any",
      "recent",
      "dataclass",
      "Enum",
      "this",
      "__future__",
      "the",
      "re",
      "json",
      "SnowflakeCortexService",
      "annotations",
      "dataclasses",
      "enum",
      "known",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server"
    ],
    "backend/orchestration/continuous_learning_framework.py": [
      "every",
      "interaction:",
      "interactions\"\"\"",
      "logging",
      "backend.services.mem0_integration_service",
      "datetime",
      "typing",
      "a",
      "IntentAnalysis,",
      "backend.orchestration.unified_intent_engine",
      "EnhancedAiMemoryMCPServer",
      "memory",
      "dataclass",
      "Enum",
      "__future__",
      "the",
      "json",
      "annotations",
      "dataclasses",
      "enum",
      "get_mem0_service",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "Any,"
    ],
    "backend/orchestration/cross_group_intelligence_hub.py": [
      "0.0",
      "other",
      "logging",
      "datetime",
      "excluded",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "a",
      "EnhancedAiMemoryMCPServer",
      "multiple",
      "dataclass",
      "Enum",
      "__future__",
      "SnowflakeCortexService",
      "{insight.source_group}\")",
      "annotations",
      "dataclasses",
      "enum",
      "uuid",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "Any,"
    ],
    "backend/orchestration/intelligent_meta_orchestrator.py": [
      "backend.orchestration.unified_intent_engine",
      "execution",
      "__future__",
      "annotations",
      "Any",
      "logging",
      "result",
      "typing",
      "(",
      "workflow"
    ],
    "backend/orchestration/langgraph_mcp_orchestrator.py": [
      "END,",
      "typing",
      "langgraph.graph",
      "Any",
      "enum",
      "message",
      "logging",
      "datetime",
      "asyncio",
      "Enum"
    ],
    "backend/presentation/__init__.py": [],
    "backend/prompts/optimized_templates.py": [
      "Snowflake",
      "materialized",
      "enum",
      "logging",
      "tiktoken",
      "Enum"
    ],
    "backend/scripts/batch_embed_data.py": [
      "SnowflakeCortexService",
      "typing",
      "dataclass",
      "backend.core.snowflake_config_manager",
      "SnowflakeConfigManager",
      "structlog",
      "Any",
      "dataclasses",
      "argparse",
      "enum",
      "logging",
      "{config.table_name}:",
      "tqdm",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "asyncio",
      "sys",
      "Enum"
    ],
    "backend/scripts/check_environment_health.py": [
      "subprocess",
      "json",
      "os"
    ],
    "backend/scripts/deploy_cortex_functions.py": [
      "snowflake.connector.errors",
      "ProgrammingError",
      "os",
      "logging",
      "backend.core.auto_esc_config",
      "snowflake.connector",
      "Pulumi",
      "get_config_value"
    ],
    "backend/scripts/deploy_snowflake_schema.py": [
      "deployment",
      "core.auto_esc_config",
      "DictCursor",
      "file.",
      "logging",
      "pathlib",
      "snowflake.connector",
      "Path",
      "datetime",
      "Pulumi",
      "asyncio",
      "sys",
      "get_config_value"
    ],
    "backend/scripts/enhanced_asana_integration_test_suite.py": [
      "backend.services.enhanced_unified_chat_service",
      "dataclass,",
      "time",
      "logging",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "backend.etl.estuary.estuary_configuration_manager",
      "EnhancedAiMemoryMCPServer",
      "Any",
      "asyncio",
      "Enum",
      "EnhancedEstuaryManager",
      "(",
      "json",
      "SnowflakeCortexService",
      "dataclasses",
      "argparse",
      "enum",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "backend.agents.specialized.asana_project_intelligence_agent"
    ],
    "backend/scripts/enhanced_estuary_integration_test_suite.py": [
      "dataclass,",
      "time",
      "get_config_value",
      "backend.scripts.estuary_gong_setup",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "EnhancedAiMemoryMCPServer",
      "backend.core.config_manager",
      "Any",
      "EstuaryConfig,",
      "asyncio",
      "UTC,",
      "Enum",
      "structlog",
      "json",
      "SnowflakeCortexService",
      "dataclasses",
      "argparse",
      "enum",
      "Gong",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "aiohttp"
    ],
    "backend/scripts/enhanced_gong_pipeline_test_suite.py": [
      "(",
      "typing",
      "asdict,",
      "backend.scripts.sophia_data_pipeline_ultimate",
      "backend.core.config_manager",
      "Any",
      "time",
      "dataclasses",
      "argparse",
      "enum",
      "logging",
      "Enum",
      "get_config_value",
      "datetime",
      "datetime,",
      "asyncio",
      "sys",
      "json"
    ],
    "backend/scripts/estuary_gong_setup.py": [
      "time",
      "get_config_value",
      "logging",
      "datetime",
      "typing",
      "random",
      "backend.core.config_manager",
      "Any",
      "asyncio",
      "dataclass",
      "UTC,",
      "sys",
      "Enum",
      "structlog",
      "Pulumi",
      "dataclasses",
      "argparse",
      "enum",
      "aiohttp"
    ],
    "backend/scripts/ingest_foundational_kb.py": [
      "logging",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "a",
      "{file_path}\")",
      "Any",
      "pathlib",
      "asyncio",
      "dataclass",
      "Enum",
      "local",
      "csv",
      "backend.services.foundational_knowledge_service",
      "(",
      "json",
      "SnowflakeCortexService",
      "dataclasses",
      "uuid",
      "enum",
      "file",
      "argparse",
      "Path",
      "{config.source_file}\""
    ],
    "backend/scripts/integrate_gong_pipeline.py": [
      "SnowflakeCortexService",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "os",
      "dataclasses",
      "Any",
      "argparse",
      "asyncio",
      "logging",
      "enum",
      "Enum",
      "datetime",
      "last",
      "STG_TRANSFORMED",
      "UTC,",
      "dataclass",
      "json"
    ],
    "backend/scripts/sophia_data_pipeline_ultimate.py": [
      "time",
      "get_config_value",
      "logging",
      "snowflake.connector",
      "Sophia",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "{from_date}",
      "backend.core.config_manager",
      "Any",
      "asyncio",
      "sys",
      "Enum",
      "asdict,",
      "re",
      "Pulumi",
      "the",
      "json",
      "SnowflakeCortexService",
      "dataclasses",
      "argparse",
      "uuid",
      "enum",
      "traceback",
      "Gong",
      "datetime,",
      "aiohttp"
    ],
    "backend/scripts/transform_slack_linear_data.py": [
      "SnowflakeCortexService",
      "Slack",
      "backend.core.snowflake_config_manager",
      "SnowflakeConfigManager",
      "Slack\")",
      "dataclasses",
      "enum",
      "argparse",
      "logging",
      "result",
      "re",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "asyncio",
      "dataclass",
      "Enum"
    ],
    "backend/security/audit_logger.py": [
      "os",
      "logging",
      "sentry_sdk",
      "datetime",
      "typing",
      "threading",
      "wraps",
      "Sentry",
      "Any",
      "sys",
      "Enum",
      "re",
      "json",
      "functools",
      "environment",
      "uuid",
      "enum",
      "traceback",
      "logs."
    ],
    "backend/security/audit_middleware.py": [
      "BaseHTTPMiddleware",
      "FastAPI,",
      "Callable",
      "starlette.middleware.base",
      "starlette.types",
      "ASGIApp",
      "request",
      "APIRoute",
      "request\"\"\"",
      "authorization",
      "time",
      "backend.security.audit_logger",
      "uuid",
      "fastapi.routing",
      "collections.abc",
      "fastapi",
      "(",
      "session"
    ],
    "backend/security/llm_audit.py": [
      "args",
      "Callable",
      "functools",
      "function",
      "Any",
      "time",
      "backend.security.audit_logger",
      "text\"\"\"",
      "asyncio",
      "collections.abc",
      "re",
      "response\"\"\"",
      "prompts",
      "typing",
      "("
    ],
    "backend/security/secret_management.py": [
      "base64",
      "os",
      "BaseModel,",
      "hashlib",
      "logging",
      "Fernet",
      "datetime",
      "jwt",
      "typing",
      "backend.core.config_manager",
      "Any",
      "jose",
      "UTC,",
      "Enum",
      "cryptography.fernet",
      "local",
      "__future__",
      "httpx",
      "pydantic",
      "annotations",
      "enum",
      "uuid",
      "get_config_value"
    ],
    "backend/services/memory_preservation_service.py": [
      "hashlib",
      "logging",
      "OpenAI",
      "datetime",
      "typing",
      "{source_system.value}",
      "{source_system.value}\")",
      "Any",
      "asyncio",
      "dataclass",
      "Enum",
      "memories\"\"\"",
      "since_timestamp:",
      "dataclasses",
      "enum",
      "source",
      "AI",
      "datetime,",
      "specified",
      "migration_type:",
      "Pinecone"
    ],
    "backend/services/predictive_automation_service.py": [
      "typing",
      "collections",
      "defaultdict,",
      "dataclass,",
      "dataclasses",
      "Any",
      "normal",
      "enum",
      "hashlib",
      "logging",
      "numpy",
      "historical",
      "mean",
      "datetime",
      "UTC,",
      "Enum"
    ],
    "backend/services/structured_output_service.py": [
      "Any,",
      "SnowflakeCortexService",
      "pydantic",
      "all",
      "structlog",
      "BaseModel,",
      "enum",
      "backend.services.snowflake_cortex_service",
      "re",
      "LLM",
      "datetime",
      "typing",
      "json",
      "Enum"
    ],
    "backend/services/payready_business_intelligence.py": [
      "timedelta",
      "BaseModel,",
      "backend.integrations.buzz_integration",
      "logging",
      "backend.mcp_servers.mcp_gateway",
      "Sophia",
      "datetime",
      "typing",
      "query",
      "intelligence",
      "multiple",
      "Any",
      "competitive",
      "backend.agents.core.base_agent",
      "UTC,",
      "natural",
      "Snowflake",
      "backend.core.sophia_engine",
      "top",
      "Buzz",
      "EliseAI?\",",
      "MCPGateway",
      "{data['name']}",
      "pydantic",
      "BaseAgent",
      "BuzzAISystem",
      "SophiaAIEngine"
    ],
    "backend/services/project_service.py": [
      "typing",
      "AsyncSession",
      "Any",
      "sqlalchemy.ext.asyncio"
    ],
    "backend/services/task_service.py": [
      "typing",
      "AsyncSession",
      "Any",
      "sqlalchemy.ext.asyncio"
    ],
    "backend/services/advanced_ui_ux_agent_service.py": [
      "typing",
      "dataclass,",
      "dataclasses",
      "Any",
      "..core.simple_config",
      "enum",
      "design",
      "logging",
      "Enum",
      "SophiaConfig",
      "datetime",
      "UTC,",
      "json",
      "natural"
    ],
    "backend/services/ai_junk_prevention_service.py": [
      "setup_logger",
      "creating",
      "being",
      "os",
      "pathlib",
      "re",
      "backend.utils.custom_logger",
      "Path",
      "datetime",
      "datetime,",
      "typing",
      "Any,",
      "audit"
    ],
    "backend/services/aiac_chat_integration.py": [
      "backend.services.enhanced_unified_chat_service",
      "intent\"\"\"",
      "message\"\"\"",
      "BaseModel,",
      "logging",
      "backend.services.mem0_integration_service",
      "datetime",
      "typing",
      "Any",
      "intents\"\"\"",
      "AIaC",
      "Enum",
      "EnhancedUnifiedChatService",
      "the",
      "re",
      "pydantic",
      "steps",
      "enum",
      "get_mem0_service"
    ],
    "backend/services/analytics_service.py": [
      "typing",
      "AsyncSession",
      "Any",
      "sqlalchemy.ext.asyncio"
    ],
    "backend/services/automated_insights_service.py": [
      "backend.services.vector_indexing_service",
      "PredictiveAnalyticsService",
      "VectorIndexingService",
      "SemanticLayerService",
      "Any",
      "dataclasses",
      "backend.services.predictive_analytics_service",
      "a",
      "enum",
      "logging",
      "datetime",
      "backend.services.semantic_layer_service",
      "datetime,",
      "typing",
      "dataclass",
      "Enum"
    ],
    "backend/services/chat_driven_metadata_service.py": [
      "uuid4",
      "dataclass,",
      "get_config_value",
      "logging",
      "datetime",
      "typing",
      "backend.services.event_driven_ingestion_service",
      "backend.core.config_manager",
      "asyncio",
      "Enum",
      "response",
      "ingestion",
      "re",
      "content",
      "(",
      "json",
      "backend.services.unified_llm_service",
      "dataclasses",
      "enum",
      "uuid",
      "Any,"
    ],
    "backend/services/chimera_monitoring_service.py": [
      "typing",
      "collections",
      "defaultdict,",
      "dataclass,",
      "time",
      "dataclasses",
      "logging",
      "Dict,",
      "datetime",
      "datetime,",
      "asyncio",
      "json"
    ],
    "backend/services/circuit_breaker.py": [
      "Callable",
      "logging",
      "collections.abc",
      "datetime",
      "datetime,"
    ],
    "backend/services/citation_service.py": [
      "response",
      "asdict,",
      "inline",
      "Any",
      "dataclasses",
      "other",
      "hashlib",
      "logging",
      "source",
      "re",
      "LLM",
      "typing",
      "them"
    ],
    "backend/services/claude_code_development_kit_service.py": [
      "get_documentation_loader",
      "AsyncGenerator",
      "backend.services.enhanced_portkey_llm_gateway",
      "time",
      "get_config_value",
      "backend.core.auto_esc_config",
      "datetime",
      "Claude-Code-Development-Kit",
      "typing",
      "get_sophia_agent_orchestrator",
      "backend.services.documentation_loader_service",
      "asyncio",
      "dataclass",
      "Enum",
      "enhanced",
      "backend.services.sophia_agent_orchestrator",
      "backend.utils.custom_logger",
      "(",
      "logger",
      "dataclasses",
      "enum",
      "collections.abc",
      "Any,"
    ],
    "backend/services/code_modification_service.py": [
      "backend.services.unified_llm_service",
      "ast",
      "response",
      "TaskType,",
      "memory",
      "os",
      "Any",
      "logging",
      "pathlib",
      "re",
      "file",
      "Path",
      "AI",
      "typing",
      "difflib"
    ],
    "backend/services/comprehensive_memory_service.py": [
      "backend.models.conversation",
      "analysis_result",
      "backend.agents.enhanced.data_models",
      "MemoryRecord",
      "logging",
      "datetime",
      "typing",
      "our",
      "Slack",
      "multiple",
      "backend.core.config_manager",
      "Any",
      "pinecone",
      "backend.utils.enhanced_snowflake_cortex_service",
      "backend.core.hierarchical_cache",
      "metadata",
      "IntegratedConversationRecord",
      "Snowflake",
      "SlackMessageData",
      "(",
      "json",
      "HierarchicalCache",
      "Snowflake.\",",
      "GongCallData",
      "different",
      "UTC",
      "get_config_value"
    ],
    "backend/services/constitutional_ai.py": [
      "logging",
      "a"
    ],
    "backend/services/conversational_training_service.py": [
      "Any",
      "dataclasses",
      "enum",
      "datetime",
      "typing",
      "dataclass",
      "Enum"
    ],
    "backend/services/cortex_agent_service.py": [
      "timedelta",
      "AsyncGenerator",
      "Cortex",
      "logging",
      "YAML",
      "snowflake.connector",
      "datetime",
      "jwt",
      "typing",
      "backend.core.config_manager",
      "Any",
      "pathlib",
      "UTC,",
      "asyncio",
      "snowflake.cortex",
      "json",
      "BaseModel",
      "pydantic",
      "uuid",
      "collections.abc",
      "Path",
      "yaml",
      "DictCursor",
      "get_config_value,"
    ],
    "backend/services/cortex_router.py": [
      "intelligent",
      "Any",
      "query\"\"\"",
      "enum",
      "CortexModel,",
      "logging",
      "the",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "Enum"
    ],
    "backend/services/cost_engineering_service.py": [
      "SnowflakeCortexService",
      "typing",
      "backend.core.enhanced_cache_manager",
      "EnhancedAiMemoryMCPServer",
      "dataclass,",
      "dataclasses",
      "Any",
      "EnhancedCacheManager",
      "enum",
      "backend.security.audit_logger",
      "logging",
      "AuditLogger",
      "LLM",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "asyncio",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "Enum"
    ],
    "backend/services/data_source_manager.py": [
      "CircuitBreaker,",
      "typing",
      "Optional,",
      "{source.value}:",
      "backend.services.circuit_breaker",
      "backend.core.optimized_cache",
      "enum",
      "get_config_value",
      "logging",
      "backend.core.auto_esc_config",
      "specified",
      "Pulumi",
      "OptimizedCache",
      "{source.value}...\")",
      "{source.value}\")",
      "asyncio",
      "a",
      "Enum"
    ],
    "backend/services/data_transformer.py": [
      "Gong\")",
      "various",
      "Snowflake\")",
      "logging",
      "pandas"
    ],
    "backend/services/dynamic_orchestration_service.py": [
      "typing",
      "all",
      "dataclasses",
      "enum",
      "logging",
      "Dict,",
      "{node_id}\"",
      "datetime",
      "asyncio",
      "dataclass",
      "Enum"
    ],
    "backend/services/enhanced_cortex_agent_service.py": [
      "HTTPException",
      "BaseModel",
      "pydantic",
      "processed",
      "multimodal",
      "backend.core.config_manager",
      "Any",
      "get_config_value",
      "logging",
      "snowflake.connector",
      "datetime",
      "fastapi",
      "typing",
      "json"
    ],
    "backend/services/enhanced_data_ingestion.py": [
      "{source.value}:",
      "Any",
      "dataclasses",
      "..core.simple_config",
      "config",
      "enum",
      "..utils.enhanced_snowflake_cortex_service",
      "logging",
      "datetime",
      "EnhancedSnowflakeCortexService",
      "typing",
      "dataclass",
      "Enum"
    ],
    "backend/services/enhanced_knowledge_base_service.py": [
      "content\"\"\"",
      "Any",
      "dataclasses",
      "enum",
      "logging",
      "datetime",
      "typing",
      "dataclass",
      "Enum"
    ],
    "backend/services/enhanced_mcp_orchestration_service.py": [
      "(",
      "prometheus_client",
      "typing",
      "UTC,",
      "dataclasses",
      "time",
      "Any",
      "enum",
      "logging",
      "backend.services.mcp_orchestration_service",
      "Counter,",
      "datetime",
      "asyncio",
      "dataclass",
      "Enum"
    ],
    "backend/services/enhanced_sentiment_analyzer.py": [
      "Any",
      "dataclasses",
      "text\"\"\"",
      "enum",
      "logging",
      "datetime",
      "typing",
      "dataclass",
      "Enum"
    ],
    "backend/services/enhanced_snowflake_cortex_service.py": [
      "backend.services.cost_engineering_service",
      "dataclass,",
      "logging",
      "snowflake.connector",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "backend.core.enhanced_cache_manager",
      "Any",
      "EnhancedCacheManager",
      "asyncio",
      "Enum",
      "this",
      "response",
      "backend.security.audit_logger",
      "AuditLogger",
      "(",
      "json",
      "SnowflakeCortexService",
      "dataclasses",
      "uuid",
      "enum",
      "AI",
      "DictCursor"
    ],
    "backend/services/enhanced_unified_chat_service_performance.py": [
      "(",
      "Any,",
      "user",
      "typing",
      "successful",
      "time",
      "backend.services.unified_chat_service",
      "hashlib",
      "logging",
      "message",
      "datetime",
      "redis.asyncio",
      "asyncio",
      "json"
    ],
    "backend/services/event_driven_ingestion_service.py": [
      "uuid4",
      "config",
      "logging",
      "aioredis",
      "datetime",
      "typing",
      "backend.services.enhanced_ingestion_service",
      "backend.core.config_manager",
      "Any",
      "dictionary\"\"\"",
      "asyncio",
      "dataclass",
      "Enum",
      "(",
      "json",
      "dataclasses",
      "enum",
      "uuid",
      "get_config_value"
    ],
    "backend/services/fast_document_processor.py": [
      "backend.services.vector_indexing_service",
      "SnowflakeCortexService",
      "typing",
      "VectorIndexingService",
      "pydantic",
      "structlog",
      "Any",
      "time",
      "{self.max_workers}",
      "BaseModel,",
      "enum",
      "hashlib",
      "backend.services.snowflake_cortex_service",
      "datetime",
      "datetime,",
      "asyncio",
      "Enum"
    ],
    "backend/services/foundational_knowledge_service.py": [
      "logger",
      "KnowledgeService",
      "SnowflakeCortexService",
      "Snowflake",
      "backend.core.logger",
      "Any",
      "dataclasses",
      "enum",
      "Enum",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "dataclass",
      "json",
      "backend.services.knowledge_service"
    ],
    "backend/services/group_aware_orchestration_enhancement.py": [
      "logging",
      "group",
      "datetime",
      "typing",
      "business",
      "CRM,",
      "Any",
      "pathlib",
      "UTC,",
      "asyncio",
      "YAML\"\"\"",
      "Enum",
      "historical",
      "the",
      "(",
      "enum",
      "deal",
      "backend.services.mcp_orchestration_service",
      "required",
      "Path",
      "yaml"
    ],
    "backend/services/kb_management_service.py": [
      "dataclass,",
      "logging",
      "datetime",
      "get_unified_llm_service",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "FoundationalKnowledgeService",
      "EnhancedAiMemoryMCPServer",
      "backend.core.config_manager",
      "Any",
      "Enum",
      "re",
      "backend.services.foundational_knowledge_service",
      "json",
      "backend.services.unified_llm_service",
      "SnowflakeCortexService",
      "dataclasses",
      "command\"\"\"",
      "uuid",
      "enum",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "get_config_value"
    ],
    "backend/services/large_file_ingestion_service.py": [
      "uuid4",
      "{job_data['filename']}\")",
      "pptx",
      "logging",
      "snowflake.connector",
      "datetime",
      "typing",
      "pandas",
      "io",
      "chunk\"\"\"",
      "all",
      "Any",
      "various",
      "{total_chunks}",
      "PyPDF2",
      "asyncio",
      "Enum",
      "openpyxl",
      "docx",
      "re",
      "Document",
      "json",
      "{filename}\")",
      "enum",
      "uuid",
      "DictCursor"
    ],
    "backend/services/mem0_integration_service.py": [
      "uuid4",
      "memories",
      "httpx",
      "backend.core.config_manager",
      "Any",
      "uuid",
      "logging",
      "datetime",
      "typing",
      "get_config_value"
    ],
    "backend/services/predictive_analytics_service.py": [
      "Snowflake",
      "SemanticLayerService",
      "dataclass,",
      "dataclasses",
      "Any",
      "logging",
      "datetime",
      "backend.services.semantic_layer_service",
      "typing"
    ],
    "backend/services/real_time_streaming_service.py": [
      "WebSocket",
      "websockets",
      "queue",
      "logging",
      "validate_schema_name",
      "snowflake.connector",
      "datetime",
      "typing",
      "Any",
      "WebSocketServerProtocol",
      "asyncio",
      "dataclass",
      "Enum",
      "websockets.server",
      "backend.core.sql_security_validator",
      "{stream_id}\")",
      "json",
      "dataclasses",
      "enum",
      "datetime,",
      "DictCursor"
    ],
    "backend/services/hierarchical_caching_service.py": [
      "os",
      "hierarchical",
      "logging",
      "datetime",
      "typing",
      "abc",
      "all",
      "gzip",
      "Any",
      "shutil",
      "asyncio",
      "Enum",
      "ABC,",
      "pickle",
      "asdict,",
      "hot",
      "warm",
      "index",
      "redis.asyncio",
      "cold",
      "json",
      "dataclasses",
      "enum",
      "datetime,"
    ],
    "backend/services/intelligent_query_router.py": [
      "Cortex",
      "Any",
      "dataclasses",
      "..utils.enhanced_snowflake_cortex_service",
      "enum",
      "logging",
      "logs",
      "EnhancedSnowflakeCortexService",
      "typing",
      "dataclass",
      "Enum"
    ],
    "backend/services/langgraph_learning_orchestrator.py": [
      "END,",
      "typing",
      "Any,",
      "langgraph.graph"
    ],
    "backend/services/mcp_orchestration_service.py": [
      "os",
      "hashlib",
      "logging",
      "datetime",
      "typing",
      "multiple",
      "Any",
      "UTC,",
      "asyncio",
      "Enum",
      "JSON",
      "response",
      "asdict,",
      "orchestrated",
      "{len(successful_results)}",
      "json",
      "httpx",
      "subprocess",
      "dataclasses",
      "enum",
      "server",
      "aiohttp"
    ],
    "backend/services/okr_tracking_service.py": [
      "typing",
      "insights\"\"\"",
      "Any",
      "dataclasses",
      "..utils.enhanced_snowflake_cortex_service",
      "enum",
      "historical",
      "logging",
      "name\"\"\"",
      "datetime",
      "EnhancedSnowflakeCortexService",
      "asyncio",
      "dataclass",
      "Enum"
    ],
    "backend/services/progressive_autonomy_manager.py": [
      "recommendations",
      "Any",
      "dataclasses",
      "..utils.enhanced_snowflake_cortex_service",
      "enum",
      "historical",
      "logging",
      "datetime",
      "EnhancedSnowflakeCortexService",
      "typing",
      "dataclass",
      "Enum"
    ],
    "backend/services/team_service.py": [
      "sqlalchemy.ext.asyncio",
      "Any",
      "AsyncSession",
      "datetime",
      "typing"
    ],
    "backend/services/documentation_loader_service.py": [
      "Any,",
      "logger",
      "os",
      "dataclasses",
      "time",
      "enum",
      "get_config_value",
      "Enum",
      "pathlib",
      "backend.core.auto_esc_config",
      "backend.utils.custom_logger",
      "Path",
      "typing",
      "dataclass",
      "json"
    ],
    "backend/services/enhanced_chat_context_service.py": [
      "uuid4",
      "performance_monitor",
      "connection_manager",
      "backend.core.optimized_connection_manager",
      "Any",
      "various",
      "uuid",
      "logging",
      "different",
      "snowflake.connector",
      "datetime",
      "backend.core.performance_monitor",
      "typing",
      "DictCursor",
      "json"
    ],
    "backend/services/enhanced_cortex_service.py": [
      "text',",
      "typing",
      "dataclasses",
      "logging",
      "Dict,",
      "datetime",
      "asyncio",
      "dataclass",
      "json",
      "natural"
    ],
    "backend/services/enhanced_ingestion_service.py": [
      "uuid4",
      "pptx",
      "logging",
      "datetime",
      "backend.core.performance_monitor",
      "typing",
      "pandas",
      "io",
      "{filename}:\\n\\n{json.dumps(data,",
      "{filename}:\\n\\n\"",
      "Any",
      "various",
      "previous",
      "database",
      "asyncio",
      "PyPDF2",
      "Enum",
      "Snowflake\"\"\"",
      "connection_manager",
      "openpyxl",
      "docx",
      "re",
      "Document",
      "json",
      "{filename}",
      "BaseModel",
      "performance_monitor",
      "pydantic",
      "backend.core.optimized_connection_manager",
      "enum",
      "uuid",
      "datetime,"
    ],
    "backend/services/enhanced_mcp_orchestration.py": [
      "datetime",
      "logging",
      "typing",
      "Any"
    ],
    "backend/services/enhanced_portkey_llm_gateway.py": [
      "Any,",
      "logger",
      "AsyncGenerator",
      "dataclasses",
      "time",
      "enum",
      "get_config_value",
      "Enum",
      "collections.abc",
      "aiohttp",
      "backend.core.auto_esc_config",
      "backend.utils.custom_logger",
      "datetime",
      "different",
      "typing",
      "dataclass",
      "json"
    ],
    "backend/services/enhanced_slack_integration_service.py": [
      "deprecated",
      "slack_sdk.socket_mode.async_client",
      "logging",
      "datetime",
      "typing",
      "slack_sdk.socket_mode.request",
      "SocketModeRequest",
      "Any",
      "AsyncSocketModeClient",
      "slack_sdk.web.async_client",
      "asyncio",
      "SocketModeResponse",
      "dataclass",
      "Callable",
      "messages\"\"\"",
      "AsyncWebClient",
      "dataclasses",
      "message",
      "collections.abc",
      "slack_sdk.socket_mode.response",
      "datetime,"
    ],
    "backend/services/enhanced_unified_chat_service.py": [
      "user",
      "dataclass,",
      "backend.services.unified_chat_service",
      "logging",
      "get_unified_llm_service",
      "datetime",
      "typing",
      "backend.services.sophia_intent_engine",
      "MCPOrchestrationService",
      "CodeModificationService",
      "pending",
      "(",
      "backend.services.unified_llm_service",
      "description",
      "dataclasses",
      "backend.services.code_modification_service",
      "uuid",
      "backend.services.mcp_orchestration_service",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "Any,"
    ],
    "backend/services/enhanced_unified_intelligence_service.py": [
      "(",
      "get_ui_generation_handler",
      "typing",
      "backend.services.ui_generation_intent_handler",
      "Snowflake",
      "monitoring",
      "insights\"\"\"",
      "Any",
      "text",
      "logging",
      "the",
      "backend.services.unified_intelligence_service",
      "datetime",
      "UTC,",
      "json"
    ],
    "backend/services/extended_context_manager.py": [
      "SnowflakeCortexService",
      "setup_logger",
      "contexts\"\"\"",
      "{tier}\",",
      "Any",
      "dataclasses",
      "time",
      "hashlib",
      "numpy",
      "backend.utils.custom_logger",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "dataclass"
    ],
    "backend/services/federated_query_service.py": [
      "typing",
      "multiple",
      "dataclasses",
      "{source}\",",
      "logging",
      "Dict,",
      "datetime",
      "asyncio",
      "dataclass"
    ],
    "backend/services/graph_memory_service.py": [
      "typing",
      "networkx",
      "Any"
    ],
    "backend/services/intelligent_data_discovery_service.py": [
      "get_snowflake_connection",
      "pandas",
      "typing",
      "TaskType,",
      "Any",
      "pathlib",
      "Enum",
      "asdict,",
      "non-null",
      "numpy",
      "backend.services.snowflake_cortex_service",
      "csv",
      "json",
      "backend.services.unified_llm_service",
      "SnowflakeCortexService",
      "first",
      "dataclasses",
      "uuid",
      "enum",
      "source",
      "Path",
      "backend.utils.snowflake_connection",
      "sample"
    ],
    "backend/services/large_data_import_service.py": [
      "for",
      "(ZIP",
      "os",
      "database\"\"\"",
      "datetime",
      "aiofiles",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "pandas",
      "export",
      "backend.services.knowledge_service",
      "{job.data_type.value}\"",
      "KnowledgeService",
      "Slack",
      "Any",
      "various",
      "shutil",
      "database",
      "zipfile",
      "tempfile",
      "asyncio",
      "dataclass",
      "Enum",
      "jobs\"\"\"",
      "backend.core.logger",
      "Returns:",
      "job\"\"\"",
      "job",
      "(MBOX,",
      "email",
      "json",
      "logger",
      "SnowflakeCortexService",
      "dataclasses",
      "uuid",
      "enum",
      "file",
      "Gong",
      "archive"
    ],
    "backend/services/mcp_capability_router.py": [
      "capability",
      "health",
      "Any",
      "dataclasses",
      "enum",
      "logging",
      "datetime",
      "typing",
      "dataclass",
      "Enum"
    ],
    "backend/services/migration_orchestrator_client.py": [
      "typing",
      "BaseModel",
      "httpx",
      "pydantic",
      "Any",
      "enum",
      "logging",
      "datetime",
      "UTC,",
      "Enum"
    ],
    "backend/services/project_intelligence_service.py": [
      "SnowflakeHubSpotConnector",
      "pydantic",
      "Linear",
      "structlog",
      "Any",
      "BaseModel,",
      "backend.utils.snowflake_hubspot_connector",
      "datetime",
      "typing"
    ],
    "backend/services/unified_chat_service.py": [
      "(",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "SnowflakeCortexService",
      "backend.services.enhanced_unified_intelligence_service",
      "EnhancedAiMemoryMCPServer",
      "memory",
      "Any",
      "dataclasses",
      "enum",
      "logging",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "dataclass",
      "Enum"
    ],
    "backend/services/__init__.py": [],
    "backend/services/advanced_llm_service.py": [
      "(",
      "backend.services.enhanced_portkey_llm_gateway",
      "Any",
      "get_config_value",
      "backend.services.constitutional_ai",
      "logging",
      "backend.core.auto_esc_config",
      "ConstitutionalAI",
      "tiktoken",
      "typing",
      "json"
    ],
    "backend/services/gptcache_service.py": [
      "import",
      "Any",
      "time",
      "sentence_transformers",
      "logging",
      "numpy",
      "redis.asyncio",
      "typing",
      "SentenceTransformer",
      "json"
    ],
    "backend/services/knowledge_service.py": [
      "BaseModel",
      "pydantic"
    ],
    "backend/services/mem0_mock_service.py": [
      "uuid4",
      "Any",
      "uuid",
      "logging",
      "datetime",
      "typing"
    ],
    "backend/services/research_informed_orchestration.py": [
      "SnowflakeCortexService",
      "langgraph.sdk",
      "OrchestrationArchitecture,",
      "Mem0PersistentMemory",
      "backend.mcp_registry",
      "backend.services.snowflake_cortex_service",
      "backend.services.mem0_persistent_memory",
      "LangGraphCoordinator",
      "backend.models",
      "MCPRegistry"
    ],
    "backend/services/schema_discovery_service.py": [
      "typing",
      "backend.services.semantic_layer_service",
      "Any",
      "SemanticLayerService",
      "logging",
      "pathlib",
      "Environment,",
      "the",
      "Path",
      "jinja2",
      "yaml",
      "asyncio"
    ],
    "backend/services/secure_action_service.py": [
      "typing",
      "json",
      "dataclasses",
      "enum",
      "logging",
      "Dict,",
      "datetime",
      "asyncio",
      "dataclass",
      "Enum"
    ],
    "backend/services/secure_credential_service.py": [
      "__future__",
      "annotations",
      "backend.security.secret_management",
      "logging",
      "Pulumi",
      "SecretManager"
    ],
    "backend/services/semantic_layer_service.py": [
      "performance_monitor",
      "Any",
      "logging",
      "pathlib",
      "backend.utils.enhanced_snowflake_cortex_service",
      "Path",
      "backend.core.performance_monitor",
      "typing",
      "("
    ],
    "backend/services/simplified_unified_intelligence_service.py": [
      "response",
      "typing",
      "pre-computed",
      "Any",
      "logging",
      "datetime",
      "UTC,"
    ],
    "backend/services/snowflake_admin_chat_integration.py": [
      "(",
      "typing",
      "Any",
      "dataclasses",
      "query\"\"\"",
      "pending",
      "enum",
      "logging",
      "re",
      "asyncio",
      "dataclass",
      "Enum",
      "backend.agents.specialized.snowflake_admin_agent"
    ],
    "backend/services/snowflake_cortex_aisql.py": [
      "get_snowflake_config",
      "DictCursor",
      "collections",
      "os",
      "dataclasses",
      "Any",
      "an",
      "logging",
      "backend.core.auto_esc_config",
      "snowflake.connector",
      "Pulumi",
      "datetime",
      "Counter",
      "typing",
      "dataclass",
      "results\"\"\""
    ],
    "backend/services/snowflake_intelligence_service.py": [
      "backend.services.vector_indexing_service",
      "backend.mcp_servers.mcp_client",
      "VectorIndexingService",
      "SemanticLayerService",
      "Any",
      "dataclasses",
      "'{key}'.\"",
      "logging",
      "MCPClient",
      "backend.services.semantic_layer_service",
      "typing",
      "dataclass",
      "json"
    ],
    "backend/services/snowflake_metadata_optimizer.py": [
      "SnowflakeAbstraction",
      "backend.core.snowflake_config_manager",
      "Any",
      "dataclasses",
      "logging",
      "SnowflakeConfigManager",
      "typing",
      "dataclass",
      "backend.core.snowflake_abstraction"
    ],
    "backend/services/sophia_agent_orchestrator.py": [
      "AsyncGenerator",
      "agent",
      "time",
      "backend.core.auto_esc_config",
      "datetime",
      "typing",
      "TaskType,",
      "Any",
      "backend.services.documentation_loader_service",
      "asyncio",
      "dataclass",
      "Enum",
      "backend.utils.custom_logger",
      "json",
      "(",
      "backend.services.unified_llm_service",
      "logger",
      "dataclasses",
      "enum",
      "collections.abc",
      "these",
      "get_config_value"
    ],
    "backend/services/sophia_ai_orchestrator.py": [
      "backend.services.enhanced_knowledge_base_service",
      "logging",
      "backend.agents.specialized.interactive_sales_coach_agent",
      "datetime",
      "typing",
      "primary",
      "all",
      "multiple",
      "Any",
      "backend.services.memory_preservation_service",
      "asyncio",
      "dataclass",
      "Enum",
      "MemoryPreservationService",
      "top",
      "the",
      "(",
      "original",
      "dataclasses",
      "enum"
    ],
    "backend/services/sophia_intent_engine.py": [
      "backend.services.unified_llm_service",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "EnhancedAiMemoryMCPServer",
      "get_unified_llm_service,",
      "dataclasses",
      "message\"\"\"",
      "backend.services.unified_chat_service",
      "enum",
      "asyncio",
      "logging",
      "ChatContext",
      "Dict,",
      "re",
      "LLMResponse",
      "scratch",
      "typing",
      "dataclass",
      "Enum"
    ],
    "backend/services/sse_progress_streaming_service.py": [
      "uuid4",
      "user",
      "AsyncGenerator",
      "time",
      "logging",
      "datetime",
      "typing",
      "backend.services.event_driven_ingestion_service",
      "Any",
      "fastapi",
      "asyncio",
      "dataclass",
      "Enum",
      "sse_starlette",
      "Request",
      "ResilientWebSocketManager",
      "json",
      "(",
      "dataclasses",
      "enum",
      "uuid",
      "collections.abc",
      "backend.websocket.resilient_websocket_manager",
      "EventSourceResponse"
    ],
    "backend/services/streaming_response_service.py": [
      "typing",
      "multiple",
      "dataclasses",
      "logging",
      "Dict,",
      "datetime",
      "asyncio",
      "dataclass",
      "json"
    ],
    "backend/services/ui_generation_intent_handler.py": [
      "UI",
      "chat",
      "dataclass,",
      "dataclasses",
      "Any",
      "unified",
      "logging",
      "different",
      "the",
      "backend.services.mcp_orchestration_service",
      "datetime",
      "typing",
      "(",
      "natural"
    ],
    "backend/services/unified_ai_orchestration_service.py": [
      "typing",
      "sales",
      "httpx",
      "get_snowflake_config",
      "os",
      "Any",
      "unified",
      "logging",
      "backend.core.auto_esc_config",
      "snowflake.connector",
      "Gong",
      "datetime",
      "UTC,",
      "DictCursor",
      "json",
      "live"
    ],
    "backend/services/unified_intelligence_service.py": [
      "(",
      "SnowflakeCortexService",
      "typing",
      "sales",
      "backend.services.data_source_manager",
      "backend.services.advanced_llm_service",
      "backend.services.data_transformer",
      "AdvancedLLMService",
      "logging",
      "the",
      "DataTransformer",
      "try:",
      "backend.utils.snowflake_cortex_service",
      "pandas",
      "Any,"
    ],
    "backend/services/unified_llm_service.py": [
      "AsyncGenerator",
      "time",
      "config",
      "backend.core.auto_esc_config",
      "snowflake.connector",
      "datetime",
      "AsyncOpenAI",
      "typing",
      "Any",
      "Enum",
      "Snowflake",
      "backend.monitoring.llm_metrics",
      "portkey_ai",
      "backend.utils.custom_logger",
      "(",
      "json",
      "openai",
      "logger",
      "AsyncPortkey",
      "enum",
      "collections.abc",
      "DictCursor"
    ],
    "backend/services/unified_service_registry.py": [
      "backend.services.predictive_automation_service",
      "backend.services.unified_chat_service",
      "backend.services.enhanced_knowledge_base_service",
      "logging",
      "typing",
      "backend.services.sophia_ai_orchestrator",
      "FoundationalKnowledgeService",
      "PredictiveAutomationService",
      "Any",
      "backend.services.advanced_ui_ux_agent_service",
      "UnifiedChatService",
      "backend.services.gptcache_service",
      "MCPOrchestrationService",
      "the",
      "SophiaAIOrchestrator",
      "backend.services.payready_business_intelligence",
      "backend.services.foundational_knowledge_service",
      "GPTCacheService",
      "(",
      "AdvancedUIUXAgentService",
      "backend.services.mcp_orchestration_service"
    ],
    "backend/services/unified_sophia_service.py": [
      "(",
      "Sophia\"\"\"",
      "__future__",
      "annotations",
      "backend.orchestration.cross_group_intelligence_hub",
      "backend.orchestration.nl_workflow_integration",
      "backend.orchestration.intelligent_meta_orchestrator",
      "dataclasses",
      "backend.orchestration.continuous_learning_framework",
      "NaturalLanguageWorkflowIntegration",
      "logging",
      "the",
      "CrossGroupIntelligenceHub",
      "typing",
      "dataclass",
      "Any,"
    ],
    "backend/services/vector_indexing_service.py": [
      "typing",
      "backend.core.config_manager",
      "Any",
      "dataclasses",
      "GongAPIClient",
      "SemanticLayerService",
      "get_config_value",
      "logging",
      "backend.services.semantic_layer_service",
      "backend.integrations.gong_api_client",
      "asyncio",
      "dataclass",
      "json"
    ],
    "backend/services/vector_intelligence_router.py": [
      "same",
      "SnowflakeCortexService",
      "typing",
      "EnhancedAiMemoryMCPServer",
      "multiple",
      "UTC,",
      "Any",
      "logging",
      "different",
      "optimal",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "asyncio",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server"
    ],
    "backend/utils/__init__.py": [],
    "backend/utils/auth.py": [
      "setup_logger",
      "base64",
      "token",
      "CryptContext",
      "os",
      "Any",
      "passlib,",
      "jose",
      "jose,",
      "hashlib",
      "backend.utils.custom_logger",
      "datetime",
      "datetime,",
      "typing",
      "json",
      "JWTError,",
      "passlib.context"
    ],
    "backend/utils/custom_logger.py": [
      "structlog,",
      "structlog",
      "logging",
      "sys",
      "json"
    ],
    "backend/utils/enhanced_snowflake_cortex_service.py": [
      "SnowflakeCortexService",
      "typing",
      "semantic",
      "Any",
      "dataclasses",
      "enum",
      "embedding",
      "logging",
      "Enum",
      "structured",
      "datetime",
      "AI",
      "backend.utils.snowflake_cortex_service",
      "UTC,",
      "dataclass",
      "json"
    ],
    "backend/utils/optimized_snowflake_cortex_service.py": [
      "typing",
      "performance_monitor",
      "backend.core.optimized_connection_manager",
      "Any",
      "time",
      "text",
      "sentence_transformers",
      "hashlib",
      "logging",
      "686.3",
      "backend.core.performance_monitor",
      "asyncio",
      "SentenceTransformer",
      "(",
      ".optimized_snowflake_cortex_service_models",
      "ConnectionType,"
    ],
    "backend/utils/optimized_snowflake_cortex_service_core.py": [],
    "backend/utils/optimized_snowflake_cortex_service_handlers.py": [],
    "backend/utils/optimized_snowflake_cortex_service_models.py": [
      "optimized_snowflake_cortex_service.py",
      "Any",
      "dataclasses",
      "enum",
      "typing",
      "dataclass",
      "Enum"
    ],
    "backend/utils/optimized_snowflake_cortex_service_utils.py": [
      "optimized_snowflake_cortex_service.py",
      "Any",
      "time",
      "hashlib",
      "logging",
      "typing",
      "(",
      ".optimized_snowflake_cortex_service_models"
    ],
    "backend/utils/snowflake_cortex_service.py": [
      "e",
      "logging",
      "from",
      "typing",
      ".snowflake_cortex_service_handlers",
      "Any",
      "text",
      ".snowflake_cortex_service_utils",
      "Snowflake.\"",
      "BusinessHandlers,",
      ".snowflake_cortex_service_models",
      "__future__",
      "the",
      "(",
      "json",
      "{len(entities)}",
      "{len(query_text)}",
      "SnowflakeCortexService",
      "annotations",
      ".snowflake_cortex_service_core"
    ],
    "backend/utils/snowflake_cortex_service_core.py": [
      "connection_manager",
      "__future__",
      "annotations",
      "backend.core.optimized_connection_manager",
      "backend.core.config_manager",
      "logging",
      "get_config_value"
    ],
    "backend/utils/snowflake_cortex_service_handlers.py": [
      "__future__",
      "annotations",
      "Any",
      "PerformanceMonitor",
      ".snowflake_cortex_service_utils",
      "logging",
      "typing"
    ],
    "backend/utils/snowflake_cortex_service_models.py": [
      "__future__",
      "annotations",
      "Any",
      "dataclasses",
      "enum",
      "vector",
      "typing",
      "dataclass",
      "Enum"
    ],
    "backend/utils/snowflake_cortex_service_utils.py": [
      "Snowflake",
      "__future__",
      "annotations",
      "Any",
      "time",
      "hashlib",
      "logging",
      "operation",
      "re",
      "cache\"\"\"",
      "typing",
      "json"
    ],
    "backend/utils/snowflake_gong_connector.py": [
      "Snowflake",
      "__future__",
      "annotations",
      "backend.core.config_manager",
      "Any",
      "dataclasses",
      "call",
      "logging",
      "snowflake.connector",
      "datetime",
      "typing",
      "dataclass",
      "get_config_value"
    ],
    "backend/utils/snowflake_hubspot_connector.py": [
      "Snowflake",
      "HubSpot",
      "__future__",
      "annotations",
      "backend.core.config_manager",
      "Any",
      "dataclasses",
      "ESC",
      "logging",
      "pandas",
      "snowflake.connector",
      "datetime",
      "datetime,",
      "typing",
      "dataclass",
      "get_config_value"
    ],
    "backend/websocket/connection_manager.py": [
      "logger",
      "__future__",
      "annotations",
      "collections",
      "defaultdict",
      "WebSocket,",
      "fastapi",
      "asyncio",
      "loguru"
    ],
    "backend/websocket/resilient_websocket_manager.py": [
      "typing",
      "UTC,",
      "dataclasses",
      "Any",
      "WebSocket,",
      "enum",
      "logging",
      "datetime",
      "fastapi",
      "asyncio",
      "dataclass",
      "Enum"
    ],
    "backend/workflows/enhanced_executive_tasks.py": [
      "multiple",
      "dataclass,",
      "dataclasses",
      "BusinessTask,",
      "enum",
      "backend.services.mcp_orchestration_service",
      "datetime",
      "UTC,",
      "Enum"
    ],
    "backend/workflows/enhanced_langgraph_orchestration.py": [
      "parallel",
      "langgraph.graph.message",
      "dataclass,",
      "human",
      "logging",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "END,",
      "langgraph.graph",
      "backend.core.enhanced_cache_manager",
      "langgraph.checkpoint.sqlite",
      "EnhancedAiMemoryMCPServer",
      "all",
      "EnhancedCacheManager",
      "SqliteSaver",
      "asyncio",
      "Enum",
      "natural",
      "Callable",
      "__future__",
      "backend.security.audit_logger",
      "langgraph.prebuilt",
      "AuditLogger",
      "add_messages",
      "pending",
      "json",
      "SnowflakeCortexService",
      "annotations",
      "dataclasses",
      "ToolExecutor",
      "uuid",
      "enum",
      "collections.abc",
      "datetime,",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "Any,"
    ],
    "backend/workflows/enhanced_langgraph_patterns.py": [
      "logging",
      "backend.services.mem0_integration_service",
      "get_unified_llm_service",
      "datetime",
      "typing",
      "END,",
      "langgraph.graph",
      "langgraph.checkpoint",
      "Enum",
      "Snowflake\"\"\"",
      "AIMessage,",
      "backend.services.snowflake_cortex_service",
      "the",
      "backend.services.unified_llm_service",
      "SnowflakeCortexService",
      "langchain_core.messages",
      "enum",
      "MemorySaver",
      "get_mem0_service",
      "Any,"
    ],
    "backend/workflows/langgraph_agent_orchestration.py": [
      "SnowflakeGongConnector",
      "logging",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "END,",
      "langgraph.graph",
      "SnowflakeHubSpotConnector",
      "EnhancedAiMemoryMCPServer",
      "all",
      "call",
      "backend.utils.snowflake_hubspot_connector",
      "asyncio",
      "dataclass",
      "Enum",
      "sys",
      "backend.agents.specialized.sales_coach_agent",
      "0-100\"\"\"",
      "sales",
      "HubSpot",
      "__future__",
      "SnowflakeCortexService",
      "backend.utils.snowflake_gong_connector",
      "annotations",
      "dataclasses",
      "enum",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "Any,",
      "SalesCoachAgent"
    ],
    "backend/workflows/multi_agent_workflow.py": [
      "typing",
      "collections",
      "defaultdict,",
      "multiple",
      "UTC,",
      "time",
      "dataclasses",
      "dataclass,",
      "enum",
      "Any",
      "logging",
      "data.\"\"\"",
      "datetime",
      "asyncio",
      "a",
      "Enum"
    ],
    "backend/workflows/supervisor_orchestrator.py": [
      "(",
      "langgraph.graph.message",
      "langgraph.graph",
      "__future__",
      "annotations",
      "Sequence",
      "backend.orchestration.langgraph_mcp_orchestrator",
      "multiple",
      "asyncio",
      "add_messages",
      "logging",
      "collections.abc",
      "the",
      "operator",
      "Annotated,",
      "typing",
      "backend.workflows.langgraph_agent_orchestration",
      "END,"
    ],
    "backend/services/_archived_chat_services/20250703_142237_enhanced_ceo_chat_service.py": [
      "(",
      "AIMemoryHandlers",
      "backend.services.migration_orchestrator_client",
      "typing",
      "BaseModel",
      "backend.services.smart_ai_service",
      "pydantic",
      "Any",
      "enum",
      "SmartAIService",
      "logging",
      "datetime",
      "migration",
      "UTC,",
      "Enum",
      "backend.mcp_servers.ai_memory.ai_memory_handlers"
    ],
    "backend/services/_archived_chat_services/20250703_142237_enhanced_ceo_universal_chat_service.py": [
      "typing",
      "Any",
      "dataclasses",
      "..core.simple_config",
      "enum",
      "logging",
      "SophiaConfig",
      "datetime",
      "UTC,",
      "dataclass",
      "Enum"
    ],
    "backend/services/_archived_chat_services/20250703_142237_unified_chat_service.py": [
      ".sophia_chat_service",
      "ExecutiveChatService",
      "logging",
      "datetime",
      "typing",
      ".universal_chat_service",
      "SophiaChatService",
      "Any",
      "SessionManager",
      ".base_chat_service",
      ".session_manager",
      "ContextManager",
      "UnifiedChatService",
      "UTC,",
      "BaseChatService",
      "(",
      ".executive_chat_service",
      "...models.chat_models",
      ".context_manager"
    ],
    "backend/services/ai_training/interactive_training_service.py": [],
    "backend/services/chat/__init__.py": [
      ".providers.portkey_provider",
      ".sophia_chat_service",
      "ExecutiveChatService",
      ".providers.openai_provider",
      "PortkeyProvider",
      ".universal_chat_service",
      "SophiaChatService",
      "SessionManager",
      "BaseProvider",
      ".base_chat_service",
      ".session_manager",
      "ContextManager",
      "UnifiedChatService",
      ".unified_chat_service",
      "BaseChatService",
      "OpenAIProvider",
      ".executive_chat_service",
      ".context_manager",
      ".providers.base_provider"
    ],
    "backend/services/chat/base_chat_service.py": [
      "ABC,",
      "abc",
      "Any",
      "time",
      "...models.chat_models",
      "logging",
      "typing",
      "("
    ],
    "backend/services/chat/context_manager.py": [
      "context\"\"\"",
      "Any",
      "...models.chat_models",
      "logging",
      "ChatContext",
      "typing"
    ],
    "backend/services/chat/session_manager.py": [
      "contextlib",
      "timedelta",
      "UTC,",
      "...models.chat_models",
      "logging",
      "ChatConfiguration,",
      "datetime",
      "asyncio"
    ],
    "backend/services/infrastructure_chat/sophia_infrastructure_chat.py": [
      "typing",
      "httpx",
      "backend.core.config_manager",
      "UTC,",
      "os",
      "Any",
      "get_config_value",
      "backend.agents.infrastructure.sophia_infrastructure_agent",
      "datetime",
      "asyncio",
      "sys",
      "("
    ],
    "backend/services/llm_gateway/openrouter_integration.py": [
      "OpenRouter\"\"\"",
      "setup_logger",
      "Any",
      "time",
      "query\"\"\"",
      "config",
      "backend.core.auto_esc_config",
      "backend.utils.custom_logger",
      "typing",
      "aiohttp"
    ],
    "backend/services/llm_gateway/portkey_integration.py": [
      "query",
      "setup_logger",
      "Any",
      "time",
      "config",
      "hashlib",
      "backend.core.auto_esc_config",
      "backend.utils.custom_logger",
      "typing",
      "aiohttp"
    ],
    "backend/services/llm_gateway/quality_first_gateway.py": [
      "backend.services.llm_gateway.openrouter_integration",
      "ConfigManager",
      "setup_logger",
      "backend.core.config_manager",
      "Any",
      "dataclasses",
      "time",
      "backend.services.llm_gateway.portkey_integration",
      "PortkeyIntegration",
      "backend.utils.custom_logger",
      "OpenRouterIntegration",
      "backend.services.llm_gateway.snowflake_cortex_enhanced",
      "datetime",
      "typing",
      "dataclass",
      "("
    ],
    "backend/services/llm_gateway/snowflake_cortex_enhanced.py": [
      "data",
      "SnowflakeCortexService",
      "ConfigManager",
      "setup_logger",
      "backend.core.config_manager",
      "Any",
      "time",
      "backend.services.snowflake_cortex_service",
      "backend.utils.custom_logger",
      "datetime",
      "typing",
      "json"
    ],
    "backend/services/snowflake/connection_pool_manager.py": [
      "contextlib",
      "pool",
      "time",
      "queue",
      "logging",
      "snowflake.connector",
      "typing",
      "pool\"\"\"",
      "threading",
      "Empty,",
      "Any",
      "asyncio",
      "dataclass",
      "secure_snowflake_config",
      "contextmanager",
      "the",
      "backend.core.secure_snowflake_config",
      "dataclasses",
      "DictCursor"
    ],
    "backend/services/snowflake/pooled_connection.py": [
      "Empty,",
      "contextlib",
      "Any",
      "queue",
      "asynccontextmanager,",
      "logging",
      "the",
      "snowflake.connector",
      "SnowflakeConnection",
      "typing"
    ],
    "backend/security/ephemeral_credentials/__init__.py": [
      "EphemeralCredentialsService",
      "backend.security.ephemeral_credentials.middleware",
      "backend.security.ephemeral_credentials.models",
      "backend.security.ephemeral_credentials.service",
      "("
    ],
    "backend/security/ephemeral_credentials/middleware.py": [
      "BaseHTTPMiddleware",
      "logging",
      "backend.security.ephemeral_credentials.service",
      "headers",
      "fastapi",
      "AuditEventType,",
      "EphemeralCredentialsService",
      "FastAPI,",
      "Callable",
      "next",
      "__future__",
      "backend.security.audit_logger",
      "authentication",
      "(",
      "fastapi.responses",
      "starlette.middleware.base",
      "request",
      "annotations",
      "JSONResponse",
      "collections.abc",
      "backend.security.ephemeral_credentials.models"
    ],
    "backend/security/ephemeral_credentials/models.py": [
      "typing",
      "pydantic",
      "__future__",
      "annotations",
      "Any",
      "BaseModel,",
      "uuid",
      "enum",
      "datetime",
      "UTC,",
      "Enum"
    ],
    "backend/security/ephemeral_credentials/routes.py": [
      "APIRouter,",
      "header",
      "logging",
      "ActionType,",
      "backend.security.ephemeral_credentials.service",
      "backend.security.rbac.models",
      "APIKeyHeader,",
      "fastapi",
      "AuditEventType,",
      "EphemeralCredentialsService",
      "next",
      "__future__",
      "backend.security.audit_logger",
      "fastapi.security",
      "the",
      "(",
      "backend.security.rbac.dependencies",
      "annotations",
      "backend.security.ephemeral_credentials.models"
    ],
    "backend/security/ephemeral_credentials/service.py": [
      "base64",
      "os",
      "logging",
      "SecretManager",
      "datetime",
      "jwt",
      "UTC,",
      "AuditEventType,",
      "__future__",
      "secret",
      "backend.security.audit_logger",
      "storage:",
      "storage\")",
      "(",
      "json",
      "secrets",
      "storage",
      "annotations",
      "backend.security.secret_management",
      "uuid",
      "backend.security.ephemeral_credentials.models"
    ],
    "backend/security/rbac/__init__.py": [
      "backend.security.rbac.models",
      "backend.security.rbac.service",
      "backend.security.rbac.dependencies",
      "("
    ],
    "backend/security/rbac/dependencies.py": [
      "path",
      "token",
      "OAuth2PasswordBearer",
      "logging",
      "ActionType,",
      "typing",
      "a",
      "initialize_rbac_service",
      "backend.security.rbac.models",
      "Depends,",
      "fastapi",
      "get_rbac_service",
      "AuditEventType,",
      "Callable",
      "RBAC",
      "backend.security.audit_logger",
      "fastapi.security",
      "the",
      "json",
      "backend.security.rbac.service",
      "request",
      "collections.abc",
      "Any,"
    ],
    "backend/security/rbac/models.py": [
      "pydantic",
      "Any",
      "BaseModel,",
      "uuid",
      "enum",
      "knowledge",
      "datetime",
      "typing",
      "vector",
      "Enum"
    ],
    "backend/security/rbac/routes.py": [
      "AuditEventType,",
      "backend.security.rbac.service",
      "APIRouter,",
      "backend.security.rbac.dependencies",
      "BaseModel",
      "pydantic",
      "Any",
      "backend.security.audit_logger",
      "backend.security.rbac.models",
      "require_permission,",
      "datetime",
      "fastapi",
      "get_rbac_service",
      "typing",
      "("
    ],
    "backend/security/rbac/service.py": [
      "AuditEventType,",
      "(",
      "{self.storage_path}:",
      "storage",
      "storage\"\"\"",
      "os",
      "Any",
      "backend.security.audit_logger",
      "uuid",
      "backend.security.rbac.models",
      "logging",
      "datetime",
      "typing",
      "json"
    ],
    "backend/presentation/api/__init__.py": [
      ".router",
      "create_application_router"
    ],
    "backend/presentation/api/router.py": [
      "backend.api",
      "backend.security.ephemeral_credentials.routes",
      "APIRouter",
      "backend.security.rbac.routes",
      "router",
      "logging",
      "fastapi",
      "("
    ],
    "backend/presentation/dto/__init__.py": [],
    "backend/mcp_servers/ai_code_quality/__init__.py": [],
    "backend/mcp_servers/ai_code_quality/ai_code_quality_mcp_server.py": [
      "UnifiedMCPBase",
      "mcp.server.stdio",
      "os",
      "datetime",
      "typing",
      "backend.mcp_servers.base.unified_mcp_base",
      "extraction\",",
      "statements\",",
      "pathlib",
      "mcp.types",
      "asyncio",
      "sys",
      "TextContent,",
      "re",
      "json",
      "ast",
      "subprocess",
      "optimization",
      "Path",
      "Any,"
    ],
    "backend/mcp_servers/ai_memory/__init__.py": [],
    "backend/mcp_servers/ai_memory/ai_memory_handlers.py": [
      "SnowflakeCortexServiceCore",
      "hashlib",
      "logging",
      "Snowflake:",
      "datetime",
      "backup",
      "typing",
      ".ai_memory_models",
      "cache\")",
      "backend.utils.snowflake_cortex_service_core",
      "Any",
      "backup\")",
      "Snowflake\"\"\"",
      "Snowflake",
      "memories",
      "__future__",
      "backup\"\"\"",
      "cache",
      "(",
      "cache:",
      "annotations",
      "cache\"\"\"",
      "actual",
      "datetime,"
    ],
    "backend/mcp_servers/ai_memory/ai_memory_models.py": [
      "pydantic",
      "__future__",
      "annotations",
      "priority",
      "dataclass,",
      "dataclasses",
      "Any",
      "BaseModel,",
      "uuid",
      "enum",
      "numpy",
      "dictionary\"\"\"",
      "re",
      "datetime",
      "datetime,",
      "typing",
      "content",
      "Enum"
    ],
    "backend/mcp_servers/ai_memory/server.py": [
      "HealthMonitor",
      ".core.models",
      "logging",
      "typing",
      "AIMemoryConfig",
      "SearchHandler",
      "Resource,",
      ".handlers.memory_handlers",
      ".core.performance",
      "mcp.types",
      "MemoryEntry,",
      "asyncio",
      ".handlers.search_handlers",
      "PerformanceMonitor",
      ".core.config",
      "mcp.server",
      "MemoryHandler",
      "Server",
      ".utils.monitoring",
      "Dict,"
    ],
    "backend/mcp_servers/base/__init__.py": [
      ".enhanced_standardized_mcp_server",
      "(",
      ".standardized_mcp_server"
    ],
    "backend/mcp_servers/base/enhanced_standardized_mcp_server.py": [
      "os",
      "time",
      "dataclass,",
      "logging",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "{self.config.name}",
      "abc",
      "Any",
      "fastapi.middleware.cors",
      "fastapi",
      "UTC,",
      "asyncio",
      "Enum",
      "prometheus_client",
      "CORSMiddleware",
      "ABC,",
      "FastAPI,",
      "Counter,",
      "json",
      "SnowflakeCortexService",
      "BaseModel",
      "pydantic",
      "dataclasses",
      "enum",
      "cache\"\"\"",
      "centralized"
    ],
    "backend/mcp_servers/base/standardized_mcp_server.py": [
      "APIRouter,",
      "time",
      "hashlib",
      "logging",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "abc",
      "gemini_cli_integration.gemini_cli_provider",
      "Any",
      "pathlib",
      "fastapi",
      "UTC,",
      "dataclass",
      "Enum",
      "prometheus_client",
      "config:",
      "ABC,",
      "re",
      "Counter,",
      "json",
      "(",
      "urlparse",
      "SnowflakeCortexService",
      "uvicorn",
      "urllib.parse",
      "WebFetch",
      "dataclasses",
      "enum",
      "ssl",
      "Path",
      "centralized",
      "aiohttp"
    ],
    "backend/mcp_servers/base/unified_mcp_base.py": [
      "os",
      "time",
      "logging",
      "datetime",
      "typing",
      "abc",
      "Any",
      "fastapi.middleware.cors",
      "fastapi",
      "prometheus_client",
      "Enum",
      "CORSMiddleware",
      "ABC,",
      "FastAPI,",
      "Callable",
      "asdict,",
      "setup_logger",
      "CollectorRegistry",
      "decorated",
      "backend.utils.custom_logger",
      "Counter,",
      "fastapi.responses",
      "uvicorn",
      "prometheus_client.core",
      "JSONResponse",
      "dataclasses",
      "enum",
      "collections.abc"
    ],
    "backend/mcp_servers/cortex_aisql/cortex_mcp_server.py": [
      "contextlib",
      "time",
      "BaseModel,",
      "logging",
      "snowflake.connector.pool",
      "typing",
      "pool\"\"\"",
      "backend.core.config_manager",
      "Any",
      "fastapi.middleware.cors",
      "fastapi",
      "asyncio",
      "CORSMiddleware",
      "FastAPI,",
      "json",
      "asynccontextmanager",
      "uvicorn",
      "pydantic",
      "query\")",
      "get_config_value",
      "SnowflakePool"
    ],
    "backend/mcp_servers/framework/__init__.py": [],
    "backend/mcp_servers/mem0_openmemory/enhanced_mem0_server.py": [
      "asynccontextmanager",
      "FastAPI,",
      "typing",
      "contextlib",
      "uvicorn",
      "httpx",
      "pydantic",
      "backend.core.config_manager",
      "Any",
      "time",
      "BaseModel,",
      "logging",
      "fastapi.middleware.cors",
      "fastapi",
      "asyncio",
      "get_config_value",
      "CORSMiddleware"
    ],
    "backend/mcp_servers/mem0_persistent/mem0_mcp_server.py": [
      "MemoryClient",
      "backend.core.config_manager",
      "mem0",
      "StandardizedMCPServer",
      "backend.core.standardized_mcp_server",
      "get_config_value"
    ],
    "backend/mcp_servers/mixins/__init__.py": [
      "get_capabilities",
      ".cline_v3_18_features"
    ],
    "backend/mcp_servers/mixins/cline_v3_18_features.py": [
      "tempfile",
      "subprocess",
      "os",
      "Any",
      "hashlib",
      "aiohttp",
      "datetime",
      "datetime,",
      "typing",
      "json"
    ],
    "backend/mcp_servers/ai_memory/core/__init__.py": [
      ".storage",
      ".exceptions",
      ".models",
      ".handlers",
      ".config",
      "(",
      "AIMemoryConfig"
    ],
    "backend/mcp_servers/ai_memory/core/config.py": [
      "Optional,",
      "__future__",
      "annotations",
      "pydantic",
      "BaseSettings,",
      "string",
      "os",
      "environment\"\"\"",
      "typing"
    ],
    "backend/mcp_servers/ai_memory/core/exceptions.py": [
      "functools",
      "__future__",
      "annotations",
      "asyncio",
      "the",
      "typing",
      "Any,"
    ],
    "backend/mcp_servers/ai_memory/core/models.py": [
      "Any,",
      "pydantic",
      "__future__",
      "annotations",
      "UUID",
      "batch\"\"\"",
      "BaseModel,",
      "uuid",
      "enum",
      "numpy",
      "datetime",
      "datetime,",
      "typing",
      "Enum"
    ],
    "backend/mcp_servers/ai_memory/core/performance.py": [
      "MemoryTimeoutError,",
      "contextlib",
      "dataclass,",
      "time",
      "logging",
      "typing",
      "random",
      "wraps",
      ".exceptions",
      "asyncio",
      "weakref",
      "psutil",
      "__future__",
      "numpy",
      "asynccontextmanager",
      "functools",
      "annotations",
      "dataclasses",
      "cache\"\"\"",
      "Any,"
    ],
    "backend/mcp_servers/ai_memory/handlers/__init__.py": [],
    "backend/mcp_servers/ai_memory/handlers/memory_handlers.py": [
      "..core.models",
      "MemoryEntry",
      "typing",
      "Dict,",
      "..core.config",
      "asyncio",
      "..core.exceptions",
      "MemoryStorageException",
      "AIMemoryConfig"
    ],
    "backend/mcp_servers/ai_memory/handlers/search_handlers.py": [
      "..core.models",
      "MemorySearchException",
      "MemoryEntry,",
      "Dict,",
      "..core.config",
      "typing",
      "..core.exceptions",
      "AIMemoryConfig"
    ],
    "backend/mcp_servers/ai_memory/utils/__init__.py": [],
    "backend/mcp_servers/ai_memory/utils/monitoring.py": [
      "psutil",
      "typing",
      "Dict,",
      "datetime",
      "asyncio"
    ],
    "backend/mcp_servers/ai_memory/utils/validation.py": [
      "typing",
      "..core.exceptions",
      "Any,",
      "ConfigurationException"
    ],
    "backend/infrastructure/adapters/estuary_adapter.py": [
      "(",
      "Estuary.\"\"\"",
      "typing",
      "backend.core.config_manager",
      "os",
      "Any",
      "get_config_value",
      "argparse",
      "pathlib",
      "secure",
      "Path",
      "datetime",
      "asyncio",
      "sys",
      "json",
      "requests",
      "backend.infrastructure.sophia_iac_orchestrator"
    ],
    "backend/infrastructure/adapters/snowflake_adapter.py": [
      "(",
      "scripts.snowflake_config_manager",
      "typing",
      "Snowflake.\"\"\"",
      "SnowflakeConfigManager",
      "os",
      "Any",
      "other",
      "argparse",
      "pathlib",
      "Path",
      "datetime",
      "asyncio",
      "sys",
      "json",
      "backend.infrastructure.sophia_iac_orchestrator"
    ],
    "backend/infrastructure/core/dependency_manager.py": [
      "typing",
      "contextlib",
      "Apollo.io\",",
      "Any",
      "dataclasses",
      "enum",
      "Gong\",",
      "argparse",
      "HubSpot\",",
      "UserGems\",",
      "Platform",
      "Slack\",",
      "asyncio",
      "dataclass",
      "Enum",
      "Figma\","
    ],
    "backend/infrastructure/core/state_manager.py": [
      "typing",
      "os",
      "dataclasses",
      "datetime,",
      "Any",
      "a",
      "argparse",
      "pathlib",
      "Path",
      "datetime",
      "sqlite3",
      "asyncio",
      "dataclass",
      "json"
    ],
    "backend/infrastructure/external/__init__.py": [],
    "backend/infrastructure/persistence/__init__.py": [],
    "backend/infrastructure/web/__init__.py": [],
    "backend/infrastructure/persistence/redis/__init__.py": [],
    "backend/infrastructure/persistence/repositories/__init__.py": [
      ".snowflake_call_repository",
      "SnowflakeCallRepository"
    ],
    "backend/infrastructure/persistence/repositories/snowflake_call_repository.py": [
      "(",
      "SnowflakeCortexService",
      "Call",
      "backend.application.ports.repositories.call_repository",
      "backend.domain.entities.call",
      "Sentiment",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "CallRepository",
      "backend.domain.value_objects.call_participant",
      "json",
      "backend.domain.value_objects.sentiment"
    ],
    "backend/infrastructure/persistence/snowflake/__init__.py": [],
    "backend/etl/estuary/estuary_configuration_manager.py": [
      "dataclass,",
      "time",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "random",
      "backend.core.config_manager",
      "Any",
      "aiohttp",
      "UTC,",
      "asyncio",
      "Enum",
      "Snowflake",
      "structlog",
      "Pulumi",
      "SnowflakeCortexService",
      "dataclasses",
      "enum",
      "argparse",
      "get_config_value"
    ],
    "backend/etl/gong/gong_data_quality_module.py": [
      "Any,",
      "backend.utils.snowflake_cortex_service_core",
      "SnowflakeCortexServiceCore",
      "typing",
      "__future__",
      "annotations",
      "dataclass,",
      "dataclasses",
      "enum",
      "logging",
      "re",
      "datetime",
      "datetime,",
      "asyncio",
      "Enum"
    ],
    "backend/etl/gong/ingest_gong_data.py": [
      "BaseModel,",
      "get_config_value",
      "logging",
      "backend.core.optimized_database_manager",
      "snowflake.connector",
      "datetime",
      "typing",
      "{from_date}",
      "backend.core.config_manager",
      "Any",
      "asyncio",
      "dataclass",
      "Enum",
      "Snowflake\"\"\"",
      "__future__",
      "structlog",
      "the",
      "re",
      "raw",
      "json",
      "(",
      "pydantic",
      "annotations",
      "dataclasses",
      "uuid",
      "enum",
      "argparse",
      "Gong",
      "datetime,",
      "aiohttp"
    ],
    "backend/etl/netsuite/estuary_netsuite_setup.py": [
      "(",
      "typing",
      "backend.etl.estuary.estuary_configuration_manager",
      "backend.core.config_manager",
      "Any",
      "dataclasses",
      "logging",
      "Pulumi",
      "asyncio",
      "dataclass",
      "get_config_value"
    ],
    "backend/etl/payready_core/ingest_core_sql_data.py": [
      "SnowflakeCortexService",
      "backend.utils.snowflake_cortex_service",
      "backend.core.config_manager",
      "dataclasses",
      "operational",
      "get_config_value",
      "logging",
      "pandas",
      "sqlalchemy",
      "snowflake.connector",
      "Pulumi",
      "datetime",
      "create_engine,",
      "datetime,",
      "asyncio",
      "dataclass",
      "json"
    ],
    "backend/domain/entities/__init__.py": [
      ".call",
      "Call",
      ".contact",
      ".deal",
      "Deal,",
      "PermissionLevel,",
      ".user",
      "Contact,"
    ],
    "backend/domain/entities/call.py": [
      "dataclasses",
      "CallParticipant",
      "optimal",
      "Sentiment",
      "datetime",
      "dataclass",
      "backend.domain.value_objects.call_participant",
      "backend.domain.value_objects.sentiment"
    ],
    "backend/domain/entities/contact.py": [
      "dataclasses",
      "champion",
      "enum",
      "datetime",
      "dataclass",
      "Enum"
    ],
    "backend/domain/entities/deal.py": [
      "dataclasses",
      "Decimal",
      "enum",
      "datetime",
      "dataclass",
      "Enum",
      "decimal"
    ],
    "backend/domain/entities/user.py": [
      "dataclasses",
      "enum",
      "the",
      "datetime",
      "dataclass",
      "Enum"
    ],
    "backend/domain/value_objects/__init__.py": [
      "Currency,",
      "CallParticipant,",
      ".money",
      "Sentiment",
      ".sentiment",
      ".call_participant"
    ],
    "backend/domain/value_objects/call_participant.py": [
      "dataclasses",
      "enum",
      "the",
      "dataclass",
      "Enum"
    ],
    "backend/domain/value_objects/money.py": [
      "cents",
      "string",
      "dataclasses",
      "Decimal",
      "enum",
      "dataclass",
      "Enum",
      "decimal"
    ],
    "backend/domain/value_objects/sentiment.py": [
      "dataclass",
      "dataclasses"
    ],
    "backend/core/base/__init__.py": [
      "ABC,",
      "typing",
      "abc",
      "Any"
    ],
    "backend/application/ports/__init__.py": [],
    "backend/application/use_cases/__init__.py": [
      "(",
      ".qualify_deal",
      ".analyze_call_sentiment"
    ],
    "backend/application/use_cases/analyze_call_sentiment.py": [
      "Call",
      "dataclasses",
      "analyzed",
      "backend.application.ports.repositories.call_repository",
      "AIService",
      "backend.domain.entities.call",
      "Sentiment",
      "backend.application.ports.services.ai_service",
      "CallRepository",
      "dataclass",
      "backend.domain.value_objects.sentiment"
    ],
    "backend/application/use_cases/qualify_deal.py": [
      "DealRepository",
      "EngagementLevel",
      "backend.domain.entities.contact",
      "backend.application.ports.repositories.deal_repository",
      "calls",
      "backend.domain.entities.deal",
      "dataclasses",
      "ContactRepository",
      "backend.application.ports.repositories.contact_repository",
      "Deal,",
      "backend.application.ports.repositories.call_repository",
      "#",
      "the",
      "recent",
      "datetime",
      "CallRepository",
      "dataclass"
    ],
    "backend/application/ports/repositories/__init__.py": [
      "CallRepository",
      "DealRepository",
      ".deal_repository",
      "ContactRepository",
      ".call_repository",
      ".contact_repository"
    ],
    "backend/application/ports/repositories/call_repository.py": [
      "ABC,",
      "abc",
      "Call",
      "backend.domain.entities.call",
      "datetime"
    ],
    "backend/application/ports/repositories/contact_repository.py": [
      "ABC,",
      "abc",
      "backend.domain.entities.contact",
      "the",
      "Contact,",
      "a"
    ],
    "backend/application/ports/repositories/deal_repository.py": [
      "ABC,",
      "abc",
      "backend.domain.entities.deal",
      "Deal,",
      "datetime"
    ],
    "backend/application/ports/services/__init__.py": [
      "AIService",
      ".ai_service"
    ],
    "backend/application/ports/services/ai_service.py": [
      "ABC,",
      "abc",
      "text.",
      "Sentiment",
      "backend.domain.value_objects.sentiment"
    ],
    "backend/app/core/__init__.py": [],
    "backend/app/core/config.py": [
      "functools",
      "os",
      "BaseSettings",
      "pydantic_settings",
      "lru_cache"
    ],
    "backend/app/core/dependencies.py": [
      "backend.services.enhanced_unified_chat_service",
      "Depends",
      "EnhancedUnifiedChatService",
      "MCPOrchestrationService",
      "Annotated",
      "HTTPAuthorizationCredentials,",
      "token\"\"\"",
      "fastapi.security",
      "backend.services.mcp_orchestration_service",
      "fastapi",
      "typing"
    ],
    "backend/app/api/admin/__init__.py": [],
    "backend/app/api/mcp/__init__.py": [],
    "backend/app/api/v3/__init__.py": [],
    "backend/agents/business_intelligence_group/bi_agent_coordinator.py": [
      "CompiledStateGraph",
      "END,",
      "langgraph.graph",
      "__future__",
      "annotations",
      "langgraph.graph.state",
      "logging",
      "the",
      "backend.agents.core.base_agent",
      "typing",
      "Any,",
      "BaseAgent,"
    ],
    "backend/agents/core/base_agent.py": [
      "ABC,",
      "abc",
      "typing",
      "backend.core.config_manager",
      "dataclass,",
      "dataclasses",
      "UTC,",
      "Any",
      "enum",
      "get_config_value",
      "logging",
      "config",
      "ESC",
      "queue",
      "datetime",
      "asyncio",
      "Enum"
    ],
    "backend/agents/core/langgraph_agent_base.py": [
      "dataclass,",
      "time",
      "hashlib",
      "logging",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "abc",
      "Any",
      "Enum",
      "ABC,",
      "__future__",
      "backend.core.integration_registry",
      "(",
      "json",
      "backend.services.unified_llm_service",
      "SnowflakeCortexService",
      "annotations",
      "IntegrationRegistry",
      "dataclasses",
      "enum",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server"
    ],
    "backend/agents/development_group/development_agent_coordinator.py": [
      "CompiledStateGraph",
      "END,",
      "langgraph.graph",
      "__future__",
      "annotations",
      "langgraph.graph.state",
      "logging",
      "backend.agents.core.base_agent",
      "typing",
      "Any,",
      "BaseAgent,"
    ],
    "backend/agents/enhanced/cortex_agent_orchestrator.py": [
      "backend.mcp_servers.mcp_client",
      "agent",
      "dataclass,",
      "logging",
      "typing",
      "MarketingAnalysisAgent",
      "Any",
      "backend.agents.specialized.marketing_analysis_agent",
      "backend.services.snowflake_intelligence_service",
      "SalesIntelligenceAgent",
      "backend.agents.core.base_agent",
      "asyncio",
      "Enum",
      "CallAnalysisAgent",
      "the",
      "backend.agents.specialized.call_analysis_agent",
      "non-cortex",
      "SnowflakeIntelligenceService",
      "BaseAgent",
      "dataclasses",
      "enum",
      "backend.agents.specialized.sales_intelligence_agent",
      "MCPClient"
    ],
    "backend/agents/enhanced/data_models.py": [
      "dataclass,",
      "dataclasses",
      "Any",
      "enum",
      "datetime",
      "typing",
      "Enum"
    ],
    "backend/agents/infrastructure/sophia_infrastructure_agent.py": [
      "typing",
      "execution",
      "UTC,",
      "dataclasses",
      "Any",
      "command\"\"\"",
      "logging",
      "datetime",
      "asyncio",
      "dataclass",
      "(",
      "backend.agents.core.langgraph_agent_base"
    ],
    "backend/agents/integrations/gong_data_integration.py": [
      "uuid4",
      "insights",
      "event",
      "participants",
      "AgentContext",
      "pool",
      "agent",
      "BaseModel,",
      "datetime",
      "typing",
      "agents",
      "multiple",
      "Any",
      "backend.agents.specialized.marketing_analysis_agent",
      "call",
      "backend.integrations.gong_redis_client",
      "asyncio",
      "UTC,",
      "Enum",
      "LangGraphAgentPool",
      "backend.agents.specialized.sales_coach_agent",
      "insights.\"\"\"",
      "__future__",
      "structlog",
      "backend.core.integration_registry",
      "CallAnalysisAgent",
      "backend.agents.specialized.call_analysis_agent",
      "json",
      "(",
      "summary",
      "pydantic",
      "call.\"\"\"",
      "annotations",
      "IntegrationRegistry",
      "enum",
      "uuid",
      "backend.agents.specialized.sales_intelligence_agent",
      "LangGraph",
      "Gong",
      "SalesCoachAgent",
      "backend.agents.core.langgraph_agent_base"
    ],
    "backend/agents/integrations/optimized_gong_data_integration.py": [
      "dataclass,",
      "time",
      "logging",
      "datetime",
      "backend.core.performance_monitor",
      "typing",
      "all",
      "Any",
      "call",
      "concurrent",
      "UTC,",
      "asyncio",
      "Enum",
      "concurrent.futures",
      "ConnectionType,",
      "optimized_cortex_service",
      "performance_monitor",
      "optimized",
      "backend.core.optimized_connection_manager",
      "dataclasses",
      "ThreadPoolExecutor",
      "enum",
      "backend.utils.optimized_snowflake_cortex_service"
    ],
    "backend/agents/research/orchestration_research_agent.py": [
      "SnowflakeCortexService",
      "__future__",
      "annotations",
      "EnhancedAiMemoryMCPServer",
      "backend.orchestration.langgraph_mcp_orchestrator",
      "logging",
      "LangGraphMCPOrchestrator",
      "backend.agents.core.base_agent",
      "backend.utils.snowflake_cortex_service",
      "asyncio",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "BaseAgent,"
    ],
    "backend/agents/specialized/asana_project_intelligence_agent.py": [
      "dataclass,",
      "logging",
      "get_unified_llm_service",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "EnhancedAiMemoryMCPServer",
      "Any",
      "asyncio",
      "Enum",
      "LangGraphAgentBase",
      "__future__",
      "json",
      "backend.services.unified_llm_service",
      "SnowflakeCortexService",
      "Asana",
      "annotations",
      "dataclasses",
      "Asana\"\"\"",
      "enum",
      "datetime,",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "backend.agents.core.langgraph_agent_base"
    ],
    "backend/agents/specialized/call_analysis_agent.py": [
      "identified",
      "logging",
      "get_gong_connector",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "backend.integrations.gong_api_client",
      "backend.core.config_manager",
      "Any",
      "call",
      "backend.agents.core.base_agent",
      "asyncio",
      "dataclass",
      "Enum",
      "Snowflake",
      "__future__",
      "(",
      "backend.utils.snowflake_gong_connector",
      "annotations",
      "BaseAgent",
      "GongAPIClient",
      "dataclasses",
      "enum",
      "batch",
      "get_config_value"
    ],
    "backend/agents/specialized/enhanced_sales_coach_agent.py": [
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "target",
      "Microsoft+Gong",
      "BaseAgent",
      "EnhancedAiMemoryMCPServer",
      "tags",
      "Any",
      "dataclasses",
      "historical",
      "logging",
      "datetime",
      "AI",
      "typing",
      "dataclass",
      "(",
      "backend.agents.core.base_agent",
      "backend.integrations.enhanced_microsoft_gong_integration"
    ],
    "backend/agents/specialized/interactive_sales_coach_agent.py": [
      "(",
      "BaseAgent",
      "performance",
      "dataclass,",
      "dataclasses",
      "Any",
      "you",
      "enum",
      "backend.services.enhanced_knowledge_base_service",
      "logging",
      "message",
      "backend.utils.enhanced_snowflake_cortex_service",
      "datetime",
      "Slack\"\"\"",
      "typing",
      "Enum",
      "backend.agents.core.base_agent"
    ],
    "backend/agents/specialized/linear_project_health_agent.py": [
      "dataclass,",
      "logging",
      "metrics",
      "trend",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "EnhancedAiMemoryMCPServer",
      "Any",
      "backend.agents.core.base_agent",
      "Enum",
      "historical",
      "json",
      "SnowflakeCortexService",
      "BaseAgent",
      "dataclasses",
      "enum",
      "AI",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server"
    ],
    "backend/agents/specialized/marketing_analysis_agent.py": [
      "backend.services.llm_service",
      "logging",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "FoundationalKnowledgeService",
      "SnowflakeHubSpotConnector",
      "Any",
      "backend.utils.snowflake_hubspot_connector",
      "knowledge",
      "backend.agents.core.base_agent",
      "dataclass",
      "Enum",
      "Snowflake",
      "HubSpot",
      "__future__",
      "backend.services.foundational_knowledge_service",
      "(",
      "SnowflakeCortexService",
      "annotations",
      "BaseAgent",
      "dataclasses",
      "enum",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server"
    ],
    "backend/agents/specialized/sales_coach_agent.py": [
      "Cortex",
      "SnowflakeGongConnector",
      "logging",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "SnowflakeHubSpotConnector",
      "Any",
      "backend.utils.snowflake_hubspot_connector",
      "backend.agents.core.base_agent",
      "dataclass",
      "Enum",
      "comprehensive",
      "Snowflake",
      "__future__",
      "(",
      "SnowflakeCortexService",
      "backend.utils.snowflake_gong_connector",
      "annotations",
      "BaseAgent",
      "dataclasses",
      "enum",
      "datetime,",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server"
    ],
    "backend/agents/specialized/sales_intelligence_agent.py": [
      "SalesIntelligenceAgentCore",
      ".sales_intelligence_agent_handlers",
      "__future__",
      "annotations",
      ".sales_intelligence_agent_utils",
      ".sales_intelligence_agent_models",
      "logging",
      "the",
      "from",
      ".sales_intelligence_agent_core",
      "("
    ],
    "backend/agents/specialized/sales_intelligence_agent_core.py": [
      ".sales_intelligence_agent_handlers",
      "SnowflakeGongConnector",
      "backend.services.llm_service",
      "logging",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "FoundationalKnowledgeService",
      "SnowflakeHubSpotConnector",
      "Any",
      "backend.utils.snowflake_hubspot_connector",
      "backend.agents.core.base_agent",
      "llm_service",
      "backend.agents.specialized.sales_coach_agent",
      "__future__",
      "backend.workflows.multi_agent_workflow",
      "backend.services.foundational_knowledge_service",
      "(",
      "SnowflakeCortexService",
      "backend.utils.snowflake_gong_connector",
      "annotations",
      "BaseAgent",
      ".sales_intelligence_agent_models",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server",
      "SalesCoachAgent"
    ],
    "backend/agents/specialized/sales_intelligence_agent_handlers.py": [
      "SalesIntelligenceUtils",
      "HubSpot",
      "__future__",
      "annotations",
      ".sales_intelligence_agent_utils",
      "Any",
      ".sales_intelligence_agent_models",
      "logging",
      "Gong",
      "datetime",
      "typing",
      "("
    ],
    "backend/agents/specialized/sales_intelligence_agent_models.py": [
      "__future__",
      "annotations",
      "dataclass,",
      "dataclasses",
      "Any",
      "enum",
      "datetime",
      "typing",
      "Enum"
    ],
    "backend/agents/specialized/sales_intelligence_agent_utils.py": [
      "__future__",
      "annotations",
      "numerical",
      ".sales_intelligence_agent_models",
      "logging",
      "datetime",
      "("
    ],
    "backend/agents/specialized/slack_analysis_agent.py": [
      "#{conversation.channel_name}:",
      "dataclass,",
      "logging",
      "datetime",
      "backend.utils.snowflake_cortex_service",
      "typing",
      "conversation\"\"\"",
      "EnhancedAiMemoryMCPServer",
      "Any",
      "backend.agents.core.base_agent",
      "asyncio",
      "Enum",
      "this",
      "text\"\"\"",
      "conversation",
      "SnowflakeCortexService",
      "BaseAgent",
      "dataclasses",
      "enum",
      "backend.mcp_servers.enhanced_ai_memory_mcp_server"
    ],
    "backend/agents/specialized/snowflake_admin_agent.py": [
      "BaseCallbackHandler",
      "SQLDatabase",
      "time",
      "UnifiedConnectionManager",
      "langchain.sql_database",
      "logging",
      "tool",
      "snowflake.connector",
      "OpenAI",
      "datetime",
      "langchain",
      "typing",
      "langchain.agents",
      "langchain.chat_models",
      "OptimizedConnectionManager",
      "backend.core.unified_connection_manager",
      "langchain.callbacks",
      "langchain.callbacks.base",
      "backend.core.config_manager",
      "Any",
      "StdOutCallbackHandler",
      "ChatOpenAI",
      "asyncio",
      "dataclass",
      "Enum",
      "INFORMATION_SCHEMA)",
      "langchain.schema",
      "re",
      "AgentType,",
      "the",
      "json",
      "DDL/DML",
      "backend.core.optimized_connection_manager",
      "langchain.llms",
      "dataclasses",
      "enum",
      "AgentAction,",
      "DictCursor",
      "get_config_value"
    ],
    "api/config/__init__.py": [],
    "api/config/performance.py": [
      "psutil",
      "functools",
      "typing",
      "function",
      "cache",
      "os",
      "dataclasses",
      "cached_property",
      "Any",
      "logging",
      "gc",
      "datetime",
      "datetime,",
      "asyncio",
      "dataclass",
      "aiohttp"
    ],
    "api/middleware/__init__.py": [],
    "api/middleware/security.py": [
      "BadRequest,",
      "Callable",
      "functools",
      "wraps",
      "redis",
      "Flask,",
      "{request.remote_addr}\"",
      "flask",
      "os",
      "time",
      "Any",
      "werkzeug.exceptions",
      "e",
      "hashlib",
      "logging",
      "collections.abc",
      "jwt",
      "typing"
    ],
    "api/monitoring/__init__.py": [],
    "api/monitoring/health.py": [
      "psutil",
      "redis",
      "flask",
      "os",
      "time",
      "Any",
      "logging",
      "datetime",
      "Flask,",
      "typing",
      "requests"
    ]
  },
  "services": {},
  "agents": {
    "backend/agents/business_intelligence_group/bi_agent_coordinator.py": {
      "type": "sophia_agent",
      "base_class": "TypedDict",
      "capabilities": [
        "competitive"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/core/base_agent.py": {
      "type": "sophia_agent",
      "base_class": "Enum",
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/core/langgraph_agent_base.py": {
      "type": "mcp_server",
      "base_class": "Enum",
      "capabilities": [
        "slack"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/development_group/development_agent_coordinator.py": {
      "type": "sophia_agent",
      "base_class": "TypedDict",
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/enhanced/cortex_agent_orchestrator.py": {
      "type": "mcp_server",
      "base_class": "Enum",
      "capabilities": [
        "gong",
        "slack"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/enhanced/data_models.py": {
      "type": "unknown",
      "base_class": "Enum",
      "capabilities": [
        "gong",
        "slack"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/infrastructure/sophia_infrastructure_agent.py": {
      "type": "mcp_server",
      "base_class": "LangGraphAgentBase",
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/integrations/gong_data_integration.py": {
      "type": "mcp_server",
      "base_class": "BaseModel",
      "capabilities": [
        "gong",
        "competitive"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/integrations/optimized_gong_data_integration.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [
        "gong",
        "competitive"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/research/orchestration_research_agent.py": {
      "type": "mcp_server",
      "base_class": "BaseAgent",
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/specialized/asana_project_intelligence_agent.py": {
      "type": "mcp_server",
      "base_class": "Enum",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "backend/agents/specialized/call_analysis_agent.py": {
      "type": "sophia_agent",
      "base_class": "Enum",
      "capabilities": [
        "gong"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/specialized/enhanced_sales_coach_agent.py": {
      "type": "mcp_server",
      "base_class": "BaseAgent",
      "capabilities": [
        "gong",
        "competitive"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/specialized/interactive_sales_coach_agent.py": {
      "type": "sophia_agent",
      "base_class": "BaseAgent",
      "capabilities": [
        "gong",
        "slack",
        "competitive"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/specialized/linear_project_health_agent.py": {
      "type": "mcp_server",
      "base_class": "Enum",
      "capabilities": [
        "linear"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/specialized/marketing_analysis_agent.py": {
      "type": "mcp_server",
      "base_class": "BaseAgent",
      "capabilities": [
        "competitive"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/specialized/sales_coach_agent.py": {
      "type": "mcp_server",
      "base_class": "Enum",
      "capabilities": [
        "gong"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/specialized/sales_intelligence_agent.py": {
      "type": "unknown",
      "base_class": "SalesIntelligenceAgentCore",
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/specialized/sales_intelligence_agent_core.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [
        "gong"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/specialized/sales_intelligence_agent_handlers.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [
        "gong",
        "competitive"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/specialized/sales_intelligence_agent_models.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [
        "gong",
        "competitive"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/specialized/sales_intelligence_agent_utils.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/specialized/slack_analysis_agent.py": {
      "type": "mcp_server",
      "base_class": "Enum",
      "capabilities": [
        "slack"
      ],
      "dependencies": [],
      "status": "unknown"
    },
    "backend/agents/specialized/snowflake_admin_agent.py": {
      "type": "unknown",
      "base_class": "Enum",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "infrastructure/agents/__init__.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "infrastructure/agents/base_agent_template.py": {
      "type": "sophia_agent",
      "base_class": "Enum",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/__init__.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/health_check.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [
        "slack",
        "linear"
      ],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/ag_ui/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/ag_ui/enhanced_ag_ui_mcp_server.py": {
      "type": "mcp_server",
      "base_class": "Enum",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/apify_intelligence/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [
        "competitive"
      ],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/apollo/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/asana/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/asana/asana_mcp_server.py": {
      "type": "mcp_server",
      "base_class": "StandardizedMCPServer",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/asana/health.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/asana/performance.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/bright_data/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/bright_data/bright_data_mcp_server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [
        "competitive"
      ],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/codacy/__init__.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/codacy/codacy_api_client.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/codacy/codacy_server.py": {
      "type": "mcp_server",
      "base_class": "BaseModel",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/codacy/enhanced_codacy_mcp_server.py": {
      "type": "mcp_server",
      "base_class": "BaseModel",
      "capabilities": [
        "gong"
      ],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/codacy/production_codacy_server.py": {
      "type": "mcp_server",
      "base_class": "BaseModel",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/codacy/simple_codacy_server.py": {
      "type": "mcp_server",
      "base_class": "BaseModel",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/code_modifier/code_modifier_mcp_server.py": {
      "type": "mcp_server",
      "base_class": "StandardizedMCPServer",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/figma_context/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/github/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/github/github_mcp_server.py": {
      "type": "mcp_server",
      "base_class": "SimpleMCPServer",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/github/health.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/github/performance.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/github/simple_github_server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/graphiti/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/graphiti/graphiti_mcp_server.py": {
      "type": "mcp_server",
      "base_class": "BaseModel",
      "capabilities": [
        "gong",
        "slack",
        "competitive"
      ],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/hubspot_unified/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/health.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/hubspot_mcp_server.py": {
      "type": "mcp_server",
      "base_class": "SimpleMCPServer",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/hubspot_unified/performance.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/huggingface_ai/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/huggingface_ai/huggingface_ai_mcp_server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/intercom/intercom_mcp_server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/lambda_labs_cli/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/lambda_labs_cli/lambda_labs_cli_mcp_server.py": {
      "type": "mcp_server",
      "base_class": "EnhancedStandardizedMCPServer",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/linear/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/linear/health.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/linear/linear_mcp_server.py": {
      "type": "mcp_server",
      "base_class": "StandardizedMCPServer",
      "capabilities": [
        "linear"
      ],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/linear/performance.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/linear/simple_linear_server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [
        "linear"
      ],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/migration_orchestrator/migration_orchestrator_mcp_server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [
        "gong"
      ],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/notion/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/notion/enhanced_notion_mcp_server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/notion/health.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/notion/notion_mcp_server_standardized.py": {
      "type": "mcp_server",
      "base_class": "StandardizedMCPServer",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/notion/performance.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/overlays/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/playwright/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/portkey_admin/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/portkey_admin/portkey_admin_mcp_server.py": {
      "type": "mcp_server",
      "base_class": "EnhancedStandardizedMCPServer",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/postgres/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/prompt_optimizer/prompt_optimizer_mcp_server.py": {
      "type": "mcp_server",
      "base_class": "BaseModel",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/pulumi/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/salesforce/salesforce_mcp_server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/slack_integration/simple_slack_integration_server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [
        "slack"
      ],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/slack_unified/simple_slack_integration_server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [
        "slack"
      ],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/snowflake_cortex/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/snowflake_cortex/production_snowflake_cortex_mcp_server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/snowflake_cortex/snowflake_cortex_mcp_server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/snowflake_unified/unified_snowflake_server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/sophia_intelligence_unified/unified_sophia_intelligence_server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/ui_ux_agent/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/ui_ux_agent/ui_ux_agent_mcp_server.py": {
      "type": "mcp_server",
      "base_class": "EnhancedStandardizedMCPServer",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/v0dev/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/v0dev/v0dev_mcp_server.py": {
      "type": "mcp_server",
      "base_class": "BaseModel",
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/playwright/microsoft-playwright-mcp/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/overlays/staging/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/tests/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/tests/get_closed_ticket_conversations.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/faiss_manager.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/hubspot_client.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/server.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "active"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/utils.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/__init__.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/company_client.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/contact_client.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/conversation_client.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/ticket_client.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/core/__init__.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/core/error_handler.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/core/formatters.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/core/storage.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/__init__.py": {
      "type": "unknown",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/base_handler.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/company_handler.py": {
      "type": "mcp_server",
      "base_class": "BaseHandler",
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/contact_handler.py": {
      "type": "mcp_server",
      "base_class": "BaseHandler",
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/conversation_handler.py": {
      "type": "mcp_server",
      "base_class": "BaseHandler",
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/search_handler.py": {
      "type": "mcp_server",
      "base_class": "BaseHandler",
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/ticket_handler.py": {
      "type": "mcp_server",
      "base_class": "BaseHandler",
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/figma_context/figma-context-mcp/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    },
    "mcp-servers/apollo/apollo-io-mcp/__init__.py": {
      "type": "mcp_server",
      "base_class": null,
      "capabilities": [],
      "dependencies": [],
      "status": "unknown"
    }
  },
  "integrations": {
    "gong": {
      "files": [
        "enhanced_sentiment_startup.py",
        "enhanced_startup.py",
        "estuary_advanced_integration.py",
        "fix_pulumi_esc_structure_mismatch.py",
        "github_organization_comprehensive_analysis.py",
        "simple_startup.py",
        "sophia_ecosystem_diagnostic.py",
        "unified_ai_assistant.py",
        "simple_validation_fix.py",
        "snowflake_advanced_features_implementation.py",
        "verify_complete_secrets_sync.py",
        "comprehensive_codebase_alignment.py",
        "cortex_agents_advanced_implementation.py",
        "deploy_comprehensive_upgrade.py",
        "load_github_secrets.py",
        "load_github_secrets_permanently.py",
        "gong-webhook-service/main.py",
        "infrastructure/lambda-labs-integration.py",
        "infrastructure/pulumi-esc-comprehensive-update.py",
        "infrastructure/pulumi-esc-update.py",
        "scripts/ai_analyze_salesforce_data.py",
        "scripts/archive_obsolete_docs.py",
        "scripts/comprehensive_dockcloud_cleanup.py",
        "scripts/comprehensive_secret_codebase_update.py",
        "scripts/advanced_architecture_implementation.py",
        "scripts/analyze_snowflake_config.py",
        "scripts/archive_legacy_docker_files.py",
        "scripts/automated_webhook_manager.py",
        "scripts/codebase_audit.py",
        "scripts/documentation_enhancer.py",
        "scripts/enhanced_batch_embed_data.py",
        "scripts/github_actions_consolidation.py",
        "scripts/build_all_mcp_images.py",
        "scripts/clean_pyproject_dependencies.py",
        "scripts/comprehensive_documentation_update.py",
        "scripts/create_docker_swarm_secrets.py",
        "scripts/implement_batch_processing.py",
        "scripts/diagnose_gong_webhook.py",
        "scripts/estuary_integration_manager.py",
        "scripts/infrastructure_modernization_kickoff.py",
        "scripts/snowflake_alignment_setup.py",
        "scripts/snowflake_config_manager.py",
        "scripts/sync_mcp_servers.py",
        "scripts/unified_secret_management_audit.py",
        "scripts/update-github-secrets-template.py",
        "scripts/update_service_optimizations.py",
        "scripts/setup_and_optimize_all_services.py",
        "scripts/setup_cortex_ai_complete.py",
        "scripts/snowflake_cleanup_and_standardize.py",
        "scripts/standardize_mcp_configurations.py",
        "scripts/unified_lambda_labs_deployment.py",
        "scripts/unified_secret_sync.py",
        "scripts/update_snowflake_schemas.py",
        "scripts/verify_and_align_snowflake.py",
        "tests/test_phase2_integration.py",
        "tests/integration/mcp_orchestration_test_suite.py",
        "scripts/implementation/phase2_advanced_integration.py",
        "scripts/security/comprehensive_security_remediation.py",
        "scripts/security/remove_exposed_secrets.py",
        "mcp-servers/codacy/enhanced_codacy_mcp_server.py",
        "mcp-servers/graphiti/graphiti_mcp_server.py",
        "mcp-servers/migration_orchestrator/migration_orchestrator_mcp_server.py",
        "backend/api/dashboard_data_routes.py",
        "backend/api/lambda_labs_health_routes.py",
        "backend/core/aligned_snowflake_config.py",
        "backend/core/auto_esc_config.py",
        "backend/core/centralized_config_manager.py",
        "backend/core/comprehensive_snowflake_config.py",
        "backend/core/config_validator.py",
        "backend/core/cross_platform_sync_orchestrator.py",
        "backend/core/data_flow_manager.py",
        "backend/core/enhanced_snowflake_config.py",
        "backend/core/security_config.py",
        "backend/core/simple_config.py",
        "backend/core/snowflake_production_config.py",
        "backend/core/snowflake_schema_integration.py",
        "backend/core/sql_security_validator.py",
        "backend/database/postgresql_staging_manager.py",
        "backend/etl/enhanced_unified_data_pipeline.py",
        "backend/etl/enhanced_unified_data_pipeline_backup.py",
        "backend/etl/estuary_flow_orchestrator.py",
        "backend/etl/gong_api_extractor_clean.py",
        "backend/infrastructure/sophia_iac_orchestrator.py",
        "backend/integrations/advanced_estuary_flow_manager.py",
        "backend/integrations/enhanced_gong_integration.py",
        "backend/integrations/enhanced_microsoft_gong_integration.py",
        "backend/integrations/gong_api_client.py",
        "backend/integrations/gong_api_client_enhanced.py",
        "backend/integrations/gong_redis_client.py",
        "backend/integrations/gong_snowflake_client.py",
        "backend/integrations/gong_webhook_processor.py",
        "backend/integrations/gong_webhook_server.py",
        "backend/mcp_servers/snowflake_admin_mcp_server.py",
        "backend/monitoring/alert_manager.py",
        "backend/monitoring/gong_data_quality.py",
        "backend/monitoring/production_mcp_monitor.py",
        "backend/monitoring/quality_rules.py",
        "backend/n8n_bridge/main.py",
        "backend/orchestration/unified_intent_engine.py",
        "backend/prompts/optimized_templates.py",
        "backend/scripts/batch_embed_data.py",
        "backend/scripts/enhanced_estuary_integration_test_suite.py",
        "backend/scripts/enhanced_gong_pipeline_test_suite.py",
        "backend/scripts/estuary_gong_setup.py",
        "backend/scripts/integrate_gong_pipeline.py",
        "backend/scripts/sophia_data_pipeline_ultimate.py",
        "backend/security/secret_management.py",
        "backend/services/comprehensive_memory_service.py",
        "backend/services/data_source_manager.py",
        "backend/services/data_transformer.py",
        "backend/services/enhanced_cortex_agent_service.py",
        "backend/services/enhanced_data_ingestion.py",
        "backend/services/enhanced_mcp_orchestration_service.py",
        "backend/services/enhanced_sentiment_analyzer.py",
        "backend/services/predictive_analytics_service.py",
        "backend/services/mcp_orchestration_service.py",
        "backend/services/enhanced_unified_intelligence_service.py",
        "backend/services/intelligent_data_discovery_service.py",
        "backend/services/large_data_import_service.py",
        "backend/services/gptcache_service.py",
        "backend/services/secure_credential_service.py",
        "backend/services/simplified_unified_intelligence_service.py",
        "backend/services/snowflake_cortex_aisql.py",
        "backend/services/snowflake_intelligence_service.py",
        "backend/services/snowflake_metadata_optimizer.py",
        "backend/services/sophia_agent_orchestrator.py",
        "backend/services/unified_ai_orchestration_service.py",
        "backend/services/vector_indexing_service.py",
        "backend/services/vector_intelligence_router.py",
        "backend/utils/snowflake_cortex_service.py",
        "backend/utils/snowflake_cortex_service_core.py",
        "backend/utils/snowflake_gong_connector.py",
        "backend/workflows/enhanced_langgraph_orchestration.py",
        "backend/workflows/langgraph_agent_orchestration.py",
        "backend/workflows/multi_agent_workflow.py",
        "backend/workflows/supervisor_orchestrator.py",
        "backend/mcp_servers/cortex_aisql/cortex_mcp_server.py",
        "backend/infrastructure/adapters/estuary_adapter.py",
        "backend/infrastructure/adapters/snowflake_adapter.py",
        "backend/infrastructure/core/dependency_manager.py",
        "backend/infrastructure/persistence/repositories/snowflake_call_repository.py",
        "backend/etl/estuary/estuary_configuration_manager.py",
        "backend/etl/gong/gong_data_quality_module.py",
        "backend/etl/gong/ingest_gong_data.py",
        "backend/agents/enhanced/cortex_agent_orchestrator.py",
        "backend/agents/enhanced/data_models.py",
        "backend/agents/integrations/gong_data_integration.py",
        "backend/agents/integrations/optimized_gong_data_integration.py",
        "backend/agents/specialized/call_analysis_agent.py",
        "backend/agents/specialized/enhanced_sales_coach_agent.py",
        "backend/agents/specialized/interactive_sales_coach_agent.py",
        "backend/agents/specialized/sales_coach_agent.py",
        "backend/agents/specialized/sales_intelligence_agent_core.py",
        "backend/agents/specialized/sales_intelligence_agent_handlers.py",
        "backend/agents/specialized/sales_intelligence_agent_models.py",
        "api/monitoring/health.py"
      ],
      "endpoints": [
        "api.middleware.cors",
        "api.middleware.cors",
        "api.middleware.cors",
        "http://localhost:9001",
        "http://localhost:8000",
        "http://localhost:8080",
        "http://localhost:9000",
        "http://localhost:9002/health",
        "http://localhost:3000",
        "http://localhost:3008",
        "http://localhost:9002",
        "http://localhost:9001/health",
        "api.responses",
        "api.estuary.dev",
        "https://api.estuary.dev/v1/destinations",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "https://sophia-ai-frontend-dev.vercel.app/api/estuary/webhook",
        "api.py",
        "api.estuary.dev",
        "api.vercel.com",
        "https://api.linear.app/graphql",
        "api.gong.io",
        "https://api.gong.io/v2",
        "api.hubapi.com",
        "https://api.figma.com/v1",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "api.linear.app",
        "api.figma.com",
        "https://slack.com/api",
        "https://app.sophia-intel.ai",
        "https://api.estuary.dev/v1",
        ".sophia-intel.ai",
        "https://api.vercel.com",
        "https://github.com/ai-cherry/sophia-main.git",
        "api.tiangolo.com",
        "https://monitoring.sophia-ai.com",
        "api.sophia-ai.com",
        "https://img.shields.io/badge/Snowflake-Cortex_AI-blue.svg)](https://www.snowflake.com/)",
        "https://keepachangelog.com/en/1.0.0/).",
        "https://img.shields.io/badge/FastAPI-0.100+-green.svg)](https://fastapi.tiangolo.com/)",
        "https://img.shields.io/badge/status-production-green.svg)]()",
        "https://api.sophia-ai.com/docs",
        "https://app.sophia-ai.com",
        "https://api.sophia-ai.com",
        "https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)",
        "https://{domain}/webhook/gong/calls",
        ".sophia-intel.ai",
        "webhooks.sophia-intel.ai",
        "api.estuary.dev",
        "https://api.estuary.dev/v1",
        "http://localhost:{server_config.get(",
        "https://github.com/organizations/ai-cherry/settings/secrets/actions",
        "api.github.com",
        "https://api.github.com/orgs/{org}",
        "https://your-sophia-platform.com",
        "https://cloud.lambda.ai/api/v1",
        "https://api.sophia-intel.ai",
        "api.sophia-intel.ai",
        "https://astral.sh/uv/install.sh",
        "https://coverage.codacy.com/get.sh)",
        "https://api.sophia-intel.ai/$1",
        ".sophia-intel.ai",
        "http://localhost:{port}/health",
        "http://localhost:8000/health",
        "http://localhost:{self._get_service_port(service_name)}/health",
        "http://{host}:9022",
        "http://{host}:9019",
        "http://{host}:9020",
        "http://{host}:9010",
        "http://{host}:9013",
        "api.insecure",
        "http://{host}:9015",
        "api.dashboard",
        "http://{host}:8090",
        "http://{host}:9001",
        "http://{host}:9011",
        "http://localhost:9001/health",
        "http://localhost:8000/health",
        "http://{host}:9031",
        "http://{host}:3008",
        "http://{host}:3000",
        "http://{host}:9030",
        "http://{host}:9032",
        "http://{host}:9012",
        "http://{host}:9021",
        "http://{host}:9014",
        "http://{host}:8000",
        "http://localhost:3008/health",
        "http://{host}:9090",
        "http://localhost:{port}/capabilities",
        "http://localhost:{port}/health",
        "http://localhost:{port}{endpoint}",
        "http://localhost:9000/health",
        "http://{self.lambda_ip}:8000/api/test/insert",
        "http://{self.lambda_ip}:8000/api/health",
        "http://{self.lambda_ip}:5678/webhook/performance-test",
        "http://{self.lambda_ip}:8000/api/vectors/search",
        "api.middleware.cors",
        "http://localhost:{config[",
        "api.estuary.dev",
        "https://api.gong.io",
        "https://api.intercom.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.estuary.dev",
        "api.intercom.io",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "http://localhost:8000",
        "http://localhost:8000",
        "https://api.linear.app/graphql",
        "https://api.gong.io/v2/workspaces",
        "https://openrouter.ai/api/v1/models",
        "https://slack.com/api/auth.test",
        "https://api.hubapi.com/oauth/v1/access-tokens/me",
        "api.gong.io",
        "https://controller.{environment}.pinecone.io/databases",
        "api.hubapi.com",
        "https://api.portkey.ai",
        "api.openai.com",
        "api.portkey.ai",
        "api.linear.app",
        "https://api.openai.com/v1/models",
        "https://api.gong.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "https://api.gong.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "https://slack.com/api",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "https://api.estuary.dev",
        "http://localhost:8001/api/v1",
        "api.estuary.dev",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "api.gong.io",
        "https://api.gong.io",
        "api.gong.io",
        "https://api.gong.io",
        "api.gong.io",
        "https://api.gong.io",
        "api.gong.io",
        "api.middleware.cors",
        "webhook.webhook_id",
        "https://api.gong.io",
        "https://monitoring.sophia-ai.com/alerts/{alert.alert_id}/acknowledge",
        "https://events.pagerduty.com/v2/enqueue",
        "https://monitoring.sophia-ai.com/alerts/{alert.alert_id}",
        "http://localhost",
        "api.middleware.cors",
        "api.gong.io",
        "https://api.gong.io/v2/workspaces",
        "http://localhost:8000",
        "http://localhost:8000",
        "api.gong.io",
        "https://api.gong.io/v2",
        "https://api.openai.com/v1/models",
        "api.anthropic.com",
        "https://app.asana.com/api/1.0/users/me",
        "api.openai.com",
        "https://api.anthropic.com/v1/messages",
        "api.types.is_datetime64_any_dtype",
        "api.types.is_numeric_dtype",
        "http://{self.host}:{self.port}{self.base_path}",
        "http://localhost:{config.port}",
        "http://localhost:{config.port}/health",
        "https://your-instance.salesforce.com",
        "https://api.linear.app/graphql",
        "api.gong.io",
        "https://api.gong.io/v2",
        "api.hubapi.com",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "api.linear.app",
        "https://slack.com/api",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "api.middleware.cors",
        "api.estuary.dev",
        "https://api.estuary.dev/v1",
        "https://app.sophia-intel.ai/webhook/estuary",
        ".sophia-intel.ai",
        "https://docs.estuary.dev/integrations/sources/asana",
        "https://app.asana.com/api/1.0/users/me",
        "http://localhost:8000",
        "https://docs.estuary.dev/integrations/sources/gong",
        "api.gong.io",
        "https://api.gong.io/v2",
        "https://api.portkey.ai/health",
        "https://api.salesforce.com/health",
        "api.portkey.ai",
        "api.salesforce.com"
      ]
    },
    "slack": {
      "files": [
        "enhanced_sentiment_startup.py",
        "enhanced_startup.py",
        "enhanced_coding_workflow_integration.py",
        "estuary_advanced_integration.py",
        "refactor_long_functions.py",
        "fix_pulumi_esc_structure_mismatch.py",
        "github_organization_comprehensive_analysis.py",
        "simple_startup.py",
        "implement_phase1a_foundation.py",
        "implement_phase1b_services.py",
        "implement_phase2a_advanced.py",
        "github_integration_strategy.py",
        "implement_tier1_mcp_repositories.py",
        "start_mcp_services.py",
        "setup_enhanced_coding_workflow.py",
        "simple_validation_fix.py",
        "snowflake_advanced_features_implementation.py",
        "unified_ai_coding_assistant.py",
        "verify_complete_secrets_sync.py",
        "comprehensive_codebase_alignment.py",
        "cortex_agents_advanced_implementation.py",
        "create_forks.py",
        "deploy_comprehensive_upgrade.py",
        "deploy_estuary_foundation.py",
        "deploy_estuary_foundation_corrected.py",
        "load_github_secrets.py",
        "load_github_secrets_permanently.py",
        "implementation_scripts/setup_forks.py",
        "infrastructure/pulumi-esc-update.py",
        "mcp-servers/health_check.py",
        "n8n-integration/enhanced_n8n_cli_manager.py",
        "n8n-integration/n8n_mcp_gateway.py",
        "scripts/comprehensive_dockcloud_cleanup.py",
        "scripts/comprehensive_secret_codebase_update.py",
        "scripts/expand_strategic_repositories.py",
        "scripts/advanced_architecture_implementation.py",
        "scripts/analyze_snowflake_config.py",
        "scripts/automated_maintenance_system.py",
        "scripts/automated_webhook_manager.py",
        "scripts/codebase_audit.py",
        "scripts/enhanced_batch_embed_data.py",
        "scripts/github_actions_consolidation.py",
        "scripts/build_all_mcp_images.py",
        "scripts/comprehensive_code_remediation.py",
        "scripts/comprehensive_documentation_update.py",
        "scripts/create_docker_swarm_secrets.py",
        "scripts/estuary_integration_manager.py",
        "scripts/configure_github_organization_security.py",
        "scripts/snowflake_alignment_setup.py",
        "scripts/snowflake_config_manager.py",
        "scripts/standardize_mcp_servers.py",
        "scripts/sync_mcp_servers.py",
        "scripts/unified_secret_management_audit.py",
        "scripts/update-github-secrets-template.py",
        "scripts/vercel_optimization.py",
        "scripts/mcp_orchestration_audit.py",
        "scripts/notify_deployment_status.py",
        "scripts/phase2_mcp_optimization.py",
        "scripts/project_chimera_implementation.py",
        "scripts/refactor_priority_functions.py",
        "scripts/setup_and_optimize_all_services.py",
        "scripts/setup_cortex_ai_complete.py",
        "scripts/snowflake_cleanup_and_standardize.py",
        "scripts/strategic_repository_expansion.py",
        "scripts/unified_lambda_labs_deployment.py",
        "scripts/unified_secret_sync.py",
        "scripts/update_snowflake_schemas.py",
        "scripts/validate_secret_pipeline.py",
        "scripts/verify_and_align_snowflake.py",
        "tests/integration/mcp_orchestration_test_suite.py",
        "scripts/implementation/phase2_advanced_integration.py",
        "mcp-servers/graphiti/graphiti_mcp_server.py",
        "mcp-servers/slack_integration/simple_slack_integration_server.py",
        "mcp-servers/slack_unified/simple_slack_integration_server.py",
        "infrastructure/esc/enhanced_secret_sync_monitor.py",
        "backend/api/lambda_labs_health_routes.py",
        "backend/core/aligned_snowflake_config.py",
        "backend/core/auto_esc_config.py",
        "backend/core/centralized_config_manager.py",
        "backend/core/concurrent_agent_processor.py",
        "backend/core/config_validator.py",
        "backend/core/data_flow_manager.py",
        "backend/core/intelligent_data_ingestion.py",
        "backend/core/security_config.py",
        "backend/core/simple_config.py",
        "backend/core/snowflake_production_config.py",
        "backend/database/postgresql_staging_manager.py",
        "backend/etl/enhanced_ingestion_service.py",
        "backend/etl/enhanced_unified_data_pipeline.py",
        "backend/etl/enhanced_unified_data_pipeline_backup.py",
        "backend/etl/estuary_flow_orchestrator.py",
        "backend/infrastructure/sophia_iac_orchestrator.py",
        "backend/integrations/advanced_estuary_flow_manager.py",
        "backend/integrations/estuary_flow_manager.py",
        "backend/mcp_servers/mcp_auth.py",
        "backend/mcp_servers/mcp_health.py",
        "backend/mcp_servers/mcp_registry.py",
        "backend/mcp_servers/snowflake_admin_mcp_server.py",
        "backend/monitoring/alert_manager.py",
        "backend/monitoring/group_health_monitoring.py",
        "backend/monitoring/mcp_health_monitor.py",
        "backend/monitoring/mcp_monitoring_config.py",
        "backend/monitoring/production_mcp_monitor.py",
        "backend/scripts/batch_embed_data.py",
        "backend/scripts/ingest_foundational_kb.py",
        "backend/scripts/transform_slack_linear_data.py",
        "backend/security/secret_management.py",
        "backend/services/comprehensive_memory_service.py",
        "backend/services/data_source_manager.py",
        "backend/services/dynamic_orchestration_service.py",
        "backend/services/enhanced_cortex_agent_service.py",
        "backend/services/enhanced_data_ingestion.py",
        "backend/services/enhanced_mcp_orchestration_service.py",
        "backend/services/enhanced_sentiment_analyzer.py",
        "backend/services/group_aware_orchestration_enhancement.py",
        "backend/services/intelligent_query_router.py",
        "backend/services/mcp_orchestration_service.py",
        "backend/services/enhanced_slack_integration_service.py",
        "backend/services/large_data_import_service.py",
        "backend/services/mcp_capability_router.py",
        "backend/services/secure_action_service.py",
        "backend/services/secure_credential_service.py",
        "backend/services/snowflake_intelligence_service.py",
        "backend/services/snowflake_metadata_optimizer.py",
        "backend/services/sophia_agent_orchestrator.py",
        "backend/services/unified_ai_orchestration_service.py",
        "backend/services/vector_indexing_service.py",
        "backend/presentation/api/router.py",
        "backend/infrastructure/adapters/estuary_adapter.py",
        "backend/infrastructure/adapters/snowflake_adapter.py",
        "backend/infrastructure/core/dependency_manager.py",
        "backend/etl/estuary/estuary_configuration_manager.py",
        "backend/agents/core/langgraph_agent_base.py",
        "backend/agents/enhanced/cortex_agent_orchestrator.py",
        "backend/agents/enhanced/data_models.py",
        "backend/agents/specialized/interactive_sales_coach_agent.py",
        "backend/agents/specialized/slack_analysis_agent.py"
      ],
      "endpoints": [
        "api.middleware.cors",
        "api.middleware.cors",
        "http://localhost:9001/api/design_system",
        "http://localhost:8000",
        "https://api.linear.app/graphql",
        "https://api.github.com",
        "api.linear.app",
        "https://{domain}.atlassian.net/rest/api/3",
        "api.github.com",
        "https://slack.com/api",
        "api.middleware.cors",
        "https://github.com/modelcontextprotocol/inspector.git",
        "https://github.com/modelcontextprotocol/python-sdk.git",
        "https://notion.so/new_page_123",
        "https://github.com/modelcontextprotocol/servers",
        "https://github.com/modelcontextprotocol/python-sdk",
        "https://github_pat_TOKEN@github.com/...",
        "https://api.github.com",
        "https://github.com/modelcontextprotocol/inspector.git",
        "https://github.com/",
        "https://github.com/modelcontextprotocol/servers.git",
        "https://github.com/korotovsky/slack-mcp-server",
        "https://api.github.com/repos/{owner}/{repo}/forks",
        "https://astral.sh/uv/install.sh",
        "https://github.com/makenotion/notion-mcp-server",
        "api.github.com",
        "https://github.com/modelcontextprotocol/inspector",
        "https://github.com/brightdata/mcp-server",
        "https://github.com/modelcontextprotocol/inspector.git",
        "https://github.com/isaacwasserman/mcp-snowflake-server.git",
        "https://github.com/korotovsky/slack-mcp-server.git",
        "https://github.com/modelcontextprotocol/python-sdk.git",
        "https://github.com/peakmojo/mcp-hubspot.git",
        "http://localhost:8000/api/platform-integration",
        "https://linear.app/*",
        "http://localhost:8000",
        "https://app.linear.app/*",
        "http://localhost:8000/*",
        "http://localhost:8000/health",
        "https://slack.com/*",
        "http://localhost:3000",
        "https://*.atlassian.net/*",
        "https://github.com/*",
        "http://localhost:8000/chat",
        "http://localhost:{port}/health",
        "http://localhost:9002/analyze-design",
        "api.github.com",
        "https://api.github.com/repos/{owner}/{repo}/forks",
        "api.github.com",
        "https://api.github.com/repos/{owner}/{repo}/forks",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "https://sophia-ai-frontend-dev.vercel.app/api/estuary/webhook",
        "http://localhost:9205/health",
        "http://localhost:9002/health",
        "http://localhost:9202/health",
        "http://localhost:9203/health",
        "http://localhost:9300/health",
        "http://localhost:9200/health",
        "http://localhost:9104/health",
        "http://localhost:9001/health",
        "http://localhost:9005/health",
        "http://localhost:9004/health",
        "http://localhost:9106/health",
        "http://localhost:9003/health",
        "http://localhost:9102/health",
        "http://localhost:9103/health",
        "http://localhost:9204/health",
        "http://localhost:9201/health",
        "http://localhost:9000/health",
        "http://localhost:9100/health",
        "http://localhost:9101/health",
        "http://localhost:9105/health",
        "http://localhost:9099/api/v1/n8n/process",
        "http://localhost:9016/api/process-business-data",
        "http://localhost:9015/api/competitive-analysis",
        "http://localhost:9017/api/store-vectors",
        "http://localhost:5678",
        "http://localhost:3000/api/dashboard/update",
        "http://localhost:5678",
        "http://localhost:8100",
        "api.py",
        "https://github.com/linear/mcp-server.git",
        "https://github.com/modelcontextprotocol/server-github.git",
        "https://github.com/docker/mcp-server-docker.git",
        "https://github.com/slack-platform/mcp-server.git",
        "https://github.com/vercel/mcp-server.git",
        "api.estuary.dev",
        "api.vercel.com",
        "https://api.linear.app/graphql",
        "api.gong.io",
        "https://api.gong.io/v2",
        "api.hubapi.com",
        "https://api.figma.com/v1",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "api.linear.app",
        "api.figma.com",
        "https://slack.com/api",
        "https://app.sophia-intel.ai",
        "https://api.estuary.dev/v1",
        ".sophia-intel.ai",
        "https://api.vercel.com",
        "https://github.com/ai-cherry/sophia-main.git",
        "api.tiangolo.com",
        "https://monitoring.sophia-ai.com",
        "api.sophia-ai.com",
        "https://img.shields.io/badge/Snowflake-Cortex_AI-blue.svg)](https://www.snowflake.com/)",
        "https://keepachangelog.com/en/1.0.0/).",
        "https://img.shields.io/badge/FastAPI-0.100+-green.svg)](https://fastapi.tiangolo.com/)",
        "https://img.shields.io/badge/status-production-green.svg)]()",
        "https://api.sophia-ai.com/docs",
        "https://app.sophia-ai.com",
        "https://api.sophia-ai.com",
        "https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)",
        "api.estuary.dev",
        "https://api.estuary.dev/v1",
        "api.github.com",
        "https://api.github.com",
        "http://localhost:{port}/health",
        "http://localhost:${MCP_SERVER_PORT}/health",
        "http://localhost:{server_config.get(",
        "https://github.com/organizations/ai-cherry/settings/secrets/actions",
        "api.github.com",
        "https://api.github.com/orgs/{org}",
        "https://your-sophia-platform.com",
        "api.vercel.com",
        "https://api.sophia.payready.com",
        "api.sophia.payready.com",
        "https://api.vercel.com",
        "https://api.sophia.payready.com/api/$1",
        "https://{deployment_url}",
        "http://localhost:8000/health",
        "https://linear.app/ticket/TICKET-{datetime.utcnow().timestamp()}",
        "https://cloud.lambda.ai/api/v1",
        "https://api.sophia-intel.ai",
        "api.sophia-intel.ai",
        "https://astral.sh/uv/install.sh",
        "https://coverage.codacy.com/get.sh)",
        "https://api.sophia-intel.ai/$1",
        ".sophia-intel.ai",
        "https://github.com/kubernetes/mcp-server-kubernetes.git",
        "https://github.com/langchain-ai/mcp-server-langchain.git",
        "https://github.com/modelcontextprotocol/server-github.git",
        "https://github.com/anthropic/mcp-server-claude.git",
        "https://github.com/GLips/Figma-Context-MCP.git",
        "https://github.com/linear/mcp-server-linear.git",
        "https://github.com/openai/mcp-server-openai.git",
        "https://github.com/modelcontextprotocol/server-filesystem.git",
        "https://github.com/microsoft/playwright-mcp.git",
        "https://github.com/modelcontextprotocol/server-vercel.git",
        "https://github.com/modelcontextprotocol/server-docker.git",
        "https://github.com/modelcontextprotocol/server-postgres.git",
        "https://github.com/slack-mcp/official-server.git",
        "https://github.com/notion/mcp-server-notion.git",
        "http://{host}:9022",
        "http://{host}:9019",
        "http://{host}:9020",
        "http://{host}:9010",
        "http://{host}:9013",
        "api.insecure",
        "http://{host}:9015",
        "api.dashboard",
        "http://{host}:8090",
        "http://{host}:9001",
        "http://{host}:9011",
        "http://localhost:9001/health",
        "http://localhost:8000/health",
        "http://{host}:9031",
        "http://{host}:3008",
        "http://{host}:3000",
        "http://{host}:9030",
        "http://{host}:9032",
        "http://{host}:9012",
        "http://{host}:9021",
        "http://{host}:9014",
        "http://{host}:8000",
        "http://localhost:3008/health",
        "http://{host}:9090",
        "http://localhost:{port}/capabilities",
        "http://localhost:{port}/health",
        "http://localhost:{port}{endpoint}",
        "http://localhost:9000/health",
        "http://{self.lambda_ip}:8000/api/test/insert",
        "http://{self.lambda_ip}:8000/api/health",
        "http://{self.lambda_ip}:5678/webhook/performance-test",
        "http://{self.lambda_ip}:8000/api/vectors/search",
        "api.github.com",
        "https://api.github.com/orgs/{self.config[",
        "http://localhost:{config[",
        "api.estuary.dev",
        "https://api.gong.io",
        "https://api.intercom.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.estuary.dev",
        "api.intercom.io",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "http://localhost:8000",
        "http://localhost:8000",
        "https://api.linear.app/graphql",
        "https://api.gong.io/v2/workspaces",
        "https://openrouter.ai/api/v1/models",
        "https://slack.com/api/auth.test",
        "https://api.hubapi.com/oauth/v1/access-tokens/me",
        "api.gong.io",
        "https://controller.{environment}.pinecone.io/databases",
        "api.hubapi.com",
        "https://api.portkey.ai",
        "api.openai.com",
        "api.portkey.ai",
        "api.linear.app",
        "https://api.openai.com/v1/models",
        "https://api.gong.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "https://api.gong.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "https://slack.com/api",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "https://api.estuary.dev",
        "http://localhost:8001/api/v1",
        "api.estuary.dev",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "https://github.com/estuary/flow/releases/download/v0.5.15/flowctl-x86_64-linux",
        "https://api.usergems.com/v1",
        "api.usergems.com",
        "https://api.apollo.io/v1",
        "api.apollo.io",
        "https://monitoring.sophia-ai.com/alerts/{alert.alert_id}/acknowledge",
        "https://events.pagerduty.com/v2/enqueue",
        "https://monitoring.sophia-ai.com/alerts/{alert.alert_id}",
        "http://localhost:{server_config[",
        "http://localhost:3009/health",
        "http://localhost:9000/health",
        "http://localhost:3006/health",
        "http://localhost:3007/health",
        "http://localhost:3008/health",
        "http://localhost",
        "https://metrogroup.com",
        "https://paymenttech.com",
        "https://acmeproperty.com",
        "https://api.openai.com/v1/models",
        "api.anthropic.com",
        "https://app.asana.com/api/1.0/users/me",
        "api.openai.com",
        "https://api.anthropic.com/v1/messages",
        "http://{self.host}:{self.port}{self.base_path}",
        "http://localhost:{config.port}",
        "http://localhost:{config.port}/health",
        "https://linear.app/ticket/TICKET-{datetime.utcnow().timestamp()}",
        "https://your-instance.salesforce.com",
        "https://api.linear.app/graphql",
        "api.gong.io",
        "https://api.gong.io/v2",
        "api.hubapi.com",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "api.linear.app",
        "https://slack.com/api",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "api.estuary.dev",
        "https://api.estuary.dev/v1",
        "https://app.sophia-intel.ai/webhook/estuary",
        ".sophia-intel.ai",
        "https://docs.estuary.dev/integrations/sources/asana",
        "https://app.asana.com/api/1.0/users/me",
        "http://localhost:8000",
        "https://docs.estuary.dev/integrations/sources/gong"
      ]
    },
    "linear": {
      "files": [
        "enhanced_startup.py",
        "enhanced_coding_workflow_integration.py",
        "refactor_long_functions.py",
        "fix_pulumi_esc_structure_mismatch.py",
        "github_organization_comprehensive_analysis.py",
        "simple_startup.py",
        "sophia_ecosystem_diagnostic.py",
        "setup_enhanced_coding_workflow.py",
        "simple_validation_fix.py",
        "unified_ai_coding_assistant.py",
        "verify_complete_secrets_sync.py",
        "comprehensive_codebase_alignment.py",
        "load_github_secrets.py",
        "load_github_secrets_permanently.py",
        "infrastructure/pulumi-esc-comprehensive-update.py",
        "mcp-servers/health_check.py",
        "n8n-integration/n8n_mcp_gateway.py",
        "scripts/comprehensive_secret_codebase_update.py",
        "scripts/consolidate_documentation.py",
        "scripts/expand_strategic_repositories.py",
        "scripts/advanced_architecture_implementation.py",
        "scripts/analyze_snowflake_config.py",
        "scripts/assess_core_infrastructure.py",
        "scripts/automated_webhook_manager.py",
        "scripts/check_deployment_status.py",
        "scripts/codebase_audit.py",
        "scripts/comprehensive_monitoring.py",
        "scripts/documentation_enhancer.py",
        "scripts/build_all_mcp_images.py",
        "scripts/comprehensive_mcp_debug_final.py",
        "scripts/create_docker_swarm_secrets.py",
        "scripts/standardize_mcp_servers.py",
        "scripts/start_all_mcp_servers.py",
        "scripts/start_mcp_servers.py",
        "scripts/sync_mcp_servers.py",
        "scripts/unified_secret_management_audit.py",
        "scripts/mcp_health_monitor.py",
        "scripts/mcp_orchestration_audit.py",
        "scripts/performance_baseline.py",
        "scripts/performance_optimizer.py",
        "scripts/phase2_mcp_optimization.py",
        "scripts/project_chimera_implementation.py",
        "scripts/real_time_monitoring.py",
        "scripts/refactor_priority_functions.py",
        "scripts/setup_and_optimize_all_services.py",
        "scripts/snowflake_cleanup_and_standardize.py",
        "scripts/standardize_mcp_configurations.py",
        "scripts/strategic_repository_expansion.py",
        "scripts/unified_lambda_labs_deployment.py",
        "scripts/unified_secret_sync.py",
        "scripts/validate_complete_deployment.py",
        "tests/test_unified_chat_comprehensive.py",
        "tests/integration/mcp_orchestration_test_suite.py",
        "mcp-servers/linear/linear_mcp_server.py",
        "mcp-servers/linear/simple_linear_server.py",
        "backend/api/enhanced_unified_chat_routes_integration.py",
        "backend/api/lambda_labs_health_routes.py",
        "backend/core/auto_esc_config.py",
        "backend/core/centralized_config_manager.py",
        "backend/core/concurrent_agent_processor.py",
        "backend/core/config_validator.py",
        "backend/core/cross_platform_sync_orchestrator.py",
        "backend/core/data_flow_manager.py",
        "backend/core/mcp_sync_orchestrator_config.py",
        "backend/core/security_config.py",
        "backend/core/simple_config.py",
        "backend/core/snowflake_production_config.py",
        "backend/infrastructure/sophia_iac_orchestrator.py",
        "backend/mcp_servers/optimized_mcp_client.py",
        "backend/mcp_servers/optimized_network.py",
        "backend/monitoring/group_health_monitoring.py",
        "backend/monitoring/mcp_health_monitor.py",
        "backend/monitoring/production_mcp_monitor.py",
        "backend/orchestration/langgraph_mcp_orchestrator.py",
        "backend/scripts/batch_embed_data.py",
        "backend/scripts/transform_slack_linear_data.py",
        "backend/services/predictive_automation_service.py",
        "backend/services/data_source_manager.py",
        "backend/services/enhanced_data_ingestion.py",
        "backend/services/enhanced_mcp_orchestration_service.py",
        "backend/services/enhanced_sentiment_analyzer.py",
        "backend/services/group_aware_orchestration_enhancement.py",
        "backend/services/intelligent_query_router.py",
        "backend/services/mcp_orchestration_service.py",
        "backend/services/enhanced_mcp_orchestration.py",
        "backend/services/mcp_capability_router.py",
        "backend/services/unified_chat_service.py",
        "backend/services/secure_action_service.py",
        "backend/services/secure_credential_service.py",
        "backend/workflows/multi_agent_workflow.py",
        "backend/services/_archived_chat_services/20250703_142237_enhanced_ceo_universal_chat_service.py",
        "backend/presentation/api/router.py",
        "backend/infrastructure/core/dependency_manager.py",
        "backend/agents/specialized/linear_project_health_agent.py"
      ],
      "endpoints": [
        "api.middleware.cors",
        "http://localhost:9001/api/design_system",
        "http://localhost:8000",
        "https://api.linear.app/graphql",
        "https://api.github.com",
        "api.linear.app",
        "https://{domain}.atlassian.net/rest/api/3",
        "api.github.com",
        "https://slack.com/api",
        "api.middleware.cors",
        "http://localhost:8000/api/platform-integration",
        "https://linear.app/*",
        "http://localhost:8000",
        "https://app.linear.app/*",
        "http://localhost:8000/*",
        "http://localhost:8000/health",
        "https://slack.com/*",
        "http://localhost:3000",
        "https://*.atlassian.net/*",
        "https://github.com/*",
        "http://localhost:8000/chat",
        "http://localhost:{port}/health",
        "http://localhost:9002/analyze-design",
        "http://localhost:9205/health",
        "http://localhost:9002/health",
        "http://localhost:9202/health",
        "http://localhost:9203/health",
        "http://localhost:9300/health",
        "http://localhost:9200/health",
        "http://localhost:9104/health",
        "http://localhost:9001/health",
        "http://localhost:9005/health",
        "http://localhost:9004/health",
        "http://localhost:9106/health",
        "http://localhost:9003/health",
        "http://localhost:9102/health",
        "http://localhost:9103/health",
        "http://localhost:9204/health",
        "http://localhost:9201/health",
        "http://localhost:9000/health",
        "http://localhost:9100/health",
        "http://localhost:9101/health",
        "http://localhost:9105/health",
        "http://localhost:5678",
        "http://localhost:8100",
        "https://github.com/linear/mcp-server.git",
        "https://github.com/modelcontextprotocol/server-github.git",
        "https://github.com/docker/mcp-server-docker.git",
        "https://github.com/slack-platform/mcp-server.git",
        "https://github.com/vercel/mcp-server.git",
        "https://api.vercel.com/v2/user",
        "api.vercel.com",
        "https://cloud.lambdalabs.com/api/v1/instances",
        "api.estuary.dev",
        "api.vercel.com",
        "https://api.linear.app/graphql",
        "api.gong.io",
        "https://api.gong.io/v2",
        "api.hubapi.com",
        "https://api.figma.com/v1",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "api.linear.app",
        "api.figma.com",
        "https://slack.com/api",
        "https://app.sophia-intel.ai",
        "https://api.estuary.dev/v1",
        ".sophia-intel.ai",
        "https://api.vercel.com",
        "http://{self.lambda_labs_ip}:{port}",
        "https://hub.docker.com/v2/repositories/{self.docker_hub_user}/{image_name}/tags/",
        "http://{self.lambda_labs_ip}:{port}/health",
        "http://localhost:9001",
        "http://localhost:8000",
        "http://localhost:9004",
        "http://localhost:9003",
        "http://localhost:3008",
        "http://localhost:{server[",
        "http://localhost:{port}/health",
        "http://localhost:${MCP_SERVER_PORT}/health",
        "http://localhost:{port}/health",
        "http://localhost:{server_config.get(",
        "https://github.com/organizations/ai-cherry/settings/secrets/actions",
        "http://{self.host}:{server[",
        "http://localhost:{port}/health",
        "http://localhost:8000",
        "http://localhost:9001",
        "http://localhost:8000",
        "http://localhost:9004",
        "http://localhost:9003",
        "http://localhost:3008",
        "http://localhost:8000/health",
        "https://linear.app/ticket/TICKET-{datetime.utcnow().timestamp()}",
        "http://localhost:9003/health",
        "http://localhost:8000/health",
        "http://localhost:3008/health",
        "http://localhost:9001/health",
        "http://localhost:9004/health",
        "https://cloud.lambda.ai/api/v1",
        "https://api.sophia-intel.ai",
        "api.sophia-intel.ai",
        "https://astral.sh/uv/install.sh",
        "https://coverage.codacy.com/get.sh)",
        "https://api.sophia-intel.ai/$1",
        ".sophia-intel.ai",
        "http://localhost:{port}/health",
        "http://localhost:8000/health",
        "http://localhost:{self._get_service_port(service_name)}/health",
        "https://github.com/kubernetes/mcp-server-kubernetes.git",
        "https://github.com/langchain-ai/mcp-server-langchain.git",
        "https://github.com/modelcontextprotocol/server-github.git",
        "https://github.com/anthropic/mcp-server-claude.git",
        "https://github.com/GLips/Figma-Context-MCP.git",
        "https://github.com/linear/mcp-server-linear.git",
        "https://github.com/openai/mcp-server-openai.git",
        "https://github.com/modelcontextprotocol/server-filesystem.git",
        "https://github.com/microsoft/playwright-mcp.git",
        "https://github.com/modelcontextprotocol/server-vercel.git",
        "https://github.com/modelcontextprotocol/server-docker.git",
        "https://github.com/modelcontextprotocol/server-postgres.git",
        "https://github.com/slack-mcp/official-server.git",
        "https://github.com/notion/mcp-server-notion.git",
        "http://{host}:9022",
        "http://{host}:9019",
        "http://{host}:9020",
        "http://{host}:9010",
        "http://{host}:9013",
        "api.insecure",
        "http://{host}:9015",
        "api.dashboard",
        "http://{host}:8090",
        "http://{host}:9001",
        "http://{host}:9011",
        "http://localhost:9001/health",
        "http://localhost:8000/health",
        "http://{host}:9031",
        "http://{host}:3008",
        "http://{host}:3000",
        "http://{host}:9030",
        "http://{host}:9032",
        "http://{host}:9012",
        "http://{host}:9021",
        "http://{host}:9014",
        "http://{host}:8000",
        "http://localhost:3008/health",
        "http://{host}:9090",
        "http://{host}/metrics",
        "http://{host}/health",
        "http://{host}/api/v1/health",
        "api.testclient",
        "api.unified_routes",
        "http://localhost:{port}/capabilities",
        "http://localhost:{port}/health",
        "http://localhost:{port}{endpoint}",
        "http://localhost:9000/health",
        "https://linear.app/team/{team_id}/issue/{issue_id}",
        "api.middleware.cors",
        "api.enhanced_unified_chat_routes",
        "http://localhost:{config[",
        "api.estuary.dev",
        "https://api.gong.io",
        "https://api.intercom.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.estuary.dev",
        "api.intercom.io",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "http://localhost:8000",
        "http://localhost:8000",
        "https://api.linear.app/graphql",
        "https://api.gong.io/v2/workspaces",
        "https://openrouter.ai/api/v1/models",
        "https://slack.com/api/auth.test",
        "https://api.hubapi.com/oauth/v1/access-tokens/me",
        "api.gong.io",
        "https://controller.{environment}.pinecone.io/databases",
        "api.hubapi.com",
        "https://api.portkey.ai",
        "api.openai.com",
        "api.portkey.ai",
        "api.linear.app",
        "https://api.openai.com/v1/models",
        "https://api.gong.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "https://api.gong.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "https://slack.com/api",
        "https://api.example.com/data",
        "api.example.com",
        "http://localhost:{server_config[",
        "http://localhost",
        "http://{self.host}:{self.port}{self.base_path}",
        "http://localhost:{config.port}",
        "http://localhost:{config.port}/health",
        "http://localhost:8000/health`\\n\\nFor",
        "https://linear.app/ticket/TICKET-{datetime.utcnow().timestamp()}",
        "https://your-instance.salesforce.com",
        "https://api.linear.app/graphql",
        "api.gong.io",
        "https://api.gong.io/v2",
        "api.hubapi.com",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "api.linear.app",
        "https://slack.com/api"
      ]
    },
    "snowflake": {
      "files": [
        "enhanced_startup.py",
        "enhanced_coding_workflow_integration.py",
        "estuary_advanced_integration.py",
        "execute_strategic_plan.py",
        "final_environment_verification.py",
        "final_snowflake_fix.py",
        "fix_alignment_issues.py",
        "performance_analysis.py",
        "refactor_long_functions.py",
        "fix_connection_manager.py",
        "fix_critical_startup_issues.py",
        "fix_snowflake_codewide.py",
        "fix_pulumi_esc_structure_mismatch.py",
        "fix_snowflake_connection_final.py",
        "github_organization_comprehensive_analysis.py",
        "simple_startup.py",
        "implement_phase1a_foundation.py",
        "implement_phase1b_services.py",
        "implement_phase2a_advanced.py",
        "implement_tier1_mcp_repositories.py",
        "test_refactoring.py",
        "sophia_ecosystem_diagnostic.py",
        "start_mcp_services.py",
        "unified_ai_assistant.py",
        "start_sophia_absolute_fix.py",
        "simple_test.py",
        "snowflake_advanced_features_implementation.py",
        "test_startup.py",
        "start_sophia_fixed.py",
        "unified_ai_coding_assistant.py",
        "complete_snowflake_setup.py",
        "comprehensive_alignment_analysis_and_fix.py",
        "comprehensive_codebase_alignment.py",
        "comprehensive_infrastructure_audit.py",
        "cortex_agents_advanced_implementation.py",
        "create_pull_request.py",
        "create_snowflake_status_report.py",
        "deploy_complete_platform.py",
        "deploy_complete_platform_uv.py",
        "deploy_comprehensive_upgrade.py",
        "deploy_estuary_foundation.py",
        "deploy_estuary_foundation_corrected.py",
        "deploy_snowflake_stability_simple.py",
        "load_github_secrets_permanently.py",
        "infrastructure/enhanced_lambda_labs_provisioner.py",
        "infrastructure/index.py",
        "infrastructure/pulumi-esc-update.py",
        "mcp-servers/health_check.py",
        "n8n-integration/enhanced_n8n_cli_manager.py",
        "n8n-integration/n8n_mcp_gateway.py",
        "patches/snowflake_test_util_fix.py",
        "scripts/activate_performance_optimizations.py",
        "scripts/activate_sophia_production.py",
        "scripts/ai_memory_code_quality_analyzer.py",
        "scripts/analyze_knowledge_gaps.py",
        "scripts/comprehensive_dockcloud_cleanup.py",
        "scripts/comprehensive_secret_codebase_update.py",
        "scripts/consolidate_documentation.py",
        "scripts/advanced_architecture_implementation.py",
        "scripts/analyze_snowflake_config.py",
        "scripts/assess_core_infrastructure.py",
        "scripts/check_deployment_status.py",
        "scripts/codebase_audit.py",
        "scripts/comprehensive_dependency_audit.py",
        "scripts/consolidate_backend_structure.py",
        "scripts/critical_security_remediation.py",
        "scripts/enhanced_batch_embed_data.py",
        "scripts/k3s_migration_analyzer.py",
        "scripts/github_actions_consolidation.py",
        "scripts/build_all_mcp_images.py",
        "scripts/clean_pyproject_dependencies.py",
        "scripts/comprehensive_documentation_update.py",
        "scripts/comprehensive_mcp_debug_final.py",
        "scripts/create_docker_swarm_secrets.py",
        "scripts/implement_batch_processing.py",
        "scripts/estuary_integration_manager.py",
        "scripts/enhance_mcp_servers.py",
        "scripts/snowflake_alignment_setup.py",
        "scripts/snowflake_config_manager.py",
        "scripts/standardize_mcp_servers.py",
        "scripts/start_all_mcp_servers.py",
        "scripts/start_mcp_servers.py",
        "scripts/start_unified_api.py",
        "scripts/sync_mcp_servers.py",
        "scripts/unified_secret_management_audit.py",
        "scripts/update-github-secrets-template.py",
        "scripts/update_service_optimizations.py",
        "scripts/mcp_ecosystem_validator.py",
        "scripts/mcp_orchestration_audit.py",
        "scripts/mcp_orchestration_optimizer.py",
        "scripts/optimize_snowflake_for_sophia.py",
        "scripts/performance_baseline.py",
        "scripts/project_chimera_implementation.py",
        "scripts/refactor_priority_functions.py",
        "scripts/setup_and_optimize_all_services.py",
        "scripts/setup_cortex_ai_complete.py",
        "scripts/snowflake_cleanup_and_standardize.py",
        "scripts/standardize_mcp_configurations.py",
        "scripts/standardize_snowflake_config.py",
        "scripts/start_phase1_mcp_servers.py",
        "scripts/test_secret_access.py",
        "scripts/unified_lambda_labs_deployment.py",
        "scripts/unified_secret_sync.py",
        "scripts/update_cursor_mcp_config.py",
        "scripts/update_snowflake_schemas.py",
        "scripts/validate_secret_pipeline.py",
        "scripts/verify_and_align_snowflake.py",
        "tests/conftest.py",
        "tests/test_connection_pool_health_check.py",
        "tests/test_cortex_service_decomposition.py",
        "tests/test_phase2_integration.py",
        "tests/test_unified_chat_comprehensive.py",
        "tests/integration/mcp_orchestration_test_suite.py",
        "tests/integration/test_live_data_pipeline.py",
        "scripts/implementation/phase1_foundation_setup.py",
        "scripts/implementation/phase2_advanced_integration.py",
        "scripts/mcp-implementation/phase1_health_check.py",
        "scripts/mcp-implementation/phase1_integration_test.py",
        "scripts/security/comprehensive_security_remediation.py",
        "scripts/security/remove_exposed_secrets.py",
        "scripts/snowflake/optimize_warehouses.py",
        "mcp-servers/codacy/enhanced_codacy_mcp_server.py",
        "mcp-servers/snowflake_cortex/production_snowflake_cortex_mcp_server.py",
        "mcp-servers/snowflake_cortex/snowflake_cortex_mcp_server.py",
        "mcp-servers/snowflake_unified/unified_snowflake_server.py",
        "infrastructure/esc/validate_infrastructure.py",
        "backend/api/dashboard_data_routes.py",
        "backend/api/lambda_labs_health_routes.py",
        "backend/api/llm_metrics_routes.py",
        "backend/core/aligned_snowflake_config.py",
        "backend/core/auto_esc_config.py",
        "backend/core/centralized_config_manager.py",
        "backend/core/comprehensive_snowflake_config.py",
        "backend/core/config.py",
        "backend/core/config_manager.py",
        "backend/core/config_validator.py",
        "backend/core/connection_pool.py",
        "backend/core/cortex_ai_config.py",
        "backend/core/cross_platform_sync_orchestrator.py",
        "backend/core/data_flow_manager.py",
        "backend/core/enhanced_memory_architecture.py",
        "backend/core/enhanced_snowflake_config.py",
        "backend/core/integrated_performance_monitoring.py",
        "backend/core/intelligent_data_ingestion.py",
        "backend/core/mcp_sync_orchestrator_config.py",
        "backend/core/optimized_connection_manager.py",
        "backend/core/optimized_database_manager.py",
        "backend/core/secure_snowflake_config.py",
        "backend/core/security_config.py",
        "backend/core/settings.py",
        "backend/core/simple_config.py",
        "backend/core/snowflake_config_manager.py",
        "backend/core/snowflake_config_override.py",
        "backend/core/snowflake_override.py",
        "backend/core/snowflake_production_config.py",
        "backend/core/snowflake_schema_integration.py",
        "backend/core/snowflake_standard_config.py",
        "backend/core/sql_security_validator.py",
        "backend/core/startup_config.py",
        "backend/core/unified_connection_manager.py",
        "backend/etl/enhanced_ingestion_service.py",
        "backend/etl/enhanced_unified_data_pipeline.py",
        "backend/etl/enhanced_unified_data_pipeline_backup.py",
        "backend/etl/estuary_flow_orchestrator.py",
        "backend/infrastructure/sophia_iac_orchestrator.py",
        "backend/integrations/advanced_estuary_flow_manager.py",
        "backend/integrations/enhanced_gong_integration.py",
        "backend/integrations/enhanced_microsoft_gong_integration.py",
        "backend/integrations/estuary_flow_manager.py",
        "backend/integrations/gong_snowflake_client.py",
        "backend/integrations/gong_webhook_processor.py",
        "backend/integrations/gong_webhook_server.py",
        "backend/mcp_servers/ai_memory_auto_discovery.py",
        "backend/mcp_servers/mcp_auth.py",
        "backend/mcp_servers/mcp_health.py",
        "backend/mcp_servers/mcp_registry.py",
        "backend/mcp_servers/optimized_mcp_server.py",
        "backend/mcp_servers/snowflake_admin_mcp_server.py",
        "backend/mcp_servers/sophia_mcp_base.py",
        "backend/monitoring/deployment_tracker.py",
        "backend/monitoring/group_health_monitoring.py",
        "backend/monitoring/mcp_health_monitor.py",
        "backend/monitoring/mcp_monitoring_config.py",
        "backend/monitoring/production_mcp_monitor.py",
        "backend/monitoring/prometheus_config.py",
        "backend/orchestration/unified_intent_engine.py",
        "backend/orchestration/cross_group_intelligence_hub.py",
        "backend/orchestration/langgraph_mcp_orchestrator.py",
        "backend/scripts/batch_embed_data.py",
        "backend/scripts/deploy_cortex_functions.py",
        "backend/scripts/deploy_snowflake_schema.py",
        "backend/scripts/enhanced_asana_integration_test_suite.py",
        "backend/scripts/enhanced_estuary_integration_test_suite.py",
        "backend/scripts/enhanced_gong_pipeline_test_suite.py",
        "backend/scripts/estuary_gong_setup.py",
        "backend/scripts/ingest_foundational_kb.py",
        "backend/scripts/integrate_gong_pipeline.py",
        "backend/scripts/sophia_data_pipeline_ultimate.py",
        "backend/scripts/transform_slack_linear_data.py",
        "backend/security/secret_management.py",
        "backend/services/structured_output_service.py",
        "backend/services/aiac_chat_integration.py",
        "backend/services/comprehensive_memory_service.py",
        "backend/services/cortex_agent_service.py",
        "backend/services/cortex_router.py",
        "backend/services/cost_engineering_service.py",
        "backend/services/data_source_manager.py",
        "backend/services/data_transformer.py",
        "backend/services/enhanced_cortex_agent_service.py",
        "backend/services/enhanced_data_ingestion.py",
        "backend/services/enhanced_mcp_orchestration_service.py",
        "backend/services/enhanced_sentiment_analyzer.py",
        "backend/services/enhanced_snowflake_cortex_service.py",
        "backend/services/event_driven_ingestion_service.py",
        "backend/services/fast_document_processor.py",
        "backend/services/foundational_knowledge_service.py",
        "backend/services/group_aware_orchestration_enhancement.py",
        "backend/services/kb_management_service.py",
        "backend/services/large_file_ingestion_service.py",
        "backend/services/real_time_streaming_service.py",
        "backend/services/intelligent_query_router.py",
        "backend/services/mcp_orchestration_service.py",
        "backend/services/okr_tracking_service.py",
        "backend/services/progressive_autonomy_manager.py",
        "backend/services/enhanced_chat_context_service.py",
        "backend/services/enhanced_cortex_service.py",
        "backend/services/enhanced_ingestion_service.py",
        "backend/services/enhanced_unified_intelligence_service.py",
        "backend/services/extended_context_manager.py",
        "backend/services/federated_query_service.py",
        "backend/services/intelligent_data_discovery_service.py",
        "backend/services/large_data_import_service.py",
        "backend/services/mcp_capability_router.py",
        "backend/services/project_intelligence_service.py",
        "backend/services/unified_chat_service.py",
        "backend/services/gptcache_service.py",
        "backend/services/research_informed_orchestration.py",
        "backend/services/schema_discovery_service.py",
        "backend/services/semantic_layer_service.py",
        "backend/services/simplified_unified_intelligence_service.py",
        "backend/services/snowflake_admin_chat_integration.py",
        "backend/services/snowflake_cortex_aisql.py",
        "backend/services/snowflake_intelligence_service.py",
        "backend/services/snowflake_metadata_optimizer.py",
        "backend/services/sophia_intent_engine.py",
        "backend/services/unified_ai_orchestration_service.py",
        "backend/services/unified_intelligence_service.py",
        "backend/services/unified_llm_service.py",
        "backend/services/vector_indexing_service.py",
        "backend/services/vector_intelligence_router.py",
        "backend/utils/enhanced_snowflake_cortex_service.py",
        "backend/utils/optimized_snowflake_cortex_service.py",
        "backend/utils/optimized_snowflake_cortex_service_models.py",
        "backend/utils/optimized_snowflake_cortex_service_utils.py",
        "backend/utils/snowflake_cortex_service.py",
        "backend/utils/snowflake_cortex_service_core.py",
        "backend/utils/snowflake_cortex_service_handlers.py",
        "backend/utils/snowflake_gong_connector.py",
        "backend/utils/snowflake_hubspot_connector.py",
        "backend/workflows/enhanced_langgraph_orchestration.py",
        "backend/workflows/enhanced_langgraph_patterns.py",
        "backend/workflows/langgraph_agent_orchestration.py",
        "backend/services/_archived_chat_services/20250703_142237_enhanced_ceo_universal_chat_service.py",
        "backend/services/llm_gateway/quality_first_gateway.py",
        "backend/services/llm_gateway/snowflake_cortex_enhanced.py",
        "backend/services/snowflake/connection_pool_manager.py",
        "backend/services/snowflake/pooled_connection.py",
        "backend/presentation/api/router.py",
        "backend/mcp_servers/ai_memory/ai_memory_handlers.py",
        "backend/mcp_servers/base/enhanced_standardized_mcp_server.py",
        "backend/mcp_servers/base/standardized_mcp_server.py",
        "backend/mcp_servers/cortex_aisql/cortex_mcp_server.py",
        "backend/mcp_servers/ai_memory/core/config.py",
        "backend/mcp_servers/ai_memory/core/exceptions.py",
        "backend/infrastructure/adapters/estuary_adapter.py",
        "backend/infrastructure/adapters/snowflake_adapter.py",
        "backend/infrastructure/core/dependency_manager.py",
        "backend/infrastructure/persistence/repositories/__init__.py",
        "backend/infrastructure/persistence/repositories/snowflake_call_repository.py",
        "backend/etl/estuary/estuary_configuration_manager.py",
        "backend/etl/gong/gong_data_quality_module.py",
        "backend/etl/gong/ingest_gong_data.py",
        "backend/etl/netsuite/estuary_netsuite_setup.py",
        "backend/etl/payready_core/ingest_core_sql_data.py",
        "backend/agents/core/langgraph_agent_base.py",
        "backend/agents/enhanced/cortex_agent_orchestrator.py",
        "backend/agents/infrastructure/sophia_infrastructure_agent.py",
        "backend/agents/integrations/optimized_gong_data_integration.py",
        "backend/agents/research/orchestration_research_agent.py",
        "backend/agents/specialized/asana_project_intelligence_agent.py",
        "backend/agents/specialized/call_analysis_agent.py",
        "backend/agents/specialized/interactive_sales_coach_agent.py",
        "backend/agents/specialized/linear_project_health_agent.py",
        "backend/agents/specialized/marketing_analysis_agent.py",
        "backend/agents/specialized/sales_coach_agent.py",
        "backend/agents/specialized/sales_intelligence_agent_core.py",
        "backend/agents/specialized/slack_analysis_agent.py",
        "backend/agents/specialized/snowflake_admin_agent.py"
      ],
      "endpoints": [
        "api.middleware.cors",
        "http://localhost:9001/api/design_system",
        "http://localhost:8000",
        "https://api.linear.app/graphql",
        "https://api.github.com",
        "api.linear.app",
        "https://{domain}.atlassian.net/rest/api/3",
        "api.github.com",
        "https://slack.com/api",
        "https://github.com/ai-cherry/sophia-main",
        "https://github.com/ai-cherry/sophia-main/blob/main/README.md",
        "http://localhost:8000/health",
        "api.estuary.dev",
        "https://api.estuary.dev/v1/sources",
        "https://api.estuary.dev/v1/workspaces",
        "https://api.estuary.dev/v1/jobs",
        "https://api.estuary.dev/v1/connections",
        "https://api.estuary.dev/v1/destinations",
        "api.middleware.cors",
        "https://github.com/modelcontextprotocol/inspector.git",
        "https://github.com/modelcontextprotocol/python-sdk.git",
        "https://notion.so/new_page_123",
        "https://github.com/modelcontextprotocol/inspector.git",
        "https://github.com/isaacwasserman/mcp-snowflake-server.git",
        "https://github.com/korotovsky/slack-mcp-server.git",
        "https://github.com/modelcontextprotocol/python-sdk.git",
        "https://github.com/peakmojo/mcp-hubspot.git",
        "http://localhost:9001",
        "http://localhost:8000",
        "http://localhost:8080",
        "http://localhost:9000",
        "http://localhost:9002/health",
        "http://localhost:3000",
        "http://localhost:3008",
        "http://localhost:9002",
        "http://localhost:9001/health",
        "http://localhost:8000/chat",
        "http://localhost:{port}/health",
        "http://localhost:9002/analyze-design",
        "https://ZNB04675.snowflakecomputing.com",
        "https://{config[",
        "api.estuary.dev",
        "https://api.estuary.dev/v1/sources",
        "https://api.estuary.dev/v1/workspaces",
        "https://api.estuary.dev/v1/jobs",
        "https://api.estuary.dev/v1/connections",
        "https://api.estuary.dev/v1/destinations",
        "https://get.docker.com",
        "https://nvidia.github.io/nvidia-docker/gpgkey",
        "https://cloud.lambdalabs.com/api/v1",
        "https://10.",
        "https://apt.kubernetes.io/",
        "https://{master_ip}:",
        "https://packages.cloud.google.com/apt/doc/apt-key.gpg",
        "https://prometheus-community.github.io/helm-charts",
        "https://grafana.github.io/helm-charts",
        "https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list",
        "https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml",
        "https://nvidia.github.io/gpu-operator",
        "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "https://sophia-ai-frontend-dev.vercel.app/api/estuary/webhook",
        "http://localhost:9205/health",
        "http://localhost:9002/health",
        "http://localhost:9202/health",
        "http://localhost:9203/health",
        "http://localhost:9300/health",
        "http://localhost:9200/health",
        "http://localhost:9104/health",
        "http://localhost:9001/health",
        "http://localhost:9005/health",
        "http://localhost:9004/health",
        "http://localhost:9106/health",
        "http://localhost:9003/health",
        "http://localhost:9102/health",
        "http://localhost:9103/health",
        "http://localhost:9204/health",
        "http://localhost:9201/health",
        "http://localhost:9000/health",
        "http://localhost:9100/health",
        "http://localhost:9101/health",
        "http://localhost:9105/health",
        "http://localhost:9099/api/v1/n8n/process",
        "http://localhost:9016/api/process-business-data",
        "http://localhost:9015/api/competitive-analysis",
        "http://localhost:9017/api/store-vectors",
        "http://localhost:5678",
        "http://localhost:3000/api/dashboard/update",
        "http://localhost:5678",
        "http://localhost:8100",
        "http://localhost:{port}/health",
        "http://localhost:8000/health",
        "http://localhost:5173",
        "api.py",
        "https://api.vercel.com/v2/user",
        "api.vercel.com",
        "https://cloud.lambdalabs.com/api/v1/instances",
        "http://{self.lambda_labs_ip}:{port}",
        "https://hub.docker.com/v2/repositories/{self.docker_hub_user}/{image_name}/tags/",
        "http://{self.lambda_labs_ip}:{port}/health",
        "https://cloud.lambda.ai/api/v1/instances",
        "https://github.com/ai-cherry/sophia-main.git",
        "api.tiangolo.com",
        "https://monitoring.sophia-ai.com",
        "api.sophia-ai.com",
        "https://img.shields.io/badge/Snowflake-Cortex_AI-blue.svg)](https://www.snowflake.com/)",
        "https://keepachangelog.com/en/1.0.0/).",
        "https://img.shields.io/badge/FastAPI-0.100+-green.svg)](https://fastapi.tiangolo.com/)",
        "https://img.shields.io/badge/status-production-green.svg)]()",
        "https://api.sophia-ai.com/docs",
        "https://app.sophia-ai.com",
        "https://api.sophia-ai.com",
        "https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)",
        "http://localhost:{server[",
        "api.estuary.dev",
        "https://api.estuary.dev/v1",
        "http://localhost:{port}/health",
        "http://localhost:${MCP_SERVER_PORT}/health",
        "http://localhost:{port}/health",
        "api.mcp_integration_routes",
        "api.llm_strategy_routes",
        "api.middleware.cors",
        "api.py",
        "api.data_flow_routes",
        "http://localhost:{server_config.get(",
        "https://github.com/organizations/ai-cherry/settings/secrets/actions",
        "api.github.com",
        "https://api.github.com/orgs/{org}",
        "https://your-sophia-platform.com",
        "http://localhost:{port}/health",
        "http://localhost:9000",
        "http://localhost:8000",
        "http://localhost:8002",
        "http://localhost:8001",
        "http://localhost:3008",
        "http://localhost:8003",
        "http://localhost:8092",
        "http://localhost:{port}/health",
        "http://localhost:8000",
        "https://linear.app/ticket/TICKET-{datetime.utcnow().timestamp()}",
        "https://cloud.lambda.ai/api/v1",
        "https://api.sophia-intel.ai",
        "api.sophia-intel.ai",
        "https://astral.sh/uv/install.sh",
        "https://coverage.codacy.com/get.sh)",
        "https://api.sophia-intel.ai/$1",
        ".sophia-intel.ai",
        "http://localhost:{port}/health",
        "http://localhost:8000/health",
        "http://localhost:{self._get_service_port(service_name)}/health",
        "http://localhost:{port}/health",
        "http://{host}:9022",
        "http://{host}:9019",
        "http://{host}:9020",
        "http://{host}:9010",
        "http://{host}:9013",
        "api.insecure",
        "http://{host}:9015",
        "api.dashboard",
        "http://{host}:8090",
        "http://{host}:9001",
        "http://{host}:9011",
        "http://localhost:9001/health",
        "http://localhost:8000/health",
        "http://{host}:9031",
        "http://{host}:3008",
        "http://{host}:3000",
        "http://{host}:9030",
        "http://{host}:9032",
        "http://{host}:9012",
        "http://{host}:9021",
        "http://{host}:9014",
        "http://{host}:8000",
        "http://localhost:3008/health",
        "http://{host}:9090",
        "api.testclient",
        "api.unified_routes",
        "http://localhost:{port}/capabilities",
        "http://localhost:{port}/health",
        "http://localhost:{port}{endpoint}",
        "http://localhost:9000/health",
        "http://${LAMBDA_LABS_INSTANCE_IP}:5678/healthz\\n\\n#",
        "http://${LAMBDA_LABS_INSTANCE_IP}/health\\ncurl",
        "http://localhost:8000/health",
        "http://{self.lambda_ip}:8000/api/test/insert",
        "http://{self.lambda_ip}:8000/api/health",
        "http://{self.lambda_ip}:5678/webhook/performance-test",
        "http://{self.lambda_ip}:8000/api/vectors/search",
        "api.middleware.cors",
        "http://localhost:{config[",
        "api.estuary.dev",
        "https://api.gong.io",
        "https://api.intercom.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.estuary.dev",
        "api.intercom.io",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "http://localhost:8000",
        "http://localhost:8000",
        "https://api.linear.app/graphql",
        "https://api.gong.io/v2/workspaces",
        "https://openrouter.ai/api/v1/models",
        "https://slack.com/api/auth.test",
        "https://api.hubapi.com/oauth/v1/access-tokens/me",
        "api.gong.io",
        "https://controller.{environment}.pinecone.io/databases",
        "api.hubapi.com",
        "https://api.portkey.ai",
        "api.openai.com",
        "api.portkey.ai",
        "api.linear.app",
        "https://api.openai.com/v1/models",
        "https://api.gong.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "https://api.gong.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "https://slack.com/api",
        "api.rate_limit_per_minute",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "https://api.estuary.dev",
        "http://localhost:8001/api/v1",
        "api.estuary.dev",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "https://github.com/estuary/flow/releases/download/v0.5.15/flowctl-x86_64-linux",
        "https://api.usergems.com/v1",
        "api.usergems.com",
        "https://api.apollo.io/v1",
        "api.apollo.io",
        "api.gong.io",
        "api.middleware.cors",
        "webhook.webhook_id",
        "https://api.gong.io",
        "api.middleware.gzip",
        "http://localhost:{server_config[",
        "http://localhost:3009/health",
        "http://localhost:9000/health",
        "http://localhost:3006/health",
        "http://localhost:3007/health",
        "http://localhost:3008/health",
        "http://localhost",
        "api.gong.io",
        "https://api.gong.io/v2/workspaces",
        "http://localhost:8000",
        "http://localhost:8000",
        "https://metrogroup.com",
        "https://paymenttech.com",
        "https://acmeproperty.com",
        "api.gong.io",
        "https://api.gong.io/v2",
        "https://api.openai.com/v1/models",
        "api.anthropic.com",
        "https://app.asana.com/api/1.0/users/me",
        "api.openai.com",
        "https://api.anthropic.com/v1/messages",
        "api.types.is_datetime64_any_dtype",
        "api.types.is_numeric_dtype",
        "http://{self.host}:{self.port}{self.base_path}",
        "http://localhost:{config.port}",
        "http://localhost:{config.port}/health",
        "http://localhost:8000/health`\\n\\nFor",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "https://openrouter.ai/api/v1",
        "https://sophia-intel.ai",
        "api.middleware.cors",
        "https://httpbin.org/status/200",
        "api.middleware.cors",
        "api.estuary.dev",
        "https://api.estuary.dev/v1",
        "https://app.sophia-intel.ai/webhook/estuary",
        ".sophia-intel.ai",
        "https://docs.estuary.dev/integrations/sources/asana",
        "https://app.asana.com/api/1.0/users/me",
        "http://localhost:8000",
        "https://docs.estuary.dev/integrations/sources/gong",
        "api.gong.io",
        "https://api.gong.io/v2"
      ]
    },
    "openai": {
      "files": [
        "enhanced_startup.py",
        "execute_strategic_plan.py",
        "fix_pulumi_esc_structure_mismatch.py",
        "simple_startup.py",
        "implement_phase2a_advanced.py",
        "start_enhanced_mcp_servers.py",
        "sophia_ecosystem_diagnostic.py",
        "start_sophia_complete.py",
        "start_mcp_servers.py",
        "verify_complete_secrets_sync.py",
        "deploy_complete_platform_uv.py",
        "load_github_secrets.py",
        "load_github_secrets_permanently.py",
        "gemini-cli-integration/gemini_cli_provider.py",
        "infrastructure/pulumi-esc-update.py",
        "scripts/comprehensive_secret_codebase_update.py",
        "scripts/assess_core_infrastructure.py",
        "scripts/codebase_audit.py",
        "scripts/comprehensive_dependency_audit.py",
        "scripts/deployment_validation_pipeline.py",
        "scripts/github_actions_consolidation.py",
        "scripts/build_all_mcp_images.py",
        "scripts/clean_pyproject_dependencies.py",
        "scripts/create_docker_swarm_secrets.py",
        "scripts/docker_deployment_consolidation_plan.py",
        "scripts/infrastructure_modernization_kickoff.py",
        "scripts/cursor_ai_analysis.py",
        "scripts/github_alignment_optimizer.py",
        "scripts/unified_secret_management_audit.py",
        "scripts/mcp_orchestration_audit.py",
        "scripts/mcp_orchestration_optimizer.py",
        "scripts/modernize_fastapi_applications.py",
        "scripts/optimize_docker_swarm_resources.py",
        "scripts/phase2_mcp_optimization.py",
        "scripts/setup_and_optimize_all_services.py",
        "scripts/standardize_mcp_configurations.py",
        "scripts/strategic_repository_expansion.py",
        "scripts/test_secret_access.py",
        "scripts/unified_lambda_labs_deployment.py",
        "scripts/unified_secret_sync.py",
        "scripts/validate_secret_pipeline.py",
        "sophia-deployment-20250704-060443/optimize_docker_swarm_resources.py",
        "ui-ux-agent/start_ui_ux_agent_system.py",
        "ui-ux-agent/mcp-servers/figma-dev-mode/figma_mcp_server.py",
        "ui-ux-agent/mcp-servers/langchain-agents/ui_ux_agent.py",
        "tests/integration/mcp_orchestration_test_suite.py",
        "scripts/implementation/phase1_foundation_setup.py",
        "scripts/implementation/phase2_advanced_integration.py",
        "mcp-servers/codacy/enhanced_codacy_mcp_server.py",
        "mcp-servers/huggingface_ai/huggingface_ai_mcp_server.py",
        "mcp-servers/portkey_admin/portkey_admin_mcp_server.py",
        "mcp-servers/v0dev/v0dev_mcp_server.py",
        "infrastructure/esc/get_secret.py",
        "backend/api/dashboard_data_routes.py",
        "backend/api/llm_metrics_routes.py",
        "backend/core/auto_esc_config.py",
        "backend/core/centralized_config_manager.py",
        "backend/core/config.py",
        "backend/core/config_validator.py",
        "backend/core/secure_credential_manager.py",
        "backend/core/security_config.py",
        "backend/core/settings.py",
        "backend/core/simple_config.py",
        "backend/infrastructure/sophia_iac_orchestrator.py",
        "backend/integrations/portkey_gateway_service.py",
        "backend/mcp_servers/ai_memory_auto_discovery.py",
        "backend/mcp_servers/mcp_auth.py",
        "backend/mcp_servers/optimized_mcp_server.py",
        "backend/models/api_models.py",
        "backend/models/chat_models.py",
        "backend/monitoring/prometheus_config.py",
        "backend/scripts/enhanced_estuary_integration_test_suite.py",
        "backend/security/secret_management.py",
        "backend/services/memory_preservation_service.py",
        "backend/services/advanced_ui_ux_agent_service.py",
        "backend/services/chat_driven_metadata_service.py",
        "backend/services/enhanced_portkey_llm_gateway.py",
        "backend/services/advanced_llm_service.py",
        "backend/services/gptcache_service.py",
        "backend/services/snowflake_cortex_aisql.py",
        "backend/services/unified_llm_service.py",
        "backend/services/unified_service_registry.py",
        "backend/services/chat/__init__.py",
        "backend/services/infrastructure_chat/sophia_infrastructure_chat.py",
        "backend/services/llm_gateway/openrouter_integration.py",
        "backend/services/llm_gateway/portkey_integration.py",
        "backend/services/llm_gateway/snowflake_cortex_enhanced.py",
        "backend/mcp_servers/base/standardized_mcp_server.py",
        "backend/mcp_servers/mixins/cline_v3_18_features.py",
        "backend/mcp_servers/ai_memory/core/config.py",
        "backend/mcp_servers/ai_memory/core/exceptions.py",
        "backend/agents/specialized/snowflake_admin_agent.py"
      ],
      "endpoints": [
        "api.middleware.cors",
        "https://github.com/ai-cherry/sophia-main",
        "https://github.com/ai-cherry/sophia-main/blob/main/README.md",
        "http://localhost:8000/health",
        "api.middleware.cors",
        "http://localhost:{port}/health",
        "http://localhost:8000/api/v1/status",
        "http://localhost:9000/health",
        "http://localhost:9000",
        "http://localhost:8000",
        "http://localhost:8000/health",
        "http://localhost:3006/health",
        "http://localhost:3007",
        "http://localhost:3007/health",
        "http://localhost:8000/api/v1/",
        "http://localhost:3008",
        "api.responses",
        "http://localhost:3008/health",
        "http://localhost:3006",
        "http://localhost:{port}/health",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "https://sophia-ai-frontend-dev.vercel.app/api/estuary/webhook",
        "https://api.vercel.com/v2/user",
        "api.vercel.com",
        "https://cloud.lambdalabs.com/api/v1/instances",
        "http://localhost:${PORT:-8000}/health",
        "https://github.com/organizations/ai-cherry/settings/secrets/actions",
        "http://localhost:9000",
        "http://localhost:8000",
        "http://localhost:8002",
        "http://localhost:8001",
        "http://localhost:3008",
        "http://localhost:8003",
        "http://localhost:8092",
        "api.errors",
        "api.middleware.gzip",
        "api.middleware.trustedhost",
        "api.middleware.cors",
        "api.responses",
        "api.util",
        ".sophia-intel.ai",
        "http://localhost:{port}/health",
        "http://localhost:8000/health",
        "https://cloud.lambda.ai/api/v1",
        "https://api.sophia-intel.ai",
        "api.sophia-intel.ai",
        "https://astral.sh/uv/install.sh",
        "https://coverage.codacy.com/get.sh)",
        "https://api.sophia-intel.ai/$1",
        ".sophia-intel.ai",
        "http://localhost:{port}/health",
        "http://localhost:8000/health",
        "http://localhost:{self._get_service_port(service_name)}/health",
        "https://github.com/kubernetes/mcp-server-kubernetes.git",
        "https://github.com/langchain-ai/mcp-server-langchain.git",
        "https://github.com/modelcontextprotocol/server-github.git",
        "https://github.com/anthropic/mcp-server-claude.git",
        "https://github.com/GLips/Figma-Context-MCP.git",
        "https://github.com/linear/mcp-server-linear.git",
        "https://github.com/openai/mcp-server-openai.git",
        "https://github.com/modelcontextprotocol/server-filesystem.git",
        "https://github.com/microsoft/playwright-mcp.git",
        "https://github.com/modelcontextprotocol/server-vercel.git",
        "https://github.com/modelcontextprotocol/server-docker.git",
        "https://github.com/modelcontextprotocol/server-postgres.git",
        "https://github.com/slack-mcp/official-server.git",
        "https://github.com/notion/mcp-server-notion.git",
        "http://{host}:9022",
        "http://{host}:9019",
        "http://{host}:9020",
        "http://{host}:9010",
        "http://{host}:9013",
        "api.insecure",
        "http://{host}:9015",
        "api.dashboard",
        "http://{host}:8090",
        "http://{host}:9001",
        "http://{host}:9011",
        "http://localhost:9001/health",
        "http://localhost:8000/health",
        "http://{host}:9031",
        "http://{host}:3008",
        "http://{host}:3000",
        "http://{host}:9030",
        "http://{host}:9032",
        "http://{host}:9012",
        "http://{host}:9021",
        "http://{host}:9014",
        "http://{host}:8000",
        "http://localhost:3008/health",
        "http://{host}:9090",
        "http://localhost:{port}/health",
        "http://localhost:{self.agent_server_port}/health",
        "http://localhost:{self.agent_server_port}/generate-component",
        "http://localhost:{port}/health",
        "http://localhost:{self.agent_server_port}/validate-design-system",
        "http://localhost:8000/health",
        "http://localhost:{self.agent_server_port}",
        "http://localhost:{self.figma_server_port}",
        "http://localhost:{self.figma_server_port}/health",
        "https://api.figma.com/v1",
        "api.figma.com",
        "http://localhost:9001/health",
        "http://localhost:9001",
        "http://localhost:9002",
        "http://localhost:9002/health",
        "http://localhost:9001",
        "http://localhost:{port}/capabilities",
        "http://localhost:{port}/health",
        "http://localhost:{port}{endpoint}",
        "http://localhost:9000/health",
        "http://${LAMBDA_LABS_INSTANCE_IP}:5678/healthz\\n\\n#",
        "http://${LAMBDA_LABS_INSTANCE_IP}/health\\ncurl",
        "http://localhost:8000/health",
        "http://{self.lambda_ip}:8000/api/test/insert",
        "http://{self.lambda_ip}:8000/api/health",
        "http://{self.lambda_ip}:5678/webhook/performance-test",
        "http://{self.lambda_ip}:8000/api/vectors/search",
        "api.middleware.cors",
        "https://api.v0.dev/v1/chat/completions",
        "api.v0.dev",
        "api.middleware.cors",
        "api.responses",
        "https://{request.project_id}-{request.branch}.vercel.app/components/{request.component_name}",
        "https://api.v0.dev/v1/models",
        "api.estuary.dev",
        "https://api.gong.io",
        "https://api.intercom.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.estuary.dev",
        "api.intercom.io",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "http://localhost:8000",
        "http://localhost:8000",
        "https://api.linear.app/graphql",
        "https://api.gong.io/v2/workspaces",
        "https://openrouter.ai/api/v1/models",
        "https://slack.com/api/auth.test",
        "https://api.hubapi.com/oauth/v1/access-tokens/me",
        "api.gong.io",
        "https://controller.{environment}.pinecone.io/databases",
        "api.hubapi.com",
        "https://api.portkey.ai",
        "api.openai.com",
        "api.portkey.ai",
        "api.linear.app",
        "https://api.openai.com/v1/models",
        "https://api.gong.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "https://slack.com/api",
        "https://api.portkey.ai/v1",
        "api.portkey.ai",
        "api.middleware.gzip",
        "api.gong.io",
        "https://api.gong.io/v2/workspaces",
        "http://localhost:8000",
        "https://api.openai.com/v1/models",
        "api.anthropic.com",
        "https://app.asana.com/api/1.0/users/me",
        "api.openai.com",
        "https://api.anthropic.com/v1/messages",
        "https://api.portkey.ai/v1",
        "api.portkey.ai",
        "https://openrouter.ai/api/v1",
        "https://api.portkey.ai/v1",
        "https://sophia-intel.ai",
        "api.portkey.ai",
        "https://openrouter.ai/api/v1",
        "https://sophia-intel.ai",
        "https://llm-gateway.sophia-intel.ai/v1/completions",
        ".sophia-intel.ai",
        "https://openrouter.ai/api/v1",
        "https://payready.com",
        "https://api.portkey.ai/v1",
        "api.portkey.ai",
        "https://httpbin.org/status/200"
      ]
    },
    "hubspot": {
      "files": [
        "enhanced_startup.py",
        "estuary_advanced_integration.py",
        "fix_pulumi_esc_structure_mismatch.py",
        "github_organization_comprehensive_analysis.py",
        "simple_startup.py",
        "implement_phase1a_foundation.py",
        "implement_phase1b_services.py",
        "implement_phase2a_advanced.py",
        "implement_tier1_mcp_repositories.py",
        "sophia_ecosystem_diagnostic.py",
        "start_mcp_services.py",
        "unified_ai_assistant.py",
        "simple_validation_fix.py",
        "snowflake_advanced_features_implementation.py",
        "verify_complete_secrets_sync.py",
        "comprehensive_codebase_alignment.py",
        "cortex_agents_advanced_implementation.py",
        "deploy_comprehensive_upgrade.py",
        "deploy_estuary_foundation.py",
        "deploy_estuary_foundation_corrected.py",
        "load_github_secrets.py",
        "load_github_secrets_permanently.py",
        "infrastructure/pulumi-esc-comprehensive-update.py",
        "infrastructure/pulumi-esc-update.py",
        "n8n-integration/enhanced_n8n_cli_manager.py",
        "scripts/ai_analyze_salesforce_data.py",
        "scripts/comprehensive_secret_codebase_update.py",
        "scripts/advanced_architecture_implementation.py",
        "scripts/analyze_snowflake_config.py",
        "scripts/automated_webhook_manager.py",
        "scripts/codebase_audit.py",
        "scripts/enhanced_batch_embed_data.py",
        "scripts/build_all_mcp_images.py",
        "scripts/clean_pyproject_dependencies.py",
        "scripts/comprehensive_code_remediation.py",
        "scripts/comprehensive_documentation_update.py",
        "scripts/create_docker_swarm_secrets.py",
        "scripts/snowflake_alignment_setup.py",
        "scripts/start_all_mcp_servers.py",
        "scripts/sync_mcp_servers.py",
        "scripts/unified_secret_management_audit.py",
        "scripts/update-github-secrets-template.py",
        "scripts/update_service_optimizations.py",
        "scripts/n8n-workflow-automation.py",
        "scripts/phase2_mcp_optimization.py",
        "scripts/setup_and_optimize_all_services.py",
        "scripts/setup_cortex_ai_complete.py",
        "scripts/snowflake_cleanup_and_standardize.py",
        "scripts/standardize_mcp_configurations.py",
        "scripts/unified_lambda_labs_deployment.py",
        "scripts/unified_secret_sync.py",
        "scripts/update_snowflake_schemas.py",
        "scripts/verify_and_align_snowflake.py",
        "tests/test_phase2_integration.py",
        "tests/test_unified_chat_comprehensive.py",
        "tests/integration/mcp_orchestration_test_suite.py",
        "scripts/implementation/phase2_advanced_integration.py",
        "mcp-servers/graphiti/graphiti_mcp_server.py",
        "mcp-servers/hubspot_unified/hubspot_mcp_server.py",
        "mcp-servers/migration_orchestrator/migration_orchestrator_mcp_server.py",
        "mcp-servers/salesforce/salesforce_mcp_server.py",
        "mcp-servers/hubspot_unified/tests/get_closed_ticket_conversations.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/__init__.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/faiss_manager.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/hubspot_client.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/server.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/utils.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/company_client.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/contact_client.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/conversation_client.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/ticket_client.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/core/error_handler.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/core/storage.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/base_handler.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/company_handler.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/contact_handler.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/conversation_handler.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/ticket_handler.py",
        "backend/api/dashboard_data_routes.py",
        "backend/api/lambda_labs_health_routes.py",
        "backend/core/aligned_snowflake_config.py",
        "backend/core/auto_esc_config.py",
        "backend/core/centralized_config_manager.py",
        "backend/core/comprehensive_snowflake_config.py",
        "backend/core/config_validator.py",
        "backend/core/cross_platform_sync_orchestrator.py",
        "backend/core/data_flow_manager.py",
        "backend/core/enhanced_snowflake_config.py",
        "backend/core/intelligent_data_ingestion.py",
        "backend/core/security_config.py",
        "backend/core/snowflake_production_config.py",
        "backend/core/snowflake_schema_integration.py",
        "backend/core/sql_security_validator.py",
        "backend/database/postgresql_staging_manager.py",
        "backend/etl/enhanced_ingestion_service.py",
        "backend/etl/enhanced_unified_data_pipeline.py",
        "backend/etl/enhanced_unified_data_pipeline_backup.py",
        "backend/etl/estuary_flow_orchestrator.py",
        "backend/infrastructure/sophia_iac_orchestrator.py",
        "backend/integrations/advanced_estuary_flow_manager.py",
        "backend/integrations/enhanced_microsoft_gong_integration.py",
        "backend/integrations/estuary_flow_manager.py",
        "backend/mcp_servers/mcp_auth.py",
        "backend/mcp_servers/mcp_health.py",
        "backend/mcp_servers/mcp_registry.py",
        "backend/monitoring/group_health_monitoring.py",
        "backend/monitoring/mcp_health_monitor.py",
        "backend/monitoring/production_mcp_monitor.py",
        "backend/prompts/optimized_templates.py",
        "backend/scripts/batch_embed_data.py",
        "backend/scripts/ingest_foundational_kb.py",
        "backend/services/data_source_manager.py",
        "backend/services/enhanced_cortex_agent_service.py",
        "backend/services/enhanced_data_ingestion.py",
        "backend/services/enhanced_mcp_orchestration_service.py",
        "backend/services/enhanced_sentiment_analyzer.py",
        "backend/services/group_aware_orchestration_enhancement.py",
        "backend/services/okr_tracking_service.py",
        "backend/services/enhanced_unified_intelligence_service.py",
        "backend/services/intelligent_data_discovery_service.py",
        "backend/services/large_data_import_service.py",
        "backend/services/mcp_capability_router.py",
        "backend/services/migration_orchestrator_client.py",
        "backend/services/project_intelligence_service.py",
        "backend/services/gptcache_service.py",
        "backend/services/secure_credential_service.py",
        "backend/services/snowflake_cortex_aisql.py",
        "backend/services/snowflake_metadata_optimizer.py",
        "backend/services/sophia_agent_orchestrator.py",
        "backend/services/unified_ai_orchestration_service.py",
        "backend/services/vector_intelligence_router.py",
        "backend/utils/snowflake_cortex_service.py",
        "backend/utils/snowflake_cortex_service_core.py",
        "backend/utils/snowflake_gong_connector.py",
        "backend/utils/snowflake_hubspot_connector.py",
        "backend/workflows/enhanced_langgraph_orchestration.py",
        "backend/workflows/langgraph_agent_orchestration.py",
        "backend/workflows/multi_agent_workflow.py",
        "backend/services/_archived_chat_services/20250703_142237_enhanced_ceo_chat_service.py",
        "backend/mcp_servers/cortex_aisql/cortex_mcp_server.py",
        "backend/infrastructure/adapters/estuary_adapter.py",
        "backend/infrastructure/core/dependency_manager.py",
        "backend/etl/estuary/estuary_configuration_manager.py",
        "backend/agents/specialized/marketing_analysis_agent.py",
        "backend/agents/specialized/sales_coach_agent.py",
        "backend/agents/specialized/sales_intelligence_agent_core.py",
        "backend/agents/specialized/sales_intelligence_agent_handlers.py",
        "api/monitoring/health.py"
      ],
      "endpoints": [
        "api.middleware.cors",
        "api.middleware.cors",
        "https://github.com/modelcontextprotocol/inspector.git",
        "https://github.com/modelcontextprotocol/python-sdk.git",
        "https://notion.so/new_page_123",
        "https://github.com/modelcontextprotocol/inspector.git",
        "https://github.com/isaacwasserman/mcp-snowflake-server.git",
        "https://github.com/korotovsky/slack-mcp-server.git",
        "https://github.com/modelcontextprotocol/python-sdk.git",
        "https://github.com/peakmojo/mcp-hubspot.git",
        "http://localhost:9001",
        "http://localhost:8000",
        "http://localhost:8080",
        "http://localhost:9000",
        "http://localhost:9002/health",
        "http://localhost:3000",
        "http://localhost:3008",
        "http://localhost:9002",
        "http://localhost:9001/health",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "https://sophia-ai-frontend-dev.vercel.app/api/estuary/webhook",
        "http://localhost:9099/api/v1/n8n/process",
        "http://localhost:9016/api/process-business-data",
        "http://localhost:9015/api/competitive-analysis",
        "http://localhost:9017/api/store-vectors",
        "http://localhost:5678",
        "http://localhost:3000/api/dashboard/update",
        "api.estuary.dev",
        "api.vercel.com",
        "https://api.linear.app/graphql",
        "api.gong.io",
        "https://api.gong.io/v2",
        "api.hubapi.com",
        "https://api.figma.com/v1",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "api.linear.app",
        "api.figma.com",
        "https://slack.com/api",
        "https://app.sophia-intel.ai",
        "https://api.estuary.dev/v1",
        ".sophia-intel.ai",
        "https://api.vercel.com",
        "https://github.com/ai-cherry/sophia-main.git",
        "api.tiangolo.com",
        "https://monitoring.sophia-ai.com",
        "api.sophia-ai.com",
        "https://img.shields.io/badge/Snowflake-Cortex_AI-blue.svg)](https://www.snowflake.com/)",
        "https://keepachangelog.com/en/1.0.0/).",
        "https://img.shields.io/badge/FastAPI-0.100+-green.svg)](https://fastapi.tiangolo.com/)",
        "https://img.shields.io/badge/status-production-green.svg)]()",
        "https://api.sophia-ai.com/docs",
        "https://app.sophia-ai.com",
        "https://api.sophia-ai.com",
        "https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)",
        "http://localhost:{port}/health",
        "http://localhost:{server_config.get(",
        "https://github.com/organizations/ai-cherry/settings/secrets/actions",
        "api.github.com",
        "https://api.github.com/orgs/{org}",
        "https://your-sophia-platform.com",
        "https://sophia-ai-platform.vercel.app",
        "http://localhost:8000/health",
        "https://cloud.lambda.ai/api/v1",
        "https://api.sophia-intel.ai",
        "api.sophia-intel.ai",
        "https://astral.sh/uv/install.sh",
        "https://coverage.codacy.com/get.sh)",
        "https://api.sophia-intel.ai/$1",
        ".sophia-intel.ai",
        "http://localhost:{port}/health",
        "http://localhost:8000/health",
        "http://localhost:{self._get_service_port(service_name)}/health",
        "http://{host}:9022",
        "http://{host}:9019",
        "http://{host}:9020",
        "http://{host}:9010",
        "http://{host}:9013",
        "api.insecure",
        "http://{host}:9015",
        "api.dashboard",
        "http://{host}:8090",
        "http://{host}:9001",
        "http://{host}:9011",
        "http://localhost:9001/health",
        "http://localhost:8000/health",
        "http://{host}:9031",
        "http://{host}:3008",
        "http://{host}:3000",
        "http://{host}:9030",
        "http://{host}:9032",
        "http://{host}:9012",
        "http://{host}:9021",
        "http://{host}:9014",
        "http://{host}:8000",
        "http://localhost:3008/health",
        "http://{host}:9090",
        "api.testclient",
        "api.unified_routes",
        "http://localhost:{port}/capabilities",
        "http://localhost:{port}/health",
        "http://localhost:{port}{endpoint}",
        "http://localhost:9000/health",
        "http://{self.lambda_ip}:8000/api/test/insert",
        "http://{self.lambda_ip}:8000/api/health",
        "http://{self.lambda_ip}:5678/webhook/performance-test",
        "http://{self.lambda_ip}:8000/api/vectors/search",
        "api.hubapi.com",
        "https://api.hubapi.com",
        "https://login.salesforce.com",
        "api.do_search",
        "api.get_page",
        "api.do_search",
        "api.create",
        "https://api.hubapi.com/conversations/v3/conversations/threads",
        "https://api.hubapi.com/conversations/v3/conversations/threads/{thread_id}/messages",
        "api.get_page",
        "api.hubapi.com",
        "api.read",
        "https://api.hubapi.com/conversations/v3/conversations/threads/{thread_id}/messages",
        "api.do_search",
        "https://api.hubapi.com/crm/v4/objects/tickets/{ticket_id}/associations/conversation",
        "api.hubapi.com",
        "api.do_search",
        "api.create",
        "api.do_search",
        "api.create",
        "http://localhost:{config[",
        "api.estuary.dev",
        "https://api.gong.io",
        "https://api.intercom.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.estuary.dev",
        "api.intercom.io",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "http://localhost:8000",
        "http://localhost:8000",
        "https://api.linear.app/graphql",
        "https://api.gong.io/v2/workspaces",
        "https://openrouter.ai/api/v1/models",
        "https://slack.com/api/auth.test",
        "https://api.hubapi.com/oauth/v1/access-tokens/me",
        "api.gong.io",
        "https://controller.{environment}.pinecone.io/databases",
        "api.hubapi.com",
        "https://api.portkey.ai",
        "api.openai.com",
        "api.portkey.ai",
        "api.linear.app",
        "https://api.openai.com/v1/models",
        "https://api.gong.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "https://api.gong.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "https://slack.com/api",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "https://api.estuary.dev",
        "http://localhost:8001/api/v1",
        "api.estuary.dev",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "https://github.com/estuary/flow/releases/download/v0.5.15/flowctl-x86_64-linux",
        "https://api.usergems.com/v1",
        "api.usergems.com",
        "https://api.apollo.io/v1",
        "api.apollo.io",
        "http://localhost:{server_config[",
        "http://localhost",
        "https://metrogroup.com",
        "https://paymenttech.com",
        "https://acmeproperty.com",
        "http://localhost:9030",
        "http://localhost:9032/health",
        "http://localhost:9031/health",
        "http://localhost:9033/health",
        "https://your-instance.salesforce.com",
        "https://api.linear.app/graphql",
        "api.gong.io",
        "https://api.gong.io/v2",
        "api.hubapi.com",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "api.linear.app",
        "https://slack.com/api",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "api.middleware.cors",
        "api.estuary.dev",
        "https://api.estuary.dev/v1",
        "https://app.sophia-intel.ai/webhook/estuary",
        ".sophia-intel.ai",
        "https://docs.estuary.dev/integrations/sources/asana",
        "https://app.asana.com/api/1.0/users/me",
        "http://localhost:8000",
        "https://docs.estuary.dev/integrations/sources/gong",
        "https://api.portkey.ai/health",
        "https://api.salesforce.com/health",
        "api.portkey.ai",
        "api.salesforce.com"
      ]
    },
    "pulumi": {
      "files": [
        "execute_strategic_plan.py",
        "fix_critical_startup_issues.py",
        "fix_snowflake_codewide.py",
        "fix_pulumi_esc_structure_mismatch.py",
        "github_organization_comprehensive_analysis.py",
        "implement_phase1a_foundation.py",
        "implement_phase2a_advanced.py",
        "start_enhanced_mcp_servers.py",
        "sophia_ecosystem_diagnostic.py",
        "unified_ai_assistant.py",
        "start_sophia_enhanced.py",
        "start_sophia_complete.py",
        "start_mcp_servers.py",
        "launch_production_cluster.py",
        "unified_ai_coding_assistant.py",
        "verify_complete_secrets_sync.py",
        "comprehensive_codebase_alignment.py",
        "comprehensive_infrastructure_audit.py",
        "deploy_complete_platform_uv.py",
        "deploy_mcp_servers.py",
        "load_github_secrets.py",
        "load_github_secrets_permanently.py",
        "infrastructure/index.py",
        "infrastructure/lambda-labs-deployment.py",
        "infrastructure/pulumi-esc-comprehensive-update.py",
        "infrastructure/pulumi-esc-update.py",
        "mcp-servers/health_check.py",
        "scripts/automated_system_validation.py",
        "scripts/comprehensive_dockcloud_cleanup.py",
        "scripts/comprehensive_secret_codebase_update.py",
        "scripts/consolidate_documentation.py",
        "scripts/dns-manager.py",
        "scripts/advanced_architecture_implementation.py",
        "scripts/archive_remaining_docs.py",
        "scripts/assess_core_infrastructure.py",
        "scripts/codebase_audit.py",
        "scripts/comprehensive_lambda_labs_validation.py",
        "scripts/k3s_migration_analyzer.py",
        "scripts/github_actions_consolidation.py",
        "scripts/build_all_mcp_images.py",
        "scripts/comprehensive_documentation_update.py",
        "scripts/create_docker_swarm_secrets.py",
        "scripts/deploy_production_complete.py",
        "scripts/infrastructure_modernization_kickoff.py",
        "scripts/github_alignment_optimizer.py",
        "scripts/standardize_mcp_servers.py",
        "scripts/sync_mcp_servers.py",
        "scripts/unified_deployment_cleanup.py",
        "scripts/unified_secret_management_audit.py",
        "scripts/update-github-secrets-template.py",
        "scripts/uv_conflict_resolution.py",
        "scripts/validate_lambda_infrastructure.py",
        "scripts/vercel_optimization.py",
        "scripts/mcp_health_monitor.py",
        "scripts/mcp_orchestration_audit.py",
        "scripts/mcp_orchestration_optimizer.py",
        "scripts/permanent_ssh_key_solution.py",
        "scripts/pre_deployment_checklist.py",
        "scripts/recreate_lambda_labs_instances.py",
        "scripts/setup_and_optimize_all_services.py",
        "scripts/standardize_mcp_configurations.py",
        "scripts/start_mcp_server.py",
        "scripts/start_phase1_mcp_servers.py",
        "scripts/unified_lambda_labs_deployment.py",
        "scripts/unified_secret_sync.py",
        "scripts/update_cursor_mcp_config.py",
        "scripts/update_lambda_github_secrets_template.py",
        "scripts/validate_complete_deployment.py",
        "scripts/validate_secret_pipeline.py",
        "scripts/verify_workspace.py",
        "ui-ux-agent/phase2_enhancements.py",
        "ui-ux-agent/mcp-servers/figma-dev-mode/figma_mcp_server.py",
        "scripts/implementation/phase1_foundation_setup.py",
        "scripts/implementation/phase2_advanced_integration.py",
        "scripts/security/comprehensive_security_remediation.py",
        "scripts/security/setup_pulumi_esc_secrets.py",
        "infrastructure/esc/enhanced_secret_sync_monitor.py",
        "infrastructure/esc/get_secret.py",
        "infrastructure/esc/github_sync_bidirectional.py",
        "infrastructure/esc/pulumi_auth_validator.py",
        "infrastructure/esc/ssh_key_manager.py",
        "infrastructure/esc/validate_infrastructure.py",
        "backend/api/lambda_labs_health_routes.py",
        "backend/core/auto_esc_config.py",
        "backend/core/centralized_config_manager.py",
        "backend/core/secure_environment_validator.py",
        "backend/core/security_config.py",
        "backend/core/simple_config.py",
        "backend/core/sophia_env_config.py",
        "backend/core/startup_config.py",
        "backend/integrations/estuary_flow_manager.py",
        "backend/monitoring/deployment_tracker.py",
        "backend/monitoring/group_health_monitoring.py",
        "backend/monitoring/production_mcp_monitor.py",
        "backend/scripts/check_environment_health.py",
        "backend/scripts/enhanced_gong_pipeline_test_suite.py",
        "backend/services/aiac_chat_integration.py",
        "backend/services/group_aware_orchestration_enhancement.py",
        "backend/services/intelligent_query_router.py",
        "backend/services/sophia_agent_orchestrator.py",
        "backend/services/sophia_intent_engine.py",
        "backend/agents/infrastructure/sophia_infrastructure_agent.py"
      ],
      "endpoints": [
        "https://github.com/ai-cherry/sophia-main",
        "https://github.com/ai-cherry/sophia-main/blob/main/README.md",
        "http://localhost:8000/health",
        "https://github.com/modelcontextprotocol/inspector.git",
        "https://github.com/modelcontextprotocol/python-sdk.git",
        "http://localhost:{port}/health",
        "http://localhost:9001",
        "http://localhost:8000",
        "http://localhost:8080",
        "http://localhost:9000",
        "http://localhost:9002/health",
        "http://localhost:3000",
        "http://localhost:3008",
        "http://localhost:9002",
        "http://localhost:9001/health",
        "http://localhost:8000/health",
        "http://localhost:3000",
        "http://localhost:8000",
        "http://localhost:8000/api/v1/status",
        "http://localhost:9000/health",
        "http://localhost:9000",
        "http://localhost:8000",
        "http://localhost:8000/health",
        "http://localhost:3006/health",
        "http://localhost:3007",
        "http://localhost:3007/health",
        "http://localhost:8000/api/v1/",
        "http://localhost:3008",
        "api.responses",
        "http://localhost:3008/health",
        "http://localhost:3006",
        "http://localhost:{port}/health",
        "https://cloud.lambdalabs.com/api/v1",
        "http://localhost:8000/chat",
        "http://localhost:{port}/health",
        "http://localhost:9002/analyze-design",
        "http://localhost:{port}/health",
        "http://localhost:8080/health",
        "https://cloud.lambdalabs.com/api/v1",
        "http://{ip_address}:9090/metrics",
        "http://{ip_address}:8080/health",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "https://sophia-ai-frontend-dev.vercel.app/api/estuary/webhook",
        "http://localhost:9205/health",
        "http://localhost:9002/health",
        "http://localhost:9202/health",
        "http://localhost:9203/health",
        "http://localhost:9300/health",
        "http://localhost:9200/health",
        "http://localhost:9104/health",
        "http://localhost:9001/health",
        "http://localhost:9005/health",
        "http://localhost:9004/health",
        "http://localhost:9106/health",
        "http://localhost:9003/health",
        "http://localhost:9102/health",
        "http://localhost:9103/health",
        "http://localhost:9204/health",
        "http://localhost:9201/health",
        "http://localhost:9000/health",
        "http://localhost:9100/health",
        "http://localhost:9101/health",
        "http://localhost:9105/health",
        "api.py",
        "https://api.sandbox.namecheap.com/xml.response",
        "api.namecheap.com",
        "https://api.namecheap.com/xml.response",
        "api.sandbox.namecheap.com",
        "https://github.com/ai-cherry/sophia-main.git",
        "http://localhost:8000/health`",
        "http://localhost:8000/health",
        "https://api.vercel.com/v2/user",
        "api.vercel.com",
        "https://cloud.lambdalabs.com/api/v1/instances",
        "https://cloud.lambdalabs.com/api/v1/ssh-keys",
        "https://cloud.lambdalabs.com/api/v1/instances",
        "https://cloud.lambda.ai/api/v1/instances",
        "https://github.com/ai-cherry/sophia-main.git",
        "api.tiangolo.com",
        "https://monitoring.sophia-ai.com",
        "api.sophia-ai.com",
        "https://img.shields.io/badge/Snowflake-Cortex_AI-blue.svg)](https://www.snowflake.com/)",
        "https://keepachangelog.com/en/1.0.0/).",
        "https://img.shields.io/badge/FastAPI-0.100+-green.svg)](https://fastapi.tiangolo.com/)",
        "https://img.shields.io/badge/status-production-green.svg)]()",
        "https://api.sophia-ai.com/docs",
        "https://app.sophia-ai.com",
        "https://api.sophia-ai.com",
        "https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)",
        "http://{self.lambda_labs_config[",
        "http://localhost:9090/metrics",
        "http://localhost:{service[",
        "http://localhost:3001/api/health",
        "http://localhost:{port}/health",
        "http://localhost:${MCP_SERVER_PORT}/health",
        "http://localhost:{server_config.get(",
        "https://github.com/organizations/ai-cherry/settings/secrets/actions",
        "api.github.com",
        "https://api.github.com/orgs/{org}",
        "https://your-sophia-platform.com",
        "https://astral.sh/uv/install.sh",
        "https://cloud.lambda.ai/api/v1/instances",
        "api.vercel.com",
        "https://api.sophia.payready.com",
        "api.sophia.payready.com",
        "https://api.vercel.com",
        "https://api.sophia.payready.com/api/$1",
        "https://{deployment_url}",
        "http://{self.host}:{server[",
        "http://localhost:9000",
        "http://localhost:8000",
        "http://localhost:8002",
        "http://localhost:8001",
        "http://localhost:3008",
        "http://localhost:8003",
        "http://localhost:8092",
        "https://cloud.lambda.ai/api/v1",
        "https://www.pulumi.com/docs/install/",
        "https://cloud.lambdalabs.com/api/v1",
        "https://cloud.lambda.ai/api/v1",
        "https://api.sophia-intel.ai",
        "api.sophia-intel.ai",
        "https://astral.sh/uv/install.sh",
        "https://coverage.codacy.com/get.sh)",
        "https://api.sophia-intel.ai/$1",
        ".sophia-intel.ai",
        "http://localhost:{port}/health",
        "http://localhost:8000/health",
        "http://localhost:{self._get_service_port(service_name)}/health",
        "http://localhost:{port}/health",
        "http://{host}:9022",
        "http://{host}:9019",
        "http://{host}:9020",
        "http://{host}:9010",
        "http://{host}:9013",
        "api.insecure",
        "http://{host}:9015",
        "api.dashboard",
        "http://{host}:8090",
        "http://{host}:9001",
        "http://{host}:9011",
        "http://localhost:9001/health",
        "http://localhost:8000/health",
        "http://{host}:9031",
        "http://{host}:3008",
        "http://{host}:3000",
        "http://{host}:9030",
        "http://{host}:9032",
        "http://{host}:9012",
        "http://{host}:9021",
        "http://{host}:9014",
        "http://{host}:8000",
        "http://localhost:3008/health",
        "http://{host}:9090",
        "api.github.com",
        "api.pulumi.com",
        "https://api.pulumi.com",
        "https://api.github.com/orgs/{ORG_NAME}",
        "http://{host}/metrics",
        "http://{host}/health",
        "http://{host}/api/v1/health",
        "https://api.figma.com/v1",
        "api.figma.com",
        "http://localhost:9001/health",
        "http://localhost:9001",
        "http://${LAMBDA_LABS_INSTANCE_IP}:5678/healthz\\n\\n#",
        "http://${LAMBDA_LABS_INSTANCE_IP}/health\\ncurl",
        "http://localhost:8000/health",
        "http://{self.lambda_ip}:8000/api/test/insert",
        "http://{self.lambda_ip}:8000/api/health",
        "http://{self.lambda_ip}:5678/webhook/performance-test",
        "http://{self.lambda_ip}:8000/api/vectors/search",
        "https://get.pulumi.com/",
        "https://get.pulumi.com/esc/install.sh",
        "api.github.com",
        "https://api.github.com/orgs/{self.config[",
        "https://get.pulumi.com",
        "https://www.pulumi.com/docs/get-started/install/",
        "http://localhost:{config[",
        "api.estuary.dev",
        "https://api.gong.io",
        "https://api.intercom.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.estuary.dev",
        "api.intercom.io",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "http://localhost:8000",
        "https://api.gong.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "https://slack.com/api",
        "https://github.com/estuary/flow/releases/download/v0.5.15/flowctl-x86_64-linux",
        "https://api.usergems.com/v1",
        "api.usergems.com",
        "https://api.apollo.io/v1",
        "api.apollo.io",
        "http://localhost"
      ]
    },
    "vercel": {
      "files": [
        "fix_pulumi_esc_structure_mismatch.py",
        "configure_dns.py",
        "verify_complete_secrets_sync.py",
        "comprehensive_codebase_alignment.py",
        "infrastructure/pulumi-esc-update.py",
        "scripts/comprehensive_dockcloud_cleanup.py",
        "scripts/comprehensive_secret_codebase_update.py",
        "scripts/expand_strategic_repositories.py",
        "scripts/assess_core_infrastructure.py",
        "scripts/automated_webhook_manager.py",
        "scripts/codebase_audit.py",
        "scripts/github_actions_consolidation.py",
        "scripts/build_all_mcp_images.py",
        "scripts/comprehensive_documentation_update.py",
        "scripts/create_docker_swarm_secrets.py",
        "scripts/unified_secret_management_audit.py",
        "scripts/update-github-secrets-template.py",
        "scripts/vercel_optimization.py",
        "scripts/mcp_ecosystem_validator.py",
        "scripts/n8n-workflow-automation.py",
        "scripts/setup_and_optimize_all_services.py",
        "scripts/strategic_repository_expansion.py",
        "scripts/test_secret_access.py",
        "scripts/unified_lambda_labs_deployment.py",
        "scripts/unified_secret_sync.py",
        "security_patches/dependency_security_update.py",
        "ui-ux-agent/phase2_enhancements.py",
        "mcp-servers/v0dev/v0dev_mcp_server.py",
        "backend/core/auto_esc_config.py",
        "backend/core/security_config.py",
        "backend/infrastructure/sophia_iac_orchestrator.py",
        "backend/monitoring/deployment_tracker.py",
        "backend/monitoring/production_mcp_monitor.py",
        "backend/services/advanced_ui_ux_agent_service.py",
        "backend/services/mcp_orchestration_service.py",
        "backend/services/sophia_intent_engine.py",
        "backend/infrastructure/core/dependency_manager.py",
        "backend/agents/infrastructure/sophia_infrastructure_agent.py",
        "api/config/performance.py",
        "api/middleware/security.py"
      ],
      "endpoints": [
        "https://api.ipify.org",
        "api.namecheap.com",
        "https://app.{DOMAIN}",
        "https://www.{DOMAIN}",
        "https://grafana.{DOMAIN}",
        "https://api.{DOMAIN}",
        "https://monitor.{DOMAIN}",
        "api.ipify.org",
        "https://mcp.{DOMAIN}",
        "https://api.namecheap.com/xml.response",
        "https://{DOMAIN}",
        "https://api.estuary.dev",
        "api.estuary.dev",
        "https://sophia-ai-frontend-dev.vercel.app/api/estuary/webhook",
        "api.py",
        "https://github.com/linear/mcp-server.git",
        "https://github.com/modelcontextprotocol/server-github.git",
        "https://github.com/docker/mcp-server-docker.git",
        "https://github.com/slack-platform/mcp-server.git",
        "https://github.com/vercel/mcp-server.git",
        "https://api.vercel.com/v2/user",
        "api.vercel.com",
        "https://cloud.lambdalabs.com/api/v1/instances",
        "api.estuary.dev",
        "api.vercel.com",
        "https://api.linear.app/graphql",
        "api.gong.io",
        "https://api.gong.io/v2",
        "api.hubapi.com",
        "https://api.figma.com/v1",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "api.linear.app",
        "api.figma.com",
        "https://slack.com/api",
        "https://app.sophia-intel.ai",
        "https://api.estuary.dev/v1",
        ".sophia-intel.ai",
        "https://api.vercel.com",
        "https://github.com/ai-cherry/sophia-main.git",
        "api.tiangolo.com",
        "https://monitoring.sophia-ai.com",
        "api.sophia-ai.com",
        "https://img.shields.io/badge/Snowflake-Cortex_AI-blue.svg)](https://www.snowflake.com/)",
        "https://keepachangelog.com/en/1.0.0/).",
        "https://img.shields.io/badge/FastAPI-0.100+-green.svg)](https://fastapi.tiangolo.com/)",
        "https://img.shields.io/badge/status-production-green.svg)]()",
        "https://api.sophia-ai.com/docs",
        "https://app.sophia-ai.com",
        "https://api.sophia-ai.com",
        "https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)",
        "https://github.com/organizations/ai-cherry/settings/secrets/actions",
        "api.github.com",
        "https://api.github.com/orgs/{org}",
        "https://your-sophia-platform.com",
        "api.vercel.com",
        "https://api.sophia.payready.com",
        "api.sophia.payready.com",
        "https://api.vercel.com",
        "https://api.sophia.payready.com/api/$1",
        "https://{deployment_url}",
        "http://localhost:{port}/health",
        "https://sophia-ai-platform.vercel.app",
        "https://cloud.lambda.ai/api/v1",
        "https://api.sophia-intel.ai",
        "api.sophia-intel.ai",
        "https://astral.sh/uv/install.sh",
        "https://coverage.codacy.com/get.sh)",
        "https://api.sophia-intel.ai/$1",
        ".sophia-intel.ai",
        "https://github.com/kubernetes/mcp-server-kubernetes.git",
        "https://github.com/langchain-ai/mcp-server-langchain.git",
        "https://github.com/modelcontextprotocol/server-github.git",
        "https://github.com/anthropic/mcp-server-claude.git",
        "https://github.com/GLips/Figma-Context-MCP.git",
        "https://github.com/linear/mcp-server-linear.git",
        "https://github.com/openai/mcp-server-openai.git",
        "https://github.com/modelcontextprotocol/server-filesystem.git",
        "https://github.com/microsoft/playwright-mcp.git",
        "https://github.com/modelcontextprotocol/server-vercel.git",
        "https://github.com/modelcontextprotocol/server-docker.git",
        "https://github.com/modelcontextprotocol/server-postgres.git",
        "https://github.com/slack-mcp/official-server.git",
        "https://github.com/notion/mcp-server-notion.git",
        "http://{host}:9022",
        "http://{host}:9019",
        "http://{host}:9020",
        "http://{host}:9010",
        "http://{host}:9013",
        "api.insecure",
        "http://{host}:9015",
        "api.dashboard",
        "http://{host}:8090",
        "http://{host}:9001",
        "http://{host}:9011",
        "http://localhost:9001/health",
        "http://localhost:8000/health",
        "http://{host}:9031",
        "http://{host}:3008",
        "http://{host}:3000",
        "http://{host}:9030",
        "http://{host}:9032",
        "http://{host}:9012",
        "http://{host}:9021",
        "http://{host}:9014",
        "http://{host}:8000",
        "http://localhost:3008/health",
        "http://{host}:9090",
        "https://api.v0.dev/v1/chat/completions",
        "api.v0.dev",
        "api.middleware.cors",
        "api.responses",
        "https://{request.project_id}-{request.branch}.vercel.app/components/{request.component_name}",
        "https://api.v0.dev/v1/models",
        "api.estuary.dev",
        "https://api.gong.io",
        "https://api.intercom.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.estuary.dev",
        "api.intercom.io",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "https://api.gong.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://app.asana.com/api/1.0",
        "https://api.hubapi.com",
        "https://slack.com/api",
        "http://localhost",
        "https://api.portkey.ai/v1",
        "api.portkey.ai",
        "http://{self.host}:{self.port}{self.base_path}",
        "http://localhost:{config.port}",
        "http://localhost:{config.port}/health",
        "https://sophia-ai-frontend-dev.vercel.app",
        "https://localhost:3000"
      ]
    },
    "apollo": {
      "files": [
        "github_organization_comprehensive_analysis.py",
        "comprehensive_codebase_alignment.py",
        "infrastructure/pulumi-esc-comprehensive-update.py",
        "scripts/codebase_audit.py",
        "scripts/sync_mcp_servers.py",
        "scripts/mcp_health_monitor.py",
        "scripts/validate_complete_deployment.py",
        "scripts/mcp-implementation/phase1_health_check.py",
        "scripts/mcp-implementation/phase1_integration_test.py",
        "backend/api/lambda_labs_health_routes.py",
        "backend/core/auto_esc_config.py",
        "backend/core/comprehensive_snowflake_config.py",
        "backend/core/data_flow_manager.py",
        "backend/core/enhanced_snowflake_config.py",
        "backend/core/snowflake_schema_integration.py",
        "backend/infrastructure/sophia_iac_orchestrator.py",
        "backend/integrations/estuary_flow_manager.py",
        "backend/monitoring/production_mcp_monitor.py",
        "backend/services/enhanced_mcp_orchestration_service.py",
        "backend/infrastructure/core/dependency_manager.py"
      ],
      "endpoints": [
        "http://localhost:{server_config.get(",
        "http://{self.host}:{server[",
        "http://{host}/metrics",
        "http://{host}/health",
        "http://{host}/api/v1/health",
        "http://localhost:{config[",
        "api.estuary.dev",
        "https://api.gong.io",
        "https://api.intercom.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.estuary.dev",
        "api.intercom.io",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "https://api.gong.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "https://github.com/estuary/flow/releases/download/v0.5.15/flowctl-x86_64-linux",
        "https://api.usergems.com/v1",
        "api.usergems.com",
        "https://api.apollo.io/v1",
        "api.apollo.io",
        "http://localhost"
      ]
    },
    "costar": {
      "files": [
        "scripts/ingest_costar_data.py",
        "scripts/codebase_audit.py",
        "scripts/critical_security_remediation.py",
        "backend/core/auto_esc_config.py",
        "backend/core/data_flow_manager.py",
        "backend/mcp_servers/costar_mcp_server.py"
      ],
      "endpoints": [
        "api.estuary.dev",
        "https://api.gong.io",
        "https://api.intercom.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.estuary.dev",
        "api.intercom.io",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app",
        "https://api.gong.io",
        "https://api.apollo.io",
        "api.gong.io",
        "api.hubapi.com",
        "https://api.linear.app",
        "https://api.hubapi.com",
        "api.apollo.io",
        "api.linear.app"
      ]
    }
  },
  "dead_code": [
    "enhanced_sentiment_startup.py",
    "enhanced_startup.py",
    "estuary_advanced_integration.py",
    "example_enhanced_workflow.py",
    "example_unified_mcp_server.py",
    "final_environment_verification.py",
    "final_snowflake_fix.py",
    "fix_alignment_issues.py",
    "refactor_long_functions.py",
    "fix_critical_startup_issues.py",
    "fix_snowflake_codewide.py",
    "fix_pulumi_esc_structure_mismatch.py",
    "fix_snowflake_connection_final.py",
    "github_organization_comprehensive_analysis.py",
    "implement_phase1a_foundation.py",
    "implement_phase1b_services.py",
    "implement_phase2a_advanced.py",
    "github_integration_strategy.py",
    "implement_tier1_mcp_repositories.py",
    "test_sales_modules_only.py",
    "start_enhanced_mcp_servers.py",
    "test_refactoring.py",
    "start_sophia_live.py",
    "sophia_ecosystem_diagnostic.py",
    "test_sales_agent_refactoring.py",
    "start_sophia_enhanced.py",
    "test_sales_simple.py",
    "setup_enhanced_coding_workflow.py",
    "simple_validation_fix.py",
    "start_sophia_complete.py",
    "lambda_labs_access_and_config.py",
    "configure_dns.py",
    "launch_production_cluster.py",
    "unified_ai_coding_assistant.py",
    "complete_snowflake_setup.py",
    "comprehensive_alignment_analysis_and_fix.py",
    "comprehensive_codebase_alignment.py",
    "comprehensive_infrastructure_audit.py",
    "create_forks.py",
    "create_snowflake_status_report.py",
    "demo_enhanced_mcp_integration.py",
    "deploy_complete_platform_uv.py",
    "deploy_comprehensive_upgrade.py",
    "deploy_snowflake_stability_simple.py",
    "load_github_secrets.py",
    "load_github_secrets_permanently.py",
    "backend/test_unified_server.py",
    "claude-cli-integration/setup_claude_api.py",
    "infrastructure/lambda-labs-integration.py",
    "infrastructure/migrate_service_registry.py",
    "infrastructure/pulumi-esc-comprehensive-update.py",
    "infrastructure/pulumi-esc-update.py",
    "n8n-integration/enhanced_n8n_cli_manager.py",
    "n8n-integration/n8n_mcp_gateway.py",
    "scripts/activate_performance_optimizations.py",
    "scripts/activate_sophia_production.py",
    "scripts/add_type_annotations.py",
    "scripts/ai_analyze_salesforce_data.py",
    "scripts/ai_memory_code_quality_analyzer.py",
    "scripts/analyze_knowledge_gaps.py",
    "scripts/analyze_technical_debt.py",
    "scripts/assess_all_mcp_servers.py",
    "scripts/audit_secret_usage.py",
    "scripts/automated_system_validation.py",
    "scripts/check_internal_service_health.py",
    "scripts/comprehensive_archive_cleanup.py",
    "scripts/comprehensive_dockcloud_cleanup.py",
    "scripts/comprehensive_linting_remediation.py",
    "scripts/comprehensive_secret_codebase_update.py",
    "scripts/consolidate_documentation.py",
    "scripts/enhance_ai_memory_mcp.py",
    "scripts/expand_strategic_repositories.py",
    "scripts/generate_orchestration_research_report.py",
    "scripts/ingest_costar_data.py",
    "scripts/advanced_architecture_implementation.py",
    "scripts/ai_enhanced_dns_manager.py",
    "scripts/analyze_documentation_chaos.py",
    "scripts/analyze_external_repositories.py",
    "scripts/analyze_snowflake_config.py",
    "scripts/archive_legacy_docker_files.py",
    "scripts/archive_remaining_docs.py",
    "scripts/assess_core_infrastructure.py",
    "scripts/automated_maintenance_system.py",
    "scripts/automated_webhook_manager.py",
    "scripts/check_syntax_status.py",
    "scripts/codebase_audit.py",
    "scripts/comprehensive_dependency_audit.py",
    "scripts/comprehensive_lambda_labs_validation.py",
    "scripts/consolidate_backend_structure.py",
    "scripts/critical_security_remediation.py",
    "scripts/documentation_enhancer.py",
    "scripts/enhanced_batch_embed_data.py",
    "scripts/generate_dev_insights.py",
    "scripts/identify_existing_error_files.py",
    "scripts/k3s_migration_analyzer.py",
    "scripts/find_all_llm_files_to_migrate.py",
    "scripts/github_actions_consolidation.py",
    "scripts/automated_platform_integration.py",
    "scripts/build_all_mcp_images.py",
    "scripts/check_function_length.py",
    "scripts/clean_pyproject_dependencies.py",
    "scripts/comprehensive_code_remediation.py",
    "scripts/comprehensive_documentation_update.py",
    "scripts/comprehensive_mcp_debug_final.py",
    "scripts/create_docker_swarm_secrets.py",
    "scripts/docker_deployment_consolidation_plan.py",
    "scripts/implement_batch_processing.py",
    "scripts/debug_all_mcp_servers.py",
    "scripts/diagnose_gong_webhook.py",
    "scripts/generate_executive_quality_report.py",
    "scripts/infrastructure_modernization_kickoff.py",
    "scripts/comprehensive_mcp_deep_analysis.py",
    "scripts/configure_github_organization_security.py",
    "scripts/cursor_ai_analysis.py",
    "scripts/fix_lambda_labs_ssh_access.py",
    "scripts/github_alignment_optimizer.py",
    "scripts/snowflake_alignment_setup.py",
    "scripts/standardize_mcp_servers.py",
    "scripts/start_unified_api.py",
    "scripts/unified_deployment_cleanup.py",
    "scripts/update-github-secrets-template.py",
    "scripts/update_lambda_labs_config.py",
    "scripts/update_service_optimizations.py",
    "scripts/validate_lambda_infrastructure.py",
    "scripts/vercel_optimization.py",
    "scripts/large_file_analyzer.py",
    "scripts/launch_ai_server_alternative.py",
    "scripts/mcp_analysis_simple.py",
    "scripts/mcp_ecosystem_validator.py",
    "scripts/mcp_orchestration_audit.py",
    "scripts/mcp_version_validator.py",
    "scripts/modernize_fastapi_applications.py",
    "scripts/monitor_all_mcp_servers.py",
    "scripts/monitor_automated_deployment.py",
    "scripts/monitor_mcp_ecosystem.py",
    "scripts/n8n-workflow-automation.py",
    "scripts/notify_deployment_status.py",
    "scripts/optimize_docker_swarm_resources.py",
    "scripts/optimize_snowflake_for_sophia.py",
    "scripts/permanent_ssh_key_solution.py",
    "scripts/phase2_mcp_optimization.py",
    "scripts/pre_deployment_checklist.py",
    "scripts/project_chimera_implementation.py",
    "scripts/refactor_priority_functions.py",
    "scripts/scan_outdated_docs.py",
    "scripts/setup_and_optimize_all_services.py",
    "scripts/setup_cortex_ai_complete.py",
    "scripts/snowflake_cleanup_and_standardize.py",
    "scripts/standardize_mcp_configurations.py",
    "scripts/start_phase1_mcp_servers.py",
    "scripts/strategic_repository_expansion.py",
    "scripts/unified_lambda_labs_deployment.py",
    "scripts/update_lambda_github_secrets_template.py",
    "scripts/validate_complete_deployment.py",
    "scripts/validate_secret_pipeline.py",
    "scripts/verify_workspace.py",
    "security_patches/dependency_security_update.py",
    "sophia-deployment-20250704-060443/optimize_docker_swarm_resources.py",
    "tests/test_audit_logging.py",
    "tests/test_connection_pool_health_check.py",
    "tests/test_cortex_service_decomposition.py",
    "tests/test_enhanced_cache.py",
    "tests/test_mcp_optimization.py",
    "tests/test_phase2_integration.py",
    "tests/test_rbac.py",
    "tests/test_simple_ephemeral_credentials.py",
    "tests/test_unified_chat_comprehensive.py",
    "ui-ux-agent/phase2_enhancements.py",
    "tests/integration/mcp_orchestration_test_suite.py",
    "tests/integration/test_live_data_pipeline.py",
    "tests/performance/test_data_pipeline_performance.py",
    "scripts/dev/ai_memory_health_check.py",
    "scripts/docs/generate_documentation_index.py",
    "scripts/implementation/execute_comprehensive_remodel.py",
    "scripts/mcp-implementation/phase1_health_check.py",
    "scripts/mcp-implementation/phase1_integration_test.py",
    "scripts/security/ai_security_assessment.py",
    "scripts/security/compare_baseline.py",
    "mcp-servers/ag_ui/enhanced_ag_ui_mcp_server.py",
    "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py",
    "mcp-servers/bright_data/bright_data_mcp_server.py",
    "mcp-servers/codacy/production_codacy_server.py",
    "mcp-servers/codacy/simple_codacy_server.py",
    "mcp-servers/code_modifier/code_modifier_mcp_server.py",
    "mcp-servers/github/simple_github_server.py",
    "mcp-servers/huggingface_ai/huggingface_ai_mcp_server.py",
    "mcp-servers/intercom/intercom_mcp_server.py",
    "mcp-servers/linear/simple_linear_server.py",
    "mcp-servers/migration_orchestrator/migration_orchestrator_mcp_server.py",
    "mcp-servers/notion/enhanced_notion_mcp_server.py",
    "mcp-servers/notion/notion_mcp_server_standardized.py",
    "mcp-servers/portkey_admin/portkey_admin_mcp_server.py",
    "mcp-servers/prompt_optimizer/prompt_optimizer_mcp_server.py",
    "mcp-servers/salesforce/salesforce_mcp_server.py",
    "mcp-servers/slack_integration/simple_slack_integration_server.py",
    "mcp-servers/slack_unified/simple_slack_integration_server.py",
    "mcp-servers/snowflake_cortex/production_snowflake_cortex_mcp_server.py",
    "mcp-servers/snowflake_unified/unified_snowflake_server.py",
    "mcp-servers/sophia_intelligence_unified/unified_sophia_intelligence_server.py",
    "mcp-servers/v0dev/v0dev_mcp_server.py",
    "infrastructure/agents/base_agent_template.py",
    "infrastructure/esc/enhanced_secret_sync_monitor.py",
    "infrastructure/esc/pulumi_auth_validator.py",
    "infrastructure/esc/ssh_key_manager.py",
    "infrastructure/esc/sync_status_validator.py",
    "backend/api/dashboard_data_routes.py",
    "backend/api/enhanced_unified_chat_routes_integration.py",
    "backend/api/llm_metrics_routes.py",
    "backend/api/unified_chat_routes_v2.py",
    "backend/api/websocket_routes.py",
    "backend/core/centralized_config_manager.py",
    "backend/core/concurrent_agent_processor.py",
    "backend/core/config_validator.py",
    "backend/core/contextual_memory_intelligence.py",
    "backend/core/data_flow_manager.py",
    "backend/core/intelligent_caching_system.py",
    "backend/core/intelligent_data_ingestion.py",
    "backend/core/mcp_sync_orchestrator_config.py",
    "backend/core/query_optimization_framework.py",
    "backend/core/secure_credential_manager.py",
    "backend/core/secure_environment_validator.py",
    "backend/core/simple_mcp_base.py",
    "backend/core/sophia_env_config.py",
    "backend/core/sophia_intelligence_orchestrator.py",
    "backend/database/postgresql_staging_manager.py",
    "backend/etl/enhanced_unified_data_pipeline_backup.py",
    "backend/integrations/enhanced_gong_integration.py",
    "backend/integrations/portkey_gateway_service.py",
    "backend/mcp_servers/enhanced_mcp_base.py",
    "backend/mcp_servers/optimized_mcp_client.py",
    "backend/mcp_servers/optimized_mcp_server.py",
    "backend/models/api_models.py",
    "backend/monitoring/alert_manager.py",
    "backend/monitoring/comprehensive_health_monitor.py",
    "backend/monitoring/data_pipeline_metrics.py",
    "backend/monitoring/deployment_status_monitor.py",
    "backend/monitoring/enhanced_deployment_tracker.py",
    "backend/monitoring/enhanced_sophia_monitoring.py",
    "backend/monitoring/group_health_monitoring.py",
    "backend/monitoring/health_monitoring_system.py",
    "backend/monitoring/intelligent_alerting_system.py",
    "backend/monitoring/mcp_monitoring_config.py",
    "backend/monitoring/memory_monitoring_service.py",
    "backend/monitoring/performance_analytics.py",
    "backend/monitoring/production_mcp_monitor.py",
    "backend/scripts/check_environment_health.py",
    "backend/scripts/deploy_cortex_functions.py",
    "backend/scripts/deploy_snowflake_schema.py",
    "backend/scripts/enhanced_asana_integration_test_suite.py",
    "backend/scripts/enhanced_estuary_integration_test_suite.py",
    "backend/scripts/enhanced_gong_pipeline_test_suite.py",
    "backend/scripts/ingest_foundational_kb.py",
    "backend/scripts/integrate_gong_pipeline.py",
    "backend/scripts/transform_slack_linear_data.py",
    "backend/security/audit_middleware.py",
    "backend/security/llm_audit.py",
    "backend/services/structured_output_service.py",
    "backend/services/project_service.py",
    "backend/services/task_service.py",
    "backend/services/ai_junk_prevention_service.py",
    "backend/services/aiac_chat_integration.py",
    "backend/services/automated_insights_service.py",
    "backend/services/chat_driven_metadata_service.py",
    "backend/services/citation_service.py",
    "backend/services/claude_code_development_kit_service.py",
    "backend/services/conversational_training_service.py",
    "backend/services/cortex_router.py",
    "backend/services/enhanced_data_ingestion.py",
    "backend/services/enhanced_mcp_orchestration_service.py",
    "backend/services/enhanced_unified_chat_service_performance.py",
    "backend/services/fast_document_processor.py",
    "backend/services/group_aware_orchestration_enhancement.py",
    "backend/services/kb_management_service.py",
    "backend/services/large_file_ingestion_service.py",
    "backend/services/real_time_streaming_service.py",
    "backend/services/hierarchical_caching_service.py",
    "backend/services/langgraph_learning_orchestrator.py",
    "backend/services/okr_tracking_service.py",
    "backend/services/progressive_autonomy_manager.py",
    "backend/services/team_service.py",
    "backend/services/enhanced_slack_integration_service.py",
    "backend/services/extended_context_manager.py",
    "backend/services/graph_memory_service.py",
    "backend/services/intelligent_data_discovery_service.py",
    "backend/services/large_data_import_service.py",
    "backend/services/project_intelligence_service.py",
    "backend/services/mem0_mock_service.py",
    "backend/services/research_informed_orchestration.py",
    "backend/services/schema_discovery_service.py",
    "backend/services/simplified_unified_intelligence_service.py",
    "backend/services/snowflake_admin_chat_integration.py",
    "backend/services/snowflake_cortex_aisql.py",
    "backend/services/snowflake_metadata_optimizer.py",
    "backend/services/sse_progress_streaming_service.py",
    "backend/services/vector_intelligence_router.py",
    "backend/workflows/enhanced_executive_tasks.py",
    "backend/workflows/enhanced_langgraph_patterns.py",
    "backend/workflows/supervisor_orchestrator.py",
    "backend/services/_archived_chat_services/20250703_142237_enhanced_ceo_chat_service.py",
    "backend/services/_archived_chat_services/20250703_142237_enhanced_ceo_universal_chat_service.py",
    "backend/services/_archived_chat_services/20250703_142237_unified_chat_service.py",
    "backend/services/ai_training/interactive_training_service.py",
    "backend/services/llm_gateway/quality_first_gateway.py",
    "backend/services/snowflake/pooled_connection.py",
    "backend/mcp_servers/ai_code_quality/ai_code_quality_mcp_server.py",
    "backend/mcp_servers/mem0_openmemory/enhanced_mem0_server.py",
    "backend/mcp_servers/mem0_persistent/mem0_mcp_server.py",
    "backend/etl/gong/gong_data_quality_module.py",
    "backend/etl/netsuite/estuary_netsuite_setup.py",
    "backend/etl/payready_core/ingest_core_sql_data.py",
    "backend/agents/business_intelligence_group/bi_agent_coordinator.py",
    "backend/agents/development_group/development_agent_coordinator.py",
    "backend/agents/enhanced/cortex_agent_orchestrator.py",
    "backend/agents/integrations/optimized_gong_data_integration.py",
    "backend/agents/specialized/enhanced_sales_coach_agent.py"
  ],
  "unused_imports": [],
  "compliance_sensitive": [
    {
      "file": "enhanced_sentiment_startup.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "enhanced_sentiment_startup.py",
      "type": "security",
      "pattern": "credential"
    },
    {
      "file": "enhanced_startup.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "enhanced_startup.py",
      "type": "security",
      "pattern": "credential"
    },
    {
      "file": "enhanced_coding_workflow_integration.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "estuary_advanced_integration.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "estuary_advanced_integration.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "example_enhanced_workflow.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "example_enhanced_workflow.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "execute_strategic_plan.py",
      "type": "pci_dss",
      "pattern": "credit"
    },
    {
      "file": "execute_strategic_plan.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "execute_strategic_plan.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "execute_strategic_plan.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "final_environment_verification.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "final_snowflake_fix.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "fix_alignment_issues.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "fix_alignment_issues.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "performance_analysis.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "performance_analysis.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "fix_critical_startup_issues.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "fix_snowflake_codewide.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "fix_pulumi_esc_structure_mismatch.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "fix_snowflake_connection_final.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "github_organization_comprehensive_analysis.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "simple_startup.py",
      "type": "security",
      "pattern": "credential"
    },
    {
      "file": "implement_phase1a_foundation.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "implement_phase1b_services.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "implement_phase2a_advanced.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "github_integration_strategy.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "github_integration_strategy.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "implement_tier1_mcp_repositories.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "test_sales_modules_only.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "start_enhanced_mcp_servers.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "start_sophia_live.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "sophia_ecosystem_diagnostic.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "start_mcp_services.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "test_sales_agent_refactoring.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "unified_ai_assistant.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "start_sophia_enhanced.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "test_sales_simple.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "setup_enhanced_coding_workflow.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "simple_test.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "simple_validation_fix.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "snowflake_advanced_features_implementation.py",
      "type": "pci_dss",
      "pattern": "credit"
    },
    {
      "file": "snowflake_advanced_features_implementation.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "snowflake_advanced_features_implementation.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "start_sophia_complete.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "lambda_labs_access_and_config.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "start_mcp_servers.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "start_sophia_fixed.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "configure_dns.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "launch_production_cluster.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "unified_ai_coding_assistant.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "unified_ai_coding_assistant.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "verify_complete_secrets_sync.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "complete_snowflake_setup.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "complete_snowflake_setup.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "comprehensive_alignment_analysis_and_fix.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "comprehensive_alignment_analysis_and_fix.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "comprehensive_codebase_alignment.py",
      "type": "fdcpa",
      "pattern": "debt"
    },
    {
      "file": "comprehensive_codebase_alignment.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "comprehensive_infrastructure_audit.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "cortex_agents_advanced_implementation.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "create_forks.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "create_pull_request.py",
      "type": "fdcpa",
      "pattern": "debt"
    },
    {
      "file": "create_snowflake_status_report.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "demo_enhanced_mcp_integration.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "deploy_complete_platform.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "deploy_complete_platform.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "deploy_complete_platform_uv.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "deploy_complete_platform_uv.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "deploy_comprehensive_upgrade.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "deploy_estuary_foundation.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "deploy_estuary_foundation.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "deploy_estuary_foundation_corrected.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "deploy_estuary_foundation_corrected.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "deploy_mcp_servers.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "deploy_snowflake_stability_simple.py",
      "type": "pci_dss",
      "pattern": "credit"
    },
    {
      "file": "deploy_snowflake_stability_simple.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "load_github_secrets.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "load_github_secrets_permanently.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "api/index.py",
      "type": "security",
      "pattern": "credential"
    },
    {
      "file": "backend/test_unified_server.py",
      "type": "security",
      "pattern": "credential"
    },
    {
      "file": "backend/fastapi_main.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "claude-cli-integration/claude_cli.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "claude-cli-integration/claude_cli.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "claude-cli-integration/setup_claude_api.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "gemini-cli-integration/gemini_cli_provider.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "gemini-cli-integration/gemini_mcp_integration.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "gong-webhook-service/main.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "implementation_scripts/setup_forks.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "infrastructure/__init__.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "infrastructure/enhanced_lambda_labs_provisioner.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "infrastructure/index.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "infrastructure/lambda-labs-deployment.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "infrastructure/lambda-labs-integration.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "infrastructure/migrate_service_registry.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "infrastructure/pulumi-esc-comprehensive-update.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "infrastructure/pulumi-esc-update.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "n8n-integration/enhanced_n8n_cli_manager.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "n8n-integration/n8n_mcp_gateway.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "n8n-integration/n8n_mcp_gateway.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/activate_performance_optimizations.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "scripts/activate_performance_optimizations.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/activate_sophia_production.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/add_type_annotations.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/ai_analyze_salesforce_data.py",
      "type": "pci_dss",
      "pattern": "billing"
    },
    {
      "file": "scripts/ai_analyze_salesforce_data.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/analyze_entire_codebase_with_codacy.py",
      "type": "fdcpa",
      "pattern": "debt"
    },
    {
      "file": "scripts/analyze_entire_codebase_with_codacy.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/analyze_technical_debt.py",
      "type": "fdcpa",
      "pattern": "debt"
    },
    {
      "file": "scripts/analyze_technical_debt.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/archive_obsolete_docs.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/audit_secret_usage.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "scripts/audit_secret_usage.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "scripts/audit_secret_usage.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/automated_system_validation.py",
      "type": "security",
      "pattern": "credential"
    },
    {
      "file": "scripts/comprehensive_archive_cleanup.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/comprehensive_dockcloud_cleanup.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/comprehensive_secret_codebase_update.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/consolidate_documentation.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/dns-manager.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "scripts/dns-manager.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/expand_strategic_repositories.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "scripts/generate_orchestration_research_report.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/ingest_costar_data.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/advanced_architecture_implementation.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "scripts/ai_enhanced_dns_manager.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/analyze_documentation_chaos.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "scripts/analyze_documentation_chaos.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/analyze_external_repositories.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/analyze_snowflake_config.py",
      "type": "pci_dss",
      "pattern": "credit"
    },
    {
      "file": "scripts/analyze_snowflake_config.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/assess_core_infrastructure.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/automated_maintenance_system.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/automated_webhook_manager.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/check_deployment_status.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/check_syntax_status.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/codebase_audit.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "scripts/codebase_audit.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "scripts/codebase_audit.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "scripts/codebase_audit.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/comprehensive_dependency_audit.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "scripts/comprehensive_dependency_audit.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/comprehensive_lambda_labs_validation.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/comprehensive_monitoring.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/critical_security_remediation.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/deployment_validation_pipeline.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/documentation_enhancer.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/enhanced_batch_embed_data.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "scripts/enhanced_batch_embed_data.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/generate_dev_insights.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/k3s_migration_analyzer.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/find_all_llm_files_to_migrate.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/github_actions_consolidation.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "scripts/github_actions_consolidation.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/automated_platform_integration.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/build_all_mcp_images.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/check_function_length.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/clean_pyproject_dependencies.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "scripts/comprehensive_documentation_update.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/comprehensive_mcp_debug_final.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/comprehensive_syntax_scanner.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/create_docker_swarm_secrets.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/deploy_production_complete.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/docker_deployment_consolidation_plan.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/generate_deployment_report.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "scripts/implement_batch_processing.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/diagnose_gong_webhook.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/enable_semantic_caching.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/estuary_integration_manager.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/generate_executive_quality_report.py",
      "type": "fdcpa",
      "pattern": "debt"
    },
    {
      "file": "scripts/generate_executive_quality_report.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/infrastructure_modernization_kickoff.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/comprehensive_health_check.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/comprehensive_mcp_deep_analysis.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "scripts/comprehensive_mcp_deep_analysis.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/configure_github_organization_security.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/cursor_ai_analysis.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/enhance_mcp_servers.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/fix_lambda_labs_ssh_access.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/github_alignment_optimizer.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/snowflake_alignment_setup.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/snowflake_config_manager.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/start_all_mcp_servers.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/start_mcp_servers.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/start_unified_api.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/sync_mcp_servers.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/type_safety_audit.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/unified_deployment_cleanup.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/unified_secret_management_audit.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/update-github-secrets-template.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/update_lambda_labs_config.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/update_service_optimizations.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/uv_conflict_resolution.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/validate_lambda_infrastructure.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/vercel_optimization.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "scripts/large_file_analyzer.py",
      "type": "fdcpa",
      "pattern": "debt"
    },
    {
      "file": "scripts/large_file_analyzer.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/launch_ai_server_alternative.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/mcp_ecosystem_validator.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "scripts/mcp_orchestration_optimizer.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "scripts/modernize_fastapi_applications.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "scripts/modernize_fastapi_applications.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/monitor_all_mcp_servers.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/monitor_automated_deployment.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/monitor_codacy_mcp_server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "scripts/monitor_mcp_ecosystem.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/n8n-workflow-automation.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/optimize_cursor_config.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/optimize_docker_swarm_resources.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/optimize_snowflake_for_sophia.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/performance_optimizer.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/permanent_ssh_key_solution.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/phase2_mcp_optimization.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "scripts/phase2_mcp_optimization.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/pre_deployment_checklist.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/project_chimera_implementation.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "scripts/project_chimera_implementation.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/real_time_monitoring.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/recreate_lambda_labs_instances.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/run_all_mcp_servers.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/scan_outdated_docs.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/setup_and_optimize_all_services.py",
      "type": "pci_dss",
      "pattern": "credit"
    },
    {
      "file": "scripts/setup_and_optimize_all_services.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "scripts/setup_and_optimize_all_services.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/setup_cortex_ai_complete.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/snowflake_cleanup_and_standardize.py",
      "type": "pci_dss",
      "pattern": "credit"
    },
    {
      "file": "scripts/snowflake_cleanup_and_standardize.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/standardize_mcp_configurations.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/standardize_snowflake_config.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "scripts/start_cline_v3_18_servers.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/start_mcp_server.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/start_phase1_mcp_servers.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/strategic_repository_expansion.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "scripts/strategic_repository_expansion.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "scripts/strategic_repository_expansion.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/test_secret_access.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/unified_lambda_labs_deployment.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/unified_secret_sync.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/update_lambda_github_secrets_template.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/update_snowflake_schemas.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/validate_secret_pipeline.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/verify_and_align_snowflake.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/verify_workspace.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "security_patches/dependency_security_update.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "sophia-deployment-20250704-060443/optimize_docker_swarm_resources.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "tests/conftest.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "tests/test_audit_logging.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "tests/test_audit_logging.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "tests/test_connection_pool_health_check.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "tests/test_enhanced_cache.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "tests/test_ephemeral_credentials.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "tests/test_phase2_integration.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "tests/test_phase2_integration.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "tests/test_simple_ephemeral_credentials.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "tests/test_strategic_plan.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "tests/test_unified_chat_comprehensive.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "tests/test_unified_chat_comprehensive.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "ui-ux-agent/phase2_enhancements.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "ui-ux-agent/phase2_enhancements.py",
      "type": "fdcpa",
      "pattern": "debt"
    },
    {
      "file": "ui-ux-agent/phase2_enhancements.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "ui-ux-agent/start_ui_ux_agent_system.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "ui-ux-agent/start_ui_ux_agent_system.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "ui-ux-agent/mcp-servers/figma-dev-mode/figma_mcp_server.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "ui-ux-agent/mcp-servers/figma-dev-mode/figma_mcp_server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "ui-ux-agent/mcp-servers/langchain-agents/ui_ux_agent.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "tests/ai_evals/framework.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "tests/ai_evals/framework.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "tests/performance/test_data_pipeline_performance.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "scripts/docs/generate_documentation_index.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/implementation/execute_comprehensive_remodel.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/implementation/phase1_foundation_setup.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/implementation/phase2_advanced_integration.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "scripts/implementation/phase2_advanced_integration.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/mcp-implementation/phase1_health_check.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/mcp-implementation/phase1_integration_test.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/security/ai_security_assessment.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "scripts/security/ai_security_assessment.py",
      "type": "glba",
      "pattern": "personal.*information"
    },
    {
      "file": "scripts/security/ai_security_assessment.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/security/compare_baseline.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "scripts/security/comprehensive_security_remediation.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/security/remove_exposed_secrets.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "scripts/security/setup_pulumi_esc_secrets.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "scripts/snowflake/optimize_warehouses.py",
      "type": "pci_dss",
      "pattern": "credit"
    },
    {
      "file": "scripts/snowflake/optimize_warehouses.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "mcp-servers/ag_ui/enhanced_ag_ui_mcp_server.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/asana/asana_mcp_server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/bright_data/bright_data_mcp_server.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "mcp-servers/codacy/codacy_api_client.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/codacy/codacy_server.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "mcp-servers/codacy/enhanced_codacy_mcp_server.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "mcp-servers/codacy/enhanced_codacy_mcp_server.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "mcp-servers/codacy/production_codacy_server.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "mcp-servers/codacy/simple_codacy_server.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "mcp-servers/code_modifier/code_modifier_mcp_server.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "mcp-servers/github/github_mcp_server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/github/simple_github_server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/graphiti/graphiti_mcp_server.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "mcp-servers/hubspot_unified/hubspot_mcp_server.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "mcp-servers/huggingface_ai/huggingface_ai_mcp_server.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "mcp-servers/huggingface_ai/huggingface_ai_mcp_server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/intercom/intercom_mcp_server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/lambda_labs_cli/lambda_labs_cli_mcp_server.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "mcp-servers/linear/linear_mcp_server.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "mcp-servers/linear/simple_linear_server.py",
      "type": "security",
      "pattern": "credential"
    },
    {
      "file": "mcp-servers/notion/enhanced_notion_mcp_server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/notion/notion_mcp_server_standardized.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/portkey_admin/portkey_admin_mcp_server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/prompt_optimizer/prompt_optimizer_mcp_server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/salesforce/salesforce_mcp_server.py",
      "type": "pci_dss",
      "pattern": "billing"
    },
    {
      "file": "mcp-servers/salesforce/salesforce_mcp_server.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "mcp-servers/snowflake_cortex/production_snowflake_cortex_mcp_server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/snowflake_cortex/snowflake_cortex_mcp_server.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "mcp-servers/snowflake_unified/unified_snowflake_server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/ui_ux_agent/ui_ux_agent_mcp_server.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "mcp-servers/ui_ux_agent/ui_ux_agent_mcp_server.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "mcp-servers/v0dev/v0dev_mcp_server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/hubspot_unified/tests/get_closed_ticket_conversations.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/hubspot_unified/src/mcp_server_hubspot/__init__.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/hubspot_unified/src/mcp_server_hubspot/faiss_manager.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "mcp-servers/hubspot_unified/src/mcp_server_hubspot/hubspot_client.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/hubspot_unified/src/mcp_server_hubspot/server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/company_client.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/contact_client.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/conversation_client.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/ticket_client.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "mcp-servers/hubspot_unified/src/mcp_server_hubspot/core/error_handler.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/base_handler.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/conversation_handler.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "infrastructure/esc/enhanced_secret_sync_monitor.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "infrastructure/esc/get_secret.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "infrastructure/esc/github_sync_bidirectional.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "infrastructure/esc/pulumi_auth_validator.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "infrastructure/esc/ssh_key_manager.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "infrastructure/esc/sync_status_validator.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "infrastructure/esc/validate_infrastructure.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/api/enhanced_unified_chat_routes.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/api/enhanced_unified_chat_routes_integration.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/api/lambda_labs_health_routes.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/api/llm_metrics_routes.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/api/unified_chat_routes_v2.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/app/app.py",
      "type": "security",
      "pattern": "credential"
    },
    {
      "file": "backend/core/aligned_snowflake_config.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/auth.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/auto_esc_config.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/cache_manager.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/centralized_config_manager.py",
      "type": "fdcpa",
      "pattern": "debt"
    },
    {
      "file": "backend/core/centralized_config_manager.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/comprehensive_memory_manager.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/core/comprehensive_snowflake_config.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/concurrent_agent_processor.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "backend/core/concurrent_agent_processor.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/config.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/config_manager.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/config_validator.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/connection_pool.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/core/connection_pool.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/constitutional_ai.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "backend/core/constitutional_ai.py",
      "type": "glba",
      "pattern": "personal.*information"
    },
    {
      "file": "backend/core/constitutional_ai.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/core/constitutional_ai.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/cross_platform_sync_orchestrator.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/core/cross_platform_sync_orchestrator.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/data_flow_manager.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/core/data_flow_manager.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/enhanced_cache_manager.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/enhanced_memory_architecture.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/enhanced_snowflake_config.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/hierarchical_cache.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/core/hierarchical_cache.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/integrated_performance_monitoring.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/core/integrated_performance_monitoring.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/integration_registry.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/intelligent_caching_system.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/core/intelligent_caching_system.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/intelligent_data_ingestion.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/core/intelligent_data_ingestion.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/mcp_sync_orchestrator_config.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/core/mcp_sync_orchestrator_config.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/optimized_cache.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/core/optimized_cache.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/optimized_connection_manager.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/optimized_database_manager.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/core/optimized_database_manager.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/performance_monitor.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/core/performance_monitor.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/real_time_streaming.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/core/secure_credential_manager.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/secure_environment_validator.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "backend/core/secure_snowflake_config.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/security.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/security_config.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/self_optimization.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/core/self_optimization.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/core/settings.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/simple_auth.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/core/simple_config.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/simple_mcp_base.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/snowflake_abstraction.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/snowflake_config_manager.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/snowflake_config_override.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/snowflake_override.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/snowflake_schema_integration.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "backend/core/snowflake_schema_integration.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/core/sophia_env_config.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "backend/core/startup_config.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/core/unified_connection_manager.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/database/postgresql_staging_manager.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/etl/enhanced_ingestion_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/etl/enhanced_unified_data_pipeline.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/etl/enhanced_unified_data_pipeline.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/etl/enhanced_unified_data_pipeline_backup.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/etl/estuary_flow_orchestrator.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "backend/etl/estuary_flow_orchestrator.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/etl/gong_api_extractor_clean.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "backend/infrastructure/sophia_iac_orchestrator.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/integrations/advanced_estuary_flow_manager.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "backend/integrations/advanced_estuary_flow_manager.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "backend/integrations/advanced_estuary_flow_manager.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/integrations/advanced_estuary_flow_manager.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/integrations/enhanced_gong_integration.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/integrations/enhanced_microsoft_gong_integration.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "backend/integrations/enhanced_microsoft_gong_integration.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/integrations/enhanced_microsoft_gong_integration.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/integrations/estuary_flow_manager.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/integrations/estuary_flow_manager.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/integrations/gong_api_client.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/integrations/gong_api_client_enhanced.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/integrations/gong_api_client_enhanced.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/integrations/gong_redis_client.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/integrations/gong_snowflake_client.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/integrations/gong_webhook_processor.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/integrations/gong_webhook_server.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/integrations/gong_webhook_server.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/integrations/portkey_gateway_service.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "backend/integrations/portkey_gateway_service.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/integrations/portkey_gateway_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/mcp_servers/ai_memory_auto_discovery.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "backend/mcp_servers/costar_mcp_server.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/mcp_servers/enhanced_mcp_base.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/mcp_servers/mcp_auth.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/mcp_servers/mcp_health.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/mcp_servers/optimized_mcp_client.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/mcp_servers/optimized_mcp_server.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/mcp_servers/optimized_mcp_server.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/mcp_servers/optimized_network.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/mcp_servers/sophia_mcp_base.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/models/chat_models.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/models/orchestration_models.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/models/orchestration_models.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/monitoring/__init__.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/monitoring/alert_manager.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/monitoring/alert_manager.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/monitoring/data_pipeline_metrics.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/monitoring/deployment_status_monitor.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/monitoring/deployment_tracker.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/monitoring/enhanced_sophia_monitoring.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/monitoring/gong_data_quality.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/monitoring/gong_data_quality.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/monitoring/group_health_monitoring.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/monitoring/intelligent_alerting_system.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/monitoring/mcp_health_monitor.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/monitoring/mcp_metrics_collector.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/monitoring/mcp_monitoring_config.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/monitoring/production_mcp_monitor.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "backend/monitoring/production_mcp_monitor.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/monitoring/production_mcp_monitor.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/monitoring/prometheus_config.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/monitoring/prometheus_config.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/monitoring/quality_rules.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "backend/monitoring/quality_rules.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/monitoring/security_metrics_exporter.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "backend/monitoring/security_metrics_exporter.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/n8n_bridge/main.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "backend/n8n_bridge/main.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/orchestration/unified_intent_engine.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/orchestration/continuous_learning_framework.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/orchestration/cross_group_intelligence_hub.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/orchestration/langgraph_mcp_orchestrator.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/prompts/optimized_templates.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/prompts/optimized_templates.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/scripts/batch_embed_data.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/scripts/check_environment_health.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "backend/scripts/deploy_cortex_functions.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/scripts/deploy_snowflake_schema.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/scripts/enhanced_estuary_integration_test_suite.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/scripts/enhanced_gong_pipeline_test_suite.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/scripts/estuary_gong_setup.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/scripts/ingest_foundational_kb.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "backend/scripts/ingest_foundational_kb.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "backend/scripts/ingest_foundational_kb.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/scripts/integrate_gong_pipeline.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/scripts/sophia_data_pipeline_ultimate.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/security/audit_logger.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "backend/security/audit_logger.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/security/audit_middleware.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/security/audit_middleware.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/security/llm_audit.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "backend/security/llm_audit.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/security/llm_audit.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/security/secret_management.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/services/memory_preservation_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/predictive_automation_service.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/predictive_automation_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/structured_output_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/payready_business_intelligence.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/payready_business_intelligence.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/advanced_ui_ux_agent_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/ai_junk_prevention_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/aiac_chat_integration.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/automated_insights_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/chat_driven_metadata_service.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/services/chat_driven_metadata_service.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/chat_driven_metadata_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/chimera_monitoring_service.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/chimera_monitoring_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/circuit_breaker.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/citation_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/claude_code_development_kit_service.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/claude_code_development_kit_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/code_modification_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/comprehensive_memory_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/cortex_agent_service.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/cortex_agent_service.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "backend/services/cortex_router.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/cost_engineering_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/data_source_manager.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/dynamic_orchestration_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/enhanced_cortex_agent_service.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "backend/services/enhanced_cortex_agent_service.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/enhanced_cortex_agent_service.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/services/enhanced_data_ingestion.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "backend/services/enhanced_knowledge_base_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/enhanced_mcp_orchestration_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/enhanced_sentiment_analyzer.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "backend/services/enhanced_sentiment_analyzer.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/enhanced_snowflake_cortex_service.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/services/enhanced_unified_chat_service_performance.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/foundational_knowledge_service.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "backend/services/foundational_knowledge_service.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "backend/services/foundational_knowledge_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/group_aware_orchestration_enhancement.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/kb_management_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/large_file_ingestion_service.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "backend/services/large_file_ingestion_service.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/services/large_file_ingestion_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/mem0_integration_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/predictive_analytics_service.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "backend/services/predictive_analytics_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/hierarchical_caching_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/intelligent_query_router.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/services/intelligent_query_router.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/mcp_orchestration_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/okr_tracking_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/documentation_loader_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/enhanced_chat_context_service.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/services/enhanced_chat_context_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/enhanced_cortex_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/enhanced_ingestion_service.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/services/enhanced_ingestion_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/enhanced_mcp_orchestration.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/enhanced_portkey_llm_gateway.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/enhanced_portkey_llm_gateway.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/enhanced_slack_integration_service.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/enhanced_slack_integration_service.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "backend/services/enhanced_unified_intelligence_service.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/services/enhanced_unified_intelligence_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/extended_context_manager.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "backend/services/extended_context_manager.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/extended_context_manager.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/intelligent_data_discovery_service.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "backend/services/intelligent_data_discovery_service.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/services/intelligent_data_discovery_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/mcp_capability_router.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/migration_orchestrator_client.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/advanced_llm_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/gptcache_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/research_informed_orchestration.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/schema_discovery_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/secure_credential_service.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "backend/services/simplified_unified_intelligence_service.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "backend/services/simplified_unified_intelligence_service.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/services/simplified_unified_intelligence_service.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/services/snowflake_admin_chat_integration.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/snowflake_cortex_aisql.py",
      "type": "pci_dss",
      "pattern": "credit"
    },
    {
      "file": "backend/services/snowflake_cortex_aisql.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "backend/services/snowflake_cortex_aisql.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/snowflake_cortex_aisql.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/services/snowflake_intelligence_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/sophia_agent_orchestrator.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/sophia_agent_orchestrator.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/sophia_ai_orchestrator.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/sophia_intent_engine.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/sse_progress_streaming_service.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "backend/services/sse_progress_streaming_service.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/streaming_response_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/ui_generation_intent_handler.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "backend/services/ui_generation_intent_handler.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/unified_ai_orchestration_service.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "backend/services/unified_ai_orchestration_service.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/unified_ai_orchestration_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/unified_llm_service.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/unified_llm_service.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/services/vector_indexing_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/vector_intelligence_router.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "backend/services/vector_intelligence_router.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/utils/auth.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/utils/enhanced_snowflake_cortex_service.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "backend/utils/enhanced_snowflake_cortex_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/utils/optimized_snowflake_cortex_service.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/utils/optimized_snowflake_cortex_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/utils/optimized_snowflake_cortex_service_models.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/utils/optimized_snowflake_cortex_service_utils.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/utils/snowflake_cortex_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/utils/snowflake_cortex_service_core.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/utils/snowflake_cortex_service_models.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/utils/snowflake_cortex_service_utils.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/utils/snowflake_gong_connector.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/utils/snowflake_hubspot_connector.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/websocket/connection_manager.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/websocket/connection_manager.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/workflows/enhanced_executive_tasks.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/workflows/enhanced_langgraph_orchestration.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/workflows/enhanced_langgraph_orchestration.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/workflows/enhanced_langgraph_patterns.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/workflows/langgraph_agent_orchestration.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/workflows/multi_agent_workflow.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/workflows/multi_agent_workflow.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/workflows/supervisor_orchestrator.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/_archived_chat_services/20250703_142237_enhanced_ceo_chat_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/_archived_chat_services/20250703_142237_enhanced_ceo_universal_chat_service.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/services/_archived_chat_services/20250703_142237_enhanced_ceo_universal_chat_service.py",
      "type": "fdcpa",
      "pattern": "debt"
    },
    {
      "file": "backend/services/_archived_chat_services/20250703_142237_enhanced_ceo_universal_chat_service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/_archived_chat_services/20250703_142237_unified_chat_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/chat/__init__.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/chat/base_chat_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/chat/context_manager.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/services/chat/context_manager.py",
      "type": "fdcpa",
      "pattern": "debt"
    },
    {
      "file": "backend/services/chat/context_manager.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/chat/session_manager.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/infrastructure_chat/sophia_infrastructure_chat.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/services/llm_gateway/openrouter_integration.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "backend/services/llm_gateway/openrouter_integration.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/services/llm_gateway/openrouter_integration.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/llm_gateway/portkey_integration.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "backend/services/llm_gateway/portkey_integration.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/llm_gateway/quality_first_gateway.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "backend/services/llm_gateway/quality_first_gateway.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/services/llm_gateway/snowflake_cortex_enhanced.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "backend/services/llm_gateway/snowflake_cortex_enhanced.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/services/llm_gateway/snowflake_cortex_enhanced.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/security/ephemeral_credentials/__init__.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/security/ephemeral_credentials/middleware.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/security/ephemeral_credentials/middleware.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/security/ephemeral_credentials/models.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/security/ephemeral_credentials/routes.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/security/ephemeral_credentials/service.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "backend/security/rbac/__init__.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/security/rbac/dependencies.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/security/rbac/dependencies.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/security/rbac/models.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/security/rbac/models.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/security/rbac/service.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/presentation/api/router.py",
      "type": "security",
      "pattern": "credential"
    },
    {
      "file": "backend/mcp_servers/ai_code_quality/ai_code_quality_mcp_server.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/mcp_servers/ai_memory/ai_memory_handlers.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/mcp_servers/ai_memory/ai_memory_models.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/mcp_servers/ai_memory/ai_memory_models.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/mcp_servers/ai_memory/server.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/mcp_servers/base/enhanced_standardized_mcp_server.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/mcp_servers/base/standardized_mcp_server.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/mcp_servers/base/standardized_mcp_server.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/mcp_servers/base/unified_mcp_base.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/mcp_servers/base/unified_mcp_base.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/mcp_servers/cortex_aisql/cortex_mcp_server.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/mcp_servers/mem0_openmemory/enhanced_mem0_server.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/mcp_servers/mem0_persistent/mem0_mcp_server.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/mcp_servers/mixins/cline_v3_18_features.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/mcp_servers/ai_memory/core/config.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/mcp_servers/ai_memory/core/config.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/mcp_servers/ai_memory/core/exceptions.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/mcp_servers/ai_memory/core/performance.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/infrastructure/adapters/estuary_adapter.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/infrastructure/adapters/snowflake_adapter.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/infrastructure/core/dependency_manager.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/infrastructure/core/state_manager.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/etl/estuary/estuary_configuration_manager.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/etl/gong/ingest_gong_data.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/etl/netsuite/estuary_netsuite_setup.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/etl/netsuite/estuary_netsuite_setup.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/etl/payready_core/ingest_core_sql_data.py",
      "type": "pci_dss",
      "pattern": "payment"
    },
    {
      "file": "backend/etl/payready_core/ingest_core_sql_data.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "backend/etl/payready_core/ingest_core_sql_data.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "backend/domain/entities/deal.py",
      "type": "pci_dss",
      "pattern": "credit"
    },
    {
      "file": "backend/domain/entities/user.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "backend/core/base/__init__.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "backend/application/use_cases/qualify_deal.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/application/ports/services/ai_service.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/app/core/config.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "backend/app/core/dependencies.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/agents/business_intelligence_group/bi_agent_coordinator.py",
      "type": "glba",
      "pattern": "financial"
    },
    {
      "file": "backend/agents/business_intelligence_group/bi_agent_coordinator.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/agents/core/langgraph_agent_base.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/agents/enhanced/cortex_agent_orchestrator.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "backend/agents/enhanced/data_models.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/agents/infrastructure/sophia_infrastructure_agent.py",
      "type": "pci_dss",
      "pattern": "billing"
    },
    {
      "file": "backend/agents/infrastructure/sophia_infrastructure_agent.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/agents/integrations/gong_data_integration.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/agents/integrations/optimized_gong_data_integration.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "backend/agents/integrations/optimized_gong_data_integration.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "backend/agents/integrations/optimized_gong_data_integration.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/agents/research/orchestration_research_agent.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/agents/specialized/asana_project_intelligence_agent.py",
      "type": "pci_dss",
      "pattern": "credit"
    },
    {
      "file": "backend/agents/specialized/asana_project_intelligence_agent.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/agents/specialized/call_analysis_agent.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/agents/specialized/interactive_sales_coach_agent.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/agents/specialized/linear_project_health_agent.py",
      "type": "fdcpa",
      "pattern": "debt"
    },
    {
      "file": "backend/agents/specialized/linear_project_health_agent.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/agents/specialized/marketing_analysis_agent.py",
      "type": "glba",
      "pattern": "customer.*data"
    },
    {
      "file": "backend/agents/specialized/marketing_analysis_agent.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/agents/specialized/sales_coach_agent.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/agents/specialized/sales_intelligence_agent_handlers.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/agents/specialized/sales_intelligence_agent_models.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "backend/agents/specialized/slack_analysis_agent.py",
      "type": "security",
      "pattern": "token"
    },
    {
      "file": "backend/agents/specialized/snowflake_admin_agent.py",
      "type": "security",
      "pattern": "password"
    },
    {
      "file": "api/config/performance.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "api/config/performance.py",
      "type": "security",
      "pattern": "key"
    },
    {
      "file": "api/middleware/security.py",
      "type": "pci_dss",
      "pattern": "card"
    },
    {
      "file": "api/middleware/security.py",
      "type": "fdcpa",
      "pattern": "collection"
    },
    {
      "file": "api/middleware/security.py",
      "type": "security",
      "pattern": "secret"
    },
    {
      "file": "api/monitoring/health.py",
      "type": "security",
      "pattern": "token"
    }
  ],
  "external_endpoints": [],
  "secrets_usage": [],
  "documentation_status": {
    "total_modules": 781,
    "documented_modules": 730,
    "readme_files": [
      "README.md",
      "apps/README.md",
      "claude-cli-integration/README.md",
      "external/README.md",
      "gemini-cli-integration/README.md",
      "infrastructure/README.md",
      "libs/README.md",
      "ui-ux-agent/README.md",
      "tests/infrastructure/README.md",
      "mcp-servers/hubspot_unified/README.md",
      "mcp-servers/v0dev/README.md",
      "infrastructure/dns/README.md",
      "infrastructure/vercel/README.md",
      "docs/01-getting-started/README.md",
      "docs/02-development/README.md",
      "docs/03-architecture/README.md",
      "docs/04-deployment/README.md",
      "docs/05-integrations/README.md",
      "docs/06-mcp-servers/README.md",
      "docs/07-performance/README.md",
      "docs/08-security/README.md",
      "docs/99-reference/README.md",
      "docs/archive/cleanup_20250704_phase2/other/README.md",
      "backend/etl/gong/README.md",
      "backend/agents/specialized/README_SNOWFLAKE_ADMIN.md"
    ],
    "api_docs": [
      "docs/API_DOCUMENTATION.md",
      "docs/99-reference/UNIFIED_CHAT_API_REFERENCE.md",
      "docs/archive/cleanup_20250704_phase2/technical/MCP_SERVER_API_REFERENCE.md"
    ],
    "missing_docs": [
      "main.py",
      "infrastructure/index.py",
      "mcp-servers/__init__.py",
      "scripts/comprehensive_mcp_deep_analysis.py",
      "scripts/mcp_analysis_simple.py",
      "mcp-servers/ag_ui/__init__.py",
      "mcp-servers/apify_intelligence/__init__.py",
      "mcp-servers/apollo/__init__.py",
      "mcp-servers/asana/__init__.py",
      "mcp-servers/bright_data/__init__.py",
      "mcp-servers/codacy/__init__.py",
      "mcp-servers/figma_context/__init__.py",
      "mcp-servers/huggingface_ai/__init__.py",
      "mcp-servers/lambda_labs_cli/__init__.py",
      "mcp-servers/linear/__init__.py",
      "mcp-servers/overlays/__init__.py",
      "mcp-servers/playwright/__init__.py",
      "mcp-servers/portkey_admin/__init__.py",
      "mcp-servers/postgres/__init__.py",
      "mcp-servers/pulumi/__init__.py",
      "mcp-servers/snowflake_cortex/__init__.py",
      "mcp-servers/ui_ux_agent/__init__.py",
      "mcp-servers/hubspot_unified/src/mcp_server_hubspot/clients/__init__.py",
      "mcp-servers/hubspot_unified/src/mcp_server_hubspot/core/__init__.py",
      "mcp-servers/hubspot_unified/src/mcp_server_hubspot/handlers/__init__.py",
      "infrastructure/agents/__init__.py",
      "backend/api/__init__.py",
      "backend/app/__init__.py",
      "backend/core/auth.py",
      "backend/core/database.py",
      "backend/core/logger.py",
      "backend/core/sophia_intelligence_orchestrator.py",
      "backend/infrastructure/__init__.py",
      "backend/monitoring/memory_monitoring_service.py",
      "backend/services/conversational_training_service.py",
      "backend/services/langgraph_learning_orchestrator.py",
      "backend/services/graph_memory_service.py",
      "backend/utils/optimized_snowflake_cortex_service_core.py",
      "backend/utils/optimized_snowflake_cortex_service_handlers.py",
      "backend/mcp_servers/ai_memory/__init__.py",
      "backend/mcp_servers/mem0_persistent/mem0_mcp_server.py",
      "backend/infrastructure/web/__init__.py",
      "backend/infrastructure/persistence/redis/__init__.py",
      "backend/infrastructure/persistence/snowflake/__init__.py",
      "backend/app/core/__init__.py",
      "backend/app/api/admin/__init__.py",
      "backend/app/api/mcp/__init__.py",
      "backend/app/api/v3/__init__.py",
      "api/config/__init__.py",
      "api/middleware/__init__.py",
      "api/monitoring/__init__.py"
    ],
    "outdated_docs": []
  },
  "recommendations": [
    {
      "priority": "HIGH",
      "category": "cleanup",
      "action": "Remove 315 dead code files",
      "files": [
        "enhanced_sentiment_startup.py",
        "enhanced_startup.py",
        "estuary_advanced_integration.py",
        "example_enhanced_workflow.py",
        "example_unified_mcp_server.py"
      ]
    },
    {
      "priority": "HIGH",
      "category": "compliance",
      "action": "Review and secure compliance-sensitive flows",
      "count": 734
    },
    {
      "priority": "MEDIUM",
      "category": "architecture",
      "action": "Consolidate integrations into unified directory structure",
      "current_integrations": [
        "gong",
        "slack",
        "linear",
        "snowflake",
        "openai",
        "hubspot",
        "pulumi",
        "vercel",
        "apollo",
        "costar"
      ]
    }
  ]
}
