{
  "summary": {
    "total_secrets": 518,
    "consistent_secrets": 397,
    "consistency_rate": "76.6%",
    "github_secrets": 116,
    "pulumi_esc_secrets": 65,
    "code_references": 1404
  },
  "actions_required": {
    "add_to_both": [
      "AGENT_COMMUNICATION_SECRET",
      "AGENT_ORCHESTRATOR_AUTH_TOKEN",
      "ALERT_EMAIL",
      "ANDROID_DATA",
      "ANDROID_ROOT",
      "APIFY_WORKFLOW_KEY",
      "API_BASE_URL",
      "APOLLO_API_KEY",
      "APOLLO_IO_API_KEY",
      "ARRAY_FUNCTION_LIKE",
      "ARROW_TOOLS_JAR",
      "ASANA_ACCESS_TOKEN",
      "ASANA_WORKSPACE_GID",
      "ASYNCPG_DEBUG_SERVER",
      "AUTHLIB_INSECURE_TRANSPORT",
      "AWS_REGION",
      "AWS_ROLE_ARN",
      "AZURE_CLIENT_ID",
      "AZURE_LOCATION",
      "BASH_VERSION",
      "BENCHMARK_USE_DEV_SHM",
      "BLUE",
      "BRANCH",
      "BUILD_ENVIRONMENT",
      "BUZZ_API_KEY",
      "CC",
      "CI",
      "CLEARML_LOG_MODEL",
      "CLEARML_PROJECT",
      "CLEARML_TASK",
      "CLIENT_LOG_DIR_PATH_DOCKER",
      "CODACY_ACCOUNT_TOKEN",
      "CODACY_PROJECT_TOKEN",
      "COMET_LOG_ASSETS",
      "COMET_MODE",
      "COMET_OFFLINE_DIRECTORY",
      "COMET_PROJECT_NAME",
      "CONDA_PREFIX",
      "CONSUMER_PROJECT",
      "COSTAR_API_KEY",
      "COVERAGE_AST_DUMP",
      "COVERAGE_CORE",
      "COVERAGE_COVERAGE",
      "COVERAGE_DEBUG",
      "COVERAGE_DEBUG_CALLS",
      "COVERAGE_DEBUG_FILE",
      "COVERAGE_FILE",
      "COVERAGE_FORCE_CONFIG",
      "COVERAGE_PROCESS_START",
      "COVERAGE_PROFILE",
      "COVERAGE_RCFILE",
      "COVERAGE_SYSMON_LOG",
      "COVERAGE_SYSMON_STATS",
      "COVERAGE_TESTING",
      "COVERAGE_TRACK_ARCS",
      "CUDA_VISIBLE_DEVICES",
      "DATABRICKS_RUNTIME_VERSION",
      "DEBUGPY_ADAPTER_ENDPOINTS",
      "DEBUGPY_ATTACH_BY_PID_DEBUG_INFO",
      "DEBUGPY_LOG_DIR",
      "DEBUGPY_LOG_STDERR",
      "DEBUGPY_PROCESS_EXIT_TIMEOUT",
      "DEBUGPY_PROCESS_SPAWN_TIMEOUT",
      "DISABLED_TESTS_FILE",
      "DISABLE_MLFLOW_INTEGRATION",
      "DISABLE_TELEMETRY",
      "DISPLAY",
      "DISTRIB",
      "DISTRIBUTED_TESTS_DEFAULT_TIMEOUT",
      "DISTUTILS_USE_SDK",
      "DIST_EXTRA_CONFIG",
      "DOCKER_IMAGE",
      "DOCKER_PERSONAL_ACCESS_TOKEN",
      "DOCKER_USER_NAME",
      "ELISE_AI_API_KEY",
      "ENVIRONMENT",
      "ESC_APIFY_API_TOKEN",
      "ESC_ARIZE_API_KEY",
      "ESC_ARIZE_SPACE_ID",
      "ESC_CODACY_ACCOUNT_TOKEN",
      "ESC_CODACY_PROJECT_TOKEN",
      "ESC_DOCKER_TOKEN",
      "ESC_DOCKER_USERNAME",
      "ESC_DOCKER_USER_NAME",
      "ESC_HUGGINGFACE_API_TOKEN",
      "ESC_LAMBDA_LABS_API_KEY",
      "ESC_LOOKER_API_KEY",
      "ESC_MIXPANEL_API_KEY",
      "ESC_OPENROUTER_API_KEY",
      "ESC_PHANTOM_BUSTER_API_KEY",
      "ESC_PINECONE_API_KEY",
      "ESC_PORTKEY_API_KEY",
      "ESC_PORTKEY_CONFIG",
      "ESC_PULUMI_ACCESS_TOKEN",
      "ESC_SNOWFLAKE_ACCOUNT",
      "ESC_SNOWFLAKE_DATABASE",
      "ESC_SNOWFLAKE_PASSWORD",
      "ESC_SNOWFLAKE_SCHEMA",
      "ESC_SNOWFLAKE_USER",
      "ESC_SNOWFLAKE_WAREHOUSE",
      "ESC_TAVILY_API_KEY",
      "ESC_TOGETHER_AI_API_KEY",
      "ESC_TWINGLY_API_KEY",
      "ESC_ZENROWS_API_KEY",
      "FDCPA_CHECKER_KEY",
      "FORCE_COLOR",
      "GCP_OIDC_SERVICE_ACCOUNT",
      "GITHUB_ACTIONS",
      "GITHUB_REPOSITORY",
      "GITHUB_RUN_ID",
      "GITHUB_WORKFLOW",
      "GIT_DIR",
      "GIT_WORK_TREE",
      "GLBA_MONITOR_KEY",
      "GONG_OAUTH_CLIENT_ID",
      "GONG_OAUTH_CLIENT_SECRET",
      "GONG_OAUTH_REFRESH_TOKEN",
      "GONG_WEBHOOK_SECRET",
      "GRAFANA_ADMIN_PASSWORD",
      "GREEN",
      "GRPC_SINGLE_THREADED_UNARY_STREAM",
      "HF_DAGSHUB_LOG_ARTIFACTS",
      "HF_DAGSHUB_MODEL_NAME",
      "HF_ENDPOINT",
      "HF_HOME",
      "HF_HUB_VERBOSITY",
      "HF_MLFLOW_LOG_ARTIFACTS",
      "HF_MODULES_CACHE",
      "HF_XET_CACHE",
      "HOME",
      "HTTPS_PROXY",
      "HUGGINGFACE_ASSETS_CACHE",
      "HUGGINGFACE_HUB_CACHE",
      "HUNTER_WARFIELD_KEY",
      "IANA_TIME_ZONE",
      "IDE_PROJECT_ROOTS",
      "INIT_METHOD",
      "JENKINS_HOME",
      "JSONSCHEMA_DEBUG_CODE_GENERATION",
      "JWT_LIFETIME_IN_SECONDS",
      "KEY",
      "KUBERNETES_SERVICE_HOST",
      "LAMBDA_LABS_CONTEXT",
      "LAMBDA_LABS_CONTROL_PLANE_IP",
      "LAMBDA_LABS_SSH_KEY_NAME",
      "LD_PRELOAD",
      "LIBRARY_ROOTS",
      "LINKEDIN_API_KEY",
      "LINKEDIN_SALES_NAV_KEY",
      "LLM_GATEWAY_API_KEY",
      "LOG_LEVEL",
      "MARKET_ANALYSIS_KEY",
      "MCP_DOCKER_REGISTRY_TOKEN",
      "MCP_GATEWAY_URL",
      "MCP_GITHUB_TOKEN",
      "MCP_LINEAR_TOKEN",
      "MCP_POSTGRES_CONNECTION_STRING",
      "MCP_SLACK_TOKEN",
      "MIN_PWD_LEN",
      "MIN_TOKEN_LEN",
      "MLFLOW_EXPERIMENT_NAME",
      "MLFLOW_FLATTEN_PARAMS",
      "MLFLOW_NESTED_RUN",
      "MLFLOW_RUN_ID",
      "MLFLOW_TAGS",
      "MLFLOW_TRACKING_URI",
      "MYPYC_DEBUG_LEVEL",
      "MYPYC_OPT_LEVEL",
      "MYPYC_STRICT_DUNDER_TYPING",
      "MYPYPATH",
      "MYPY_CACHE_DIR",
      "MYPY_FORCE_COLOR",
      "MYPY_FORCE_TERMINAL_WIDTH",
      "MYPY_TEST_PREFIX",
      "NAMESPACE",
      "NC",
      "NETWORK_ATTACHMENT_NAME",
      "NODE_ENV",
      "NOTION_ACCESS_TOKEN",
      "NO_NETWORK",
      "NUMERIX",
      "NUMPY_INCLUDE",
      "NUMPY_WARN_IF_NO_MEM_POLICY",
      "NUM_PARALLEL_PROCS",
      "NVTOOLSEXT_PATH",
      "OCSP_MAX_RETRY",
      "OMP_NUM_THREADS",
      "OMP_PREFIX",
      "OUTPUT_FILE",
      "PANSEQ",
      "PARAMETER_NAME",
      "PATH",
      "PCI_DSS_KEY",
      "PGDATABASE",
      "PGPASSFILE",
      "PGPASSWORD",
      "PGSSLCERT",
      "PGSSLCRL",
      "PGSSLKEY",
      "PGSSLMAXPROTOCOLVERSION",
      "PGSSLMINPROTOCOLVERSION",
      "PGSSLMODE",
      "PGSSLROOTCERT",
      "PGUSER",
      "PHOENIX_ENABLE_WEBSOCKETS",
      "PINECONE_ADDITIONAL_HEADERS",
      "PINECONE_CONTROLLER_HOST",
      "PINECONE_DEBUG",
      "PINECONE_MAX_ID_LENGTH",
      "PINECONE_PLUGIN_ASSISTANT_CONTROL_HOST",
      "PINECONE_PLUGIN_ASSISTANT_DATA_HOST",
      "PLATFORM_ENVIRONMENT",
      "PLATFORM_NAME",
      "PLATFORM_VERSION",
      "PORT",
      "PORTKEY_VIRTUAL_KEY_PROD",
      "PREFIX",
      "PRE_COMMIT_ALLOW_NO_CONFIG",
      "PRIMA_DEBUGGING",
      "PROJECT_ROOT",
      "PROMETHEUS_AUTH_TOKEN",
      "PROTOCOL",
      "PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION",
      "PSUTIL_DEBUG",
      "PULUMI_COMMAND",
      "PULUMI_CONFIG",
      "PULUMI_ENABLE_LEGACY_APPLY",
      "PULUMI_ERROR_OUTPUT_STRING",
      "PULUMI_ORGANIZATION",
      "PULUMI_PROJECT",
      "PULUMI_STACK",
      "PULUMI_TOKEN_SECRET",
      "PWD",
      "PYDANTIC_DISABLE_PLUGINS",
      "PYDANTIC_PRIVATE_ALLOW_UNHANDLED_SCHEMA_TYPES",
      "PYDANTIC_VALIDATE_CORE_SCHEMAS",
      "PYDEVD_APPLY_PATCHING_TO_HIDE_PYDEVD_THREADS",
      "PYDEVD_DEBUG_FILE",
      "PYDEVD_FILTERS",
      "PYDEVD_IPYTHON_CONTEXT",
      "PYDEVD_LOAD_NATIVE_LIB",
      "PYDEVD_LOG_TIME",
      "PYDEVD_PYQT_MODE",
      "PYDEVD_USE_CYTHON",
      "PYDEVD_USE_FRAME_EVAL",
      "PYDEVD_USE_SYS_MONITORING",
      "PYTEST_CURRENT_TEST",
      "PYTEST_THEME",
      "PYTEST_THEME_MODE",
      "PYTHONBREAKPOINT",
      "PYTHONHASHSEED",
      "PYTHONPATH",
      "PYTHON_EXEC",
      "PYTHON_HOME",
      "PYTHON_INCLUDE",
      "PYTHON_VERSION",
      "PYTORCH_CUDA_MEMCHECK",
      "PYTORCH_ENABLE_MPS_FALLBACK",
      "PYTORCH_HYPOTHESIS_PROFILE",
      "PYTORCH_KEEP_TMPDIR",
      "PYTORCH_NVCC",
      "PYTORCH_NVML_BASED_CUDA_CHECK",
      "PYTORCH_PRETRAINED_BERT_CACHE",
      "PYTORCH_TEST_WITH_TV",
      "PYTORCH_TRANSFORMERS_CACHE",
      "PY_IGNORE_IMPORTMISMATCH",
      "REACT_APP_API_KEY",
      "REACT_APP_API_URL",
      "REACT_APP_ENVIRONMENT",
      "REACT_APP_WS_URL",
      "RED",
      "REDIS_CLUSTER_PASSWORD",
      "REGION",
      "RUNNER_OS",
      "RUN_SLOW",
      "SCIPY_DEFAULT_DTYPE",
      "SCIPY_XFAIL",
      "SCIPY_XSLOW",
      "SCRIPT_DIR",
      "SENTENCE_TRANSFORMERS_HOME",
      "SENTRY_DSN",
      "SERVICE",
      "SERVICE_NAME",
      "SETUPTOOLS_ENABLE_FEATURES",
      "SETUPTOOLS_EXT_SUFFIX",
      "SF_AUTH_SOCKET_ADDR",
      "SF_AUTH_SOCKET_PORT",
      "SF_OCSP_ACTIVATE_NEW_ENDPOINT",
      "SF_OCSP_DO_RETRY",
      "SF_OCSP_FAIL_OPEN",
      "SF_OCSP_RESPONSE_CACHE_DIR",
      "SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED",
      "SF_OCSP_RESPONSE_CACHE_SERVER_URL",
      "SF_OCSP_TEST_MODE",
      "SF_TEST_OCSP_CACHE_SERVER_URL",
      "SF_TEST_OCSP_CERT_STATUS",
      "SF_TEST_OCSP_FORCE_BAD_RESPONSE_VALIDITY",
      "SF_TEST_OCSP_URL",
      "SHELL",
      "SKLEARN_SKIP_OPENMP_TEST",
      "SLACK_TOKEN",
      "SLOW_TESTS_FILE",
      "SMDATAPARALLEL_LOCAL_RANK",
      "SM_FRAMEWORK_MODULE",
      "SM_FRAMEWORK_PARAMS",
      "SM_HP_MP_PARAMETERS",
      "SM_NUM_CPUS",
      "SM_NUM_GPUS",
      "SNOWFLAKE_CONNECTION",
      "SNOWFLAKE_DEV_ACCOUNT",
      "SNOWFLAKE_DEV_DATABASE",
      "SNOWFLAKE_DEV_PASSWORD",
      "SNOWFLAKE_DEV_PAT",
      "SNOWFLAKE_DEV_ROLE",
      "SNOWFLAKE_DEV_SCHEMA",
      "SNOWFLAKE_DEV_USER",
      "SNOWFLAKE_DEV_WAREHOUSE",
      "SNOWFLAKE_OAUTH_CLIENT_ID",
      "SNOWFLAKE_OAUTH_CLIENT_SECRET",
      "SNOWFLAKE_OAUTH_REFRESH_TOKEN",
      "SNOWFLAKE_PROD_ACCOUNT",
      "SNOWFLAKE_PROD_DATABASE",
      "SNOWFLAKE_PROD_PASSWORD",
      "SNOWFLAKE_PROD_PAT",
      "SNOWFLAKE_PROD_ROLE",
      "SNOWFLAKE_PROD_SCHEMA",
      "SNOWFLAKE_PROD_USER",
      "SNOWFLAKE_PROD_WAREHOUSE",
      "SNOWFLAKE_STG_ACCOUNT",
      "SNOWFLAKE_STG_DATABASE",
      "SNOWFLAKE_STG_PASSWORD",
      "SNOWFLAKE_STG_PAT",
      "SNOWFLAKE_STG_ROLE",
      "SNOWFLAKE_STG_SCHEMA",
      "SNOWFLAKE_STG_USER",
      "SNOWFLAKE_STG_WAREHOUSE",
      "SOPHIA_ENVIRONMENT",
      "SOURCE_NAMESPACE",
      "SPACE_ID",
      "SSL_ADMIN_EMAIL",
      "SYMPY_DEBUG",
      "SYMPY_TEST_CLEAN_TEMP",
      "SYMPY_TIMINGS",
      "SYMPY_USE_CACHE",
      "TERM",
      "TEST_MYPYC",
      "TORCHELASTIC_RUN_ID",
      "TORCH_DIST_INIT_BARRIER",
      "TORCH_FORCE_WEIGHTS_ONLY_LOAD",
      "TORCH_HOME",
      "TORCH_HUB",
      "TORCH_INDUCTOR_INSTALL_GXX",
      "TORCH_MODEL_ZOO",
      "TORCH_USE_RTLD_GLOBAL",
      "TQDM_DISCORD_CHANNEL_ID",
      "TQDM_DISCORD_TOKEN",
      "TQDM_POSITION",
      "TQDM_SLACK_CHANNEL",
      "TQDM_SLACK_TOKEN",
      "TQDM_TELEGRAM_CHAT_ID",
      "TQDM_TELEGRAM_TOKEN",
      "TRAINING_JOB_ARN",
      "TRANSFORMERS_CACHE",
      "TRANSFORMERS_NO_ADVISORY_WARNINGS",
      "TRANSFORMERS_USE_MULTIPROCESSING",
      "TRANSFORMERS_VERBOSITY",
      "TRITON_CACHE_DIR",
      "TW_JOB_USER",
      "USER",
      "USE_SYMENGINE",
      "USE_TF",
      "VALIDATE_PYPROJECT_NO_NETWORK",
      "VAR",
      "VERCEL_PROJECT_ID_SOPHIA_DEV",
      "VERSION",
      "VIRTUAL_ENV_PROMPT",
      "VITE_SENTRY_DSN",
      "WANDB_DISABLED",
      "WANDB_LOG_MODEL",
      "WANDB_PROJECT",
      "WANDB_WATCH",
      "WATCHFILES_CHANGES",
      "WATCHFILES_DEBUG",
      "WATCHFILES_FORCE_POLLING",
      "WATCHFILES_IGNORE_PERMISSION_DENIED",
      "WATCHFILES_POLL_DELAY_MS",
      "WAYLAND_DISPLAY",
      "WEBHOOK_BASE_URL",
      "WEBHOOK_DOMAIN",
      "WEBHOOK_HOST",
      "WEBHOOK_JWT_PRIVATE_KEY",
      "WEBHOOK_JWT_PUBLIC_KEY",
      "WEBHOOK_PORT",
      "WEBHOOK_SECRET",
      "WORD",
      "XDG_CACHE_HOME",
      "XDG_CONFIG_DIRS",
      "XDG_CONFIG_HOME",
      "XDG_DATA_DIRS",
      "XDG_DATA_HOME",
      "XDG_STATE_HOME",
      "YELLOW"
    ],
    "add_to_pulumi": [
      "AGNO_API_KEY",
      "ESTUARY_API_KEY",
      "AWS_ACCESS_KEY_ID",
      "AWS_IAM_ROLE_TO_ASSUME",
      "AWS_OIDC_ROLE_ARN",
      "AWS_SECRET_ACCESS_KEY",
      "AZURE_OIDC_CLIENT_ID",
      "AZURE_SUBSCRIPTION_ID",
      "AZURE_TENANT_ID",
      "DOCKER_USERNAME",
      "ESTUARY_API_KEY",
      "ESTUARY_API_URL",
      "GH_IP_ADDRESS",
      "GH_TOKEN",
      "GITHUB_PAT",
      "GITHUB_TOKEN",
      "GONG_ACCESS_KEY_SECRET",
      "GONG_API_KEY",
      "GONG_API_SECRET",
      "GONG_CLIENT_ID",
      "HUBSPOT_API_KEY",
      "HUBSPOT_API_TOKEN",
      "INTERCOM_ACCESS_TOKEN",
      "LAMBDA_IP_ADDRESS",
      "LAMBDA_LABS_API_KEY",
      "LLAMAINDEX_API_KEY",
      "LLAMAINDEX_OPENAI_API_KEY",
      "LLAMAINDEX_PINECONE_API_KEY",
      "LLAMAINDEX_WEAVIATE_API_KEY",
      "NAMECHEAP_API_KEY",
      "NAMECHEAP_API_USER",
      "NAMECHEAP_USERNAME",
      "PULUMI_ACCESS_TOKEN",
      "PULUMI_BACKEND_URL_DEV",
      "PULUMI_BACKEND_URL_PROD",
      "PULUMI_BACKEND_URL_STAGING",
      "PULUMI_CONFIG_PASSPHRASE",
      "PULUMI_IP_ADDRESS",
      "PULUMI_ORG",
      "SLACK_WEBHOOK",
      "SLACK_WEBHOOK_URL",
      "SNOWFLAKE_DATABASE",
      "SNOWFLAKE_PAT",
      "SNOWFLAKE_SCHEMA",
      "SNOWFLAKE_WAREHOUSE",
      "VERCEL_API_TOKEN",
      "VERCEL_ORG_ID",
      "VERCEL_PROJECT_ID",
      "VERCEL_PROJECT_ID_SOPHIA_PROD",
      "VERCEL_TEAM_ID",
      "VERCEL_TOKEN"
    ],
    "keep": [
      "ESTUARY_ACCESS_TOKEN",
      "ANTHROPIC_API_KEY",
      "APIFY_API_TOKEN",
      "ARIZE_API_KEY",
      "ARIZE_SPACE_ID",
      "CODESTRAL_API_KEY",
      "DATABASE_URL",
      "DEEPSEEK_API_KEY",
      "DOCKER_TOKEN",
      "ENCRYPTION_KEY",
      "GONG_ACCESS_KEY",
      "GONG_BASE_URL",
      "GONG_CLIENT_SECRET",
      "GRAFANA_PASSWORD",
      "GRAFANA_URL",
      "GRAFANA_USERNAME",
      "HUBSPOT_ACCESS_TOKEN",
      "HUGGINGFACE_API_TOKEN",
      "JWT_SECRET",
      "LANGCHAIN_API_KEY",
      "LINEAR_API_KEY",
      "LLAMA_API_KEY",
      "MISTRAL_API_KEY",
      "NOTION_API_KEY",
      "OPENAI_API_KEY",
      "OPENROUTER_API_KEY",
      "PINECONE_API_KEY",
      "PINECONE_ENVIRONMENT",
      "PINECONE_INDEX_NAME",
      "PORTKEY_API_KEY",
      "PROMETHEUS_URL",
      "SERP_API_KEY",
      "SLACK_APP_TOKEN",
      "SLACK_BOT_TOKEN",
      "SLACK_SIGNING_SECRET",
      "SNOWFLAKE_ACCOUNT",
      "SNOWFLAKE_PASSWORD",
      "SNOWFLAKE_ROLE",
      "SNOWFLAKE_USER",
      "TAVILY_API_KEY",
      "TOGETHERAI_API_KEY",
      "VENICE_AI_API_KEY",
      "VERCEL_ACCESS_TOKEN",
      "WEAVIATE_API_KEY",
      "WEAVIATE_URL",
      "XAI_API_KEY"
    ],
    "verify_usage": [
      "API_SECRET_KEY",
      "BRAVE_API_KEY",
      "ESTUARY_ACCESS_TOKEN",
      "EXA_API_KEY",
      "GH_API_TOKEN",
      "LAMBDA_API_KEY",
      "LANGSMITH_API_KEY",
      "NPM_API_TOKEN",
      "PERPLEXITY_API_KEY",
      "PIPEDREAM_API_KEY",
      "REDIS_URL",
      "RETOOL_API_TOKEN",
      "SALESFORCE_ACCESS_TOKEN",
      "SLACK_CLIENT_ID",
      "SLACK_CLIENT_SECRET",
      "VULTR_API_KEY",
      "WEAVIATE_GRPC_ENDPOINT",
      "WEAVIATE_REST_ENDPOINT",
      "ZENROWS_API_KEY"
    ]
  },
  "services": {
    "agent": [
      "AGENT_COMMUNICATION_SECRET",
      "AGENT_ORCHESTRATOR_AUTH_TOKEN"
    ],
    "agno": [
      "AGNO_API_KEY"
    ],
    "estuary": [
      "ESTUARY_ACCESS_TOKEN",
      "ESTUARY_API_KEY"
    ],
    "alert": [
      "ALERT_EMAIL"
    ],
    "android": [
      "ANDROID_DATA",
      "ANDROID_ROOT"
    ],
    "anthropic": [
      "ANTHROPIC_API_KEY"
    ],
    "apify": [
      "APIFY_API_TOKEN",
      "APIFY_WORKFLOW_KEY"
    ],
    "api": [
      "API_BASE_URL",
      "API_SECRET_KEY"
    ],
    "apollo": [
      "APOLLO_API_KEY",
      "APOLLO_IO_API_KEY"
    ],
    "arize": [
      "ARIZE_API_KEY",
      "ARIZE_SPACE_ID"
    ],
    "array": [
      "ARRAY_FUNCTION_LIKE"
    ],
    "arrow": [
      "ARROW_TOOLS_JAR"
    ],
    "asana": [
      "ASANA_ACCESS_TOKEN",
      "ASANA_WORKSPACE_GID"
    ],
    "asyncpg": [
      "ASYNCPG_DEBUG_SERVER"
    ],
    "authlib": [
      "AUTHLIB_INSECURE_TRANSPORT"
    ],
    "aws": [
      "AWS_ACCESS_KEY_ID",
      "AWS_IAM_ROLE_TO_ASSUME",
      "AWS_OIDC_ROLE_ARN",
      "AWS_REGION",
      "AWS_ROLE_ARN",
      "AWS_SECRET_ACCESS_KEY"
    ],
    "azure": [
      "AZURE_CLIENT_ID",
      "AZURE_LOCATION",
      "AZURE_OIDC_CLIENT_ID",
      "AZURE_SUBSCRIPTION_ID",
      "AZURE_TENANT_ID"
    ],
    "bash": [
      "BASH_VERSION"
    ],
    "benchmark": [
      "BENCHMARK_USE_DEV_SHM"
    ],
    "unknown": [
      "BLUE",
      "BRANCH",
      "CC",
      "CI",
      "DISPLAY",
      "DISTRIB",
      "ENVIRONMENT",
      "GREEN",
      "HOME",
      "KEY",
      "MYPYPATH",
      "NAMESPACE",
      "NC",
      "NUMERIX",
      "PANSEQ",
      "PATH",
      "PGDATABASE",
      "PGPASSFILE",
      "PGPASSWORD",
      "PGSSLCERT",
      "PGSSLCRL",
      "PGSSLKEY",
      "PGSSLMAXPROTOCOLVERSION",
      "PGSSLMINPROTOCOLVERSION",
      "PGSSLMODE",
      "PGSSLROOTCERT",
      "PGUSER",
      "PORT",
      "PREFIX",
      "PROTOCOL",
      "PWD",
      "PYTHONBREAKPOINT",
      "PYTHONHASHSEED",
      "PYTHONPATH",
      "RED",
      "REGION",
      "SERVICE",
      "SHELL",
      "TERM",
      "USER",
      "VAR",
      "VERSION",
      "WORD",
      "YELLOW"
    ],
    "brave": [
      "BRAVE_API_KEY"
    ],
    "build": [
      "BUILD_ENVIRONMENT"
    ],
    "buzz": [
      "BUZZ_API_KEY"
    ],
    "clearml": [
      "CLEARML_LOG_MODEL",
      "CLEARML_PROJECT",
      "CLEARML_TASK"
    ],
    "client": [
      "CLIENT_LOG_DIR_PATH_DOCKER"
    ],
    "codacy": [
      "CODACY_ACCOUNT_TOKEN",
      "CODACY_PROJECT_TOKEN"
    ],
    "codestral": [
      "CODESTRAL_API_KEY"
    ],
    "comet": [
      "COMET_LOG_ASSETS",
      "COMET_MODE",
      "COMET_OFFLINE_DIRECTORY",
      "COMET_PROJECT_NAME"
    ],
    "conda": [
      "CONDA_PREFIX"
    ],
    "consumer": [
      "CONSUMER_PROJECT"
    ],
    "costar": [
      "COSTAR_API_KEY"
    ],
    "coverage": [
      "COVERAGE_AST_DUMP",
      "COVERAGE_CORE",
      "COVERAGE_COVERAGE",
      "COVERAGE_DEBUG",
      "COVERAGE_DEBUG_CALLS",
      "COVERAGE_DEBUG_FILE",
      "COVERAGE_FILE",
      "COVERAGE_FORCE_CONFIG",
      "COVERAGE_PROCESS_START",
      "COVERAGE_PROFILE",
      "COVERAGE_RCFILE",
      "COVERAGE_SYSMON_LOG",
      "COVERAGE_SYSMON_STATS",
      "COVERAGE_TESTING",
      "COVERAGE_TRACK_ARCS"
    ],
    "cuda": [
      "CUDA_VISIBLE_DEVICES"
    ],
    "database": [
      "DATABASE_URL"
    ],
    "databricks": [
      "DATABRICKS_RUNTIME_VERSION"
    ],
    "debugpy": [
      "DEBUGPY_ADAPTER_ENDPOINTS",
      "DEBUGPY_ATTACH_BY_PID_DEBUG_INFO",
      "DEBUGPY_LOG_DIR",
      "DEBUGPY_LOG_STDERR",
      "DEBUGPY_PROCESS_EXIT_TIMEOUT",
      "DEBUGPY_PROCESS_SPAWN_TIMEOUT"
    ],
    "deepseek": [
      "DEEPSEEK_API_KEY"
    ],
    "disabled": [
      "DISABLED_TESTS_FILE"
    ],
    "disable": [
      "DISABLE_MLFLOW_INTEGRATION",
      "DISABLE_TELEMETRY"
    ],
    "distributed": [
      "DISTRIBUTED_TESTS_DEFAULT_TIMEOUT"
    ],
    "distutils": [
      "DISTUTILS_USE_SDK"
    ],
    "dist": [
      "DIST_EXTRA_CONFIG"
    ],
    "docker": [
      "DOCKER_IMAGE",
      "DOCKER_PERSONAL_ACCESS_TOKEN",
      "DOCKER_TOKEN",
      "DOCKER_USERNAME",
      "DOCKER_USER_NAME"
    ],
    "elise": [
      "ELISE_AI_API_KEY"
    ],
    "encryption": [
      "ENCRYPTION_KEY"
    ],
    "esc": [
      "ESC_APIFY_API_TOKEN",
      "ESC_ARIZE_API_KEY",
      "ESC_ARIZE_SPACE_ID",
      "ESC_CODACY_ACCOUNT_TOKEN",
      "ESC_CODACY_PROJECT_TOKEN",
      "ESC_DOCKER_TOKEN",
      "ESC_DOCKER_USERNAME",
      "ESC_DOCKER_USER_NAME",
      "ESC_HUGGINGFACE_API_TOKEN",
      "ESC_LOOKER_API_KEY",
      "ESC_MIXPANEL_API_KEY",
      "ESC_OPENROUTER_API_KEY",
      "ESC_PHANTOM_BUSTER_API_KEY",
      "ESC_PORTKEY_API_KEY",
      "ESC_PORTKEY_CONFIG",
      "ESC_PULUMI_ACCESS_TOKEN",
      "ESC_TAVILY_API_KEY",
      "ESC_TOGETHER_AI_API_KEY",
      "ESC_TWINGLY_API_KEY",
      "ESC_ZENROWS_API_KEY"
    ],
    "lambda_labs": [
      "ESC_LAMBDA_LABS_API_KEY",
      "LAMBDA_API_KEY",
      "LAMBDA_IP_ADDRESS",
      "LAMBDA_LABS_API_KEY",
      "LAMBDA_LABS_CONTEXT",
      "LAMBDA_LABS_CONTROL_PLANE_IP",
      "LAMBDA_LABS_SSH_KEY_NAME"
    ],
    "pinecone": [
      "ESC_PINECONE_API_KEY",
      "LLAMAINDEX_PINECONE_API_KEY",
      "PINECONE_ADDITIONAL_HEADERS",
      "PINECONE_API_KEY",
      "PINECONE_CONTROLLER_HOST",
      "PINECONE_DEBUG",
      "PINECONE_ENVIRONMENT",
      "PINECONE_INDEX_NAME",
      "PINECONE_MAX_ID_LENGTH",
      "PINECONE_PLUGIN_ASSISTANT_CONTROL_HOST",
      "PINECONE_PLUGIN_ASSISTANT_DATA_HOST"
    ],
    "snowflake": [
      "ESC_SNOWFLAKE_ACCOUNT",
      "ESC_SNOWFLAKE_DATABASE",
      "ESC_SNOWFLAKE_PASSWORD",
      "ESC_SNOWFLAKE_SCHEMA",
      "ESC_SNOWFLAKE_USER",
      "ESC_SNOWFLAKE_WAREHOUSE",
      "SNOWFLAKE_ACCOUNT",
      "SNOWFLAKE_CONNECTION",
      "SNOWFLAKE_DATABASE",
      "SNOWFLAKE_DEV_ACCOUNT",
      "SNOWFLAKE_DEV_DATABASE",
      "SNOWFLAKE_DEV_PASSWORD",
      "SNOWFLAKE_DEV_PAT",
      "SNOWFLAKE_DEV_ROLE",
      "SNOWFLAKE_DEV_SCHEMA",
      "SNOWFLAKE_DEV_USER",
      "SNOWFLAKE_DEV_WAREHOUSE",
      "SNOWFLAKE_OAUTH_CLIENT_ID",
      "SNOWFLAKE_OAUTH_CLIENT_SECRET",
      "SNOWFLAKE_OAUTH_REFRESH_TOKEN",
      "SNOWFLAKE_PASSWORD",
      "SNOWFLAKE_PAT",
      "SNOWFLAKE_PROD_ACCOUNT",
      "SNOWFLAKE_PROD_DATABASE",
      "SNOWFLAKE_PROD_PASSWORD",
      "SNOWFLAKE_PROD_PAT",
      "SNOWFLAKE_PROD_ROLE",
      "SNOWFLAKE_PROD_SCHEMA",
      "SNOWFLAKE_PROD_USER",
      "SNOWFLAKE_PROD_WAREHOUSE",
      "SNOWFLAKE_ROLE",
      "SNOWFLAKE_SCHEMA",
      "SNOWFLAKE_STG_ACCOUNT",
      "SNOWFLAKE_STG_DATABASE",
      "SNOWFLAKE_STG_PASSWORD",
      "SNOWFLAKE_STG_PAT",
      "SNOWFLAKE_STG_ROLE",
      "SNOWFLAKE_STG_SCHEMA",
      "SNOWFLAKE_STG_USER",
      "SNOWFLAKE_STG_WAREHOUSE",
      "SNOWFLAKE_USER",
      "SNOWFLAKE_WAREHOUSE"
    ],
    "estuary": [
      "ESTUARY_ACCESS_TOKEN",
      "ESTUARY_API_KEY",
      "ESTUARY_API_URL"
    ],
    "exa": [
      "EXA_API_KEY"
    ],
    "fdcpa": [
      "FDCPA_CHECKER_KEY"
    ],
    "force": [
      "FORCE_COLOR"
    ],
    "gcp": [
      "GCP_OIDC_SERVICE_ACCOUNT"
    ],
    "gh": [
      "GH_API_TOKEN",
      "GH_IP_ADDRESS",
      "GH_TOKEN"
    ],
    "github": [
      "GITHUB_ACTIONS",
      "GITHUB_PAT",
      "GITHUB_REPOSITORY",
      "GITHUB_RUN_ID",
      "GITHUB_TOKEN",
      "GITHUB_WORKFLOW"
    ],
    "git": [
      "GIT_DIR",
      "GIT_WORK_TREE"
    ],
    "glba": [
      "GLBA_MONITOR_KEY"
    ],
    "gong": [
      "GONG_ACCESS_KEY",
      "GONG_ACCESS_KEY_SECRET",
      "GONG_API_KEY",
      "GONG_API_SECRET",
      "GONG_BASE_URL",
      "GONG_CLIENT_ID",
      "GONG_CLIENT_SECRET",
      "GONG_OAUTH_CLIENT_ID",
      "GONG_OAUTH_CLIENT_SECRET",
      "GONG_OAUTH_REFRESH_TOKEN",
      "GONG_WEBHOOK_SECRET"
    ],
    "grafana": [
      "GRAFANA_ADMIN_PASSWORD",
      "GRAFANA_PASSWORD",
      "GRAFANA_URL",
      "GRAFANA_USERNAME"
    ],
    "grpc": [
      "GRPC_SINGLE_THREADED_UNARY_STREAM"
    ],
    "hf": [
      "HF_DAGSHUB_LOG_ARTIFACTS",
      "HF_DAGSHUB_MODEL_NAME",
      "HF_ENDPOINT",
      "HF_HOME",
      "HF_HUB_VERBOSITY",
      "HF_MLFLOW_LOG_ARTIFACTS",
      "HF_MODULES_CACHE",
      "HF_XET_CACHE"
    ],
    "https": [
      "HTTPS_PROXY"
    ],
    "hubspot": [
      "HUBSPOT_ACCESS_TOKEN",
      "HUBSPOT_API_KEY",
      "HUBSPOT_API_TOKEN"
    ],
    "huggingface": [
      "HUGGINGFACE_API_TOKEN",
      "HUGGINGFACE_ASSETS_CACHE",
      "HUGGINGFACE_HUB_CACHE"
    ],
    "hunter": [
      "HUNTER_WARFIELD_KEY"
    ],
    "iana": [
      "IANA_TIME_ZONE"
    ],
    "ide": [
      "IDE_PROJECT_ROOTS"
    ],
    "init": [
      "INIT_METHOD"
    ],
    "intercom": [
      "INTERCOM_ACCESS_TOKEN"
    ],
    "jenkins": [
      "JENKINS_HOME"
    ],
    "jsonschema": [
      "JSONSCHEMA_DEBUG_CODE_GENERATION"
    ],
    "jwt": [
      "JWT_LIFETIME_IN_SECONDS",
      "JWT_SECRET"
    ],
    "kubernetes": [
      "KUBERNETES_SERVICE_HOST"
    ],
    "langchain": [
      "LANGCHAIN_API_KEY"
    ],
    "langsmith": [
      "LANGSMITH_API_KEY"
    ],
    "ld": [
      "LD_PRELOAD"
    ],
    "library": [
      "LIBRARY_ROOTS"
    ],
    "linear": [
      "LINEAR_API_KEY"
    ],
    "linkedin": [
      "LINKEDIN_API_KEY",
      "LINKEDIN_SALES_NAV_KEY"
    ],
    "llamaindex": [
      "LLAMAINDEX_API_KEY",
      "LLAMAINDEX_WEAVIATE_API_KEY"
    ],
    "openai": [
      "LLAMAINDEX_OPENAI_API_KEY",
      "OPENAI_API_KEY"
    ],
    "llama": [
      "LLAMA_API_KEY"
    ],
    "llm": [
      "LLM_GATEWAY_API_KEY"
    ],
    "log": [
      "LOG_LEVEL"
    ],
    "market": [
      "MARKET_ANALYSIS_KEY"
    ],
    "mcp": [
      "MCP_DOCKER_REGISTRY_TOKEN",
      "MCP_GATEWAY_URL",
      "MCP_GITHUB_TOKEN",
      "MCP_LINEAR_TOKEN",
      "MCP_POSTGRES_CONNECTION_STRING"
    ],
    "slack": [
      "MCP_SLACK_TOKEN",
      "SLACK_APP_TOKEN",
      "SLACK_BOT_TOKEN",
      "SLACK_CLIENT_ID",
      "SLACK_CLIENT_SECRET",
      "SLACK_SIGNING_SECRET",
      "SLACK_TOKEN",
      "SLACK_WEBHOOK",
      "SLACK_WEBHOOK_URL",
      "TQDM_SLACK_CHANNEL",
      "TQDM_SLACK_TOKEN"
    ],
    "min": [
      "MIN_PWD_LEN",
      "MIN_TOKEN_LEN"
    ],
    "mistral": [
      "MISTRAL_API_KEY"
    ],
    "mlflow": [
      "MLFLOW_EXPERIMENT_NAME",
      "MLFLOW_FLATTEN_PARAMS",
      "MLFLOW_NESTED_RUN",
      "MLFLOW_RUN_ID",
      "MLFLOW_TAGS",
      "MLFLOW_TRACKING_URI"
    ],
    "mypyc": [
      "MYPYC_DEBUG_LEVEL",
      "MYPYC_OPT_LEVEL",
      "MYPYC_STRICT_DUNDER_TYPING"
    ],
    "mypy": [
      "MYPY_CACHE_DIR",
      "MYPY_FORCE_COLOR",
      "MYPY_FORCE_TERMINAL_WIDTH",
      "MYPY_TEST_PREFIX"
    ],
    "namecheap": [
      "NAMECHEAP_API_KEY",
      "NAMECHEAP_API_USER",
      "NAMECHEAP_USERNAME"
    ],
    "network": [
      "NETWORK_ATTACHMENT_NAME"
    ],
    "node": [
      "NODE_ENV"
    ],
    "notion": [
      "NOTION_ACCESS_TOKEN",
      "NOTION_API_KEY"
    ],
    "no": [
      "NO_NETWORK"
    ],
    "npm": [
      "NPM_API_TOKEN"
    ],
    "numpy": [
      "NUMPY_INCLUDE",
      "NUMPY_WARN_IF_NO_MEM_POLICY"
    ],
    "num": [
      "NUM_PARALLEL_PROCS"
    ],
    "nvtoolsext": [
      "NVTOOLSEXT_PATH"
    ],
    "ocsp": [
      "OCSP_MAX_RETRY"
    ],
    "omp": [
      "OMP_NUM_THREADS",
      "OMP_PREFIX"
    ],
    "openrouter": [
      "OPENROUTER_API_KEY"
    ],
    "output": [
      "OUTPUT_FILE"
    ],
    "parameter": [
      "PARAMETER_NAME"
    ],
    "pci": [
      "PCI_DSS_KEY"
    ],
    "perplexity": [
      "PERPLEXITY_API_KEY"
    ],
    "phoenix": [
      "PHOENIX_ENABLE_WEBSOCKETS"
    ],
    "pipedream": [
      "PIPEDREAM_API_KEY"
    ],
    "platform": [
      "PLATFORM_ENVIRONMENT",
      "PLATFORM_NAME",
      "PLATFORM_VERSION"
    ],
    "portkey": [
      "PORTKEY_API_KEY",
      "PORTKEY_VIRTUAL_KEY_PROD"
    ],
    "pre": [
      "PRE_COMMIT_ALLOW_NO_CONFIG"
    ],
    "prima": [
      "PRIMA_DEBUGGING"
    ],
    "project": [
      "PROJECT_ROOT"
    ],
    "prometheus": [
      "PROMETHEUS_AUTH_TOKEN",
      "PROMETHEUS_URL"
    ],
    "protocol": [
      "PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION"
    ],
    "psutil": [
      "PSUTIL_DEBUG"
    ],
    "pulumi": [
      "PULUMI_ACCESS_TOKEN",
      "PULUMI_BACKEND_URL_DEV",
      "PULUMI_BACKEND_URL_PROD",
      "PULUMI_BACKEND_URL_STAGING",
      "PULUMI_COMMAND",
      "PULUMI_CONFIG",
      "PULUMI_CONFIG_PASSPHRASE",
      "PULUMI_ENABLE_LEGACY_APPLY",
      "PULUMI_ERROR_OUTPUT_STRING",
      "PULUMI_IP_ADDRESS",
      "PULUMI_ORG",
      "PULUMI_ORGANIZATION",
      "PULUMI_PROJECT",
      "PULUMI_STACK",
      "PULUMI_TOKEN_SECRET"
    ],
    "pydantic": [
      "PYDANTIC_DISABLE_PLUGINS",
      "PYDANTIC_PRIVATE_ALLOW_UNHANDLED_SCHEMA_TYPES",
      "PYDANTIC_VALIDATE_CORE_SCHEMAS"
    ],
    "pydevd": [
      "PYDEVD_APPLY_PATCHING_TO_HIDE_PYDEVD_THREADS",
      "PYDEVD_DEBUG_FILE",
      "PYDEVD_FILTERS",
      "PYDEVD_IPYTHON_CONTEXT",
      "PYDEVD_LOAD_NATIVE_LIB",
      "PYDEVD_LOG_TIME",
      "PYDEVD_PYQT_MODE",
      "PYDEVD_USE_CYTHON",
      "PYDEVD_USE_FRAME_EVAL",
      "PYDEVD_USE_SYS_MONITORING"
    ],
    "pytest": [
      "PYTEST_CURRENT_TEST",
      "PYTEST_THEME",
      "PYTEST_THEME_MODE"
    ],
    "python": [
      "PYTHON_EXEC",
      "PYTHON_HOME",
      "PYTHON_INCLUDE",
      "PYTHON_VERSION"
    ],
    "pytorch": [
      "PYTORCH_CUDA_MEMCHECK",
      "PYTORCH_ENABLE_MPS_FALLBACK",
      "PYTORCH_HYPOTHESIS_PROFILE",
      "PYTORCH_KEEP_TMPDIR",
      "PYTORCH_NVCC",
      "PYTORCH_NVML_BASED_CUDA_CHECK",
      "PYTORCH_PRETRAINED_BERT_CACHE",
      "PYTORCH_TEST_WITH_TV",
      "PYTORCH_TRANSFORMERS_CACHE"
    ],
    "py": [
      "PY_IGNORE_IMPORTMISMATCH"
    ],
    "react": [
      "REACT_APP_API_KEY",
      "REACT_APP_API_URL",
      "REACT_APP_ENVIRONMENT",
      "REACT_APP_WS_URL"
    ],
    "redis": [
      "REDIS_CLUSTER_PASSWORD",
      "REDIS_URL"
    ],
    "retool": [
      "RETOOL_API_TOKEN"
    ],
    "runner": [
      "RUNNER_OS"
    ],
    "run": [
      "RUN_SLOW"
    ],
    "salesforce": [
      "SALESFORCE_ACCESS_TOKEN"
    ],
    "scipy": [
      "SCIPY_DEFAULT_DTYPE",
      "SCIPY_XFAIL",
      "SCIPY_XSLOW"
    ],
    "script": [
      "SCRIPT_DIR"
    ],
    "sentence": [
      "SENTENCE_TRANSFORMERS_HOME"
    ],
    "sentry": [
      "SENTRY_DSN"
    ],
    "serp": [
      "SERP_API_KEY"
    ],
    "service": [
      "SERVICE_NAME"
    ],
    "setuptools": [
      "SETUPTOOLS_ENABLE_FEATURES",
      "SETUPTOOLS_EXT_SUFFIX"
    ],
    "sf": [
      "SF_AUTH_SOCKET_ADDR",
      "SF_AUTH_SOCKET_PORT",
      "SF_OCSP_ACTIVATE_NEW_ENDPOINT",
      "SF_OCSP_DO_RETRY",
      "SF_OCSP_FAIL_OPEN",
      "SF_OCSP_RESPONSE_CACHE_DIR",
      "SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED",
      "SF_OCSP_RESPONSE_CACHE_SERVER_URL",
      "SF_OCSP_TEST_MODE",
      "SF_TEST_OCSP_CACHE_SERVER_URL",
      "SF_TEST_OCSP_CERT_STATUS",
      "SF_TEST_OCSP_FORCE_BAD_RESPONSE_VALIDITY",
      "SF_TEST_OCSP_URL"
    ],
    "sklearn": [
      "SKLEARN_SKIP_OPENMP_TEST"
    ],
    "slow": [
      "SLOW_TESTS_FILE"
    ],
    "smdataparallel": [
      "SMDATAPARALLEL_LOCAL_RANK"
    ],
    "sm": [
      "SM_FRAMEWORK_MODULE",
      "SM_FRAMEWORK_PARAMS",
      "SM_HP_MP_PARAMETERS",
      "SM_NUM_CPUS",
      "SM_NUM_GPUS"
    ],
    "sophia": [
      "SOPHIA_ENVIRONMENT"
    ],
    "source": [
      "SOURCE_NAMESPACE"
    ],
    "space": [
      "SPACE_ID"
    ],
    "ssl": [
      "SSL_ADMIN_EMAIL"
    ],
    "sympy": [
      "SYMPY_DEBUG",
      "SYMPY_TEST_CLEAN_TEMP",
      "SYMPY_TIMINGS",
      "SYMPY_USE_CACHE"
    ],
    "tavily": [
      "TAVILY_API_KEY"
    ],
    "test": [
      "TEST_MYPYC"
    ],
    "togetherai": [
      "TOGETHERAI_API_KEY"
    ],
    "torchelastic": [
      "TORCHELASTIC_RUN_ID"
    ],
    "torch": [
      "TORCH_DIST_INIT_BARRIER",
      "TORCH_FORCE_WEIGHTS_ONLY_LOAD",
      "TORCH_HOME",
      "TORCH_HUB",
      "TORCH_INDUCTOR_INSTALL_GXX",
      "TORCH_MODEL_ZOO",
      "TORCH_USE_RTLD_GLOBAL"
    ],
    "tqdm": [
      "TQDM_DISCORD_CHANNEL_ID",
      "TQDM_DISCORD_TOKEN",
      "TQDM_POSITION",
      "TQDM_TELEGRAM_CHAT_ID",
      "TQDM_TELEGRAM_TOKEN"
    ],
    "training": [
      "TRAINING_JOB_ARN"
    ],
    "transformers": [
      "TRANSFORMERS_CACHE",
      "TRANSFORMERS_NO_ADVISORY_WARNINGS",
      "TRANSFORMERS_USE_MULTIPROCESSING",
      "TRANSFORMERS_VERBOSITY"
    ],
    "triton": [
      "TRITON_CACHE_DIR"
    ],
    "tw": [
      "TW_JOB_USER"
    ],
    "use": [
      "USE_SYMENGINE",
      "USE_TF"
    ],
    "validate": [
      "VALIDATE_PYPROJECT_NO_NETWORK"
    ],
    "venice": [
      "VENICE_AI_API_KEY"
    ],
    "vercel": [
      "VERCEL_ACCESS_TOKEN",
      "VERCEL_API_TOKEN",
      "VERCEL_ORG_ID",
      "VERCEL_PROJECT_ID",
      "VERCEL_PROJECT_ID_SOPHIA_DEV",
      "VERCEL_PROJECT_ID_SOPHIA_PROD",
      "VERCEL_TEAM_ID",
      "VERCEL_TOKEN"
    ],
    "virtual": [
      "VIRTUAL_ENV_PROMPT"
    ],
    "vite": [
      "VITE_SENTRY_DSN"
    ],
    "vultr": [
      "VULTR_API_KEY"
    ],
    "wandb": [
      "WANDB_DISABLED",
      "WANDB_LOG_MODEL",
      "WANDB_PROJECT",
      "WANDB_WATCH"
    ],
    "watchfiles": [
      "WATCHFILES_CHANGES",
      "WATCHFILES_DEBUG",
      "WATCHFILES_FORCE_POLLING",
      "WATCHFILES_IGNORE_PERMISSION_DENIED",
      "WATCHFILES_POLL_DELAY_MS"
    ],
    "wayland": [
      "WAYLAND_DISPLAY"
    ],
    "weaviate": [
      "WEAVIATE_API_KEY",
      "WEAVIATE_GRPC_ENDPOINT",
      "WEAVIATE_REST_ENDPOINT",
      "WEAVIATE_URL"
    ],
    "webhook": [
      "WEBHOOK_BASE_URL",
      "WEBHOOK_DOMAIN",
      "WEBHOOK_HOST",
      "WEBHOOK_JWT_PRIVATE_KEY",
      "WEBHOOK_JWT_PUBLIC_KEY",
      "WEBHOOK_PORT",
      "WEBHOOK_SECRET"
    ],
    "xai": [
      "XAI_API_KEY"
    ],
    "xdg": [
      "XDG_CACHE_HOME",
      "XDG_CONFIG_DIRS",
      "XDG_CONFIG_HOME",
      "XDG_DATA_DIRS",
      "XDG_DATA_HOME",
      "XDG_STATE_HOME"
    ],
    "zenrows": [
      "ZENROWS_API_KEY"
    ]
  },
  "detailed_analysis": [
    {
      "current_name": "AGENT_COMMUNICATION_SECRET",
      "recommended_name": "AGENT_COMMUNICATION_SECRET",
      "service": "agent",
      "credential_type": "COMMUNICATION_SECRET",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 135,
          "context": "fn::secret: \"${AGENT_COMMUNICATION_SECRET}\"",
          "secret_name": "AGENT_COMMUNICATION_SECRET",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 105,
          "context": "agent-communication-secret: \"${AGENT_COMMUNICATION_SECRET}\"",
          "secret_name": "AGENT_COMMUNICATION_SECRET",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "AGENT_ORCHESTRATOR_AUTH_TOKEN",
      "recommended_name": "AGENT_ORCHESTRATOR_AUTH_TOKEN",
      "service": "agent",
      "credential_type": "ORCHESTRATOR_AUTH_TOKEN",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 96,
          "context": "fn::secret: \"${AGENT_ORCHESTRATOR_AUTH_TOKEN}\"",
          "secret_name": "AGENT_ORCHESTRATOR_AUTH_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 104,
          "context": "agent-orchestrator-auth-token: \"${AGENT_ORCHESTRATOR_AUTH_TOKEN}\"",
          "secret_name": "AGENT_ORCHESTRATOR_AUTH_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "AGNO_API_KEY",
      "recommended_name": "AGNO_API_KEY",
      "service": "agno",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 73,
          "context": "AGNO_API_KEY=${{ secrets.AGNO_API_KEY }}",
          "secret_name": "AGNO_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "docker-compose.yml",
          "line_number": 267,
          "context": "#       - AGNO_API_KEY=${AGNO_API_KEY}",
          "secret_name": "AGNO_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 12,
          "context": "#     fn::secret: \"${AGNO_API_KEY}\"  # REMOVED: Agno framework deprecated",
          "secret_name": "AGNO_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "ESTUARY_ACCESS_TOKEN",
      "recommended_name": "ESTUARY_ACCESS_TOKEN",
      "service": "estuary",
      "credential_type": "ACCESS_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 125,
          "context": "ESTUARY_ACCESS_TOKEN: ${{ secrets.ESTUARY_ACCESS_TOKEN }}",
          "secret_name": "ESTUARY_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 153,
          "context": "ESTUARY_ACCESS_TOKEN: ${{ secrets.ESTUARY_ACCESS_TOKEN }}",
          "secret_name": "ESTUARY_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 118,
          "context": "\"ESTUARY_ACCESS_TOKEN\": \"values.sophia.integration.estuary.access_token\",",
          "secret_name": "ESTUARY_ACCESS_TOKEN",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "ESTUARY_API_KEY",
      "recommended_name": "ESTUARY_API_KEY",
      "service": "estuary",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 69,
          "context": "ESTUARY_API_KEY=${{ secrets.ESTUARY_API_KEY }}",
          "secret_name": "ESTUARY_API_KEY",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "ALERT_EMAIL",
      "recommended_name": "ALERT_EMAIL",
      "service": "alert",
      "credential_type": "EMAIL",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-intelligence-platform.yaml",
          "line_number": 110,
          "context": "fn::secret: \"${ALERT_EMAIL}\"",
          "secret_name": "ALERT_EMAIL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ANDROID_DATA",
      "recommended_name": "ANDROID_DATA",
      "service": "android",
      "credential_type": "DATA",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pip/_vendor/platformdirs/__init__.py",
          "line_number": 31,
          "context": "if os.getenv(\"ANDROID_DATA\") == \"/data\" and os.getenv(\"ANDROID_ROOT\") == \"/system\":",
          "secret_name": "ANDROID_DATA",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/platformdirs/__init__.py",
          "line_number": 32,
          "context": "if os.getenv(\"ANDROID_DATA\") == \"/data\" and os.getenv(\"ANDROID_ROOT\") == \"/system\":",
          "secret_name": "ANDROID_DATA",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ANDROID_ROOT",
      "recommended_name": "ANDROID_ROOT",
      "service": "android",
      "credential_type": "ROOT",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pip/_vendor/platformdirs/__init__.py",
          "line_number": 31,
          "context": "if os.getenv(\"ANDROID_DATA\") == \"/data\" and os.getenv(\"ANDROID_ROOT\") == \"/system\":",
          "secret_name": "ANDROID_ROOT",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/platformdirs/__init__.py",
          "line_number": 32,
          "context": "if os.getenv(\"ANDROID_DATA\") == \"/data\" and os.getenv(\"ANDROID_ROOT\") == \"/system\":",
          "secret_name": "ANDROID_ROOT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ANTHROPIC_API_KEY",
      "recommended_name": "ANTHROPIC_API_KEY",
      "service": "anthropic",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 51,
          "context": "ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}",
          "secret_name": "ANTHROPIC_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_secrets_export.yml",
          "line_number": 26,
          "context": "ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}",
          "secret_name": "ANTHROPIC_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/enhanced-deployment-oversight.yml",
          "line_number": 34,
          "context": "ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}",
          "secret_name": "ANTHROPIC_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/production_deployment.yml",
          "line_number": 45,
          "context": "ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}",
          "secret_name": "ANTHROPIC_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 140,
          "context": "ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}",
          "secret_name": "ANTHROPIC_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 59,
          "context": "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}",
          "secret_name": "ANTHROPIC_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 44,
          "context": "\"ANTHROPIC_API_KEY\": \"values.sophia.ai.anthropic.api_key\",",
          "secret_name": "ANTHROPIC_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 26,
          "context": "fn::secret: \"${ANTHROPIC_API_KEY}\"",
          "secret_name": "ANTHROPIC_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 115,
          "context": "anthropic-api-key: \"${ANTHROPIC_API_KEY}\"",
          "secret_name": "ANTHROPIC_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "APIFY_API_TOKEN",
      "recommended_name": "APIFY_API_TOKEN",
      "service": "apify",
      "credential_type": "API_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 111,
          "context": "APIFY_API_TOKEN: ${{ secrets.APIFY_API_TOKEN }}",
          "secret_name": "APIFY_API_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 104,
          "context": "\"APIFY_API_TOKEN\": \"values.sophia.research.apify.api_token\",",
          "secret_name": "APIFY_API_TOKEN",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 77,
          "context": "fn::secret: \"${APIFY_API_TOKEN}\"",
          "secret_name": "APIFY_API_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "APIFY_WORKFLOW_KEY",
      "recommended_name": "APIFY_WORKFLOW_KEY",
      "service": "apify",
      "credential_type": "WORKFLOW_KEY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/apify_client/_http_client.py",
          "line_number": 45,
          "context": "workflow_key = os.getenv('APIFY_WORKFLOW_KEY')",
          "secret_name": "APIFY_WORKFLOW_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "API_BASE_URL",
      "recommended_name": "API_BASE_URL",
      "service": "api",
      "credential_type": "BASE_URL",
      "references": [
        {
          "file_path": "frontend/src/services/api_v1.js",
          "line_number": 31,
          "context": "const url = `${API_BASE_URL}${endpoint}`;",
          "secret_name": "API_BASE_URL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "API_SECRET_KEY",
      "recommended_name": "API_SECRET_KEY",
      "service": "api",
      "credential_type": "SECRET_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 132,
          "context": "API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}",
          "secret_name": "API_SECRET_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 125,
          "context": "\"API_SECRET_KEY\": \"values.sophia.security.api.secret_key\",",
          "secret_name": "API_SECRET_KEY",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    },
    {
      "current_name": "APOLLO_API_KEY",
      "recommended_name": "APOLLO_API_KEY",
      "service": "apollo",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": "docker-compose.payready-production.yml",
          "line_number": 37,
          "context": "- APOLLO_API_KEY=${APOLLO_API_KEY}",
          "secret_name": "APOLLO_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.payready-production.yml",
          "line_number": 111,
          "context": "- APOLLO_API_KEY=${APOLLO_API_KEY}",
          "secret_name": "APOLLO_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "APOLLO_IO_API_KEY",
      "recommended_name": "APOLLO_IO_API_KEY",
      "service": "apollo",
      "credential_type": "IO_API_KEY",
      "references": [
        {
          "file_path": "docs/SOPHIA_AI_DASHBOARD_STANDARDIZATION_IMPLEMENTATION.md",
          "line_number": 109,
          "context": "apollo_io: ${APOLLO_IO_API_KEY}",
          "secret_name": "APOLLO_IO_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ARIZE_API_KEY",
      "recommended_name": "ARIZE_API_KEY",
      "service": "arize",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 98,
          "context": "ARIZE_API_KEY: ${{ secrets.ARIZE_API_KEY }}",
          "secret_name": "ARIZE_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 91,
          "context": "\"ARIZE_API_KEY\": \"values.sophia.monitoring.arize.api_key\",",
          "secret_name": "ARIZE_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 175,
          "context": "fn::secret: \"${ARIZE_API_KEY}\"",
          "secret_name": "ARIZE_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 35,
          "context": "fn::secret: \"${ARIZE_API_KEY}\"",
          "secret_name": "ARIZE_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 116,
          "context": "arize-api-key: \"${ARIZE_API_KEY}\"",
          "secret_name": "ARIZE_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 195,
          "context": "arize-api-key: \"${ARIZE_API_KEY}\"",
          "secret_name": "ARIZE_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "ARIZE_SPACE_ID",
      "recommended_name": "ARIZE_SPACE_ID",
      "service": "arize",
      "credential_type": "SPACE_ID",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 99,
          "context": "ARIZE_SPACE_ID: ${{ secrets.ARIZE_SPACE_ID }}",
          "secret_name": "ARIZE_SPACE_ID",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 92,
          "context": "\"ARIZE_SPACE_ID\": \"values.sophia.monitoring.arize.space_id\",",
          "secret_name": "ARIZE_SPACE_ID",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 177,
          "context": "fn::secret: \"${ARIZE_SPACE_ID}\"",
          "secret_name": "ARIZE_SPACE_ID",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 37,
          "context": "fn::secret: \"${ARIZE_SPACE_ID}\"",
          "secret_name": "ARIZE_SPACE_ID",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 196,
          "context": "arize-space-id: \"${ARIZE_SPACE_ID}\"",
          "secret_name": "ARIZE_SPACE_ID",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "ARRAY_FUNCTION_LIKE",
      "recommended_name": "ARRAY_FUNCTION_LIKE",
      "service": "array",
      "credential_type": "FUNCTION_LIKE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 839,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 909,
          "context": "\"${ARRAY_FUNCTION_LIKE}\",",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 934,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 990,
          "context": "\"${ARRAY_FUNCTION_LIKE}\",",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1015,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1053,
          "context": "\"${ARRAY_FUNCTION_LIKE}\",",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1069,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1118,
          "context": "\"${ARRAY_FUNCTION_LIKE}\",",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1134,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1183,
          "context": "\"${ARRAY_FUNCTION_LIKE}\",",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1204,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1240,
          "context": "\"${ARRAY_FUNCTION_LIKE}\",",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1275,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1313,
          "context": "\"${ARRAY_FUNCTION_LIKE}\",",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1360,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1387,
          "context": "\"${ARRAY_FUNCTION_LIKE}\",",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1448,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1481,
          "context": "\"${ARRAY_FUNCTION_LIKE}\",",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1526,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1576,
          "context": "\"${ARRAY_FUNCTION_LIKE}\",",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1596,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1638,
          "context": "\"${ARRAY_FUNCTION_LIKE}\",",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1732,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_add_newdocs.py",
          "line_number": 1798,
          "context": "\"${ARRAY_FUNCTION_LIKE}\",",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/_asarray.py",
          "line_number": 53,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/overrides.py",
          "line_number": 26,
          "context": "\"${ARRAY_FUNCTION_LIKE}\",",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/numeric.py",
          "line_number": 153,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/numeric.py",
          "line_number": 292,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/numeric.py",
          "line_number": 1799,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/numeric.py",
          "line_number": 2138,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/lib/twodim_base.py",
          "line_number": 181,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/lib/twodim_base.py",
          "line_number": 385,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/lib/npyio.py",
          "line_number": 1196,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/lib/npyio.py",
          "line_number": 1855,
          "context": "${ARRAY_FUNCTION_LIKE}",
          "secret_name": "ARRAY_FUNCTION_LIKE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ARROW_TOOLS_JAR",
      "recommended_name": "ARROW_TOOLS_JAR",
      "service": "arrow",
      "credential_type": "TOOLS_JAR",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pyarrow/tests/test_jvm.py",
          "line_number": 47,
          "context": "jar_path = os.getenv(\"ARROW_TOOLS_JAR\", jar_path)",
          "secret_name": "ARROW_TOOLS_JAR",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ASANA_ACCESS_TOKEN",
      "recommended_name": "ASANA_ACCESS_TOKEN",
      "service": "asana",
      "credential_type": "ACCESS_TOKEN",
      "references": [
        {
          "file_path": "mcp-servers/asana/asana_mcp_server.py",
          "line_number": 37,
          "context": "self.access_token = os.getenv(\"ASANA_ACCESS_TOKEN\")",
          "secret_name": "ASANA_ACCESS_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.mcp-gateway.yml",
          "line_number": 128,
          "context": "- ASANA_ACCESS_TOKEN=${ASANA_ACCESS_TOKEN}",
          "secret_name": "ASANA_ACCESS_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docs/ASANA_NOTION_MCP_INTEGRATION.md",
          "line_number": 94,
          "context": "- ASANA_ACCESS_TOKEN=${ASANA_ACCESS_TOKEN}",
          "secret_name": "ASANA_ACCESS_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ASANA_WORKSPACE_GID",
      "recommended_name": "ASANA_WORKSPACE_GID",
      "service": "asana",
      "credential_type": "WORKSPACE_GID",
      "references": [
        {
          "file_path": "mcp-servers/asana/asana_mcp_server.py",
          "line_number": 38,
          "context": "self.workspace_gid = os.getenv(\"ASANA_WORKSPACE_GID\")",
          "secret_name": "ASANA_WORKSPACE_GID",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.mcp-gateway.yml",
          "line_number": 129,
          "context": "- ASANA_WORKSPACE_GID=${ASANA_WORKSPACE_GID}",
          "secret_name": "ASANA_WORKSPACE_GID",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docs/ASANA_NOTION_MCP_INTEGRATION.md",
          "line_number": 95,
          "context": "- ASANA_WORKSPACE_GID=${ASANA_WORKSPACE_GID}",
          "secret_name": "ASANA_WORKSPACE_GID",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ASYNCPG_DEBUG_SERVER",
      "recommended_name": "ASYNCPG_DEBUG_SERVER",
      "service": "asyncpg",
      "credential_type": "DEBUG_SERVER",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/asyncpg/cluster.py",
          "line_number": 186,
          "context": "if os.getenv('ASYNCPG_DEBUG_SERVER'):",
          "secret_name": "ASYNCPG_DEBUG_SERVER",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/asyncpg/cluster.py",
          "line_number": 213,
          "context": "if os.getenv('ASYNCPG_DEBUG_SERVER'):",
          "secret_name": "ASYNCPG_DEBUG_SERVER",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "AUTHLIB_INSECURE_TRANSPORT",
      "recommended_name": "AUTHLIB_INSECURE_TRANSPORT",
      "service": "authlib",
      "credential_type": "INSECURE_TRANSPORT",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/authlib/common/security.py",
          "line_number": 15,
          "context": "if os.getenv(\"AUTHLIB_INSECURE_TRANSPORT\"):",
          "secret_name": "AUTHLIB_INSECURE_TRANSPORT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "AWS_ACCESS_KEY_ID",
      "recommended_name": "AWS_ACCESS_KEY_ID",
      "service": "aws",
      "credential_type": "ACCESS_KEY_ID",
      "references": [
        {
          "file_path": ".github/workflows/infrastructure-tests.yml",
          "line_number": 135,
          "context": "aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}",
          "secret_name": "AWS_ACCESS_KEY_ID",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/infrastructure-deploy.yml",
          "line_number": 40,
          "context": "aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}",
          "secret_name": "AWS_ACCESS_KEY_ID",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "AWS_IAM_ROLE_TO_ASSUME",
      "recommended_name": "AWS_IAM_ROLE_TO_ASSUME",
      "service": "aws",
      "credential_type": "IAM_ROLE_TO_ASSUME",
      "references": [
        {
          "file_path": ".github/workflows/deploy_platform.yml",
          "line_number": 35,
          "context": "role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME }} # Assumes OIDC trust with AWS",
          "secret_name": "AWS_IAM_ROLE_TO_ASSUME",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "AWS_OIDC_ROLE_ARN",
      "recommended_name": "AWS_OIDC_ROLE_ARN",
      "service": "aws",
      "credential_type": "OIDC_ROLE_ARN",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 485,
          "context": "role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}",
          "secret_name": "AWS_OIDC_ROLE_ARN",
          "usage_type": "github_action"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 259,
          "context": "fn::secret: \"${AWS_OIDC_ROLE_ARN}\"",
          "secret_name": "AWS_OIDC_ROLE_ARN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 222,
          "context": "aws-oidc-role-arn: \"${AWS_OIDC_ROLE_ARN}\"",
          "secret_name": "AWS_OIDC_ROLE_ARN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "AWS_REGION",
      "recommended_name": "AWS_REGION",
      "service": "aws",
      "credential_type": "REGION",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 187,
          "context": "\"sm_region\": os.getenv(\"AWS_REGION\", None),",
          "secret_name": "AWS_REGION",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 123,
          "context": "process.env.AWS_REGION !== undefined || process.env.AZURE_LOCATION !== undefined",
          "secret_name": "AWS_REGION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "AWS_ROLE_ARN",
      "recommended_name": "AWS_ROLE_ARN",
      "service": "aws",
      "credential_type": "ROLE_ARN",
      "references": [
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 27,
          "context": "eks.amazonaws.com/role-arn: \"${AWS_ROLE_ARN}\"",
          "secret_name": "AWS_ROLE_ARN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "AWS_SECRET_ACCESS_KEY",
      "recommended_name": "AWS_SECRET_ACCESS_KEY",
      "service": "aws",
      "credential_type": "SECRET_ACCESS_KEY",
      "references": [
        {
          "file_path": ".github/workflows/infrastructure-tests.yml",
          "line_number": 136,
          "context": "aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}",
          "secret_name": "AWS_SECRET_ACCESS_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/infrastructure-deploy.yml",
          "line_number": 41,
          "context": "aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}",
          "secret_name": "AWS_SECRET_ACCESS_KEY",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "AZURE_CLIENT_ID",
      "recommended_name": "AZURE_CLIENT_ID",
      "service": "azure",
      "credential_type": "CLIENT_ID",
      "references": [
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 28,
          "context": "azure.workload.identity/client-id: \"${AZURE_CLIENT_ID}\"",
          "secret_name": "AZURE_CLIENT_ID",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "AZURE_LOCATION",
      "recommended_name": "AZURE_LOCATION",
      "service": "azure",
      "credential_type": "LOCATION",
      "references": [
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 123,
          "context": "process.env.AWS_REGION !== undefined || process.env.AZURE_LOCATION !== undefined",
          "secret_name": "AZURE_LOCATION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "AZURE_OIDC_CLIENT_ID",
      "recommended_name": "AZURE_OIDC_CLIENT_ID",
      "service": "azure",
      "credential_type": "OIDC_CLIENT_ID",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 493,
          "context": "client-id: ${{ secrets.AZURE_OIDC_CLIENT_ID }}",
          "secret_name": "AZURE_OIDC_CLIENT_ID",
          "usage_type": "github_action"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 261,
          "context": "fn::secret: \"${AZURE_OIDC_CLIENT_ID}\"",
          "secret_name": "AZURE_OIDC_CLIENT_ID",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 223,
          "context": "azure-oidc-client-id: \"${AZURE_OIDC_CLIENT_ID}\"",
          "secret_name": "AZURE_OIDC_CLIENT_ID",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "AZURE_SUBSCRIPTION_ID",
      "recommended_name": "AZURE_SUBSCRIPTION_ID",
      "service": "azure",
      "credential_type": "SUBSCRIPTION_ID",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 495,
          "context": "subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}",
          "secret_name": "AZURE_SUBSCRIPTION_ID",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "AZURE_TENANT_ID",
      "recommended_name": "AZURE_TENANT_ID",
      "service": "azure",
      "credential_type": "TENANT_ID",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 494,
          "context": "tenant-id: ${{ secrets.AZURE_TENANT_ID }}",
          "secret_name": "AZURE_TENANT_ID",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "BASH_VERSION",
      "recommended_name": "BASH_VERSION",
      "service": "bash",
      "credential_type": "VERSION",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/click/shell_completion.py",
          "line_number": 309,
          "context": "[\"bash\", \"-c\", 'echo \"${BASH_VERSION}\"'], stdout=subprocess.PIPE",
          "secret_name": "BASH_VERSION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "BENCHMARK_USE_DEV_SHM",
      "recommended_name": "BENCHMARK_USE_DEV_SHM",
      "service": "benchmark",
      "credential_type": "USE_DEV_SHM",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/utils/benchmark/utils/common.py",
          "line_number": 311,
          "context": "use_dev_shm: bool = (os.getenv(\"BENCHMARK_USE_DEV_SHM\") or \"\").lower() in (\"1\", \"true\")",
          "secret_name": "BENCHMARK_USE_DEV_SHM",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "BLUE",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 32,
          "context": "echo -e \"${BLUE}\ud83d\udccb Configuration:${NC}\"",
          "secret_name": "BLUE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 43,
          "context": "echo -e \"${BLUE}\ud83d\udd0d Checking backend status...${NC}\"",
          "secret_name": "BLUE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 74,
          "context": "echo -e \"\\n${BLUE}\ud83e\uddea Running deployment validation...${NC}\"",
          "secret_name": "BLUE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 83,
          "context": "echo -e \"${BLUE}\ud83d\udcca Next Steps:${NC}\"",
          "secret_name": "BLUE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/setup_codacy_macos.sh",
          "line_number": 431,
          "context": "echo -e \"${BLUE}\"",
          "secret_name": "BLUE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/setup_codacy_macos.sh",
          "line_number": 467,
          "context": "echo -e \"${BLUE}Cursor AI Integration:${NC}\"",
          "secret_name": "BLUE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 25,
          "context": "echo -e \"${BLUE}[INFO]${NC} $1\"",
          "secret_name": "BLUE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "BRANCH",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 1093,
          "context": "branch=os.getenv(\"BRANCH\") or \"main\",",
          "secret_name": "BRANCH",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "BRAVE_API_KEY",
      "recommended_name": "BRAVE_API_KEY",
      "service": "brave",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 115,
          "context": "BRAVE_API_KEY: ${{ secrets.BRAVE_API_KEY }}",
          "secret_name": "BRAVE_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 108,
          "context": "\"BRAVE_API_KEY\": \"values.sophia.research.brave.api_key\",",
          "secret_name": "BRAVE_API_KEY",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    },
    {
      "current_name": "BUILD_ENVIRONMENT",
      "recommended_name": "BUILD_ENVIRONMENT",
      "service": "build",
      "credential_type": "ENVIRONMENT",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/testing/_internal/common_utils.py",
          "line_number": 1219,
          "context": "IS_TBB = \"tbb\" in os.getenv(\"BUILD_ENVIRONMENT\", \"\")",
          "secret_name": "BUILD_ENVIRONMENT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "BUZZ_API_KEY",
      "recommended_name": "BUZZ_API_KEY",
      "service": "buzz",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": "docker-compose.payready-production.yml",
          "line_number": 139,
          "context": "- BUZZ_API_KEY=${BUZZ_API_KEY}",
          "secret_name": "BUZZ_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "CC",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/utils/cpp_extension.py",
          "line_number": 580,
          "context": "_ccbin = os.getenv(\"CC\")",
          "secret_name": "CC",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/utils/cpp_extension.py",
          "line_number": 2213,
          "context": "cc_env = os.getenv(\"CC\")",
          "secret_name": "CC",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "CI",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/sympy/testing/pytest.py",
          "line_number": 20,
          "context": "ON_CI = os.getenv('CI', None) == \"true\"",
          "secret_name": "CI",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/sympy/testing/runtests.py",
          "line_number": 44,
          "context": "ON_CI = os.getenv('CI', None)",
          "secret_name": "CI",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_inductor/lowering.py",
          "line_number": 1543,
          "context": "if get_decompositions([kernel]) and warn and bool(os.getenv(\"CI\")):",
          "secret_name": "CI",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/dns-manager.py",
          "line_number": 138,
          "context": "os.getenv(\"CI\") == \"true\" and os.getenv(\"GITHUB_REPOSITORY\") is not None,",
          "secret_name": "CI",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 99,
          "context": "process.env.CI === 'true' && process.env.GITHUB_REPOSITORY !== undefined,",
          "secret_name": "CI",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 139,
          "context": "process.env.CI !== 'true',",
          "secret_name": "CI",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 221,
          "context": "CI: process.env.CI,",
          "secret_name": "CI",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "CLEARML_LOG_MODEL",
      "recommended_name": "CLEARML_LOG_MODEL",
      "service": "clearml",
      "credential_type": "LOG_MODEL",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 1449,
          "context": "self._log_model = os.getenv(\"CLEARML_LOG_MODEL\", \"FALSE\").upper() in ENV_VARS_TRUE_VALUES.union({\"TRUE\"})",
          "secret_name": "CLEARML_LOG_MODEL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "CLEARML_PROJECT",
      "recommended_name": "CLEARML_PROJECT",
      "service": "clearml",
      "credential_type": "PROJECT",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 1468,
          "context": "project_name=os.getenv(\"CLEARML_PROJECT\", \"HuggingFace Transformers\"),",
          "secret_name": "CLEARML_PROJECT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "CLEARML_TASK",
      "recommended_name": "CLEARML_TASK",
      "service": "clearml",
      "credential_type": "TASK",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 1469,
          "context": "task_name=os.getenv(\"CLEARML_TASK\", \"Trainer\"),",
          "secret_name": "CLEARML_TASK",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "CLIENT_LOG_DIR_PATH_DOCKER",
      "recommended_name": "CLIENT_LOG_DIR_PATH_DOCKER",
      "service": "client",
      "credential_type": "LOG_DIR_PATH_DOCKER",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/test_util.py",
          "line_number": 15,
          "context": "REGRESSION_TEST_LOG_DIR = os.getenv(\"CLIENT_LOG_DIR_PATH_DOCKER\")",
          "secret_name": "CLIENT_LOG_DIR_PATH_DOCKER",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "CODACY_ACCOUNT_TOKEN",
      "recommended_name": "CODACY_ACCOUNT_TOKEN",
      "service": "codacy",
      "credential_type": "ACCOUNT_TOKEN",
      "references": [
        {
          "file_path": "docker-compose.mcp-gateway.yml",
          "line_number": 158,
          "context": "- CODACY_ACCOUNT_TOKEN=${CODACY_ACCOUNT_TOKEN}",
          "secret_name": "CODACY_ACCOUNT_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docs/CODACY_INTEGRATION_GUIDE.md",
          "line_number": 208,
          "context": "- CODACY_ACCOUNT_TOKEN=${CODACY_ACCOUNT_TOKEN}",
          "secret_name": "CODACY_ACCOUNT_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "CODACY_PROJECT_TOKEN",
      "recommended_name": "CODACY_PROJECT_TOKEN",
      "service": "codacy",
      "credential_type": "PROJECT_TOKEN",
      "references": [
        {
          "file_path": "docker-compose.mcp-gateway.yml",
          "line_number": 159,
          "context": "- CODACY_PROJECT_TOKEN=${CODACY_PROJECT_TOKEN}",
          "secret_name": "CODACY_PROJECT_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docs/CODACY_INTEGRATION_GUIDE.md",
          "line_number": 209,
          "context": "- CODACY_PROJECT_TOKEN=${CODACY_PROJECT_TOKEN}",
          "secret_name": "CODACY_PROJECT_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "CODESTRAL_API_KEY",
      "recommended_name": "CODESTRAL_API_KEY",
      "service": "codestral",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 60,
          "context": "CODESTRAL_API_KEY: ${{ secrets.CODESTRAL_API_KEY }}",
          "secret_name": "CODESTRAL_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 53,
          "context": "\"CODESTRAL_API_KEY\": \"values.sophia.ai.codestral.api_key\",",
          "secret_name": "CODESTRAL_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 46,
          "context": "fn::secret: \"${CODESTRAL_API_KEY}\"",
          "secret_name": "CODESTRAL_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "COMET_LOG_ASSETS",
      "recommended_name": "COMET_LOG_ASSETS",
      "service": "comet",
      "credential_type": "LOG_ASSETS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 860,
          "context": "log_assets = os.getenv(\"COMET_LOG_ASSETS\", \"FALSE\").upper()",
          "secret_name": "COMET_LOG_ASSETS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COMET_MODE",
      "recommended_name": "COMET_MODE",
      "service": "comet",
      "credential_type": "MODE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/trainer_tf.py",
          "line_number": 290,
          "context": "comet_mode = os.getenv(\"COMET_MODE\", \"ONLINE\").upper()",
          "secret_name": "COMET_MODE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 43,
          "context": "_has_comet = importlib.util.find_spec(\"comet_ml\") is not None and os.getenv(\"COMET_MODE\", \"\").upper() != \"DISABLED\"",
          "secret_name": "COMET_MODE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 51,
          "context": "if os.getenv(\"COMET_MODE\", \"\").upper() != \"DISABLED\":",
          "secret_name": "COMET_MODE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 864,
          "context": "comet_mode = os.getenv(\"COMET_MODE\", \"ONLINE\").upper()",
          "secret_name": "COMET_MODE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COMET_OFFLINE_DIRECTORY",
      "recommended_name": "COMET_OFFLINE_DIRECTORY",
      "service": "comet",
      "credential_type": "OFFLINE_DIRECTORY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/trainer_tf.py",
          "line_number": 297,
          "context": "args[\"offline_directory\"] = os.getenv(\"COMET_OFFLINE_DIRECTORY\", \"./\")",
          "secret_name": "COMET_OFFLINE_DIRECTORY",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 872,
          "context": "experiment_kwargs[\"offline_directory\"] = os.getenv(\"COMET_OFFLINE_DIRECTORY\", \"./\")",
          "secret_name": "COMET_OFFLINE_DIRECTORY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COMET_PROJECT_NAME",
      "recommended_name": "COMET_PROJECT_NAME",
      "service": "comet",
      "credential_type": "PROJECT_NAME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/trainer_tf.py",
          "line_number": 291,
          "context": "args = {\"project_name\": os.getenv(\"COMET_PROJECT_NAME\", \"huggingface\")}",
          "secret_name": "COMET_PROJECT_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 866,
          "context": "experiment_kwargs = {\"project_name\": os.getenv(\"COMET_PROJECT_NAME\", \"huggingface\")}",
          "secret_name": "COMET_PROJECT_NAME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "CONDA_PREFIX",
      "recommended_name": "CONDA_PREFIX",
      "service": "conda",
      "credential_type": "PREFIX",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_inductor/codecache.py",
          "line_number": 823,
          "context": "if not omp_available and os.getenv(\"CONDA_PREFIX\") is not None:",
          "secret_name": "CONDA_PREFIX",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_inductor/codecache.py",
          "line_number": 826,
          "context": "conda_lib_path = os.path.join(os.getenv(\"CONDA_PREFIX\"), \"lib\")",
          "secret_name": "CONDA_PREFIX",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_inductor/codecache.py",
          "line_number": 827,
          "context": "ipaths.append(os.path.join(os.getenv(\"CONDA_PREFIX\"), \"include\"))",
          "secret_name": "CONDA_PREFIX",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/utils/benchmark/utils/cpp_jit.py",
          "line_number": 85,
          "context": "CONDA_PREFIX = os.getenv(\"CONDA_PREFIX\")",
          "secret_name": "CONDA_PREFIX",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/utils/benchmark/examples/blas_compare.py",
          "line_number": 64,
          "context": "conda_prefix = os.getenv(\"CONDA_PREFIX\")",
          "secret_name": "CONDA_PREFIX",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "CONSUMER_PROJECT",
      "recommended_name": "CONSUMER_PROJECT",
      "service": "consumer",
      "credential_type": "PROJECT",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/_inputs.py",
          "line_number": 2455,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "CONSUMER_PROJECT",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/_inputs.py",
          "line_number": 2467,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "CONSUMER_PROJECT",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/_inputs.py",
          "line_number": 2478,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "CONSUMER_PROJECT",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/outputs.py",
          "line_number": 2133,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "CONSUMER_PROJECT",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/outputs.py",
          "line_number": 2144,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "CONSUMER_PROJECT",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/outputs.py",
          "line_number": 3465,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "CONSUMER_PROJECT",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/outputs.py",
          "line_number": 3475,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "CONSUMER_PROJECT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COSTAR_API_KEY",
      "recommended_name": "COSTAR_API_KEY",
      "service": "costar",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": "docker-compose.payready-production.yml",
          "line_number": 110,
          "context": "- COSTAR_API_KEY=${COSTAR_API_KEY}",
          "secret_name": "COSTAR_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docs/SOPHIA_AI_DASHBOARD_STANDARDIZATION_IMPLEMENTATION.md",
          "line_number": 111,
          "context": "costar_api: ${COSTAR_API_KEY}",
          "secret_name": "COSTAR_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COVERAGE_AST_DUMP",
      "recommended_name": "COVERAGE_AST_DUMP",
      "service": "coverage",
      "credential_type": "AST_DUMP",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/parser.py",
          "line_number": 716,
          "context": "dump_ast = bool(int(os.getenv(\"COVERAGE_AST_DUMP\", \"0\")))",
          "secret_name": "COVERAGE_AST_DUMP",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COVERAGE_CORE",
      "recommended_name": "COVERAGE_CORE",
      "service": "coverage",
      "credential_type": "CORE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/config.py",
          "line_number": 630,
          "context": "env_core = os.getenv(\"COVERAGE_CORE\")",
          "secret_name": "COVERAGE_CORE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/core.py",
          "line_number": 38,
          "context": "if os.getenv(\"COVERAGE_CORE\") == \"ctrace\":      # pragma: part covered",
          "secret_name": "COVERAGE_CORE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COVERAGE_COVERAGE",
      "recommended_name": "COVERAGE_COVERAGE",
      "service": "coverage",
      "credential_type": "COVERAGE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/env.py",
          "line_number": 180,
          "context": "METACOV = os.getenv(\"COVERAGE_COVERAGE\") is not None",
          "secret_name": "COVERAGE_COVERAGE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COVERAGE_DEBUG",
      "recommended_name": "COVERAGE_DEBUG",
      "service": "coverage",
      "credential_type": "DEBUG",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/config.py",
          "line_number": 624,
          "context": "debugs = os.getenv(\"COVERAGE_DEBUG\")",
          "secret_name": "COVERAGE_DEBUG",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COVERAGE_DEBUG_CALLS",
      "recommended_name": "COVERAGE_DEBUG_CALLS",
      "service": "coverage",
      "credential_type": "DEBUG_CALLS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/control.py",
          "line_number": 1375,
          "context": "if int(os.getenv(\"COVERAGE_DEBUG_CALLS\", 0)):               # pragma: debugging",
          "secret_name": "COVERAGE_DEBUG_CALLS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COVERAGE_DEBUG_FILE",
      "recommended_name": "COVERAGE_DEBUG_FILE",
      "service": "coverage",
      "credential_type": "DEBUG_FILE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/debug.py",
          "line_number": 455,
          "context": "file_name = os.getenv(\"COVERAGE_DEBUG_FILE\", FORCED_DEBUG_FILE)",
          "secret_name": "COVERAGE_DEBUG_FILE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COVERAGE_FILE",
      "recommended_name": "COVERAGE_FILE",
      "service": "coverage",
      "credential_type": "FILE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/config.py",
          "line_number": 619,
          "context": "env_data_file = os.getenv(\"COVERAGE_FILE\")",
          "secret_name": "COVERAGE_FILE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COVERAGE_FORCE_CONFIG",
      "recommended_name": "COVERAGE_FORCE_CONFIG",
      "service": "coverage",
      "credential_type": "FORCE_CONFIG",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/config.py",
          "line_number": 638,
          "context": "force_file = os.getenv(\"COVERAGE_FORCE_CONFIG\")",
          "secret_name": "COVERAGE_FORCE_CONFIG",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COVERAGE_PROCESS_START",
      "recommended_name": "COVERAGE_PROCESS_START",
      "service": "coverage",
      "credential_type": "PROCESS_START",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/control.py",
          "line_number": 1407,
          "context": "cps = os.getenv(\"COVERAGE_PROCESS_START\")",
          "secret_name": "COVERAGE_PROCESS_START",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COVERAGE_PROFILE",
      "recommended_name": "COVERAGE_PROFILE",
      "service": "coverage",
      "credential_type": "PROFILE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/cmdline.py",
          "line_number": 994,
          "context": "_profile = os.getenv(\"COVERAGE_PROFILE\")",
          "secret_name": "COVERAGE_PROFILE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COVERAGE_RCFILE",
      "recommended_name": "COVERAGE_RCFILE",
      "service": "coverage",
      "credential_type": "RCFILE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/config.py",
          "line_number": 566,
          "context": "rcfile = os.getenv(\"COVERAGE_RCFILE\")",
          "secret_name": "COVERAGE_RCFILE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COVERAGE_SYSMON_LOG",
      "recommended_name": "COVERAGE_SYSMON_LOG",
      "service": "coverage",
      "credential_type": "SYSMON_LOG",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/sysmon.py",
          "line_number": 48,
          "context": "LOG = bool(int(os.getenv(\"COVERAGE_SYSMON_LOG\", 0)))",
          "secret_name": "COVERAGE_SYSMON_LOG",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COVERAGE_SYSMON_STATS",
      "recommended_name": "COVERAGE_SYSMON_STATS",
      "service": "coverage",
      "credential_type": "SYSMON_STATS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/sysmon.py",
          "line_number": 51,
          "context": "COLLECT_STATS = bool(int(os.getenv(\"COVERAGE_SYSMON_STATS\", 0)))",
          "secret_name": "COVERAGE_SYSMON_STATS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COVERAGE_TESTING",
      "recommended_name": "COVERAGE_TESTING",
      "service": "coverage",
      "credential_type": "TESTING",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/env.py",
          "line_number": 185,
          "context": "TESTING = os.getenv(\"COVERAGE_TESTING\") == \"True\"",
          "secret_name": "COVERAGE_TESTING",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "COVERAGE_TRACK_ARCS",
      "recommended_name": "COVERAGE_TRACK_ARCS",
      "service": "coverage",
      "credential_type": "TRACK_ARCS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/parser.py",
          "line_number": 738,
          "context": "self.debug = bool(int(os.getenv(\"COVERAGE_TRACK_ARCS\", \"0\")))",
          "secret_name": "COVERAGE_TRACK_ARCS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "CUDA_VISIBLE_DEVICES",
      "recommended_name": "CUDA_VISIBLE_DEVICES",
      "service": "cuda",
      "credential_type": "VISIBLE_DEVICES",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/cuda/__init__.py",
          "line_number": 557,
          "context": "var = os.getenv(\"CUDA_VISIBLE_DEVICES\")",
          "secret_name": "CUDA_VISIBLE_DEVICES",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DATABASE_URL",
      "recommended_name": "DATABASE_URL",
      "service": "database",
      "credential_type": "URL",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 94,
          "context": "DATABASE_URL: ${{ secrets.DATABASE_URL }}",
          "secret_name": "DATABASE_URL",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 87,
          "context": "\"DATABASE_URL\": \"values.sophia.data.database.url\",",
          "secret_name": "DATABASE_URL",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 91,
          "context": "fn::secret: \"${DATABASE_URL}\"",
          "secret_name": "DATABASE_URL",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 149,
          "context": "database-url: \"${DATABASE_URL}\"",
          "secret_name": "DATABASE_URL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "DATABRICKS_RUNTIME_VERSION",
      "recommended_name": "DATABRICKS_RUNTIME_VERSION",
      "service": "databricks",
      "credential_type": "RUNTIME_VERSION",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pip/_vendor/rich/console.py",
          "line_number": 527,
          "context": "or os.getenv(\"DATABRICKS_RUNTIME_VERSION\")",
          "secret_name": "DATABRICKS_RUNTIME_VERSION",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/rich/console.py",
          "line_number": 528,
          "context": "or os.getenv(\"DATABRICKS_RUNTIME_VERSION\")",
          "secret_name": "DATABRICKS_RUNTIME_VERSION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DEBUGPY_ADAPTER_ENDPOINTS",
      "recommended_name": "DEBUGPY_ADAPTER_ENDPOINTS",
      "service": "debugpy",
      "credential_type": "ADAPTER_ENDPOINTS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/adapter/__main__.py",
          "line_number": 101,
          "context": "listener_file = os.getenv(\"DEBUGPY_ADAPTER_ENDPOINTS\")",
          "secret_name": "DEBUGPY_ADAPTER_ENDPOINTS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DEBUGPY_ATTACH_BY_PID_DEBUG_INFO",
      "recommended_name": "DEBUGPY_ATTACH_BY_PID_DEBUG_INFO",
      "service": "debugpy",
      "credential_type": "ATTACH_BY_PID_DEBUG_INFO",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/server/cli.py",
          "line_number": 465,
          "context": "show_debug_info=int(os.getenv(\"DEBUGPY_ATTACH_BY_PID_DEBUG_INFO\", \"0\")),",
          "secret_name": "DEBUGPY_ATTACH_BY_PID_DEBUG_INFO",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DEBUGPY_LOG_DIR",
      "recommended_name": "DEBUGPY_LOG_DIR",
      "service": "debugpy",
      "credential_type": "LOG_DIR",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/common/log.py",
          "line_number": 24,
          "context": "log_dir = os.getenv(\"DEBUGPY_LOG_DIR\")",
          "secret_name": "DEBUGPY_LOG_DIR",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DEBUGPY_LOG_STDERR",
      "recommended_name": "DEBUGPY_LOG_STDERR",
      "service": "debugpy",
      "credential_type": "LOG_STDERR",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/common/log.py",
          "line_number": 378,
          "context": "levels=os.getenv(\"DEBUGPY_LOG_STDERR\", \"warning error\").split(),",
          "secret_name": "DEBUGPY_LOG_STDERR",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DEBUGPY_PROCESS_EXIT_TIMEOUT",
      "recommended_name": "DEBUGPY_PROCESS_EXIT_TIMEOUT",
      "service": "debugpy",
      "credential_type": "PROCESS_EXIT_TIMEOUT",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/common/__init__.py",
          "line_number": 18,
          "context": "PROCESS_EXIT_TIMEOUT = float(os.getenv(\"DEBUGPY_PROCESS_EXIT_TIMEOUT\", 30)) or None",
          "secret_name": "DEBUGPY_PROCESS_EXIT_TIMEOUT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DEBUGPY_PROCESS_SPAWN_TIMEOUT",
      "recommended_name": "DEBUGPY_PROCESS_SPAWN_TIMEOUT",
      "service": "debugpy",
      "credential_type": "PROCESS_SPAWN_TIMEOUT",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/common/__init__.py",
          "line_number": 15,
          "context": "PROCESS_SPAWN_TIMEOUT = float(os.getenv(\"DEBUGPY_PROCESS_SPAWN_TIMEOUT\", 60)) or None",
          "secret_name": "DEBUGPY_PROCESS_SPAWN_TIMEOUT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DEEPSEEK_API_KEY",
      "recommended_name": "DEEPSEEK_API_KEY",
      "service": "deepseek",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 59,
          "context": "DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}",
          "secret_name": "DEEPSEEK_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 52,
          "context": "\"DEEPSEEK_API_KEY\": \"values.sophia.ai.deepseek.api_key\",",
          "secret_name": "DEEPSEEK_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 43,
          "context": "fn::secret: \"${DEEPSEEK_API_KEY}\"",
          "secret_name": "DEEPSEEK_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "DISABLED_TESTS_FILE",
      "recommended_name": "DISABLED_TESTS_FILE",
      "service": "disabled",
      "credential_type": "TESTS_FILE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/testing/_internal/common_utils.py",
          "line_number": 214,
          "context": "if os.getenv(\"DISABLED_TESTS_FILE\", \"\"):",
          "secret_name": "DISABLED_TESTS_FILE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/testing/_internal/common_utils.py",
          "line_number": 215,
          "context": "disabled_tests_dict = maybe_load_json(os.getenv(\"DISABLED_TESTS_FILE\", \"\"))",
          "secret_name": "DISABLED_TESTS_FILE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DISABLE_MLFLOW_INTEGRATION",
      "recommended_name": "DISABLE_MLFLOW_INTEGRATION",
      "service": "disable",
      "credential_type": "MLFLOW_INTEGRATION",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 128,
          "context": "if os.getenv(\"DISABLE_MLFLOW_INTEGRATION\", \"FALSE\").upper() == \"TRUE\":",
          "secret_name": "DISABLE_MLFLOW_INTEGRATION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DISABLE_TELEMETRY",
      "recommended_name": "DISABLE_TELEMETRY",
      "service": "disable",
      "credential_type": "TELEMETRY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 108,
          "context": "DISABLE_TELEMETRY = os.getenv(\"DISABLE_TELEMETRY\", False) in ENV_VARS_TRUE_VALUES",
          "secret_name": "DISABLE_TELEMETRY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DISPLAY",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_constants.py",
          "line_number": 273,
          "context": "INTERACTIVE_MODE_AVAILABLE = sys.platform in (\"darwin\", \"win32\") or os.getenv(\"DISPLAY\") is not None",
          "secret_name": "DISPLAY",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/PIL/ImageGrab.py",
          "line_number": 154,
          "context": "elif os.getenv(\"DISPLAY\"):",
          "secret_name": "DISPLAY",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pandas/io/clipboard/__init__.py",
          "line_number": 72,
          "context": "HAS_DISPLAY = os.getenv(\"DISPLAY\")",
          "secret_name": "DISPLAY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DISTRIB",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/sklearn/decomposition/tests/test_fastica.py",
          "line_number": 78,
          "context": "and os.getenv(\"DISTRIB\") == \"ubuntu\"",
          "secret_name": "DISTRIB",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DISTRIBUTED_TESTS_DEFAULT_TIMEOUT",
      "recommended_name": "DISTRIBUTED_TESTS_DEFAULT_TIMEOUT",
      "service": "distributed",
      "credential_type": "TESTS_DEFAULT_TIMEOUT",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/testing/_internal/common_distributed.py",
          "line_number": 376,
          "context": "TIMEOUT_DEFAULT = int(os.getenv('DISTRIBUTED_TESTS_DEFAULT_TIMEOUT', '300'))",
          "secret_name": "DISTRIBUTED_TESTS_DEFAULT_TIMEOUT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DISTUTILS_USE_SDK",
      "recommended_name": "DISTUTILS_USE_SDK",
      "service": "distutils",
      "credential_type": "USE_SDK",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/setuptools/_distutils/_msvccompiler.py",
          "line_number": 138,
          "context": "if os.getenv(\"DISTUTILS_USE_SDK\"):",
          "secret_name": "DISTUTILS_USE_SDK",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DIST_EXTRA_CONFIG",
      "recommended_name": "DIST_EXTRA_CONFIG",
      "service": "dist",
      "credential_type": "EXTRA_CONFIG",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/setuptools/_distutils/dist.py",
          "line_number": 360,
          "context": "yield pathlib.Path(os.getenv(\"DIST_EXTRA_CONFIG\"))",
          "secret_name": "DIST_EXTRA_CONFIG",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DOCKER_IMAGE",
      "recommended_name": "DOCKER_IMAGE",
      "service": "docker",
      "credential_type": "IMAGE",
      "references": [
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 73,
          "context": "log_info \"Building Docker image: ${DOCKER_IMAGE}:${VERSION}\"",
          "secret_name": "DOCKER_IMAGE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 78,
          "context": "docker build -f Dockerfile.gong-webhook -t \"${DOCKER_IMAGE}:${VERSION}\" .",
          "secret_name": "DOCKER_IMAGE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 82,
          "context": "docker tag \"${DOCKER_IMAGE}:${VERSION}\" \"${DOCKER_IMAGE}:latest\"",
          "secret_name": "DOCKER_IMAGE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 82,
          "context": "docker tag \"${DOCKER_IMAGE}:${VERSION}\" \"${DOCKER_IMAGE}:latest\"",
          "secret_name": "DOCKER_IMAGE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 92,
          "context": "docker push \"${DOCKER_IMAGE}:${VERSION}\"",
          "secret_name": "DOCKER_IMAGE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 94,
          "context": "docker push \"${DOCKER_IMAGE}:latest\"",
          "secret_name": "DOCKER_IMAGE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 161,
          "context": "gong-webhook=\"${DOCKER_IMAGE}:${VERSION}\"",
          "secret_name": "DOCKER_IMAGE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 215,
          "context": "echo \"Image: ${DOCKER_IMAGE}:${VERSION}\"",
          "secret_name": "DOCKER_IMAGE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DOCKER_PERSONAL_ACCESS_TOKEN",
      "recommended_name": "DOCKER_PERSONAL_ACCESS_TOKEN",
      "service": "docker",
      "credential_type": "PERSONAL_ACCESS_TOKEN",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 129,
          "context": "fn::secret: \"${DOCKER_PERSONAL_ACCESS_TOKEN}\"",
          "secret_name": "DOCKER_PERSONAL_ACCESS_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 228,
          "context": "docker-token: \"${DOCKER_PERSONAL_ACCESS_TOKEN}\"",
          "secret_name": "DOCKER_PERSONAL_ACCESS_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "DOCKER_TOKEN",
      "recommended_name": "DOCKER_TOKEN",
      "service": "docker",
      "credential_type": "TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 121,
          "context": "DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}",
          "secret_name": "DOCKER_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 419,
          "context": "password: ${{ secrets.DOCKER_TOKEN }}",
          "secret_name": "DOCKER_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 114,
          "context": "\"DOCKER_TOKEN\": \"values.sophia.development.docker.token\",",
          "secret_name": "DOCKER_TOKEN",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "DOCKER_USERNAME",
      "recommended_name": "DOCKER_USERNAME",
      "service": "docker",
      "credential_type": "USERNAME",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 418,
          "context": "username: ${{ secrets.DOCKER_USERNAME }}",
          "secret_name": "DOCKER_USERNAME",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "DOCKER_USER_NAME",
      "recommended_name": "DOCKER_USER_NAME",
      "service": "docker",
      "credential_type": "USER_NAME",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 127,
          "context": "fn::secret: \"${DOCKER_USER_NAME}\"",
          "secret_name": "DOCKER_USER_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 227,
          "context": "docker-username: \"${DOCKER_USER_NAME}\"",
          "secret_name": "DOCKER_USER_NAME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ELISE_AI_API_KEY",
      "recommended_name": "ELISE_AI_API_KEY",
      "service": "elise",
      "credential_type": "AI_API_KEY",
      "references": [
        {
          "file_path": "docs/SOPHIA_AI_DASHBOARD_STANDARDIZATION_IMPLEMENTATION.md",
          "line_number": 103,
          "context": "elise_ai_monitor: ${ELISE_AI_API_KEY}",
          "secret_name": "ELISE_AI_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ENCRYPTION_KEY",
      "recommended_name": "ENCRYPTION_API_KEY",
      "service": "encryption",
      "credential_type": "KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 131,
          "context": "ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}",
          "secret_name": "ENCRYPTION_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 124,
          "context": "\"ENCRYPTION_KEY\": \"values.sophia.security.encryption.key\",",
          "secret_name": "ENCRYPTION_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 248,
          "context": "fn::secret: \"${ENCRYPTION_KEY}\"",
          "secret_name": "ENCRYPTION_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 117,
          "context": "fn::secret: \"${ENCRYPTION_KEY}\"",
          "secret_name": "ENCRYPTION_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 58,
          "context": "encryption-key: \"${ENCRYPTION_KEY}\"",
          "secret_name": "ENCRYPTION_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "keep"
    },
    {
      "current_name": "ENVIRONMENT",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "backend/core/enhanced_config.py",
          "line_number": 580,
          "context": "environment = os.getenv(\"ENVIRONMENT\", \"staging\")",
          "secret_name": "ENVIRONMENT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/core/auto_esc_config.py",
          "line_number": 318,
          "context": "environment = os.getenv(\"ENVIRONMENT\", \"staging\")",
          "secret_name": "ENVIRONMENT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/core/auto_esc_config.py",
          "line_number": 419,
          "context": "environment = os.getenv(\"ENVIRONMENT\", \"staging\")",
          "secret_name": "ENVIRONMENT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/core/auto_esc_config.py",
          "line_number": 520,
          "context": "environment = os.getenv(\"ENVIRONMENT\", \"staging\")",
          "secret_name": "ENVIRONMENT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/core/auto_esc_config.py",
          "line_number": 578,
          "context": "\"environment\": os.getenv(\"ENVIRONMENT\", \"staging\"),",
          "secret_name": "ENVIRONMENT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_APIFY_API_TOKEN",
      "recommended_name": "ESC_APIFY_API_TOKEN",
      "service": "esc",
      "credential_type": "APIFY_API_TOKEN",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 129,
          "context": "\"APIFY_API_TOKEN\": \"${ESC_APIFY_API_TOKEN}\",",
          "secret_name": "ESC_APIFY_API_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 22,
          "context": "\"APIFY_API_TOKEN\": \"${ESC_APIFY_API_TOKEN}\",",
          "secret_name": "ESC_APIFY_API_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_ARIZE_API_KEY",
      "recommended_name": "ESC_ARIZE_API_KEY",
      "service": "esc",
      "credential_type": "ARIZE_API_KEY",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 118,
          "context": "\"ARIZE_API_KEY\": \"${ESC_ARIZE_API_KEY}\",",
          "secret_name": "ESC_ARIZE_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 9,
          "context": "\"ARIZE_API_KEY\": \"${ESC_ARIZE_API_KEY}\",",
          "secret_name": "ESC_ARIZE_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_ARIZE_SPACE_ID",
      "recommended_name": "ESC_ARIZE_SPACE_ID",
      "service": "esc",
      "credential_type": "ARIZE_SPACE_ID",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 117,
          "context": "\"ARIZE_SPACE_ID\": \"${ESC_ARIZE_SPACE_ID}\",",
          "secret_name": "ESC_ARIZE_SPACE_ID",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 8,
          "context": "\"ARIZE_SPACE_ID\": \"${ESC_ARIZE_SPACE_ID}\",",
          "secret_name": "ESC_ARIZE_SPACE_ID",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_CODACY_ACCOUNT_TOKEN",
      "recommended_name": "ESC_CODACY_ACCOUNT_TOKEN",
      "service": "esc",
      "credential_type": "CODACY_ACCOUNT_TOKEN",
      "references": [
        {
          "file_path": "docs/CODACY_INTEGRATION_GUIDE.md",
          "line_number": 153,
          "context": "\"CODACY_ACCOUNT_TOKEN\": \"${ESC_CODACY_ACCOUNT_TOKEN}\",",
          "secret_name": "ESC_CODACY_ACCOUNT_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 61,
          "context": "\"CODACY_ACCOUNT_TOKEN\": \"${ESC_CODACY_ACCOUNT_TOKEN}\",",
          "secret_name": "ESC_CODACY_ACCOUNT_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_CODACY_PROJECT_TOKEN",
      "recommended_name": "ESC_CODACY_PROJECT_TOKEN",
      "service": "esc",
      "credential_type": "CODACY_PROJECT_TOKEN",
      "references": [
        {
          "file_path": "docs/CODACY_INTEGRATION_GUIDE.md",
          "line_number": 154,
          "context": "\"CODACY_PROJECT_TOKEN\": \"${ESC_CODACY_PROJECT_TOKEN}\",",
          "secret_name": "ESC_CODACY_PROJECT_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 62,
          "context": "\"CODACY_PROJECT_TOKEN\": \"${ESC_CODACY_PROJECT_TOKEN}\",",
          "secret_name": "ESC_CODACY_PROJECT_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_DOCKER_TOKEN",
      "recommended_name": "ESC_DOCKER_TOKEN",
      "service": "esc",
      "credential_type": "DOCKER_TOKEN",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 143,
          "context": "\"DOCKER_TOKEN\": \"${ESC_DOCKER_TOKEN}\"",
          "secret_name": "ESC_DOCKER_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 37,
          "context": "\"DOCKER_TOKEN\": \"${ESC_DOCKER_TOKEN}\"",
          "secret_name": "ESC_DOCKER_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_DOCKER_USERNAME",
      "recommended_name": "ESC_DOCKER_USERNAME",
      "service": "esc",
      "credential_type": "DOCKER_USERNAME",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 142,
          "context": "\"DOCKER_USERNAME\": \"${ESC_DOCKER_USERNAME}\",",
          "secret_name": "ESC_DOCKER_USERNAME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_DOCKER_USER_NAME",
      "recommended_name": "ESC_DOCKER_USER_NAME",
      "service": "esc",
      "credential_type": "DOCKER_USER_NAME",
      "references": [
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 36,
          "context": "\"DOCKER_USERNAME\": \"${ESC_DOCKER_USER_NAME}\",",
          "secret_name": "ESC_DOCKER_USER_NAME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_HUGGINGFACE_API_TOKEN",
      "recommended_name": "ESC_HUGGINGFACE_API_TOKEN",
      "service": "esc",
      "credential_type": "HUGGINGFACE_API_TOKEN",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 121,
          "context": "\"HUGGINGFACE_API_TOKEN\": \"${ESC_HUGGINGFACE_API_TOKEN}\",",
          "secret_name": "ESC_HUGGINGFACE_API_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 13,
          "context": "\"HUGGINGFACE_API_TOKEN\": \"${ESC_HUGGINGFACE_API_TOKEN}\",",
          "secret_name": "ESC_HUGGINGFACE_API_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_LAMBDA_LABS_API_KEY",
      "recommended_name": "LAMBDA_LABS_API_KEY",
      "service": "lambda_labs",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 140,
          "context": "\"LAMBDA_LABS_API_KEY\": \"${ESC_LAMBDA_LABS_API_KEY}\",",
          "secret_name": "ESC_LAMBDA_LABS_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 34,
          "context": "\"LAMBDA_LABS_API_KEY\": \"${ESC_LAMBDA_LABS_API_KEY}\",",
          "secret_name": "ESC_LAMBDA_LABS_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_LOOKER_API_KEY",
      "recommended_name": "ESC_LOOKER_API_KEY",
      "service": "esc",
      "credential_type": "LOOKER_API_KEY",
      "references": [
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 52,
          "context": "\"LOOKER_API_KEY\": \"${ESC_LOOKER_API_KEY}\",",
          "secret_name": "ESC_LOOKER_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_MIXPANEL_API_KEY",
      "recommended_name": "ESC_MIXPANEL_API_KEY",
      "service": "esc",
      "credential_type": "MIXPANEL_API_KEY",
      "references": [
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 53,
          "context": "\"MIXPANEL_API_KEY\": \"${ESC_MIXPANEL_API_KEY}\"",
          "secret_name": "ESC_MIXPANEL_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_OPENROUTER_API_KEY",
      "recommended_name": "ESC_OPENROUTER_API_KEY",
      "service": "esc",
      "credential_type": "OPENROUTER_API_KEY",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 119,
          "context": "\"OPENROUTER_API_KEY\": \"${ESC_OPENROUTER_API_KEY}\",",
          "secret_name": "ESC_OPENROUTER_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 10,
          "context": "\"OPENROUTER_API_KEY\": \"${ESC_OPENROUTER_API_KEY}\",",
          "secret_name": "ESC_OPENROUTER_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_PHANTOM_BUSTER_API_KEY",
      "recommended_name": "ESC_PHANTOM_BUSTER_API_KEY",
      "service": "esc",
      "credential_type": "PHANTOM_BUSTER_API_KEY",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 130,
          "context": "\"PHANTOM_BUSTER_API_KEY\": \"${ESC_PHANTOM_BUSTER_API_KEY}\",",
          "secret_name": "ESC_PHANTOM_BUSTER_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 23,
          "context": "\"PHANTOM_BUSTER_API_KEY\": \"${ESC_PHANTOM_BUSTER_API_KEY}\",",
          "secret_name": "ESC_PHANTOM_BUSTER_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_PINECONE_API_KEY",
      "recommended_name": "PINECONE_API_KEY",
      "service": "pinecone",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 153,
          "context": "\"PINECONE_API_KEY\": \"${ESC_PINECONE_API_KEY}\"",
          "secret_name": "ESC_PINECONE_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 51,
          "context": "\"PINECONE_API_KEY\": \"${ESC_PINECONE_API_KEY}\",",
          "secret_name": "ESC_PINECONE_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_PORTKEY_API_KEY",
      "recommended_name": "ESC_PORTKEY_API_KEY",
      "service": "esc",
      "credential_type": "PORTKEY_API_KEY",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 120,
          "context": "\"PORTKEY_API_KEY\": \"${ESC_PORTKEY_API_KEY}\",",
          "secret_name": "ESC_PORTKEY_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 11,
          "context": "\"PORTKEY_API_KEY\": \"${ESC_PORTKEY_API_KEY}\",",
          "secret_name": "ESC_PORTKEY_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_PORTKEY_CONFIG",
      "recommended_name": "ESC_PORTKEY_CONFIG",
      "service": "esc",
      "credential_type": "PORTKEY_CONFIG",
      "references": [
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 12,
          "context": "\"PORTKEY_CONFIG\": \"${ESC_PORTKEY_CONFIG}\",",
          "secret_name": "ESC_PORTKEY_CONFIG",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_PULUMI_ACCESS_TOKEN",
      "recommended_name": "ESC_PULUMI_ACCESS_TOKEN",
      "service": "esc",
      "credential_type": "PULUMI_ACCESS_TOKEN",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 141,
          "context": "\"PULUMI_ACCESS_TOKEN\": \"${ESC_PULUMI_ACCESS_TOKEN}\",",
          "secret_name": "ESC_PULUMI_ACCESS_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 35,
          "context": "\"PULUMI_ACCESS_TOKEN\": \"${ESC_PULUMI_ACCESS_TOKEN}\",",
          "secret_name": "ESC_PULUMI_ACCESS_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_SNOWFLAKE_ACCOUNT",
      "recommended_name": "SNOWFLAKE_ACCOUNT",
      "service": "snowflake",
      "credential_type": "ACCOUNT",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 150,
          "context": "\"SNOWFLAKE_ACCOUNT\": \"${ESC_SNOWFLAKE_ACCOUNT}\",",
          "secret_name": "ESC_SNOWFLAKE_ACCOUNT",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 45,
          "context": "\"SNOWFLAKE_ACCOUNT\": \"${ESC_SNOWFLAKE_ACCOUNT}\",",
          "secret_name": "ESC_SNOWFLAKE_ACCOUNT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_SNOWFLAKE_DATABASE",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 49,
          "context": "\"SNOWFLAKE_DATABASE\": \"${ESC_SNOWFLAKE_DATABASE}\",",
          "secret_name": "ESC_SNOWFLAKE_DATABASE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_SNOWFLAKE_PASSWORD",
      "recommended_name": "SNOWFLAKE_PASSWORD",
      "service": "snowflake",
      "credential_type": "PASSWORD",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 152,
          "context": "\"SNOWFLAKE_PASSWORD\": \"${ESC_SNOWFLAKE_PASSWORD}\",",
          "secret_name": "ESC_SNOWFLAKE_PASSWORD",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 47,
          "context": "\"SNOWFLAKE_PASSWORD\": \"${ESC_SNOWFLAKE_PASSWORD}\",",
          "secret_name": "ESC_SNOWFLAKE_PASSWORD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_SNOWFLAKE_SCHEMA",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 50,
          "context": "\"SNOWFLAKE_SCHEMA\": \"${ESC_SNOWFLAKE_SCHEMA}\",",
          "secret_name": "ESC_SNOWFLAKE_SCHEMA",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_SNOWFLAKE_USER",
      "recommended_name": "SNOWFLAKE_USER",
      "service": "snowflake",
      "credential_type": "USER",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 151,
          "context": "\"SNOWFLAKE_USER\": \"${ESC_SNOWFLAKE_USER}\",",
          "secret_name": "ESC_SNOWFLAKE_USER",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 46,
          "context": "\"SNOWFLAKE_USER\": \"${ESC_SNOWFLAKE_USER}\",",
          "secret_name": "ESC_SNOWFLAKE_USER",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_SNOWFLAKE_WAREHOUSE",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 48,
          "context": "\"SNOWFLAKE_WAREHOUSE\": \"${ESC_SNOWFLAKE_WAREHOUSE}\",",
          "secret_name": "ESC_SNOWFLAKE_WAREHOUSE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_TAVILY_API_KEY",
      "recommended_name": "ESC_TAVILY_API_KEY",
      "service": "esc",
      "credential_type": "TAVILY_API_KEY",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 132,
          "context": "\"TAVILY_API_KEY\": \"${ESC_TAVILY_API_KEY}\",",
          "secret_name": "ESC_TAVILY_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 25,
          "context": "\"TAVILY_API_KEY\": \"${ESC_TAVILY_API_KEY}\",",
          "secret_name": "ESC_TAVILY_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_TOGETHER_AI_API_KEY",
      "recommended_name": "ESC_TOGETHER_AI_API_KEY",
      "service": "esc",
      "credential_type": "TOGETHER_AI_API_KEY",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 122,
          "context": "\"TOGETHER_AI_API_KEY\": \"${ESC_TOGETHER_AI_API_KEY}\"",
          "secret_name": "ESC_TOGETHER_AI_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 14,
          "context": "\"TOGETHER_AI_API_KEY\": \"${ESC_TOGETHER_AI_API_KEY}\"",
          "secret_name": "ESC_TOGETHER_AI_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_TWINGLY_API_KEY",
      "recommended_name": "ESC_TWINGLY_API_KEY",
      "service": "esc",
      "credential_type": "TWINGLY_API_KEY",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 131,
          "context": "\"TWINGLY_API_KEY\": \"${ESC_TWINGLY_API_KEY}\",",
          "secret_name": "ESC_TWINGLY_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 24,
          "context": "\"TWINGLY_API_KEY\": \"${ESC_TWINGLY_API_KEY}\",",
          "secret_name": "ESC_TWINGLY_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESC_ZENROWS_API_KEY",
      "recommended_name": "ESC_ZENROWS_API_KEY",
      "service": "esc",
      "credential_type": "ZENROWS_API_KEY",
      "references": [
        {
          "file_path": "SOPHIA_AI_ENHANCEMENT_ANALYSIS.md",
          "line_number": 133,
          "context": "\"ZENROWS_API_KEY\": \"${ESC_ZENROWS_API_KEY}\"",
          "secret_name": "ESC_ZENROWS_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".cursor/mcp_settings.json",
          "line_number": 26,
          "context": "\"ZENROWS_API_KEY\": \"${ESC_ZENROWS_API_KEY}\"",
          "secret_name": "ESC_ZENROWS_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ESTUARY_ACCESS_TOKEN",
      "recommended_name": "ESTUARY_ACCESS_TOKEN",
      "service": "estuary",
      "credential_type": "ACCESS_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 126,
          "context": "ESTUARY_ACCESS_TOKEN: ${{ secrets.ESTUARY_ACCESS_TOKEN }}",
          "secret_name": "ESTUARY_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 119,
          "context": "\"ESTUARY_ACCESS_TOKEN\": \"values.sophia.integration.estuary.access_token\",",
          "secret_name": "ESTUARY_ACCESS_TOKEN",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    },
    {
      "current_name": "ESTUARY_API_KEY",
      "recommended_name": "ESTUARY_API_KEY",
      "service": "estuary",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/test_integrations.yml",
          "line_number": 56,
          "context": "echo \"ESTUARY_API_KEY=${{ secrets.ESTUARY_API_KEY }}\" >> .env",
          "secret_name": "ESTUARY_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy_infrastructure.yml",
          "line_number": 63,
          "context": "echo \"ESTUARY_API_KEY=${{ secrets.ESTUARY_API_KEY }}\" >> $GITHUB_ENV",
          "secret_name": "ESTUARY_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 68,
          "context": "ESTUARY_API_KEY=${{ secrets.ESTUARY_API_KEY }}",
          "secret_name": "ESTUARY_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "docker-compose.yml",
          "line_number": 117,
          "context": "- ESTUARY_API_KEY=${ESTUARY_API_KEY}",
          "secret_name": "ESTUARY_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "ESTUARY_API_URL",
      "recommended_name": "ESTUARY_API_URL",
      "service": "estuary",
      "credential_type": "API_URL",
      "references": [
        {
          "file_path": ".github/workflows/test_integrations.yml",
          "line_number": 57,
          "context": "echo \"ESTUARY_API_URL=${{ secrets.ESTUARY_API_URL }}\" >> .env",
          "secret_name": "ESTUARY_API_URL",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "EXA_API_KEY",
      "recommended_name": "EXA_API_KEY",
      "service": "exa",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 114,
          "context": "EXA_API_KEY: ${{ secrets.EXA_API_KEY }}",
          "secret_name": "EXA_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 107,
          "context": "\"EXA_API_KEY\": \"values.sophia.research.exa.api_key\",",
          "secret_name": "EXA_API_KEY",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    },
    {
      "current_name": "FDCPA_CHECKER_KEY",
      "recommended_name": "FDCPA_CHECKER_KEY",
      "service": "fdcpa",
      "credential_type": "CHECKER_KEY",
      "references": [
        {
          "file_path": "docs/SOPHIA_AI_DASHBOARD_STANDARDIZATION_IMPLEMENTATION.md",
          "line_number": 117,
          "context": "fdcpa_checker: ${FDCPA_CHECKER_KEY}",
          "secret_name": "FDCPA_CHECKER_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "FORCE_COLOR",
      "recommended_name": "FORCE_COLOR",
      "service": "force",
      "credential_type": "COLOR",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/mypy/util.py",
          "line_number": 581,
          "context": "env_var = os.getenv(\"MYPY_FORCE_COLOR\", os.getenv(\"FORCE_COLOR\", \"0\"))",
          "secret_name": "FORCE_COLOR",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "GCP_OIDC_SERVICE_ACCOUNT",
      "recommended_name": "GCP_OIDC_SERVICE_ACCOUNT",
      "service": "gcp",
      "credential_type": "OIDC_SERVICE_ACCOUNT",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 263,
          "context": "fn::secret: \"${GCP_OIDC_SERVICE_ACCOUNT}\"",
          "secret_name": "GCP_OIDC_SERVICE_ACCOUNT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 224,
          "context": "gcp-oidc-service-account: \"${GCP_OIDC_SERVICE_ACCOUNT}\"",
          "secret_name": "GCP_OIDC_SERVICE_ACCOUNT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "GH_API_TOKEN",
      "recommended_name": "GH_API_TOKEN",
      "service": "gh",
      "credential_type": "API_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 119,
          "context": "GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}",
          "secret_name": "GH_API_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 112,
          "context": "\"GH_API_TOKEN\": \"values.sophia.development.github.api_token\",",
          "secret_name": "GH_API_TOKEN",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    },
    {
      "current_name": "GH_IP_ADDRESS",
      "recommended_name": "GH_IP_ADDRESS",
      "service": "gh",
      "credential_type": "IP_ADDRESS",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 77,
          "context": "echo \"client_ip=${{ secrets.GH_IP_ADDRESS }}\" >> $GITHUB_OUTPUT",
          "secret_name": "GH_IP_ADDRESS",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 127,
          "context": "if [[ -z \"${{ secrets.GH_IP_ADDRESS }}\" ]]; then",
          "secret_name": "GH_IP_ADDRESS",
          "usage_type": "github_action"
        },
        {
          "file_path": "infrastructure/esc/sophia-intelligence-platform.yaml",
          "line_number": 20,
          "context": "fn::secret: \"${GH_IP_ADDRESS}\"     # 140.82.112.2 - CI/CD context",
          "secret_name": "GH_IP_ADDRESS",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/README.md",
          "line_number": 137,
          "context": "fn::secret: \"${GH_IP_ADDRESS}\"",
          "secret_name": "GH_IP_ADDRESS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "GH_TOKEN",
      "recommended_name": "GH_TOKEN",
      "service": "gh",
      "credential_type": "TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/sophia-main.yml",
          "line_number": 139,
          "context": "GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}",
          "secret_name": "GH_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia-main.yml",
          "line_number": 245,
          "context": "GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}",
          "secret_name": "GH_TOKEN",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "GITHUB_ACTIONS",
      "recommended_name": "GITHUB_ACTIONS",
      "service": "github",
      "credential_type": "ACTIONS",
      "references": [
        {
          "file_path": "scripts/dns-manager.py",
          "line_number": 137,
          "context": "os.getenv(\"GITHUB_ACTIONS\") == \"true\",",
          "secret_name": "GITHUB_ACTIONS",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 98,
          "context": "process.env.GITHUB_ACTIONS === 'true',",
          "secret_name": "GITHUB_ACTIONS",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 140,
          "context": "process.env.GITHUB_ACTIONS !== 'true',",
          "secret_name": "GITHUB_ACTIONS",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 220,
          "context": "GITHUB_ACTIONS: process.env.GITHUB_ACTIONS,",
          "secret_name": "GITHUB_ACTIONS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "GITHUB_PAT",
      "recommended_name": "GITHUB_PAT",
      "service": "github",
      "credential_type": "PAT",
      "references": [
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 64,
          "context": "GITHUB_PAT=${{ secrets.GITHUB_PAT }}",
          "secret_name": "GITHUB_PAT",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "GITHUB_REPOSITORY",
      "recommended_name": "GITHUB_REPOSITORY",
      "service": "github",
      "credential_type": "REPOSITORY",
      "references": [
        {
          "file_path": "scripts/dns-manager.py",
          "line_number": 138,
          "context": "os.getenv(\"CI\") == \"true\" and os.getenv(\"GITHUB_REPOSITORY\") is not None,",
          "secret_name": "GITHUB_REPOSITORY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 99,
          "context": "process.env.CI === 'true' && process.env.GITHUB_REPOSITORY !== undefined,",
          "secret_name": "GITHUB_REPOSITORY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 222,
          "context": "GITHUB_REPOSITORY: process.env.GITHUB_REPOSITORY,",
          "secret_name": "GITHUB_REPOSITORY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "GITHUB_RUN_ID",
      "recommended_name": "GITHUB_RUN_ID",
      "service": "github",
      "credential_type": "RUN_ID",
      "references": [
        {
          "file_path": "scripts/dns-manager.py",
          "line_number": 139,
          "context": "os.getenv(\"GITHUB_RUN_ID\") is not None,",
          "secret_name": "GITHUB_RUN_ID",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 100,
          "context": "process.env.GITHUB_RUN_ID !== undefined,",
          "secret_name": "GITHUB_RUN_ID",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "GITHUB_TOKEN",
      "recommended_name": "GITHUB_TOKEN",
      "service": "github",
      "credential_type": "TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/cursor-integration.yml",
          "line_number": 38,
          "context": "token: ${{ secrets.GITHUB_TOKEN }}",
          "secret_name": "GITHUB_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 63,
          "context": "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}",
          "secret_name": "GITHUB_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 116,
          "context": "github_token: ${{ secrets.GITHUB_TOKEN }}",
          "secret_name": "GITHUB_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": "docker-compose.production.yml",
          "line_number": 263,
          "context": "- GITHUB_TOKEN=${GITHUB_TOKEN}",
          "secret_name": "GITHUB_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.mcp-gateway.yml",
          "line_number": 70,
          "context": "- GITHUB_TOKEN=${GITHUB_TOKEN}",
          "secret_name": "GITHUB_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "GITHUB_WORKFLOW",
      "recommended_name": "GITHUB_WORKFLOW",
      "service": "github",
      "credential_type": "WORKFLOW",
      "references": [
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 101,
          "context": "process.env.GITHUB_WORKFLOW !== undefined,",
          "secret_name": "GITHUB_WORKFLOW",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "GIT_DIR",
      "recommended_name": "GIT_DIR",
      "service": "git",
      "credential_type": "DIR",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/git/repo/base.py",
          "line_number": 215,
          "context": "epath = path or os.getenv(\"GIT_DIR\")",
          "secret_name": "GIT_DIR",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "GIT_WORK_TREE",
      "recommended_name": "GIT_WORK_TREE",
      "service": "git",
      "credential_type": "WORK_TREE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/git/repo/base.py",
          "line_number": 264,
          "context": "self._working_tree_dir = os.getenv(\"GIT_WORK_TREE\")",
          "secret_name": "GIT_WORK_TREE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "GLBA_MONITOR_KEY",
      "recommended_name": "GLBA_MONITOR_KEY",
      "service": "glba",
      "credential_type": "MONITOR_KEY",
      "references": [
        {
          "file_path": "docs/SOPHIA_AI_DASHBOARD_STANDARDIZATION_IMPLEMENTATION.md",
          "line_number": 116,
          "context": "glba_monitor: ${GLBA_MONITOR_KEY}",
          "secret_name": "GLBA_MONITOR_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "GONG_ACCESS_KEY",
      "recommended_name": "GONG_API_KEY",
      "service": "gong",
      "credential_type": "ACCESS_KEY",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-platform-fixed.yml",
          "line_number": 325,
          "context": "GONG_ACCESS_KEY: ${{ secrets.GONG_ACCESS_KEY }}",
          "secret_name": "GONG_ACCESS_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform-fixed.yml",
          "line_number": 373,
          "context": "GONG_ACCESS_KEY: ${{ secrets.GONG_ACCESS_KEY }}",
          "secret_name": "GONG_ACCESS_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 67,
          "context": "GONG_ACCESS_KEY: ${{ secrets.GONG_ACCESS_KEY }}",
          "secret_name": "GONG_ACCESS_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/production_deployment.yml",
          "line_number": 46,
          "context": "GONG_ACCESS_KEY: ${{ secrets.GONG_ACCESS_KEY }}",
          "secret_name": "GONG_ACCESS_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 77,
          "context": "if [ -z \"${{ secrets.GONG_ACCESS_KEY }}\" ]; then",
          "secret_name": "GONG_ACCESS_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 141,
          "context": "GONG_ACCESS_KEY: ${{ secrets.GONG_ACCESS_KEY }}",
          "secret_name": "GONG_ACCESS_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 381,
          "context": "GONG_ACCESS_KEY: ${{ secrets.GONG_ACCESS_KEY }}",
          "secret_name": "GONG_ACCESS_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 395,
          "context": "GONG_ACCESS_KEY: ${{ secrets.GONG_ACCESS_KEY }}",
          "secret_name": "GONG_ACCESS_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 60,
          "context": "\"GONG_ACCESS_KEY\": \"values.sophia.business.gong.access_key\",",
          "secret_name": "GONG_ACCESS_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 145,
          "context": "fn::secret: \"${GONG_ACCESS_KEY}\"",
          "secret_name": "GONG_ACCESS_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 139,
          "context": "fn::secret: \"${GONG_ACCESS_KEY}\"",
          "secret_name": "GONG_ACCESS_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 81,
          "context": "gong-access-key: \"${GONG_ACCESS_KEY}\"",
          "secret_name": "GONG_ACCESS_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 134,
          "context": "--from-literal=GONG_API_KEY=\"${GONG_ACCESS_KEY}\" \\",
          "secret_name": "GONG_ACCESS_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/etl/gong/README.md",
          "line_number": 90,
          "context": "\"access_key\": \"${GONG_ACCESS_KEY}\",",
          "secret_name": "GONG_ACCESS_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/etl/gong/README.md",
          "line_number": 155,
          "context": "\"access_key\": \"${GONG_ACCESS_KEY}\",",
          "secret_name": "GONG_ACCESS_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "keep"
    },
    {
      "current_name": "GONG_ACCESS_KEY_SECRET",
      "recommended_name": "GONG_CLIENT_SECRET",
      "service": "gong",
      "credential_type": "CLIENT_SECRET",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-platform-fixed.yml",
          "line_number": 326,
          "context": "GONG_ACCESS_KEY_SECRET: ${{ secrets.GONG_ACCESS_KEY_SECRET }}",
          "secret_name": "GONG_ACCESS_KEY_SECRET",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform-fixed.yml",
          "line_number": 374,
          "context": "GONG_ACCESS_KEY_SECRET: ${{ secrets.GONG_ACCESS_KEY_SECRET }}",
          "secret_name": "GONG_ACCESS_KEY_SECRET",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 382,
          "context": "GONG_ACCESS_KEY_SECRET: ${{ secrets.GONG_ACCESS_KEY_SECRET }}",
          "secret_name": "GONG_ACCESS_KEY_SECRET",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 396,
          "context": "GONG_ACCESS_KEY_SECRET: ${{ secrets.GONG_ACCESS_KEY_SECRET }}",
          "secret_name": "GONG_ACCESS_KEY_SECRET",
          "usage_type": "github_action"
        },
        {
          "file_path": "backend/etl/gong/README.md",
          "line_number": 91,
          "context": "\"access_key_secret\": \"${GONG_ACCESS_KEY_SECRET}\",",
          "secret_name": "GONG_ACCESS_KEY_SECRET",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/etl/gong/README.md",
          "line_number": 156,
          "context": "\"access_key_secret\": \"${GONG_ACCESS_KEY_SECRET}\",",
          "secret_name": "GONG_ACCESS_KEY_SECRET",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "GONG_API_KEY",
      "recommended_name": "GONG_API_KEY",
      "service": "gong",
      "credential_type": "ACCESS_KEY",
      "references": [
        {
          "file_path": ".github/workflows/test_integrations.yml",
          "line_number": 47,
          "context": "echo \"GONG_API_KEY=${{ secrets.GONG_API_KEY }}\" >> .env",
          "secret_name": "GONG_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy_infrastructure.yml",
          "line_number": 60,
          "context": "echo \"GONG_API_KEY=${{ secrets.GONG_API_KEY }}\" >> $GITHUB_ENV",
          "secret_name": "GONG_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/infrastructure-tests.yml",
          "line_number": 149,
          "context": "GONG_API_KEY: ${{ secrets.GONG_API_KEY }}",
          "secret_name": "GONG_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_secrets_export.yml",
          "line_number": 61,
          "context": "GONG_API_KEY: ${{ secrets.GONG_API_KEY }}",
          "secret_name": "GONG_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 37,
          "context": "GONG_API_KEY=${{ secrets.GONG_API_KEY }}",
          "secret_name": "GONG_API_KEY",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "GONG_API_SECRET",
      "recommended_name": "GONG_CLIENT_SECRET",
      "service": "gong",
      "credential_type": "CLIENT_SECRET",
      "references": [
        {
          "file_path": ".github/workflows/test_integrations.yml",
          "line_number": 48,
          "context": "echo \"GONG_API_SECRET=${{ secrets.GONG_API_SECRET }}\" >> .env",
          "secret_name": "GONG_API_SECRET",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy_infrastructure.yml",
          "line_number": 61,
          "context": "echo \"GONG_API_SECRET=${{ secrets.GONG_API_SECRET }}\" >> $GITHUB_ENV",
          "secret_name": "GONG_API_SECRET",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "GONG_BASE_URL",
      "recommended_name": "GONG_API_KEY",
      "service": "gong",
      "credential_type": "ACCESS_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 69,
          "context": "GONG_BASE_URL: ${{ secrets.GONG_BASE_URL }}",
          "secret_name": "GONG_BASE_URL",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 143,
          "context": "GONG_BASE_URL: ${{ secrets.GONG_BASE_URL }}",
          "secret_name": "GONG_BASE_URL",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 62,
          "context": "\"GONG_BASE_URL\": \"values.sophia.business.gong.base_url\",",
          "secret_name": "GONG_BASE_URL",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": false,
      "action_required": "keep"
    },
    {
      "current_name": "GONG_CLIENT_ID",
      "recommended_name": "GONG_API_KEY",
      "service": "gong",
      "credential_type": "ACCESS_KEY",
      "references": [
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 38,
          "context": "GONG_CLIENT_ID=${{ secrets.GONG_CLIENT_ID }}",
          "secret_name": "GONG_CLIENT_ID",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "GONG_CLIENT_SECRET",
      "recommended_name": "GONG_CLIENT_SECRET",
      "service": "gong",
      "credential_type": "CLIENT_SECRET",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 68,
          "context": "GONG_CLIENT_SECRET: ${{ secrets.GONG_CLIENT_SECRET }}",
          "secret_name": "GONG_CLIENT_SECRET",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_secrets_export.yml",
          "line_number": 62,
          "context": "GONG_CLIENT_SECRET: ${{ secrets.GONG_CLIENT_SECRET }}",
          "secret_name": "GONG_CLIENT_SECRET",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/production_deployment.yml",
          "line_number": 47,
          "context": "GONG_CLIENT_SECRET: ${{ secrets.GONG_CLIENT_SECRET }}",
          "secret_name": "GONG_CLIENT_SECRET",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 81,
          "context": "if [ -z \"${{ secrets.GONG_CLIENT_SECRET }}\" ]; then",
          "secret_name": "GONG_CLIENT_SECRET",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 142,
          "context": "GONG_CLIENT_SECRET: ${{ secrets.GONG_CLIENT_SECRET }}",
          "secret_name": "GONG_CLIENT_SECRET",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 39,
          "context": "GONG_CLIENT_SECRET=${{ secrets.GONG_CLIENT_SECRET }}",
          "secret_name": "GONG_CLIENT_SECRET",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 61,
          "context": "\"GONG_CLIENT_SECRET\": \"values.sophia.business.gong.client_secret\",",
          "secret_name": "GONG_CLIENT_SECRET",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 147,
          "context": "fn::secret: \"${GONG_CLIENT_SECRET}\"",
          "secret_name": "GONG_CLIENT_SECRET",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 141,
          "context": "fn::secret: \"${GONG_CLIENT_SECRET}\"",
          "secret_name": "GONG_CLIENT_SECRET",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 82,
          "context": "gong-client-secret: \"${GONG_CLIENT_SECRET}\"",
          "secret_name": "GONG_CLIENT_SECRET",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 135,
          "context": "--from-literal=GONG_WEBHOOK_SECRETS=\"${GONG_CLIENT_SECRET}\" \\",
          "secret_name": "GONG_CLIENT_SECRET",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "GONG_OAUTH_CLIENT_ID",
      "recommended_name": "GONG_API_KEY",
      "service": "gong",
      "credential_type": "ACCESS_KEY",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 154,
          "context": "fn::secret: \"${GONG_OAUTH_CLIENT_ID}\"",
          "secret_name": "GONG_OAUTH_CLIENT_ID",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 86,
          "context": "gong-oauth-client-id: \"${GONG_OAUTH_CLIENT_ID}\"",
          "secret_name": "GONG_OAUTH_CLIENT_ID",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "GONG_OAUTH_CLIENT_SECRET",
      "recommended_name": "GONG_CLIENT_SECRET",
      "service": "gong",
      "credential_type": "CLIENT_SECRET",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 156,
          "context": "fn::secret: \"${GONG_OAUTH_CLIENT_SECRET}\"",
          "secret_name": "GONG_OAUTH_CLIENT_SECRET",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 87,
          "context": "gong-oauth-client-secret: \"${GONG_OAUTH_CLIENT_SECRET}\"",
          "secret_name": "GONG_OAUTH_CLIENT_SECRET",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "GONG_OAUTH_REFRESH_TOKEN",
      "recommended_name": "GONG_API_KEY",
      "service": "gong",
      "credential_type": "ACCESS_KEY",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 158,
          "context": "fn::secret: \"${GONG_OAUTH_REFRESH_TOKEN}\"",
          "secret_name": "GONG_OAUTH_REFRESH_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 88,
          "context": "gong-oauth-refresh-token: \"${GONG_OAUTH_REFRESH_TOKEN}\"",
          "secret_name": "GONG_OAUTH_REFRESH_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "GONG_WEBHOOK_SECRET",
      "recommended_name": "GONG_CLIENT_SECRET",
      "service": "gong",
      "credential_type": "CLIENT_SECRET",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 164,
          "context": "fn::secret: \"${GONG_WEBHOOK_SECRET}\"",
          "secret_name": "GONG_WEBHOOK_SECRET",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 83,
          "context": "gong-webhook-secret: \"${GONG_WEBHOOK_SECRET}\"",
          "secret_name": "GONG_WEBHOOK_SECRET",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "GRAFANA_ADMIN_PASSWORD",
      "recommended_name": "GRAFANA_ADMIN_PASSWORD",
      "service": "grafana",
      "credential_type": "ADMIN_PASSWORD",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 200,
          "context": "fn::secret: \"${GRAFANA_ADMIN_PASSWORD}\"",
          "secret_name": "GRAFANA_ADMIN_PASSWORD",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 206,
          "context": "grafana-admin-password: \"${GRAFANA_ADMIN_PASSWORD}\"",
          "secret_name": "GRAFANA_ADMIN_PASSWORD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "GRAFANA_PASSWORD",
      "recommended_name": "GRAFANA_PASSWORD",
      "service": "grafana",
      "credential_type": "PASSWORD",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 102,
          "context": "GRAFANA_PASSWORD: ${{ secrets.GRAFANA_PASSWORD }}",
          "secret_name": "GRAFANA_PASSWORD",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 95,
          "context": "\"GRAFANA_PASSWORD\": \"values.sophia.monitoring.grafana.password\",",
          "secret_name": "GRAFANA_PASSWORD",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 198,
          "context": "fn::secret: \"${GRAFANA_PASSWORD}\"",
          "secret_name": "GRAFANA_PASSWORD",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 101,
          "context": "fn::secret: \"${GRAFANA_PASSWORD}\"",
          "secret_name": "GRAFANA_PASSWORD",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 205,
          "context": "grafana-password: \"${GRAFANA_PASSWORD}\"",
          "secret_name": "GRAFANA_PASSWORD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "GRAFANA_URL",
      "recommended_name": "GRAFANA_URL",
      "service": "grafana",
      "credential_type": "URL",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 100,
          "context": "GRAFANA_URL: ${{ secrets.GRAFANA_URL }}",
          "secret_name": "GRAFANA_URL",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 93,
          "context": "\"GRAFANA_URL\": \"values.sophia.monitoring.grafana.url\",",
          "secret_name": "GRAFANA_URL",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 194,
          "context": "fn::secret: \"${GRAFANA_URL}\"",
          "secret_name": "GRAFANA_URL",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 97,
          "context": "fn::secret: \"${GRAFANA_URL}\"",
          "secret_name": "GRAFANA_URL",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 203,
          "context": "grafana-url: \"${GRAFANA_URL}\"",
          "secret_name": "GRAFANA_URL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "GRAFANA_USERNAME",
      "recommended_name": "GRAFANA_USERNAME",
      "service": "grafana",
      "credential_type": "USERNAME",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 101,
          "context": "GRAFANA_USERNAME: ${{ secrets.GRAFANA_USERNAME }}",
          "secret_name": "GRAFANA_USERNAME",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 94,
          "context": "\"GRAFANA_USERNAME\": \"values.sophia.monitoring.grafana.username\",",
          "secret_name": "GRAFANA_USERNAME",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 196,
          "context": "fn::secret: \"${GRAFANA_USERNAME}\"",
          "secret_name": "GRAFANA_USERNAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 99,
          "context": "fn::secret: \"${GRAFANA_USERNAME}\"",
          "secret_name": "GRAFANA_USERNAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 204,
          "context": "grafana-username: \"${GRAFANA_USERNAME}\"",
          "secret_name": "GRAFANA_USERNAME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "GREEN",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "activate_env.sh",
          "line_number": 23,
          "context": "echo -e \"${GREEN}\u2705 Virtual environment activated for $PROJECT_NAME${NC}\"",
          "secret_name": "GREEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "activate_env.sh",
          "line_number": 24,
          "context": "echo -e \"${GREEN}Python: $(python --version) at $(which python)${NC}\"",
          "secret_name": "GREEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "activate_env.sh",
          "line_number": 39,
          "context": "echo -e \"${GREEN}\u2705 Environment variables loaded${NC}\"",
          "secret_name": "GREEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "activate_env.sh",
          "line_number": 42,
          "context": "echo -e \"${GREEN}\ud83d\ude80 Environment ready for $PROJECT_NAME!${NC}\"",
          "secret_name": "GREEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 45,
          "context": "echo -e \"${GREEN}\u2705 Backend is already running!${NC}\"",
          "secret_name": "GREEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 60,
          "context": "echo -e \"\\n${GREEN}\u2705 Backend started successfully!${NC}\"",
          "secret_name": "GREEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 81,
          "context": "echo -e \"\\n${GREEN}\u2705 CEO Dashboard is ready!${NC}\"",
          "secret_name": "GREEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 87,
          "context": "echo -e \"${GREEN}\ud83c\udf89 Your executive command center is ready for use!${NC}\"",
          "secret_name": "GREEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/verify_sentry_setup.sh",
          "line_number": 24,
          "context": "echo -e \"${GREEN}\u2705${NC} $description: $file\"",
          "secret_name": "GREEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/verify_sentry_setup.sh",
          "line_number": 38,
          "context": "echo -e \"${GREEN}\u2705${NC} $description: $cmd\"",
          "secret_name": "GREEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/verify_sentry_setup.sh",
          "line_number": 137,
          "context": "echo -e \"${GREEN}\u2705 Verification complete!${NC}\"",
          "secret_name": "GREEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/setup_codacy_macos.sh",
          "line_number": 23,
          "context": "echo -e \"${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}\"",
          "secret_name": "GREEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/setup_codacy_macos.sh",
          "line_number": 461,
          "context": "echo -e \"${GREEN}Next steps:${NC}\"",
          "secret_name": "GREEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 29,
          "context": "echo -e \"${GREEN}[SUCCESS]${NC} $1\"",
          "secret_name": "GREEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "GRPC_SINGLE_THREADED_UNARY_STREAM",
      "recommended_name": "GRPC_SINGLE_THREADED_UNARY_STREAM",
      "service": "grpc",
      "credential_type": "SINGLE_THREADED_UNARY_STREAM",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/grpc/_channel.py",
          "line_number": 62,
          "context": "os.getenv(\"GRPC_SINGLE_THREADED_UNARY_STREAM\") is not None",
          "secret_name": "GRPC_SINGLE_THREADED_UNARY_STREAM",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "HF_DAGSHUB_LOG_ARTIFACTS",
      "recommended_name": "HF_DAGSHUB_LOG_ARTIFACTS",
      "service": "hf",
      "credential_type": "DAGSHUB_LOG_ARTIFACTS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 1087,
          "context": "self.log_artifacts = os.getenv(\"HF_DAGSHUB_LOG_ARTIFACTS\", \"FALSE\").upper() in ENV_VARS_TRUE_VALUES",
          "secret_name": "HF_DAGSHUB_LOG_ARTIFACTS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "HF_DAGSHUB_MODEL_NAME",
      "recommended_name": "HF_DAGSHUB_MODEL_NAME",
      "service": "hf",
      "credential_type": "DAGSHUB_MODEL_NAME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 1088,
          "context": "self.name = os.getenv(\"HF_DAGSHUB_MODEL_NAME\") or \"main\"",
          "secret_name": "HF_DAGSHUB_MODEL_NAME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "HF_ENDPOINT",
      "recommended_name": "HF_ENDPOINT",
      "service": "hf",
      "credential_type": "ENDPOINT",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/huggingface_hub/constants.py",
          "line_number": 67,
          "context": "ENDPOINT = os.getenv(\"HF_ENDPOINT\", _HF_DEFAULT_ENDPOINT).rstrip(\"/\")",
          "secret_name": "HF_ENDPOINT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "HF_HOME",
      "recommended_name": "HF_HOME",
      "service": "hf",
      "credential_type": "HOME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 80,
          "context": "os.getenv(\"HF_HOME\", os.path.join(os.getenv(\"XDG_CACHE_HOME\", \"~/.cache\"), \"huggingface\"))",
          "secret_name": "HF_HOME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "HF_HUB_VERBOSITY",
      "recommended_name": "HF_HUB_VERBOSITY",
      "service": "hf",
      "credential_type": "HUB_VERBOSITY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/huggingface_hub/utils/logging.py",
          "line_number": 58,
          "context": "env_level_str = os.getenv(\"HF_HUB_VERBOSITY\", None)",
          "secret_name": "HF_HUB_VERBOSITY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "HF_MLFLOW_LOG_ARTIFACTS",
      "recommended_name": "HF_MLFLOW_LOG_ARTIFACTS",
      "service": "hf",
      "credential_type": "MLFLOW_LOG_ARTIFACTS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 975,
          "context": "self._log_artifacts = os.getenv(\"HF_MLFLOW_LOG_ARTIFACTS\", \"FALSE\").upper() in ENV_VARS_TRUE_VALUES",
          "secret_name": "HF_MLFLOW_LOG_ARTIFACTS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "HF_MODULES_CACHE",
      "recommended_name": "HF_MODULES_CACHE",
      "service": "hf",
      "credential_type": "MODULES_CACHE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 105,
          "context": "HF_MODULES_CACHE = os.getenv(\"HF_MODULES_CACHE\", os.path.join(hf_cache_home, \"modules\"))",
          "secret_name": "HF_MODULES_CACHE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "HF_XET_CACHE",
      "recommended_name": "HF_XET_CACHE",
      "service": "hf",
      "credential_type": "XET_CACHE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/huggingface_hub/constants.py",
          "line_number": 293,
          "context": "HF_XET_CACHE = os.getenv(\"HF_XET_CACHE\", default_xet_cache_path)",
          "secret_name": "HF_XET_CACHE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "HOME",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pygments/formatters/img.py",
          "line_number": 131,
          "context": "for font_dir in (os.path.join(os.getenv(\"HOME\"), 'Library/Fonts/'),",
          "secret_name": "HOME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 136,
          "context": "process.env.USER !== undefined && process.env.HOME !== undefined,",
          "secret_name": "HOME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 229,
          "context": "HOME: process.env.HOME",
          "secret_name": "HOME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "HTTPS_PROXY",
      "recommended_name": "HTTPS_PROXY",
      "service": "https",
      "credential_type": "PROXY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/connection_diagnostic.py",
          "line_number": 102,
          "context": "proxy_url = os.getenv(\"HTTPS_PROXY\")",
          "secret_name": "HTTPS_PROXY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "HUBSPOT_ACCESS_TOKEN",
      "recommended_name": "HUBSPOT_ACCESS_TOKEN",
      "service": "hubspot",
      "credential_type": "ACCESS_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 70,
          "context": "HUBSPOT_ACCESS_TOKEN: ${{ secrets.HUBSPOT_ACCESS_TOKEN }}",
          "secret_name": "HUBSPOT_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 150,
          "context": "HUBSPOT_ACCESS_TOKEN: ${{ secrets.HUBSPOT_ACCESS_TOKEN }}",
          "secret_name": "HUBSPOT_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 63,
          "context": "\"HUBSPOT_ACCESS_TOKEN\": \"values.sophia.business.hubspot.access_token\",",
          "secret_name": "HUBSPOT_ACCESS_TOKEN",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 144,
          "context": "fn::secret: \"${HUBSPOT_ACCESS_TOKEN}\"",
          "secret_name": "HUBSPOT_ACCESS_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 177,
          "context": "hubspot-access-token: \"${HUBSPOT_ACCESS_TOKEN}\"",
          "secret_name": "HUBSPOT_ACCESS_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "HUBSPOT_API_KEY",
      "recommended_name": "HUBSPOT_API_KEY",
      "service": "hubspot",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sophia_secrets_export.yml",
          "line_number": 63,
          "context": "HUBSPOT_API_KEY: ${{ secrets.HUBSPOT_API_KEY }}",
          "secret_name": "HUBSPOT_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 70,
          "context": "HUBSPOT_API_KEY=${{ secrets.HUBSPOT_API_KEY }}",
          "secret_name": "HUBSPOT_API_KEY",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "HUBSPOT_API_TOKEN",
      "recommended_name": "HUBSPOT_API_TOKEN",
      "service": "hubspot",
      "credential_type": "API_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/production_deployment.yml",
          "line_number": 48,
          "context": "HUBSPOT_API_TOKEN: ${{ secrets.HUBSPOT_API_TOKEN }}",
          "secret_name": "HUBSPOT_API_TOKEN",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "HUGGINGFACE_API_TOKEN",
      "recommended_name": "HUGGINGFACE_API_TOKEN",
      "service": "huggingface",
      "credential_type": "API_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 52,
          "context": "HUGGINGFACE_API_TOKEN: ${{ secrets.HUGGINGFACE_API_TOKEN }}",
          "secret_name": "HUGGINGFACE_API_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 45,
          "context": "\"HUGGINGFACE_API_TOKEN\": \"values.sophia.ai.huggingface.api_token\",",
          "secret_name": "HUGGINGFACE_API_TOKEN",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 29,
          "context": "fn::secret: \"${HUGGINGFACE_API_TOKEN}\"",
          "secret_name": "HUGGINGFACE_API_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "HUGGINGFACE_ASSETS_CACHE",
      "recommended_name": "HUGGINGFACE_ASSETS_CACHE",
      "service": "huggingface",
      "credential_type": "ASSETS_CACHE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/huggingface_hub/constants.py",
          "line_number": 145,
          "context": "HUGGINGFACE_ASSETS_CACHE = os.getenv(\"HUGGINGFACE_ASSETS_CACHE\", default_assets_cache_path)",
          "secret_name": "HUGGINGFACE_ASSETS_CACHE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "HUGGINGFACE_HUB_CACHE",
      "recommended_name": "HUGGINGFACE_HUB_CACHE",
      "service": "huggingface",
      "credential_type": "HUB_CACHE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/huggingface_hub/constants.py",
          "line_number": 144,
          "context": "HUGGINGFACE_HUB_CACHE = os.getenv(\"HUGGINGFACE_HUB_CACHE\", default_cache_path)",
          "secret_name": "HUGGINGFACE_HUB_CACHE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 103,
          "context": "HUGGINGFACE_HUB_CACHE = os.getenv(\"HUGGINGFACE_HUB_CACHE\", PYTORCH_TRANSFORMERS_CACHE)",
          "secret_name": "HUGGINGFACE_HUB_CACHE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "HUNTER_WARFIELD_KEY",
      "recommended_name": "HUNTER_WARFIELD_KEY",
      "service": "hunter",
      "credential_type": "WARFIELD_KEY",
      "references": [
        {
          "file_path": "docs/SOPHIA_AI_DASHBOARD_STANDARDIZATION_IMPLEMENTATION.md",
          "line_number": 104,
          "context": "hunter_warfield_tracker: ${HUNTER_WARFIELD_KEY}",
          "secret_name": "HUNTER_WARFIELD_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "IANA_TIME_ZONE",
      "recommended_name": "IANA_TIME_ZONE",
      "service": "iana",
      "credential_type": "TIME_ZONE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 305,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 305,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 305,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 325,
          "context": ":param pulumi.Input[builtins.str] schedule: Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 325,
          "context": ":param pulumi.Input[builtins.str] schedule: Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 325,
          "context": ":param pulumi.Input[builtins.str] schedule: Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 403,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 403,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 403,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5333,
          "context": "Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: 'CRON_TZ=${IANA_TIME_ZONE}' or 'TZ=${IANA_TIME_ZONE}'. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5333,
          "context": "Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: 'CRON_TZ=${IANA_TIME_ZONE}' or 'TZ=${IANA_TIME_ZONE}'. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5333,
          "context": "Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: 'CRON_TZ=${IANA_TIME_ZONE}' or 'TZ=${IANA_TIME_ZONE}'. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5355,
          "context": ":param pulumi.Input[builtins.str] schedule: Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: 'CRON_TZ=${IANA_TIME_ZONE}' or 'TZ=${IANA_TIME_ZONE}'. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5355,
          "context": ":param pulumi.Input[builtins.str] schedule: Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: 'CRON_TZ=${IANA_TIME_ZONE}' or 'TZ=${IANA_TIME_ZONE}'. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5355,
          "context": ":param pulumi.Input[builtins.str] schedule: Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: 'CRON_TZ=${IANA_TIME_ZONE}' or 'TZ=${IANA_TIME_ZONE}'. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5409,
          "context": "Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: 'CRON_TZ=${IANA_TIME_ZONE}' or 'TZ=${IANA_TIME_ZONE}'. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5409,
          "context": "Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: 'CRON_TZ=${IANA_TIME_ZONE}' or 'TZ=${IANA_TIME_ZONE}'. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5409,
          "context": "Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: 'CRON_TZ=${IANA_TIME_ZONE}' or 'TZ=${IANA_TIME_ZONE}'. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5526,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5526,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5526,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5546,
          "context": ":param pulumi.Input[builtins.str] schedule: Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5546,
          "context": ":param pulumi.Input[builtins.str] schedule: Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5546,
          "context": ":param pulumi.Input[builtins.str] schedule: Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5624,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5624,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/_inputs.py",
          "line_number": 5624,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 206,
          "context": ":param builtins.str schedule: Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 206,
          "context": ":param builtins.str schedule: Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 206,
          "context": ":param builtins.str schedule: Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 264,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 264,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 264,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 4070,
          "context": ":param builtins.str schedule: Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: 'CRON_TZ=${IANA_TIME_ZONE}' or 'TZ=${IANA_TIME_ZONE}'. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 4070,
          "context": ":param builtins.str schedule: Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: 'CRON_TZ=${IANA_TIME_ZONE}' or 'TZ=${IANA_TIME_ZONE}'. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 4070,
          "context": ":param builtins.str schedule: Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: 'CRON_TZ=${IANA_TIME_ZONE}' or 'TZ=${IANA_TIME_ZONE}'. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 4112,
          "context": "Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: 'CRON_TZ=${IANA_TIME_ZONE}' or 'TZ=${IANA_TIME_ZONE}'. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 4112,
          "context": "Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: 'CRON_TZ=${IANA_TIME_ZONE}' or 'TZ=${IANA_TIME_ZONE}'. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 4112,
          "context": "Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: 'CRON_TZ=${IANA_TIME_ZONE}' or 'TZ=${IANA_TIME_ZONE}'. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 4227,
          "context": ":param builtins.str schedule: Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 4227,
          "context": ":param builtins.str schedule: Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 4227,
          "context": ":param builtins.str schedule: Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 4285,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 4285,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/dataplex/outputs.py",
          "line_number": 4285,
          "context": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/vertex/_inputs.py",
          "line_number": 2119,
          "context": "To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or \"TZ=${IANA_TIME_ZONE}\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/vertex/_inputs.py",
          "line_number": 2119,
          "context": "To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or \"TZ=${IANA_TIME_ZONE}\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/vertex/_inputs.py",
          "line_number": 2130,
          "context": "To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or \"TZ=${IANA_TIME_ZONE}\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/vertex/_inputs.py",
          "line_number": 2130,
          "context": "To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or \"TZ=${IANA_TIME_ZONE}\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/vertex/_inputs.py",
          "line_number": 2140,
          "context": "To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or \"TZ=${IANA_TIME_ZONE}\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/vertex/_inputs.py",
          "line_number": 2140,
          "context": "To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or \"TZ=${IANA_TIME_ZONE}\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/vertex/outputs.py",
          "line_number": 1725,
          "context": "To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or \"TZ=${IANA_TIME_ZONE}\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/vertex/outputs.py",
          "line_number": 1725,
          "context": "To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or \"TZ=${IANA_TIME_ZONE}\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/vertex/outputs.py",
          "line_number": 1735,
          "context": "To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or \"TZ=${IANA_TIME_ZONE}\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/vertex/outputs.py",
          "line_number": 1735,
          "context": "To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or \"TZ=${IANA_TIME_ZONE}\".",
          "secret_name": "IANA_TIME_ZONE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "IDE_PROJECT_ROOTS",
      "recommended_name": "IDE_PROJECT_ROOTS",
      "service": "ide",
      "credential_type": "PROJECT_ROOTS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_filtering.py",
          "line_number": 105,
          "context": "project_roots = os.getenv(\"IDE_PROJECT_ROOTS\", None)",
          "secret_name": "IDE_PROJECT_ROOTS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "INIT_METHOD",
      "recommended_name": "INIT_METHOD",
      "service": "init",
      "credential_type": "METHOD",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/testing/_internal/distributed/distributed_test.py",
          "line_number": 182,
          "context": "INIT_METHOD = os.getenv(\"INIT_METHOD\", \"env://\")",
          "secret_name": "INIT_METHOD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "INTERCOM_ACCESS_TOKEN",
      "recommended_name": "INTERCOM_ACCESS_TOKEN",
      "service": "intercom",
      "credential_type": "ACCESS_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 71,
          "context": "INTERCOM_ACCESS_TOKEN=${{ secrets.INTERCOM_ACCESS_TOKEN }}",
          "secret_name": "INTERCOM_ACCESS_TOKEN",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "JENKINS_HOME",
      "recommended_name": "JENKINS_HOME",
      "service": "jenkins",
      "credential_type": "HOME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/test_util.py",
          "line_number": 14,
          "context": "RUNNING_ON_JENKINS = os.getenv(\"JENKINS_HOME\") is not None",
          "secret_name": "JENKINS_HOME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "JSONSCHEMA_DEBUG_CODE_GENERATION",
      "recommended_name": "JSONSCHEMA_DEBUG_CODE_GENERATION",
      "service": "jsonschema",
      "credential_type": "DEBUG_CODE_GENERATION",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/error_reporting.py",
          "line_number": 65,
          "context": "debug_code = os.getenv(\"JSONSCHEMA_DEBUG_CODE_GENERATION\", \"false\").lower()",
          "secret_name": "JSONSCHEMA_DEBUG_CODE_GENERATION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "JWT_LIFETIME_IN_SECONDS",
      "recommended_name": "JWT_LIFETIME_IN_SECONDS",
      "service": "jwt",
      "credential_type": "LIFETIME_IN_SECONDS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/auth/keypair.py",
          "line_number": 82,
          "context": "seconds=int(os.getenv(\"JWT_LIFETIME_IN_SECONDS\", lifetime_in_seconds))",
          "secret_name": "JWT_LIFETIME_IN_SECONDS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "JWT_SECRET",
      "recommended_name": "JWT_SECRET",
      "service": "jwt",
      "credential_type": "SECRET",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 130,
          "context": "JWT_SECRET: ${{ secrets.JWT_SECRET }}",
          "secret_name": "JWT_SECRET",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 123,
          "context": "\"JWT_SECRET\": \"values.sophia.security.jwt.secret\",",
          "secret_name": "JWT_SECRET",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 115,
          "context": "fn::secret: \"${JWT_SECRET}\"",
          "secret_name": "JWT_SECRET",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 59,
          "context": "jwt-secret: \"${JWT_SECRET}\"",
          "secret_name": "JWT_SECRET",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "KEY",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 122,
          "context": "echo \"Getting secret: ${SERVICE}_${KEY}\"",
          "secret_name": "KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 133,
          "context": "echo \"Secret not found: ${SERVICE}_${KEY}\"",
          "secret_name": "KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 138,
          "context": "ENV_VAR_NAME=\"${SERVICE}_${KEY}\"",
          "secret_name": "KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 161,
          "context": "echo \"Getting config: ${SERVICE}_${KEY}\"",
          "secret_name": "KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 173,
          "context": "echo \"Config not found: ${SERVICE}_${KEY}\"",
          "secret_name": "KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 178,
          "context": "ENV_VAR_NAME=\"${SERVICE}_${KEY}\"",
          "secret_name": "KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "KUBERNETES_SERVICE_HOST",
      "recommended_name": "KUBERNETES_SERVICE_HOST",
      "service": "kubernetes",
      "credential_type": "SERVICE_HOST",
      "references": [
        {
          "file_path": "scripts/dns-manager.py",
          "line_number": 150,
          "context": "os.getenv(\"KUBERNETES_SERVICE_HOST\") is not None,",
          "secret_name": "KUBERNETES_SERVICE_HOST",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 121,
          "context": "process.env.KUBERNETES_SERVICE_HOST !== undefined,",
          "secret_name": "KUBERNETES_SERVICE_HOST",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "LAMBDA_API_KEY",
      "recommended_name": "LAMBDA_LABS_API_KEY",
      "service": "lambda_labs",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 106,
          "context": "LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}",
          "secret_name": "LAMBDA_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 99,
          "context": "\"LAMBDA_API_KEY\": \"values.sophia.infrastructure.lambda_labs.api_key\",",
          "secret_name": "LAMBDA_API_KEY",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": false,
      "action_required": "verify_usage"
    },
    {
      "current_name": "LAMBDA_IP_ADDRESS",
      "recommended_name": "LAMBDA_LABS_API_KEY",
      "service": "lambda_labs",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 119,
          "context": "if [[ -z \"${{ secrets.LAMBDA_IP_ADDRESS }}\" ]]; then",
          "secret_name": "LAMBDA_IP_ADDRESS",
          "usage_type": "github_action"
        },
        {
          "file_path": "infrastructure/esc/sophia-intelligence-platform.yaml",
          "line_number": 18,
          "context": "fn::secret: \"${LAMBDA_IP_ADDRESS}\"  # 170.9.9.253 - Production server",
          "secret_name": "LAMBDA_IP_ADDRESS",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/README.md",
          "line_number": 135,
          "context": "fn::secret: \"${LAMBDA_IP_ADDRESS}\"",
          "secret_name": "LAMBDA_IP_ADDRESS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "LAMBDA_LABS_API_KEY",
      "recommended_name": "LAMBDA_LABS_API_KEY",
      "service": "lambda_labs",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sophia_secrets_export.yml",
          "line_number": 27,
          "context": "LAMBDA_LABS_API_KEY: ${{ secrets.LAMBDA_LABS_API_KEY }}",
          "secret_name": "LAMBDA_LABS_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_secrets_export.yml",
          "line_number": 52,
          "context": "LAMBDA_LABS_API_KEY: ${{ secrets.LAMBDA_LABS_API_KEY }}",
          "secret_name": "LAMBDA_LABS_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_ai_infrastructure.yml",
          "line_number": 12,
          "context": "LAMBDA_LABS_API_KEY: ${{ secrets.LAMBDA_LABS_API_KEY }}",
          "secret_name": "LAMBDA_LABS_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/enhanced-deployment-oversight.yml",
          "line_number": 33,
          "context": "LAMBDA_LABS_API_KEY: ${{ secrets.LAMBDA_LABS_API_KEY }}",
          "secret_name": "LAMBDA_LABS_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/production_deployment.yml",
          "line_number": 54,
          "context": "LAMBDA_LABS_API_KEY: ${{ secrets.LAMBDA_LABS_API_KEY }}",
          "secret_name": "LAMBDA_LABS_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 67,
          "context": "LAMBDA_LABS_API_KEY=${{ secrets.LAMBDA_LABS_API_KEY }}",
          "secret_name": "LAMBDA_LABS_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 120,
          "context": "fn::secret: \"${LAMBDA_LABS_API_KEY}\"",
          "secret_name": "LAMBDA_LABS_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 231,
          "context": "lambda-labs-api-key: \"${LAMBDA_LABS_API_KEY}\"",
          "secret_name": "LAMBDA_LABS_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "LAMBDA_LABS_CONTEXT",
      "recommended_name": "LAMBDA_LABS_API_KEY",
      "service": "lambda_labs",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 144,
          "context": "process.env.LAMBDA_LABS_CONTEXT === 'true' || process.env.NODE_ENV === 'development'",
          "secret_name": "LAMBDA_LABS_CONTEXT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 227,
          "context": "LAMBDA_LABS_CONTEXT: process.env.LAMBDA_LABS_CONTEXT,",
          "secret_name": "LAMBDA_LABS_CONTEXT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "LAMBDA_LABS_CONTROL_PLANE_IP",
      "recommended_name": "LAMBDA_LABS_API_KEY",
      "service": "lambda_labs",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 122,
          "context": "fn::secret: \"${LAMBDA_LABS_CONTROL_PLANE_IP}\"",
          "secret_name": "LAMBDA_LABS_CONTROL_PLANE_IP",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 232,
          "context": "lambda-labs-control-plane-ip: \"${LAMBDA_LABS_CONTROL_PLANE_IP}\"",
          "secret_name": "LAMBDA_LABS_CONTROL_PLANE_IP",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "LAMBDA_LABS_SSH_KEY_NAME",
      "recommended_name": "LAMBDA_LABS_API_KEY",
      "service": "lambda_labs",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 124,
          "context": "fn::secret: \"${LAMBDA_LABS_SSH_KEY_NAME}\"",
          "secret_name": "LAMBDA_LABS_SSH_KEY_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 233,
          "context": "lambda-labs-ssh-key-name: \"${LAMBDA_LABS_SSH_KEY_NAME}\"",
          "secret_name": "LAMBDA_LABS_SSH_KEY_NAME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "LANGCHAIN_API_KEY",
      "recommended_name": "LANGCHAIN_API_KEY",
      "service": "langchain",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 53,
          "context": "LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}",
          "secret_name": "LANGCHAIN_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 46,
          "context": "\"LANGCHAIN_API_KEY\": \"values.sophia.ai.langchain.api_key\",",
          "secret_name": "LANGCHAIN_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 32,
          "context": "fn::secret: \"${LANGCHAIN_API_KEY}\"",
          "secret_name": "LANGCHAIN_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "LANGSMITH_API_KEY",
      "recommended_name": "LANGSMITH_API_KEY",
      "service": "langsmith",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 54,
          "context": "LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}",
          "secret_name": "LANGSMITH_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 47,
          "context": "\"LANGSMITH_API_KEY\": \"values.sophia.ai.langsmith.api_key\",",
          "secret_name": "LANGSMITH_API_KEY",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    },
    {
      "current_name": "LD_PRELOAD",
      "recommended_name": "LD_PRELOAD",
      "service": "ld",
      "credential_type": "PRELOAD",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/backends/xeon/run_cpu.py",
          "line_number": 288,
          "context": "for item in os.getenv(\"LD_PRELOAD\", \"\").split(\":\"):",
          "secret_name": "LD_PRELOAD",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/backends/xeon/run_cpu.py",
          "line_number": 297,
          "context": "ld_preloads = [f\"{matches[0]}\", os.getenv(\"LD_PRELOAD\", \"\")]",
          "secret_name": "LD_PRELOAD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "LIBRARY_ROOTS",
      "recommended_name": "LIBRARY_ROOTS",
      "service": "library",
      "credential_type": "ROOTS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_filtering.py",
          "line_number": 112,
          "context": "library_roots = os.getenv(\"LIBRARY_ROOTS\", None)",
          "secret_name": "LIBRARY_ROOTS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "LINEAR_API_KEY",
      "recommended_name": "LINEAR_API_KEY",
      "service": "linear",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 72,
          "context": "LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}",
          "secret_name": "LINEAR_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 152,
          "context": "LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}",
          "secret_name": "LINEAR_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 34,
          "context": "LINEAR_API_KEY=${{ secrets.LINEAR_API_KEY }}",
          "secret_name": "LINEAR_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 65,
          "context": "\"LINEAR_API_KEY\": \"values.sophia.business.linear.api_key\",",
          "secret_name": "LINEAR_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 147,
          "context": "fn::secret: \"${LINEAR_API_KEY}\"",
          "secret_name": "LINEAR_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 178,
          "context": "linear-api-key: \"${LINEAR_API_KEY}\"",
          "secret_name": "LINEAR_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "COMPREHENSIVE_LINEAR_VERCEL_DNS_IMPLEMENTATION_SUMMARY.md",
          "line_number": 325,
          "context": "api_key: ${LINEAR_API_KEY}",
          "secret_name": "LINEAR_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "LINKEDIN_API_KEY",
      "recommended_name": "LINKEDIN_API_KEY",
      "service": "linkedin",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": "docker-compose.payready-production.yml",
          "line_number": 60,
          "context": "- LINKEDIN_API_KEY=${LINKEDIN_API_KEY}",
          "secret_name": "LINKEDIN_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "LINKEDIN_SALES_NAV_KEY",
      "recommended_name": "LINKEDIN_SALES_NAV_KEY",
      "service": "linkedin",
      "credential_type": "SALES_NAV_KEY",
      "references": [
        {
          "file_path": "docs/SOPHIA_AI_DASHBOARD_STANDARDIZATION_IMPLEMENTATION.md",
          "line_number": 110,
          "context": "linkedin_sales_nav: ${LINKEDIN_SALES_NAV_KEY}",
          "secret_name": "LINKEDIN_SALES_NAV_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "LLAMAINDEX_API_KEY",
      "recommended_name": "LLAMAINDEX_API_KEY",
      "service": "llamaindex",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 74,
          "context": "LLAMAINDEX_API_KEY=${{ secrets.LLAMAINDEX_API_KEY }}",
          "secret_name": "LLAMAINDEX_API_KEY",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "LLAMAINDEX_OPENAI_API_KEY",
      "recommended_name": "OPENAI_API_KEY",
      "service": "openai",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/mcp-ci-cd.yml",
          "line_number": 33,
          "context": "LLAMAINDEX_OPENAI_API_KEY: ${{ secrets.LLAMAINDEX_OPENAI_API_KEY }}",
          "secret_name": "LLAMAINDEX_OPENAI_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/mcp-ci-cd.yml",
          "line_number": 48,
          "context": "LLAMAINDEX_OPENAI_API_KEY: ${{ secrets.LLAMAINDEX_OPENAI_API_KEY }}",
          "secret_name": "LLAMAINDEX_OPENAI_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/mcp-ci-cd.yml",
          "line_number": 60,
          "context": "LLAMAINDEX_OPENAI_API_KEY: ${{ secrets.LLAMAINDEX_OPENAI_API_KEY }}",
          "secret_name": "LLAMAINDEX_OPENAI_API_KEY",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "LLAMAINDEX_PINECONE_API_KEY",
      "recommended_name": "PINECONE_INDEX_NAME",
      "service": "pinecone",
      "credential_type": "INDEX_NAME",
      "references": [
        {
          "file_path": ".github/workflows/mcp-ci-cd.yml",
          "line_number": 31,
          "context": "LLAMAINDEX_PINECONE_API_KEY: ${{ secrets.LLAMAINDEX_PINECONE_API_KEY }}",
          "secret_name": "LLAMAINDEX_PINECONE_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/mcp-ci-cd.yml",
          "line_number": 46,
          "context": "LLAMAINDEX_PINECONE_API_KEY: ${{ secrets.LLAMAINDEX_PINECONE_API_KEY }}",
          "secret_name": "LLAMAINDEX_PINECONE_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/mcp-ci-cd.yml",
          "line_number": 58,
          "context": "LLAMAINDEX_PINECONE_API_KEY: ${{ secrets.LLAMAINDEX_PINECONE_API_KEY }}",
          "secret_name": "LLAMAINDEX_PINECONE_API_KEY",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "LLAMAINDEX_WEAVIATE_API_KEY",
      "recommended_name": "LLAMAINDEX_WEAVIATE_API_KEY",
      "service": "llamaindex",
      "credential_type": "WEAVIATE_API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/mcp-ci-cd.yml",
          "line_number": 32,
          "context": "LLAMAINDEX_WEAVIATE_API_KEY: ${{ secrets.LLAMAINDEX_WEAVIATE_API_KEY }}",
          "secret_name": "LLAMAINDEX_WEAVIATE_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/mcp-ci-cd.yml",
          "line_number": 47,
          "context": "LLAMAINDEX_WEAVIATE_API_KEY: ${{ secrets.LLAMAINDEX_WEAVIATE_API_KEY }}",
          "secret_name": "LLAMAINDEX_WEAVIATE_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/mcp-ci-cd.yml",
          "line_number": 59,
          "context": "LLAMAINDEX_WEAVIATE_API_KEY: ${{ secrets.LLAMAINDEX_WEAVIATE_API_KEY }}",
          "secret_name": "LLAMAINDEX_WEAVIATE_API_KEY",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "LLAMA_API_KEY",
      "recommended_name": "LLAMA_API_KEY",
      "service": "llama",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 64,
          "context": "LLAMA_API_KEY: ${{ secrets.LLAMA_API_KEY }}",
          "secret_name": "LLAMA_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/mcp-ci-cd.yml",
          "line_number": 30,
          "context": "LLAMA_API_KEY: ${{ secrets.LLAMA_API_KEY }}",
          "secret_name": "LLAMA_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/mcp-ci-cd.yml",
          "line_number": 45,
          "context": "LLAMA_API_KEY: ${{ secrets.LLAMA_API_KEY }}",
          "secret_name": "LLAMA_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/mcp-ci-cd.yml",
          "line_number": 57,
          "context": "LLAMA_API_KEY: ${{ secrets.LLAMA_API_KEY }}",
          "secret_name": "LLAMA_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 57,
          "context": "\"LLAMA_API_KEY\": \"values.sophia.ai.llama.api_key\",",
          "secret_name": "LLAMA_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 58,
          "context": "fn::secret: \"${LLAMA_API_KEY}\"",
          "secret_name": "LLAMA_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "LLM_GATEWAY_API_KEY",
      "recommended_name": "LLM_GATEWAY_API_KEY",
      "service": "llm",
      "credential_type": "GATEWAY_API_KEY",
      "references": [
        {
          "file_path": "backend/api/costar_routes.py",
          "line_number": 435,
          "context": "api_key = os.getenv(\"LLM_GATEWAY_API_KEY\")",
          "secret_name": "LLM_GATEWAY_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/services/infrastructure_chat/sophia_infrastructure_chat.py",
          "line_number": 57,
          "context": "api_key = os.getenv(\"LLM_GATEWAY_API_KEY\")",
          "secret_name": "LLM_GATEWAY_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "LOG_LEVEL",
      "recommended_name": "LOG_LEVEL",
      "service": "log",
      "credential_type": "LEVEL",
      "references": [
        {
          "file_path": "backend/core/enhanced_config.py",
          "line_number": 21,
          "context": "logging.basicConfig(level=os.getenv(\"LOG_LEVEL\", \"INFO\"))",
          "secret_name": "LOG_LEVEL",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/core/auto_esc_config.py",
          "line_number": 19,
          "context": "logging.basicConfig(level=os.getenv(\"LOG_LEVEL\", \"INFO\"))",
          "secret_name": "LOG_LEVEL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MARKET_ANALYSIS_KEY",
      "recommended_name": "MARKET_ANALYSIS_KEY",
      "service": "market",
      "credential_type": "ANALYSIS_KEY",
      "references": [
        {
          "file_path": "docs/SOPHIA_AI_DASHBOARD_STANDARDIZATION_IMPLEMENTATION.md",
          "line_number": 105,
          "context": "market_analysis_engine: ${MARKET_ANALYSIS_KEY}",
          "secret_name": "MARKET_ANALYSIS_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MCP_DOCKER_REGISTRY_TOKEN",
      "recommended_name": "MCP_DOCKER_REGISTRY_TOKEN",
      "service": "mcp",
      "credential_type": "DOCKER_REGISTRY_TOKEN",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 223,
          "context": "fn::secret: \"${MCP_DOCKER_REGISTRY_TOKEN}\"",
          "secret_name": "MCP_DOCKER_REGISTRY_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 168,
          "context": "mcp-docker-registry-token: \"${MCP_DOCKER_REGISTRY_TOKEN}\"",
          "secret_name": "MCP_DOCKER_REGISTRY_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MCP_GATEWAY_URL",
      "recommended_name": "MCP_GATEWAY_URL",
      "service": "mcp",
      "credential_type": "GATEWAY_URL",
      "references": [
        {
          "file_path": "scripts/dev/ai_memory_health_check.py",
          "line_number": 22,
          "context": "gateway_url = os.getenv(\"MCP_GATEWAY_URL\", \"http://localhost:8090\")",
          "secret_name": "MCP_GATEWAY_URL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MCP_GITHUB_TOKEN",
      "recommended_name": "MCP_GITHUB_TOKEN",
      "service": "mcp",
      "credential_type": "GITHUB_TOKEN",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 209,
          "context": "fn::secret: \"${MCP_GITHUB_TOKEN}\"",
          "secret_name": "MCP_GITHUB_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 165,
          "context": "mcp-github-token: \"${MCP_GITHUB_TOKEN}\"",
          "secret_name": "MCP_GITHUB_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MCP_LINEAR_TOKEN",
      "recommended_name": "MCP_LINEAR_TOKEN",
      "service": "mcp",
      "credential_type": "LINEAR_TOKEN",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 219,
          "context": "fn::secret: \"${MCP_LINEAR_TOKEN}\"",
          "secret_name": "MCP_LINEAR_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 167,
          "context": "mcp-linear-token: \"${MCP_LINEAR_TOKEN}\"",
          "secret_name": "MCP_LINEAR_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MCP_POSTGRES_CONNECTION_STRING",
      "recommended_name": "MCP_POSTGRES_CONNECTION_STRING",
      "service": "mcp",
      "credential_type": "POSTGRES_CONNECTION_STRING",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 227,
          "context": "fn::secret: \"${MCP_POSTGRES_CONNECTION_STRING}\"",
          "secret_name": "MCP_POSTGRES_CONNECTION_STRING",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 169,
          "context": "mcp-postgres-connection-string: \"${MCP_POSTGRES_CONNECTION_STRING}\"",
          "secret_name": "MCP_POSTGRES_CONNECTION_STRING",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MCP_SLACK_TOKEN",
      "recommended_name": "SLACK_UNKNOWN",
      "service": "slack",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 214,
          "context": "fn::secret: \"${MCP_SLACK_TOKEN}\"",
          "secret_name": "MCP_SLACK_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 166,
          "context": "mcp-slack-token: \"${MCP_SLACK_TOKEN}\"",
          "secret_name": "MCP_SLACK_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MIN_PWD_LEN",
      "recommended_name": "MIN_PWD_LEN",
      "service": "min",
      "credential_type": "PWD_LEN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/secret_detector.py",
          "line_number": 19,
          "context": "MIN_PWD_LEN = os.getenv(\"MIN_PWD_LEN\", 8)",
          "secret_name": "MIN_PWD_LEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MIN_TOKEN_LEN",
      "recommended_name": "MIN_TOKEN_LEN",
      "service": "min",
      "credential_type": "TOKEN_LEN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/secret_detector.py",
          "line_number": 18,
          "context": "MIN_TOKEN_LEN = os.getenv(\"MIN_TOKEN_LEN\", 32)",
          "secret_name": "MIN_TOKEN_LEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MISTRAL_API_KEY",
      "recommended_name": "MISTRAL_API_KEY",
      "service": "mistral",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 58,
          "context": "MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}",
          "secret_name": "MISTRAL_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 51,
          "context": "\"MISTRAL_API_KEY\": \"values.sophia.ai.mistral.api_key\",",
          "secret_name": "MISTRAL_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/phoenix/evals/models/mistralai.py",
          "line_number": 60,
          "context": "api_key: Optional[str] = os.getenv(\"MISTRAL_API_KEY\")",
          "secret_name": "MISTRAL_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 40,
          "context": "fn::secret: \"${MISTRAL_API_KEY}\"",
          "secret_name": "MISTRAL_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "MLFLOW_EXPERIMENT_NAME",
      "recommended_name": "MLFLOW_EXPERIMENT_NAME",
      "service": "mlflow",
      "credential_type": "EXPERIMENT_NAME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 977,
          "context": "self._experiment_name = os.getenv(\"MLFLOW_EXPERIMENT_NAME\", None)",
          "secret_name": "MLFLOW_EXPERIMENT_NAME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MLFLOW_FLATTEN_PARAMS",
      "recommended_name": "MLFLOW_FLATTEN_PARAMS",
      "service": "mlflow",
      "credential_type": "FLATTEN_PARAMS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 978,
          "context": "self._flatten_params = os.getenv(\"MLFLOW_FLATTEN_PARAMS\", \"FALSE\").upper() in ENV_VARS_TRUE_VALUES",
          "secret_name": "MLFLOW_FLATTEN_PARAMS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MLFLOW_NESTED_RUN",
      "recommended_name": "MLFLOW_NESTED_RUN",
      "service": "mlflow",
      "credential_type": "NESTED_RUN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 976,
          "context": "self._nested_run = os.getenv(\"MLFLOW_NESTED_RUN\", \"FALSE\").upper() in ENV_VARS_TRUE_VALUES",
          "secret_name": "MLFLOW_NESTED_RUN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MLFLOW_RUN_ID",
      "recommended_name": "MLFLOW_RUN_ID",
      "service": "mlflow",
      "credential_type": "RUN_ID",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 979,
          "context": "self._run_id = os.getenv(\"MLFLOW_RUN_ID\", None)",
          "secret_name": "MLFLOW_RUN_ID",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MLFLOW_TAGS",
      "recommended_name": "MLFLOW_TAGS",
      "service": "mlflow",
      "credential_type": "TAGS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 1012,
          "context": "mlflow_tags = os.getenv(\"MLFLOW_TAGS\", None)",
          "secret_name": "MLFLOW_TAGS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MLFLOW_TRACKING_URI",
      "recommended_name": "MLFLOW_TRACKING_URI",
      "service": "mlflow",
      "credential_type": "TRACKING_URI",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 1089,
          "context": "self.remote = os.getenv(\"MLFLOW_TRACKING_URI\")",
          "secret_name": "MLFLOW_TRACKING_URI",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MYPYC_DEBUG_LEVEL",
      "recommended_name": "MYPYC_DEBUG_LEVEL",
      "service": "mypyc",
      "credential_type": "DEBUG_LEVEL",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/mypyc/__main__.py",
          "line_number": 40,
          "context": "debug_level = os.getenv(\"MYPYC_DEBUG_LEVEL\", \"1\")",
          "secret_name": "MYPYC_DEBUG_LEVEL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MYPYC_OPT_LEVEL",
      "recommended_name": "MYPYC_OPT_LEVEL",
      "service": "mypyc",
      "credential_type": "OPT_LEVEL",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/mypyc/__main__.py",
          "line_number": 39,
          "context": "opt_level = os.getenv(\"MYPYC_OPT_LEVEL\", \"3\")",
          "secret_name": "MYPYC_OPT_LEVEL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MYPYC_STRICT_DUNDER_TYPING",
      "recommended_name": "MYPYC_STRICT_DUNDER_TYPING",
      "service": "mypyc",
      "credential_type": "STRICT_DUNDER_TYPING",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/mypyc/__main__.py",
          "line_number": 41,
          "context": "strict_dunder_typing = bool(int(os.getenv(\"MYPYC_STRICT_DUNDER_TYPING\", \"0\")))",
          "secret_name": "MYPYC_STRICT_DUNDER_TYPING",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MYPYPATH",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/mypy/modulefinder.py",
          "line_number": 766,
          "context": "path_env = os.getenv(\"MYPYPATH\")",
          "secret_name": "MYPYPATH",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MYPY_CACHE_DIR",
      "recommended_name": "MYPY_CACHE_DIR",
      "service": "mypy",
      "credential_type": "CACHE_DIR",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/mypy/stubgen.py",
          "line_number": 1676,
          "context": "environ_cache_dir = os.getenv(\"MYPY_CACHE_DIR\", \"\")",
          "secret_name": "MYPY_CACHE_DIR",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/mypy/main.py",
          "line_number": 1372,
          "context": "environ_cache_dir = os.getenv(\"MYPY_CACHE_DIR\", \"\")",
          "secret_name": "MYPY_CACHE_DIR",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MYPY_FORCE_COLOR",
      "recommended_name": "MYPY_FORCE_COLOR",
      "service": "mypy",
      "credential_type": "FORCE_COLOR",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/mypy/util.py",
          "line_number": 581,
          "context": "env_var = os.getenv(\"MYPY_FORCE_COLOR\", os.getenv(\"FORCE_COLOR\", \"0\"))",
          "secret_name": "MYPY_FORCE_COLOR",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MYPY_FORCE_TERMINAL_WIDTH",
      "recommended_name": "MYPY_FORCE_TERMINAL_WIDTH",
      "service": "mypy",
      "credential_type": "FORCE_TERMINAL_WIDTH",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/mypy/util.py",
          "line_number": 520,
          "context": "int(os.getenv(\"MYPY_FORCE_TERMINAL_WIDTH\", \"0\"))",
          "secret_name": "MYPY_FORCE_TERMINAL_WIDTH",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "MYPY_TEST_PREFIX",
      "recommended_name": "MYPY_TEST_PREFIX",
      "service": "mypy",
      "credential_type": "TEST_PREFIX",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/mypyc/test/config.py",
          "line_number": 5,
          "context": "provided_prefix = os.getenv(\"MYPY_TEST_PREFIX\", None)",
          "secret_name": "MYPY_TEST_PREFIX",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/mypy/modulefinder.py",
          "line_number": 881,
          "context": "root_dir = os.getenv(\"MYPY_TEST_PREFIX\", None)",
          "secret_name": "MYPY_TEST_PREFIX",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/mypy/test/config.py",
          "line_number": 5,
          "context": "provided_prefix = os.getenv(\"MYPY_TEST_PREFIX\", None)",
          "secret_name": "MYPY_TEST_PREFIX",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "NAMECHEAP_API_KEY",
      "recommended_name": "NAMECHEAP_API_KEY",
      "service": "namecheap",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 151,
          "context": "if [[ -z \"${{ secrets.NAMECHEAP_API_KEY }}\" ]]; then",
          "secret_name": "NAMECHEAP_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "infrastructure/esc/sophia-intelligence-platform.yaml",
          "line_number": 80,
          "context": "fn::secret: \"${NAMECHEAP_API_KEY}\"",
          "secret_name": "NAMECHEAP_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "NAMECHEAP_API_USER",
      "recommended_name": "NAMECHEAP_API_USER",
      "service": "namecheap",
      "credential_type": "API_USER",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 143,
          "context": "if [[ -z \"${{ secrets.NAMECHEAP_API_USER }}\" ]]; then",
          "secret_name": "NAMECHEAP_API_USER",
          "usage_type": "github_action"
        },
        {
          "file_path": "infrastructure/esc/sophia-intelligence-platform.yaml",
          "line_number": 78,
          "context": "fn::secret: \"${NAMECHEAP_API_USER}\"",
          "secret_name": "NAMECHEAP_API_USER",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "NAMECHEAP_USERNAME",
      "recommended_name": "NAMECHEAP_USERNAME",
      "service": "namecheap",
      "credential_type": "USERNAME",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 159,
          "context": "if [[ -z \"${{ secrets.NAMECHEAP_USERNAME }}\" ]]; then",
          "secret_name": "NAMECHEAP_USERNAME",
          "usage_type": "github_action"
        },
        {
          "file_path": "infrastructure/esc/sophia-intelligence-platform.yaml",
          "line_number": 82,
          "context": "fn::secret: \"${NAMECHEAP_USERNAME}\"",
          "secret_name": "NAMECHEAP_USERNAME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "NAMESPACE",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 120,
          "context": "log_info \"Creating namespace ${NAMESPACE} if it doesn't exist...\"",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 122,
          "context": "kubectl create namespace \"${NAMESPACE}\" --dry-run=client -o yaml | kubectl apply -f -",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 124,
          "context": "log_success \"Namespace ${NAMESPACE} ready\"",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 133,
          "context": "--namespace=\"${NAMESPACE}\" \\",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 143,
          "context": "--namespace=\"${NAMESPACE}\" \\",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 160,
          "context": "--namespace=\"${NAMESPACE}\" \\",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 171,
          "context": "--namespace=\"${NAMESPACE}\" \\",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 182,
          "context": "kubectl get pods -l app=${SERVICE_NAME} --namespace=\"${NAMESPACE}\"",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 185,
          "context": "kubectl get service ${SERVICE_NAME} --namespace=\"${NAMESPACE}\"",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 188,
          "context": "kubectl get ingress gong-webhook-ingress --namespace=\"${NAMESPACE}\"",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 192,
          "context": "if kubectl port-forward service/${SERVICE_NAME} 8080:80 --namespace=\"${NAMESPACE}\" &",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 214,
          "context": "echo \"Namespace: ${NAMESPACE}\"",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 219,
          "context": "echo \"  View pods: kubectl get pods -l app=${SERVICE_NAME} -n ${NAMESPACE}\"",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 220,
          "context": "echo \"  View logs: kubectl logs -l app=${SERVICE_NAME} -n ${NAMESPACE} -f\"",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 221,
          "context": "echo \"  Scale: kubectl scale deployment ${SERVICE_NAME} --replicas=5 -n ${NAMESPACE}\"",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 229,
          "context": "kubectl delete deployment ${SERVICE_NAME} --namespace=\"${NAMESPACE}\" --ignore-not-found=true",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 230,
          "context": "kubectl delete service ${SERVICE_NAME} --namespace=\"${NAMESPACE}\" --ignore-not-found=true",
          "secret_name": "NAMESPACE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "NC",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "activate_env.sh",
          "line_number": 18,
          "context": "echo -e \"${YELLOW}\ud83d\udd27 Activating environment for $PROJECT_NAME${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "activate_env.sh",
          "line_number": 23,
          "context": "echo -e \"${GREEN}\u2705 Virtual environment activated for $PROJECT_NAME${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "activate_env.sh",
          "line_number": 24,
          "context": "echo -e \"${GREEN}Python: $(python --version) at $(which python)${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "activate_env.sh",
          "line_number": 26,
          "context": "echo -e \"${RED}\u274c Virtual environment not found at $VENV_PATH${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "activate_env.sh",
          "line_number": 35,
          "context": "echo -e \"${YELLOW}\ud83d\udcc4 Loading .env file...${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "activate_env.sh",
          "line_number": 39,
          "context": "echo -e \"${GREEN}\u2705 Environment variables loaded${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "activate_env.sh",
          "line_number": 42,
          "context": "echo -e \"${GREEN}\ud83d\ude80 Environment ready for $PROJECT_NAME!${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 18,
          "context": "echo -e \"${RED}\u274c Python 3 is not installed. Please install Python 3.8 or higher.${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 24,
          "context": "echo -e \"${RED}\u274c Please run this script from the sophia-main directory${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 32,
          "context": "echo -e \"${BLUE}\ud83d\udccb Configuration:${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 43,
          "context": "echo -e \"${BLUE}\ud83d\udd0d Checking backend status...${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 45,
          "context": "echo -e \"${GREEN}\u2705 Backend is already running!${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 47,
          "context": "echo -e \"${YELLOW}\u26a0\ufe0f  Backend is not running. Starting it now...${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 60,
          "context": "echo -e \"\\n${GREEN}\u2705 Backend started successfully!${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 68,
          "context": "echo -e \"\\n${RED}\u274c Backend failed to start. Check backend.log for errors.${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 74,
          "context": "echo -e \"\\n${BLUE}\ud83e\uddea Running deployment validation...${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 81,
          "context": "echo -e \"\\n${GREEN}\u2705 CEO Dashboard is ready!${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 83,
          "context": "echo -e \"${BLUE}\ud83d\udcca Next Steps:${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 87,
          "context": "echo -e \"${GREEN}\ud83c\udf89 Your executive command center is ready for use!${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 89,
          "context": "echo -e \"\\n${RED}\u274c Validation failed. Please check the errors above.${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 96,
          "context": "echo -e \"${YELLOW}\ud83d\udccc Note: Backend is running in background (PID: $BACKEND_PID)${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/verify_sentry_setup.sh",
          "line_number": 24,
          "context": "echo -e \"${GREEN}\u2705${NC} $description: $file\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/verify_sentry_setup.sh",
          "line_number": 27,
          "context": "echo -e \"${RED}\u274c${NC} $description: $file (missing)\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/verify_sentry_setup.sh",
          "line_number": 38,
          "context": "echo -e \"${GREEN}\u2705${NC} $description: $cmd\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/verify_sentry_setup.sh",
          "line_number": 41,
          "context": "echo -e \"${RED}\u274c${NC} $description: $cmd (not found)\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/verify_sentry_setup.sh",
          "line_number": 137,
          "context": "echo -e \"${GREEN}\u2705 Verification complete!${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/setup_codacy_macos.sh",
          "line_number": 23,
          "context": "echo -e \"${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/setup_codacy_macos.sh",
          "line_number": 27,
          "context": "echo -e \"${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/setup_codacy_macos.sh",
          "line_number": 31,
          "context": "echo -e \"${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/setup_codacy_macos.sh",
          "line_number": 436,
          "context": "echo -e \"${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/setup_codacy_macos.sh",
          "line_number": 461,
          "context": "echo -e \"${GREEN}Next steps:${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/setup_codacy_macos.sh",
          "line_number": 467,
          "context": "echo -e \"${BLUE}Cursor AI Integration:${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/setup_codacy_macos.sh",
          "line_number": 472,
          "context": "echo -e \"${YELLOW}Documentation:${NC}\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 25,
          "context": "echo -e \"${BLUE}[INFO]${NC} $1\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 29,
          "context": "echo -e \"${GREEN}[SUCCESS]${NC} $1\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 33,
          "context": "echo -e \"${YELLOW}[WARNING]${NC} $1\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 37,
          "context": "echo -e \"${RED}[ERROR]${NC} $1\"",
          "secret_name": "NC",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "NETWORK_ATTACHMENT_NAME",
      "recommended_name": "NETWORK_ATTACHMENT_NAME",
      "service": "network",
      "credential_type": "ATTACHMENT_NAME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/_inputs.py",
          "line_number": 2455,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "NETWORK_ATTACHMENT_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/_inputs.py",
          "line_number": 2467,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "NETWORK_ATTACHMENT_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/_inputs.py",
          "line_number": 2478,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "NETWORK_ATTACHMENT_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/outputs.py",
          "line_number": 2133,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "NETWORK_ATTACHMENT_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/outputs.py",
          "line_number": 2144,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "NETWORK_ATTACHMENT_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/outputs.py",
          "line_number": 3465,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "NETWORK_ATTACHMENT_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/outputs.py",
          "line_number": 3475,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "NETWORK_ATTACHMENT_NAME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "NODE_ENV",
      "recommended_name": "NODE_ENV",
      "service": "node",
      "credential_type": "ENV",
      "references": [
        {
          "file_path": "frontend/src/services/apiClient.js",
          "line_number": 8,
          "context": "const environment = process.env.REACT_APP_ENVIRONMENT || import.meta.env.VITE_ENVIRONMENT || import.meta.env.MODE || process.env.NODE_ENV;",
          "secret_name": "NODE_ENV",
          "usage_type": "code_reference"
        },
        {
          "file_path": "frontend/src/services/apiClient.js",
          "line_number": 46,
          "context": "const environment = process.env.REACT_APP_ENVIRONMENT || import.meta.env.VITE_ENVIRONMENT || import.meta.env.MODE || process.env.NODE_ENV;",
          "secret_name": "NODE_ENV",
          "usage_type": "code_reference"
        },
        {
          "file_path": "frontend/src/services/WebSocketManager.js",
          "line_number": 7,
          "context": "const environment = process.env.REACT_APP_ENVIRONMENT || import.meta.env.VITE_ENVIRONMENT || import.meta.env.MODE || process.env.NODE_ENV;",
          "secret_name": "NODE_ENV",
          "usage_type": "code_reference"
        },
        {
          "file_path": "frontend/src/services/api_v1.js",
          "line_number": 6,
          "context": "const environment = process.env.REACT_APP_ENVIRONMENT || import.meta.env.VITE_ENVIRONMENT || import.meta.env.MODE || process.env.NODE_ENV;",
          "secret_name": "NODE_ENV",
          "usage_type": "code_reference"
        },
        {
          "file_path": "frontend/src/services/api_v1.js",
          "line_number": 35,
          "context": "'X-Environment': process.env.REACT_APP_ENVIRONMENT || import.meta.env.VITE_ENVIRONMENT || import.meta.env.MODE || process.env.NODE_ENV,",
          "secret_name": "NODE_ENV",
          "usage_type": "code_reference"
        },
        {
          "file_path": "frontend/src/services/api_v1.js",
          "line_number": 54,
          "context": "environment: process.env.REACT_APP_ENVIRONMENT || import.meta.env.VITE_ENVIRONMENT || import.meta.env.MODE || process.env.NODE_ENV",
          "secret_name": "NODE_ENV",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 144,
          "context": "process.env.LAMBDA_LABS_CONTEXT === 'true' || process.env.NODE_ENV === 'development'",
          "secret_name": "NODE_ENV",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 226,
          "context": "NODE_ENV: process.env.NODE_ENV,",
          "secret_name": "NODE_ENV",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docs/SOPHIA_DESIGN_SYSTEM_INTEGRATION.md",
          "line_number": 311,
          "context": "environment: process.env.NODE_ENV,",
          "secret_name": "NODE_ENV",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docs/VERCEL_DEPLOYMENT_GUIDE.md",
          "line_number": 31,
          "context": "const environment = process.env.REACT_APP_ENVIRONMENT || import.meta.env.VITE_ENVIRONMENT || import.meta.env.MODE || process.env.NODE_ENV;",
          "secret_name": "NODE_ENV",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "NOTION_ACCESS_TOKEN",
      "recommended_name": "NOTION_ACCESS_TOKEN",
      "service": "notion",
      "credential_type": "ACCESS_TOKEN",
      "references": [
        {
          "file_path": "mcp-servers/notion/notion_mcp_server.py",
          "line_number": 37,
          "context": "self.access_token = os.getenv(\"NOTION_ACCESS_TOKEN\")",
          "secret_name": "NOTION_ACCESS_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.mcp-gateway.yml",
          "line_number": 143,
          "context": "- NOTION_ACCESS_TOKEN=${NOTION_ACCESS_TOKEN}",
          "secret_name": "NOTION_ACCESS_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docs/ASANA_NOTION_MCP_INTEGRATION.md",
          "line_number": 162,
          "context": "- NOTION_ACCESS_TOKEN=${NOTION_ACCESS_TOKEN}",
          "secret_name": "NOTION_ACCESS_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "NOTION_API_KEY",
      "recommended_name": "NOTION_API_KEY",
      "service": "notion",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 73,
          "context": "NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}",
          "secret_name": "NOTION_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 66,
          "context": "\"NOTION_API_KEY\": \"values.sophia.business.notion.api_key\",",
          "secret_name": "NOTION_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 150,
          "context": "fn::secret: \"${NOTION_API_KEY}\"",
          "secret_name": "NOTION_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 179,
          "context": "notion-api-key: \"${NOTION_API_KEY}\"",
          "secret_name": "NOTION_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "NO_NETWORK",
      "recommended_name": "NO_NETWORK",
      "service": "no",
      "credential_type": "NETWORK",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/formats.py",
          "line_number": 149,
          "context": "if os.getenv(\"NO_NETWORK\") or os.getenv(\"VALIDATE_PYPROJECT_NO_NETWORK\"):",
          "secret_name": "NO_NETWORK",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "NPM_API_TOKEN",
      "recommended_name": "NPM_API_TOKEN",
      "service": "npm",
      "credential_type": "API_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 122,
          "context": "NPM_API_TOKEN: ${{ secrets.NPM_API_TOKEN }}",
          "secret_name": "NPM_API_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 115,
          "context": "\"NPM_API_TOKEN\": \"values.sophia.development.npm.api_token\",",
          "secret_name": "NPM_API_TOKEN",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    },
    {
      "current_name": "NUMERIX",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/distutils/system_info.py",
          "line_number": 2809,
          "context": "if os.getenv(\"NUMERIX\"):",
          "secret_name": "NUMERIX",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/distutils/system_info.py",
          "line_number": 2810,
          "context": "which = os.getenv(\"NUMERIX\"), \"environment var\"",
          "secret_name": "NUMERIX",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "NUMPY_INCLUDE",
      "recommended_name": "NUMPY_INCLUDE",
      "service": "numpy",
      "credential_type": "INCLUDE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/random/_examples/numba/extending_distributions.py",
          "line_number": 14,
          "context": "-I${NUMPY_INCLUDE} -I${PYTHON_INCLUDE}",
          "secret_name": "NUMPY_INCLUDE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "NUMPY_WARN_IF_NO_MEM_POLICY",
      "recommended_name": "NUMPY_WARN_IF_NO_MEM_POLICY",
      "service": "numpy",
      "credential_type": "WARN_IF_NO_MEM_POLICY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/core/tests/test_mem_policy.py",
          "line_number": 401,
          "context": "policy = os.getenv(\"NUMPY_WARN_IF_NO_MEM_POLICY\", \"0\") == \"1\"",
          "secret_name": "NUMPY_WARN_IF_NO_MEM_POLICY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "NUM_PARALLEL_PROCS",
      "recommended_name": "NUM_PARALLEL_PROCS",
      "service": "num",
      "credential_type": "PARALLEL_PROCS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/testing/_internal/common_utils.py",
          "line_number": 1110,
          "context": "num_procs = int(os.getenv(\"NUM_PARALLEL_PROCS\", \"2\"))",
          "secret_name": "NUM_PARALLEL_PROCS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "NVTOOLSEXT_PATH",
      "recommended_name": "NVTOOLSEXT_PATH",
      "service": "nvtoolsext",
      "credential_type": "PATH",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/__init__.py",
          "line_number": 83,
          "context": "os.getenv('NVTOOLSEXT_PATH', os.path.join(pfiles_path, 'NVIDIA Corporation', 'NvToolsExt')), 'bin', 'x64')",
          "secret_name": "NVTOOLSEXT_PATH",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "OCSP_MAX_RETRY",
      "recommended_name": "OCSP_MAX_RETRY",
      "service": "ocsp",
      "credential_type": "MAX_RETRY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/ocsp_snowflake.py",
          "line_number": 268,
          "context": "MAX_RETRY = int(os.getenv(\"OCSP_MAX_RETRY\", \"3\"))",
          "secret_name": "OCSP_MAX_RETRY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "OMP_NUM_THREADS",
      "recommended_name": "OMP_NUM_THREADS",
      "service": "omp",
      "credential_type": "NUM_THREADS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/scipy/conftest.py",
          "line_number": 128,
          "context": "if not os.getenv('OMP_NUM_THREADS'):",
          "secret_name": "OMP_NUM_THREADS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "OMP_PREFIX",
      "recommended_name": "OMP_PREFIX",
      "service": "omp",
      "credential_type": "PREFIX",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_inductor/codecache.py",
          "line_number": 810,
          "context": "if os.getenv(\"OMP_PREFIX\") is not None:",
          "secret_name": "OMP_PREFIX",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_inductor/codecache.py",
          "line_number": 811,
          "context": "header_path = os.path.join(os.getenv(\"OMP_PREFIX\"), \"include\", \"omp.h\")",
          "secret_name": "OMP_PREFIX",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_inductor/codecache.py",
          "line_number": 814,
          "context": "ipaths.append(os.path.join(os.getenv(\"OMP_PREFIX\"), \"include\"))",
          "secret_name": "OMP_PREFIX",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_inductor/codecache.py",
          "line_number": 815,
          "context": "lpaths.append(os.path.join(os.getenv(\"OMP_PREFIX\"), \"lib\"))",
          "secret_name": "OMP_PREFIX",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "OPENAI_API_KEY",
      "recommended_name": "OPENAI_API_KEY",
      "service": "openai",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 50,
          "context": "OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/cursor-integration.yml",
          "line_number": 23,
          "context": "OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_secrets_export.yml",
          "line_number": 25,
          "context": "OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/production_deployment.yml",
          "line_number": 44,
          "context": "OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 93,
          "context": "if [ -z \"${{ secrets.OPENAI_API_KEY }}\" ]; then",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 139,
          "context": "OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/codebase-ingestion.yml",
          "line_number": 34,
          "context": "OPENAI_API_KEY: \\${{ secrets.OPENAI_API_KEY }}",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 60,
          "context": "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 43,
          "context": "\"OPENAI_API_KEY\": \"values.sophia.ai.openai.api_key\",",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "start_mcp_servers.py",
          "line_number": 25,
          "context": "os.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\", \"\")",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "start_enhanced_mcp_servers.py",
          "line_number": 31,
          "context": "os.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\", \"fallback-key\")",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/services/infrastructure_chat/sophia_infrastructure_chat.py",
          "line_number": 72,
          "context": "fallback = os.getenv(\"OPENAI_API_KEY\")",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 43,
          "context": "- OPENAI_API_KEY=${OPENAI_API_KEY}",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.yml",
          "line_number": 17,
          "context": "- OPENAI_API_KEY=${OPENAI_API_KEY}",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.yml",
          "line_number": 81,
          "context": "- OPENAI_APIKEY=${OPENAI_API_KEY}",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.yml",
          "line_number": 100,
          "context": "- OPENAI_API_KEY=${OPENAI_API_KEY}",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 23,
          "context": "fn::secret: \"${OPENAI_API_KEY}\"",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 111,
          "context": "openai-api-key: \"${OPENAI_API_KEY}\"",
          "secret_name": "OPENAI_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "OPENROUTER_API_KEY",
      "recommended_name": "OPENROUTER_API_KEY",
      "service": "openrouter",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 56,
          "context": "OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}",
          "secret_name": "OPENROUTER_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 75,
          "context": "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}",
          "secret_name": "OPENROUTER_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 49,
          "context": "\"OPENROUTER_API_KEY\": \"values.sophia.ai.openrouter.api_key\",",
          "secret_name": "OPENROUTER_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "backend/api/llm_strategy_routes.py",
          "line_number": 27,
          "context": "self.openrouter_api_key = os.getenv(\"OPENROUTER_API_KEY\", \"\")",
          "secret_name": "OPENROUTER_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 386,
          "context": "fn::secret: \"${OPENROUTER_API_KEY}\"",
          "secret_name": "OPENROUTER_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 15,
          "context": "fn::secret: \"${OPENROUTER_API_KEY}\"",
          "secret_name": "OPENROUTER_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 112,
          "context": "openrouter-api-key: \"${OPENROUTER_API_KEY}\"",
          "secret_name": "OPENROUTER_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "OUTPUT_FILE",
      "recommended_name": "OUTPUT_FILE",
      "service": "output",
      "credential_type": "FILE",
      "references": [
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 146,
          "context": "'.[$service] = (.[$service] // {}) | .[$service][$key] = $value' \"$OUTPUT_FILE\" > \"${OUTPUT_FILE}.tmp\"",
          "secret_name": "OUTPUT_FILE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 147,
          "context": "mv \"${OUTPUT_FILE}.tmp\" \"$OUTPUT_FILE\"",
          "secret_name": "OUTPUT_FILE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 186,
          "context": "'.[$service] = (.[$service] // {}) | .[$service][$key] = $value' \"$OUTPUT_FILE\" > \"${OUTPUT_FILE}.tmp\"",
          "secret_name": "OUTPUT_FILE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 187,
          "context": "mv \"${OUTPUT_FILE}.tmp\" \"$OUTPUT_FILE\"",
          "secret_name": "OUTPUT_FILE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PANSEQ",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/sysmon.py",
          "line_number": 99,
          "context": "# log_seq = int(os.getenv(\"PANSEQ\", \"0\"))",
          "secret_name": "PANSEQ",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PARAMETER_NAME",
      "recommended_name": "PARAMETER_NAME",
      "service": "parameter",
      "credential_type": "NAME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_azure_native/videoanalyzer/pipeline_topology.py",
          "line_number": 45,
          "context": ":param pulumi.Input[Sequence[pulumi.Input['ParameterDeclarationArgs']]] parameters: List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through the use of \"${PARAMETER_NAME}\" string pattern. Parameters can have optional default values and can later be defined in individual instances of the pipeline.",
          "secret_name": "PARAMETER_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_azure_native/videoanalyzer/pipeline_topology.py",
          "line_number": 152,
          "context": "List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through the use of \"${PARAMETER_NAME}\" string pattern. Parameters can have optional default values and can later be defined in individual instances of the pipeline.",
          "secret_name": "PARAMETER_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_azure_native/videoanalyzer/pipeline_topology.py",
          "line_number": 217,
          "context": ":param pulumi.Input[Sequence[pulumi.Input[Union['ParameterDeclarationArgs', 'ParameterDeclarationArgsDict']]]] parameters: List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through the use of \"${PARAMETER_NAME}\" string pattern. Parameters can have optional default values and can later be defined in individual instances of the pipeline.",
          "secret_name": "PARAMETER_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_azure_native/videoanalyzer/pipeline_topology.py",
          "line_number": 374,
          "context": "List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through the use of \"${PARAMETER_NAME}\" string pattern. Parameters can have optional default values and can later be defined in individual instances of the pipeline.",
          "secret_name": "PARAMETER_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_azure_native/videoanalyzer/get_pipeline_topology.py",
          "line_number": 118,
          "context": "List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through the use of \"${PARAMETER_NAME}\" string pattern. Parameters can have optional default values and can later be defined in individual instances of the pipeline.",
          "secret_name": "PARAMETER_NAME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PATH",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_aws/elb/_inputs.py",
          "line_number": 136,
          "context": "The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL",
          "secret_name": "PATH",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_aws/elb/_inputs.py",
          "line_number": 163,
          "context": ":param pulumi.Input[builtins.str] target: The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL",
          "secret_name": "PATH",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_aws/elb/_inputs.py",
          "line_number": 204,
          "context": "The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL",
          "secret_name": "PATH",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_aws/elb/outputs.py",
          "line_number": 130,
          "context": ":param builtins.str target: The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL",
          "secret_name": "PATH",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_aws/elb/outputs.py",
          "line_number": 163,
          "context": "The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL",
          "secret_name": "PATH",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/utils/cpp_extension.py",
          "line_number": 2120,
          "context": "if IS_WINDOWS and TORCH_LIB_PATH not in os.getenv('PATH', '').split(';'):",
          "secret_name": "PATH",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/utils/cpp_extension.py",
          "line_number": 2123,
          "context": "for p in os.getenv('PATH', '').split(';')",
          "secret_name": "PATH",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/utils/cpp_extension.py",
          "line_number": 2126,
          "context": "os.environ['PATH'] = f\"{TORCH_LIB_PATH};{os.getenv('PATH', '')}\"",
          "secret_name": "PATH",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/utils/benchmark/examples/end_to_end.py",
          "line_number": 370,
          "context": "\"PATH\": os.getenv(\"PATH\", \"\"),",
          "secret_name": "PATH",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/utils/benchmark/examples/blas_compare.py",
          "line_number": 112,
          "context": "\"PATH\": os.getenv(\"PATH\") or \"\",",
          "secret_name": "PATH",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PCI_DSS_KEY",
      "recommended_name": "PCI_DSS_KEY",
      "service": "pci",
      "credential_type": "DSS_KEY",
      "references": [
        {
          "file_path": "docs/SOPHIA_AI_DASHBOARD_STANDARDIZATION_IMPLEMENTATION.md",
          "line_number": 115,
          "context": "pci_dss_validator: ${PCI_DSS_KEY}",
          "secret_name": "PCI_DSS_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PERPLEXITY_API_KEY",
      "recommended_name": "PERPLEXITY_API_KEY",
      "service": "perplexity",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 57,
          "context": "PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}",
          "secret_name": "PERPLEXITY_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 50,
          "context": "\"PERPLEXITY_API_KEY\": \"values.sophia.ai.perplexity.api_key\",",
          "secret_name": "PERPLEXITY_API_KEY",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    },
    {
      "current_name": "PGDATABASE",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/asyncpg/connect_utils.py",
          "line_number": 439,
          "context": "database = os.getenv('PGDATABASE')",
          "secret_name": "PGDATABASE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PGPASSFILE",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/asyncpg/connect_utils.py",
          "line_number": 454,
          "context": "passfile = os.getenv('PGPASSFILE')",
          "secret_name": "PGPASSFILE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PGPASSWORD",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/asyncpg/connect_utils.py",
          "line_number": 436,
          "context": "password = os.getenv('PGPASSWORD')",
          "secret_name": "PGPASSWORD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PGSSLCERT",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/asyncpg/connect_utils.py",
          "line_number": 585,
          "context": "sslcert = os.getenv('PGSSLCERT')",
          "secret_name": "PGSSLCERT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PGSSLCRL",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/asyncpg/connect_utils.py",
          "line_number": 558,
          "context": "sslcrl = os.getenv('PGSSLCRL')",
          "secret_name": "PGSSLCRL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PGSSLKEY",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/asyncpg/connect_utils.py",
          "line_number": 577,
          "context": "sslkey = os.getenv('PGSSLKEY')",
          "secret_name": "PGSSLKEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PGSSLMAXPROTOCOLVERSION",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/asyncpg/connect_utils.py",
          "line_number": 618,
          "context": "ssl_max_protocol_version = os.getenv('PGSSLMAXPROTOCOLVERSION')",
          "secret_name": "PGSSLMAXPROTOCOLVERSION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PGSSLMINPROTOCOLVERSION",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/asyncpg/connect_utils.py",
          "line_number": 609,
          "context": "ssl_min_protocol_version = os.getenv('PGSSLMINPROTOCOLVERSION')",
          "secret_name": "PGSSLMINPROTOCOLVERSION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PGSSLMODE",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/asyncpg/connect_utils.py",
          "line_number": 489,
          "context": "ssl = os.getenv('PGSSLMODE')",
          "secret_name": "PGSSLMODE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PGSSLROOTCERT",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/asyncpg/connect_utils.py",
          "line_number": 512,
          "context": "sslrootcert = os.getenv('PGSSLROOTCERT')",
          "secret_name": "PGSSLROOTCERT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PGUSER",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/asyncpg/connect_utils.py",
          "line_number": 431,
          "context": "user = os.getenv('PGUSER')",
          "secret_name": "PGUSER",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PHOENIX_ENABLE_WEBSOCKETS",
      "recommended_name": "PHOENIX_ENABLE_WEBSOCKETS",
      "service": "phoenix",
      "credential_type": "ENABLE_WEBSOCKETS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/phoenix/config.py",
          "line_number": 1547,
          "context": "if os.getenv(\"PHOENIX_ENABLE_WEBSOCKETS\") is not None:",
          "secret_name": "PHOENIX_ENABLE_WEBSOCKETS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PINECONE_ADDITIONAL_HEADERS",
      "recommended_name": "PINECONE_API_KEY",
      "service": "pinecone",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pinecone/config/pinecone_config.py",
          "line_number": 27,
          "context": "headers_json = os.getenv(\"PINECONE_ADDITIONAL_HEADERS\")",
          "secret_name": "PINECONE_ADDITIONAL_HEADERS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PINECONE_API_KEY",
      "recommended_name": "PINECONE_API_KEY",
      "service": "pinecone",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 87,
          "context": "PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/infrastructure-tests.yml",
          "line_number": 148,
          "context": "PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_secrets_export.yml",
          "line_number": 40,
          "context": "PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/production_deployment.yml",
          "line_number": 53,
          "context": "PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 97,
          "context": "if [ -z \"${{ secrets.PINECONE_API_KEY }}\" ]; then",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 148,
          "context": "PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/codebase-ingestion.yml",
          "line_number": 33,
          "context": "PINECONE_API_KEY: \\${{ secrets.PINECONE_API_KEY }}",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 47,
          "context": "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 80,
          "context": "\"PINECONE_API_KEY\": \"values.sophia.data.pinecone.api_key\",",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "start_mcp_servers.py",
          "line_number": 26,
          "context": "os.environ[\"PINECONE_API_KEY\"] = os.getenv(\"PINECONE_API_KEY\", \"\")",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "start_enhanced_mcp_servers.py",
          "line_number": 32,
          "context": "os.environ[\"PINECONE_API_KEY\"] = os.getenv(\"PINECONE_API_KEY\", \"fallback-key\")",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/mcp/ai_memory_mcp_server.py",
          "line_number": 374,
          "context": "pinecone_api_key = os.getenv(\"PINECONE_API_KEY\")",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pinecone/config/config.py",
          "line_number": 61,
          "context": "api_key = api_key or kwargs.pop(\"api_key\", None) or os.getenv(\"PINECONE_API_KEY\")",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.yml",
          "line_number": 18,
          "context": "- PINECONE_API_KEY=${PINECONE_API_KEY}",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.yml",
          "line_number": 190,
          "context": "- PINECONE_API_KEY=${PINECONE_API_KEY}",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 64,
          "context": "fn::secret: \"${PINECONE_API_KEY}\"",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 119,
          "context": "pinecone-api-key: \"${PINECONE_API_KEY}\"",
          "secret_name": "PINECONE_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "PINECONE_CONTROLLER_HOST",
      "recommended_name": "PINECONE_API_KEY",
      "service": "pinecone",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pinecone/config/pinecone_config.py",
          "line_number": 24,
          "context": "or os.getenv(\"PINECONE_CONTROLLER_HOST\")",
          "secret_name": "PINECONE_CONTROLLER_HOST",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PINECONE_DEBUG",
      "recommended_name": "PINECONE_API_KEY",
      "service": "pinecone",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pinecone/config/__init__.py",
          "line_number": 15,
          "context": "if os.getenv(\"PINECONE_DEBUG\") is not None:",
          "secret_name": "PINECONE_DEBUG",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PINECONE_ENVIRONMENT",
      "recommended_name": "PINECONE_ENVIRONMENT",
      "service": "pinecone",
      "credential_type": "ENVIRONMENT",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 88,
          "context": "PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT }}",
          "secret_name": "PINECONE_ENVIRONMENT",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 149,
          "context": "PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT }}",
          "secret_name": "PINECONE_ENVIRONMENT",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/codebase-ingestion.yml",
          "line_number": 35,
          "context": "PINECONE_ENVIRONMENT: \\${{ secrets.PINECONE_ENVIRONMENT }}",
          "secret_name": "PINECONE_ENVIRONMENT",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 48,
          "context": "PINECONE_ENVIRONMENT=${{ secrets.PINECONE_ENVIRONMENT }}",
          "secret_name": "PINECONE_ENVIRONMENT",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 81,
          "context": "\"PINECONE_ENVIRONMENT\": \"values.sophia.data.pinecone.environment\",",
          "secret_name": "PINECONE_ENVIRONMENT",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "backend/mcp/ai_memory_mcp_server.py",
          "line_number": 375,
          "context": "pinecone_environment = os.getenv(\"PINECONE_ENVIRONMENT\", \"us-east1-gcp\")",
          "secret_name": "PINECONE_ENVIRONMENT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 66,
          "context": "fn::secret: \"${PINECONE_ENVIRONMENT}\"",
          "secret_name": "PINECONE_ENVIRONMENT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 120,
          "context": "pinecone-environment: \"${PINECONE_ENVIRONMENT}\"",
          "secret_name": "PINECONE_ENVIRONMENT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "PINECONE_INDEX_NAME",
      "recommended_name": "PINECONE_INDEX_NAME",
      "service": "pinecone",
      "credential_type": "INDEX_NAME",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 89,
          "context": "PINECONE_INDEX_NAME: ${{ secrets.PINECONE_INDEX_NAME }}",
          "secret_name": "PINECONE_INDEX_NAME",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 82,
          "context": "\"PINECONE_INDEX_NAME\": \"values.sophia.data.pinecone.index_name\",",
          "secret_name": "PINECONE_INDEX_NAME",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 68,
          "context": "fn::secret: \"${PINECONE_INDEX_NAME}\"",
          "secret_name": "PINECONE_INDEX_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 121,
          "context": "pinecone-index-name: \"${PINECONE_INDEX_NAME}\"",
          "secret_name": "PINECONE_INDEX_NAME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "PINECONE_MAX_ID_LENGTH",
      "recommended_name": "PINECONE_API_KEY",
      "service": "pinecone",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pinecone/utils/constants.py",
          "line_number": 7,
          "context": "MAX_ID_LENGTH = int(os.getenv(\"PINECONE_MAX_ID_LENGTH\", default=\"64\"))",
          "secret_name": "PINECONE_MAX_ID_LENGTH",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PINECONE_PLUGIN_ASSISTANT_CONTROL_HOST",
      "recommended_name": "PINECONE_API_KEY",
      "service": "pinecone",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pinecone_plugins/assistant/assistant/assistant.py",
          "line_number": 55,
          "context": "host = os.getenv(\"PINECONE_PLUGIN_ASSISTANT_CONTROL_HOST\", \"https://api.pinecone.io\")",
          "secret_name": "PINECONE_PLUGIN_ASSISTANT_CONTROL_HOST",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PINECONE_PLUGIN_ASSISTANT_DATA_HOST",
      "recommended_name": "PINECONE_API_KEY",
      "service": "pinecone",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pinecone_plugins/assistant/assistant/assistant.py",
          "line_number": 33,
          "context": "host = os.getenv(\"PINECONE_PLUGIN_ASSISTANT_DATA_HOST\", \"https://prod-1-data.ke.pinecone.io\")",
          "secret_name": "PINECONE_PLUGIN_ASSISTANT_DATA_HOST",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PIPEDREAM_API_KEY",
      "recommended_name": "PIPEDREAM_API_KEY",
      "service": "pipedream",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 127,
          "context": "PIPEDREAM_API_KEY: ${{ secrets.PIPEDREAM_API_KEY }}",
          "secret_name": "PIPEDREAM_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 120,
          "context": "\"PIPEDREAM_API_KEY\": \"values.sophia.integration.pipedream.api_key\",",
          "secret_name": "PIPEDREAM_API_KEY",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    },
    {
      "current_name": "PLATFORM_ENVIRONMENT",
      "recommended_name": "PLATFORM_ENVIRONMENT",
      "service": "platform",
      "credential_type": "ENVIRONMENT",
      "references": [
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 51,
          "context": "platform-environment: \"${PLATFORM_ENVIRONMENT}\"",
          "secret_name": "PLATFORM_ENVIRONMENT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PLATFORM_NAME",
      "recommended_name": "PLATFORM_NAME",
      "service": "platform",
      "credential_type": "NAME",
      "references": [
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 49,
          "context": "platform-name: \"${PLATFORM_NAME}\"",
          "secret_name": "PLATFORM_NAME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PLATFORM_VERSION",
      "recommended_name": "PLATFORM_VERSION",
      "service": "platform",
      "credential_type": "VERSION",
      "references": [
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 50,
          "context": "platform-version: \"${PLATFORM_VERSION}\"",
          "secret_name": "PLATFORM_VERSION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PORT",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "backend/app/main.py",
          "line_number": 8,
          "context": "port = int(os.getenv(\"PORT\", \"8000\"))",
          "secret_name": "PORT",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_aws/elb/_inputs.py",
          "line_number": 136,
          "context": "The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL",
          "secret_name": "PORT",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_aws/elb/_inputs.py",
          "line_number": 163,
          "context": ":param pulumi.Input[builtins.str] target: The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL",
          "secret_name": "PORT",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_aws/elb/_inputs.py",
          "line_number": 204,
          "context": "The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL",
          "secret_name": "PORT",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_aws/elb/outputs.py",
          "line_number": 130,
          "context": ":param builtins.str target: The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL",
          "secret_name": "PORT",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_aws/elb/outputs.py",
          "line_number": 163,
          "context": "The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL",
          "secret_name": "PORT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PORTKEY_API_KEY",
      "recommended_name": "PORTKEY_API_KEY",
      "service": "portkey",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-platform-fixed.yml",
          "line_number": 327,
          "context": "PORTKEY_API_KEY: ${{ secrets.PORTKEY_API_KEY }}",
          "secret_name": "PORTKEY_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 55,
          "context": "PORTKEY_API_KEY: ${{ secrets.PORTKEY_API_KEY }}",
          "secret_name": "PORTKEY_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 383,
          "context": "PORTKEY_API_KEY: ${{ secrets.PORTKEY_API_KEY }}",
          "secret_name": "PORTKEY_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 48,
          "context": "\"PORTKEY_API_KEY\": \"values.sophia.ai.portkey.api_key\",",
          "secret_name": "PORTKEY_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "backend/api/llm_strategy_routes.py",
          "line_number": 23,
          "context": "self.portkey_api_key = os.getenv(\"PORTKEY_API_KEY\", \"\")",
          "secret_name": "PORTKEY_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 381,
          "context": "fn::secret: \"${PORTKEY_API_KEY}\"",
          "secret_name": "PORTKEY_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 18,
          "context": "fn::secret: \"${PORTKEY_API_KEY}\"",
          "secret_name": "PORTKEY_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 113,
          "context": "portkey-api-key: \"${PORTKEY_API_KEY}\"",
          "secret_name": "PORTKEY_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "PORTKEY_VIRTUAL_KEY_PROD",
      "recommended_name": "PORTKEY_VIRTUAL_KEY_PROD",
      "service": "portkey",
      "credential_type": "VIRTUAL_KEY_PROD",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 20,
          "context": "fn::secret: \"${PORTKEY_VIRTUAL_KEY_PROD}\"",
          "secret_name": "PORTKEY_VIRTUAL_KEY_PROD",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 114,
          "context": "portkey-virtual-key-prod: \"${PORTKEY_VIRTUAL_KEY_PROD}\"",
          "secret_name": "PORTKEY_VIRTUAL_KEY_PROD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PREFIX",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pip/_vendor/platformdirs/__init__.py",
          "line_number": 32,
          "context": "if os.getenv(\"SHELL\") or os.getenv(\"PREFIX\"):",
          "secret_name": "PREFIX",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/platformdirs/__init__.py",
          "line_number": 33,
          "context": "if os.getenv(\"SHELL\") or os.getenv(\"PREFIX\"):",
          "secret_name": "PREFIX",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PRE_COMMIT_ALLOW_NO_CONFIG",
      "recommended_name": "PRE_COMMIT_ALLOW_NO_CONFIG",
      "service": "pre",
      "credential_type": "COMMIT_ALLOW_NO_CONFIG",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pre_commit/commands/hook_impl.py",
          "line_number": 52,
          "context": "if skip_on_missing_config or os.getenv('PRE_COMMIT_ALLOW_NO_CONFIG'):",
          "secret_name": "PRE_COMMIT_ALLOW_NO_CONFIG",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PRIMA_DEBUGGING",
      "recommended_name": "PRIMA_DEBUGGING",
      "service": "prima",
      "credential_type": "DEBUGGING",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/scipy/_lib/pyprima/common/consts.py",
          "line_number": 14,
          "context": "DEBUGGING = bool(os.getenv('PRIMA_DEBUGGING'))",
          "secret_name": "PRIMA_DEBUGGING",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PROJECT_ROOT",
      "recommended_name": "PROJECT_ROOT",
      "service": "project",
      "credential_type": "ROOT",
      "references": [
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 75,
          "context": "cd \"${PROJECT_ROOT}\"",
          "secret_name": "PROJECT_ROOT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 156,
          "context": "kubectl apply -f \"${PROJECT_ROOT}/infrastructure/kubernetes/manifests/gong-webhook-service.yaml\"",
          "secret_name": "PROJECT_ROOT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 222,
          "context": "echo \"  Delete: kubectl delete -f ${PROJECT_ROOT}/infrastructure/kubernetes/manifests/gong-webhook-service.yaml\"",
          "secret_name": "PROJECT_ROOT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 274,
          "context": "kubectl delete -f \"${PROJECT_ROOT}/infrastructure/kubernetes/manifests/gong-webhook-service.yaml\" --ignore-not-found=true",
          "secret_name": "PROJECT_ROOT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PROMETHEUS_AUTH_TOKEN",
      "recommended_name": "PROMETHEUS_AUTH_TOKEN",
      "service": "prometheus",
      "credential_type": "AUTH_TOKEN",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 188,
          "context": "fn::secret: \"${PROMETHEUS_AUTH_TOKEN}\"",
          "secret_name": "PROMETHEUS_AUTH_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 202,
          "context": "prometheus-auth-token: \"${PROMETHEUS_AUTH_TOKEN}\"",
          "secret_name": "PROMETHEUS_AUTH_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PROMETHEUS_URL",
      "recommended_name": "PROMETHEUS_URL",
      "service": "prometheus",
      "credential_type": "URL",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 103,
          "context": "PROMETHEUS_URL: ${{ secrets.PROMETHEUS_URL }}",
          "secret_name": "PROMETHEUS_URL",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 96,
          "context": "\"PROMETHEUS_URL\": \"values.sophia.monitoring.prometheus.url\",",
          "secret_name": "PROMETHEUS_URL",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 104,
          "context": "fn::secret: \"${PROMETHEUS_URL}\"",
          "secret_name": "PROMETHEUS_URL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "PROTOCOL",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_aws/elb/_inputs.py",
          "line_number": 136,
          "context": "The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL",
          "secret_name": "PROTOCOL",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_aws/elb/_inputs.py",
          "line_number": 163,
          "context": ":param pulumi.Input[builtins.str] target: The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL",
          "secret_name": "PROTOCOL",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_aws/elb/_inputs.py",
          "line_number": 204,
          "context": "The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL",
          "secret_name": "PROTOCOL",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_aws/elb/outputs.py",
          "line_number": 130,
          "context": ":param builtins.str target: The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL",
          "secret_name": "PROTOCOL",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_aws/elb/outputs.py",
          "line_number": 163,
          "context": "The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL",
          "secret_name": "PROTOCOL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION",
      "recommended_name": "PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION",
      "service": "protocol",
      "credential_type": "BUFFERS_PYTHON_IMPLEMENTATION",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/google/protobuf/internal/api_implementation.py",
          "line_number": 63,
          "context": "_implementation_type = os.getenv('PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION',",
          "secret_name": "PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PSUTIL_DEBUG",
      "recommended_name": "PSUTIL_DEBUG",
      "service": "psutil",
      "credential_type": "DEBUG",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/psutil/_common.py",
          "line_number": 36,
          "context": "PSUTIL_DEBUG = bool(os.getenv('PSUTIL_DEBUG'))",
          "secret_name": "PSUTIL_DEBUG",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/psutil/tests/__init__.py",
          "line_number": 1143,
          "context": "_psutil_debug_orig = bool(os.getenv('PSUTIL_DEBUG'))",
          "secret_name": "PSUTIL_DEBUG",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PULUMI_ACCESS_TOKEN",
      "recommended_name": "PULUMI_ACCESS_TOKEN",
      "service": "pulumi",
      "credential_type": "ACCESS_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/estuary-deployment.yml",
          "line_number": 59,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-deployment.yml",
          "line_number": 68,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-deployment.yml",
          "line_number": 89,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-deployment.yml",
          "line_number": 128,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-deployment.yml",
          "line_number": 137,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-deployment.yml",
          "line_number": 147,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-deployment.yml",
          "line_number": 199,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-deployment.yml",
          "line_number": 208,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-deployment.yml",
          "line_number": 262,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-deployment.yml",
          "line_number": 271,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-deployment.yml",
          "line_number": 281,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 70,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 80,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 108,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 163,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 172,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 211,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 220,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 230,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 296,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 306,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 357,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 366,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 435,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 444,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 496,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 39,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 48,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy_infrastructure.yml",
          "line_number": 54,
          "context": "echo \"PULUMI_ACCESS_TOKEN=${{ secrets.PULUMI_ACCESS_TOKEN }}\" >> $GITHUB_ENV",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/infrastructure-tests.yml",
          "line_number": 105,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/infrastructure-tests.yml",
          "line_number": 144,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/cursor-integration.yml",
          "line_number": 22,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/infrastructure-deploy.yml",
          "line_number": 47,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_secrets_export.yml",
          "line_number": 13,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_ai_infrastructure.yml",
          "line_number": 11,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_ai_infrastructure.yml",
          "line_number": 34,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_ai_infrastructure.yml",
          "line_number": 49,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_ai_infrastructure.yml",
          "line_number": 58,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/mcp-ci-cd.yml",
          "line_number": 44,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/mcp-ci-cd.yml",
          "line_number": 56,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-monitoring.yml",
          "line_number": 50,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-monitoring.yml",
          "line_number": 59,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-monitoring.yml",
          "line_number": 214,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-monitoring.yml",
          "line_number": 223,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/enhanced-deployment-oversight.yml",
          "line_number": 32,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 109,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 201,
          "context": "export PULUMI_ACCESS_TOKEN=\"${{ secrets.PULUMI_ACCESS_TOKEN }}\"",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 209,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 258,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 277,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 316,
          "context": "export PULUMI_ACCESS_TOKEN=\"${{ secrets.PULUMI_ACCESS_TOKEN }}\"",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 324,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 360,
          "context": "export PULUMI_ACCESS_TOKEN=\"${{ secrets.PULUMI_ACCESS_TOKEN }}\"",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 368,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia-main.yml",
          "line_number": 138,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia-main.yml",
          "line_number": 172,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia-main.yml",
          "line_number": 244,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia-main.yml",
          "line_number": 270,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia-main.yml",
          "line_number": 291,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/production_deployment.yml",
          "line_number": 43,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/production_deployment.yml",
          "line_number": 59,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/production_deployment.yml",
          "line_number": 63,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 66,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 137,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 191,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 200,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 81,
          "context": "sed -i 's/TEMP_PULUMI_TOKEN = \".*\"/TEMP_PULUMI_TOKEN = \"${{ secrets.PULUMI_ACCESS_TOKEN }}\"/' scripts/setup_all_secrets_once.py",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy_platform.yml",
          "line_number": 45,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }} # Needed for non-interactive login",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 514,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 528,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 537,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 546,
          "context": "PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 133,
          "context": "if not os.getenv(\"PULUMI_ACCESS_TOKEN\"):",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 47,
          "context": "- PULUMI_ACCESS_TOKEN=${PULUMI_ACCESS_TOKEN}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.mcp-gateway.yml",
          "line_number": 53,
          "context": "- PULUMI_ACCESS_TOKEN=${PULUMI_ACCESS_TOKEN}",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 132,
          "context": "fn::secret: \"${PULUMI_ACCESS_TOKEN}\"",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 54,
          "context": "pulumi-access-token: \"${PULUMI_ACCESS_TOKEN}\"",
          "secret_name": "PULUMI_ACCESS_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "PULUMI_BACKEND_URL_DEV",
      "recommended_name": "PULUMI_BACKEND_URL_DEV",
      "service": "pulumi",
      "credential_type": "BACKEND_URL_DEV",
      "references": [
        {
          "file_path": ".github/workflows/deploy_infrastructure.yml",
          "line_number": 50,
          "context": "echo \"PULUMI_BACKEND_URL=${{ secrets.PULUMI_BACKEND_URL_DEV }}\" >> $GITHUB_ENV",
          "secret_name": "PULUMI_BACKEND_URL_DEV",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "PULUMI_BACKEND_URL_PROD",
      "recommended_name": "PULUMI_BACKEND_URL_PROD",
      "service": "pulumi",
      "credential_type": "BACKEND_URL_PROD",
      "references": [
        {
          "file_path": ".github/workflows/deploy_infrastructure.yml",
          "line_number": 46,
          "context": "echo \"PULUMI_BACKEND_URL=${{ secrets.PULUMI_BACKEND_URL_PROD }}\" >> $GITHUB_ENV",
          "secret_name": "PULUMI_BACKEND_URL_PROD",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "PULUMI_BACKEND_URL_STAGING",
      "recommended_name": "PULUMI_BACKEND_URL_STAGING",
      "service": "pulumi",
      "credential_type": "BACKEND_URL_STAGING",
      "references": [
        {
          "file_path": ".github/workflows/deploy_infrastructure.yml",
          "line_number": 48,
          "context": "echo \"PULUMI_BACKEND_URL=${{ secrets.PULUMI_BACKEND_URL_STAGING }}\" >> $GITHUB_ENV",
          "secret_name": "PULUMI_BACKEND_URL_STAGING",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "PULUMI_COMMAND",
      "recommended_name": "PULUMI_COMMAND",
      "service": "pulumi",
      "credential_type": "COMMAND",
      "references": [
        {
          "file_path": "scripts/dns-manager.py",
          "line_number": 147,
          "context": "os.getenv(\"PULUMI_COMMAND\") is not None,",
          "secret_name": "PULUMI_COMMAND",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 114,
          "context": "process.env.PULUMI_COMMAND !== undefined,",
          "secret_name": "PULUMI_COMMAND",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 223,
          "context": "PULUMI_COMMAND: process.env.PULUMI_COMMAND,",
          "secret_name": "PULUMI_COMMAND",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PULUMI_CONFIG",
      "recommended_name": "PULUMI_CONFIG",
      "service": "pulumi",
      "credential_type": "CONFIG",
      "references": [
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 119,
          "context": "process.env.PULUMI_CONFIG !== undefined,",
          "secret_name": "PULUMI_CONFIG",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PULUMI_CONFIG_PASSPHRASE",
      "recommended_name": "PULUMI_CONFIG_PASSPHRASE",
      "service": "pulumi",
      "credential_type": "CONFIG_PASSPHRASE",
      "references": [
        {
          "file_path": ".github/workflows/infrastructure-tests.yml",
          "line_number": 104,
          "context": "PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}",
          "secret_name": "PULUMI_CONFIG_PASSPHRASE",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/infrastructure-tests.yml",
          "line_number": 143,
          "context": "PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}",
          "secret_name": "PULUMI_CONFIG_PASSPHRASE",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/infrastructure-deploy.yml",
          "line_number": 63,
          "context": "PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}",
          "secret_name": "PULUMI_CONFIG_PASSPHRASE",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/infrastructure-deploy.yml",
          "line_number": 70,
          "context": "PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}",
          "secret_name": "PULUMI_CONFIG_PASSPHRASE",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "PULUMI_ENABLE_LEGACY_APPLY",
      "recommended_name": "PULUMI_ENABLE_LEGACY_APPLY",
      "service": "pulumi",
      "credential_type": "ENABLE_LEGACY_APPLY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi/runtime/settings.py",
          "line_number": 81,
          "context": "os.getenv(\"PULUMI_ENABLE_LEGACY_APPLY\", \"false\") == \"true\"",
          "secret_name": "PULUMI_ENABLE_LEGACY_APPLY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PULUMI_ERROR_OUTPUT_STRING",
      "recommended_name": "PULUMI_ERROR_OUTPUT_STRING",
      "service": "pulumi",
      "credential_type": "ERROR_OUTPUT_STRING",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi/output.py",
          "line_number": 844,
          "context": "if os.getenv(\"PULUMI_ERROR_OUTPUT_STRING\", \"\").lower() in [\"1\", \"true\"]:",
          "secret_name": "PULUMI_ERROR_OUTPUT_STRING",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PULUMI_IP_ADDRESS",
      "recommended_name": "PULUMI_IP_ADDRESS",
      "service": "pulumi",
      "credential_type": "IP_ADDRESS",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-dns.yml",
          "line_number": 135,
          "context": "if [[ -z \"${{ secrets.PULUMI_IP_ADDRESS }}\" ]]; then",
          "secret_name": "PULUMI_IP_ADDRESS",
          "usage_type": "github_action"
        },
        {
          "file_path": "infrastructure/esc/sophia-intelligence-platform.yaml",
          "line_number": 22,
          "context": "fn::secret: \"${PULUMI_IP_ADDRESS}\" # 34.74.88.2 - Deployment context",
          "secret_name": "PULUMI_IP_ADDRESS",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/README.md",
          "line_number": 139,
          "context": "fn::secret: \"${PULUMI_IP_ADDRESS}\"",
          "secret_name": "PULUMI_IP_ADDRESS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "PULUMI_ORG",
      "recommended_name": "PULUMI_ORG",
      "service": "pulumi",
      "credential_type": "ORG",
      "references": [
        {
          "file_path": ".github/workflows/cursor-integration.yml",
          "line_number": 21,
          "context": "PULUMI_ORG: ${{ secrets.PULUMI_ORG }}",
          "secret_name": "PULUMI_ORG",
          "usage_type": "github_action"
        },
        {
          "file_path": "backend/core/enhanced_config.py",
          "line_number": 579,
          "context": "org = os.getenv(\"PULUMI_ORG\", \"scoobyjava-org\")",
          "secret_name": "PULUMI_ORG",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/core/auto_esc_config.py",
          "line_number": 315,
          "context": "org = os.getenv(\"PULUMI_ORG\", \"scoobyjava-org\")",
          "secret_name": "PULUMI_ORG",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/core/auto_esc_config.py",
          "line_number": 579,
          "context": "\"pulumi_org\": os.getenv(\"PULUMI_ORG\", \"scoobyjava-org\"),",
          "secret_name": "PULUMI_ORG",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 46,
          "context": "- PULUMI_ORG=${PULUMI_ORG}",
          "secret_name": "PULUMI_ORG",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.yml",
          "line_number": 189,
          "context": "- PULUMI_ORG=${PULUMI_ORG}",
          "secret_name": "PULUMI_ORG",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docker-compose.yml",
          "line_number": 269,
          "context": "#       - PULUMI_ORG=${PULUMI_ORG}",
          "secret_name": "PULUMI_ORG",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 134,
          "context": "fn::secret: \"${PULUMI_ORG}\"",
          "secret_name": "PULUMI_ORG",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 55,
          "context": "pulumi-org: \"${PULUMI_ORG}\"",
          "secret_name": "PULUMI_ORG",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "PULUMI_ORGANIZATION",
      "recommended_name": "PULUMI_ORGANIZATION",
      "service": "pulumi",
      "credential_type": "ORGANIZATION",
      "references": [
        {
          "file_path": "scripts/dns-manager.py",
          "line_number": 148,
          "context": "os.getenv(\"PULUMI_ORGANIZATION\") is not None,",
          "secret_name": "PULUMI_ORGANIZATION",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 115,
          "context": "process.env.PULUMI_ORGANIZATION !== undefined,",
          "secret_name": "PULUMI_ORGANIZATION",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 224,
          "context": "PULUMI_ORGANIZATION: process.env.PULUMI_ORGANIZATION,",
          "secret_name": "PULUMI_ORGANIZATION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PULUMI_PROJECT",
      "recommended_name": "PULUMI_PROJECT",
      "service": "pulumi",
      "credential_type": "PROJECT",
      "references": [
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 117,
          "context": "process.env.PULUMI_PROJECT !== undefined,",
          "secret_name": "PULUMI_PROJECT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PULUMI_STACK",
      "recommended_name": "PULUMI_STACK",
      "service": "pulumi",
      "credential_type": "STACK",
      "references": [
        {
          "file_path": "backend/core/auto_esc_config.py",
          "line_number": 327,
          "context": "stack = os.getenv(\"PULUMI_STACK\", \"sophia-ai-production\")",
          "secret_name": "PULUMI_STACK",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/dns-manager.py",
          "line_number": 149,
          "context": "os.getenv(\"PULUMI_STACK\") is not None,",
          "secret_name": "PULUMI_STACK",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 116,
          "context": "process.env.PULUMI_STACK !== undefined,",
          "secret_name": "PULUMI_STACK",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 225,
          "context": "PULUMI_STACK: process.env.PULUMI_STACK,",
          "secret_name": "PULUMI_STACK",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PULUMI_TOKEN_SECRET",
      "recommended_name": "PULUMI_TOKEN_SECRET",
      "service": "pulumi",
      "credential_type": "TOKEN_SECRET",
      "references": [
        {
          "file_path": "PULUMI_ESC_INTEGRATION_COMPLETE_GUIDE.md",
          "line_number": 180,
          "context": "export PULUMI_ACCESS_TOKEN=\"${PULUMI_TOKEN_SECRET}\"",
          "secret_name": "PULUMI_TOKEN_SECRET",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PWD",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 137,
          "context": "process.env.PWD !== undefined,",
          "secret_name": "PWD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYDANTIC_DISABLE_PLUGINS",
      "recommended_name": "PYDANTIC_DISABLE_PLUGINS",
      "service": "pydantic",
      "credential_type": "DISABLE_PLUGINS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pydantic/plugin/_loader.py",
          "line_number": 27,
          "context": "disabled_plugins = os.getenv('PYDANTIC_DISABLE_PLUGINS')",
          "secret_name": "PYDANTIC_DISABLE_PLUGINS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYDANTIC_PRIVATE_ALLOW_UNHANDLED_SCHEMA_TYPES",
      "recommended_name": "PYDANTIC_PRIVATE_ALLOW_UNHANDLED_SCHEMA_TYPES",
      "service": "pydantic",
      "credential_type": "PRIVATE_ALLOW_UNHANDLED_SCHEMA_TYPES",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pydantic/json_schema.py",
          "line_number": 321,
          "context": "if os.getenv('PYDANTIC_PRIVATE_ALLOW_UNHANDLED_SCHEMA_TYPES'):",
          "secret_name": "PYDANTIC_PRIVATE_ALLOW_UNHANDLED_SCHEMA_TYPES",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYDANTIC_VALIDATE_CORE_SCHEMAS",
      "recommended_name": "PYDANTIC_VALIDATE_CORE_SCHEMAS",
      "service": "pydantic",
      "credential_type": "VALIDATE_CORE_SCHEMAS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pydantic/_internal/_core_utils.py",
          "line_number": 113,
          "context": "if os.getenv('PYDANTIC_VALIDATE_CORE_SCHEMAS'):",
          "secret_name": "PYDANTIC_VALIDATE_CORE_SCHEMAS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYDEVD_APPLY_PATCHING_TO_HIDE_PYDEVD_THREADS",
      "recommended_name": "PYDEVD_APPLY_PATCHING_TO_HIDE_PYDEVD_THREADS",
      "service": "pydevd",
      "credential_type": "APPLY_PATCHING_TO_HIDE_PYDEVD_THREADS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_constants.py",
          "line_number": 375,
          "context": "os.getenv(\"PYDEVD_APPLY_PATCHING_TO_HIDE_PYDEVD_THREADS\", \"true\").lower() in ENV_TRUE_LOWER_VALUES",
          "secret_name": "PYDEVD_APPLY_PATCHING_TO_HIDE_PYDEVD_THREADS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYDEVD_DEBUG_FILE",
      "recommended_name": "PYDEVD_DEBUG_FILE",
      "service": "pydevd",
      "credential_type": "DEBUG_FILE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_constants.py",
          "line_number": 388,
          "context": "DebugInfoHolder.PYDEVD_DEBUG_FILE = os.getenv(\"PYDEVD_DEBUG_FILE\")",
          "secret_name": "PYDEVD_DEBUG_FILE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYDEVD_FILTERS",
      "recommended_name": "PYDEVD_FILTERS",
      "service": "pydevd",
      "credential_type": "FILTERS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_filtering.py",
          "line_number": 120,
          "context": "pydevd_filters = os.getenv(\"PYDEVD_FILTERS\", \"\")",
          "secret_name": "PYDEVD_FILTERS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYDEVD_IPYTHON_CONTEXT",
      "recommended_name": "PYDEVD_IPYTHON_CONTEXT",
      "service": "pydevd",
      "credential_type": "IPYTHON_CONTEXT",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_constants.py",
          "line_number": 321,
          "context": "_ipython_ctx = os.getenv(\"PYDEVD_IPYTHON_CONTEXT\")",
          "secret_name": "PYDEVD_IPYTHON_CONTEXT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYDEVD_LOAD_NATIVE_LIB",
      "recommended_name": "PYDEVD_LOAD_NATIVE_LIB",
      "service": "pydevd",
      "credential_type": "LOAD_NATIVE_LIB",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_constants.py",
          "line_number": 327,
          "context": "LOAD_NATIVE_LIB_FLAG = os.getenv(\"PYDEVD_LOAD_NATIVE_LIB\", \"\").lower()",
          "secret_name": "PYDEVD_LOAD_NATIVE_LIB",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYDEVD_LOG_TIME",
      "recommended_name": "PYDEVD_LOG_TIME",
      "service": "pydevd",
      "credential_type": "LOG_TIME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_constants.py",
          "line_number": 329,
          "context": "LOG_TIME = os.getenv(\"PYDEVD_LOG_TIME\", \"true\").lower() in ENV_TRUE_LOWER_VALUES",
          "secret_name": "PYDEVD_LOG_TIME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYDEVD_PYQT_MODE",
      "recommended_name": "PYDEVD_PYQT_MODE",
      "service": "pydevd",
      "credential_type": "PYQT_MODE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydev_bundle/pydev_monkey_qt.py",
          "line_number": 32,
          "context": "qt_support_mode = os.getenv(\"PYDEVD_PYQT_MODE\", \"auto\")",
          "secret_name": "PYDEVD_PYQT_MODE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYDEVD_USE_CYTHON",
      "recommended_name": "PYDEVD_USE_CYTHON",
      "service": "pydevd",
      "credential_type": "USE_CYTHON",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_constants.py",
          "line_number": 278,
          "context": "USE_CYTHON_FLAG = os.getenv(\"PYDEVD_USE_CYTHON\")",
          "secret_name": "PYDEVD_USE_CYTHON",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYDEVD_USE_FRAME_EVAL",
      "recommended_name": "PYDEVD_USE_FRAME_EVAL",
      "service": "pydevd",
      "credential_type": "USE_FRAME_EVAL",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_constants.py",
          "line_number": 295,
          "context": "PYDEVD_USE_FRAME_EVAL = os.getenv(\"PYDEVD_USE_FRAME_EVAL\", \"\").lower()",
          "secret_name": "PYDEVD_USE_FRAME_EVAL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYDEVD_USE_SYS_MONITORING",
      "recommended_name": "PYDEVD_USE_SYS_MONITORING",
      "service": "pydevd",
      "credential_type": "USE_SYS_MONITORING",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_constants.py",
          "line_number": 211,
          "context": "_use_sys_monitoring_env_var = os.getenv(\"PYDEVD_USE_SYS_MONITORING\", \"\").lower()",
          "secret_name": "PYDEVD_USE_SYS_MONITORING",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTEST_CURRENT_TEST",
      "recommended_name": "PYTEST_CURRENT_TEST",
      "service": "pytest",
      "credential_type": "CURRENT_TEST",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/debug.py",
          "line_number": 405,
          "context": "test_name = os.getenv(\"PYTEST_CURRENT_TEST\")",
          "secret_name": "PYTEST_CURRENT_TEST",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTEST_THEME",
      "recommended_name": "PYTEST_THEME",
      "service": "pytest",
      "credential_type": "THEME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/_pytest/_io/terminalwriter.py",
          "line_number": 216,
          "context": "style=os.getenv(\"PYTEST_THEME\"),",
          "secret_name": "PYTEST_THEME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/_pytest/_io/terminalwriter.py",
          "line_number": 224,
          "context": "os.getenv(\"PYTEST_THEME\")",
          "secret_name": "PYTEST_THEME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTEST_THEME_MODE",
      "recommended_name": "PYTEST_THEME_MODE",
      "service": "pytest",
      "credential_type": "THEME_MODE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/_pytest/_io/terminalwriter.py",
          "line_number": 215,
          "context": "bg=os.getenv(\"PYTEST_THEME_MODE\", \"dark\"),",
          "secret_name": "PYTEST_THEME_MODE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/_pytest/_io/terminalwriter.py",
          "line_number": 231,
          "context": "os.getenv(\"PYTEST_THEME_MODE\")",
          "secret_name": "PYTEST_THEME_MODE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTHONBREAKPOINT",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd.py",
          "line_number": 190,
          "context": "hookname = os.getenv(\"PYTHONBREAKPOINT\")",
          "secret_name": "PYTHONBREAKPOINT",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydev_sitecustomize/sitecustomize.py",
          "line_number": 69,
          "context": "hookname = os.getenv(\"PYTHONBREAKPOINT\")",
          "secret_name": "PYTHONBREAKPOINT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTHONHASHSEED",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/sympy/testing/runtests.py",
          "line_number": 257,
          "context": "hash_seed = os.getenv(\"PYTHONHASHSEED\")",
          "secret_name": "PYTHONHASHSEED",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/sympy/testing/runtests.py",
          "line_number": 2232,
          "context": "hash_seed = os.getenv(\"PYTHONHASHSEED\") or '0'",
          "secret_name": "PYTHONHASHSEED",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTHONPATH",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/utils/benchmark/examples/blas_compare.py",
          "line_number": 113,
          "context": "\"PYTHONPATH\": os.getenv(\"PYTHONPATH\") or \"\",",
          "secret_name": "PYTHONPATH",
          "usage_type": "code_reference"
        },
        {
          "file_path": "start_sophia_backend.sh",
          "line_number": 4,
          "context": "export PYTHONPATH=\"${PYTHONPATH}:$(pwd)\"",
          "secret_name": "PYTHONPATH",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 50,
          "context": "export PYTHONPATH=\"${PYTHONPATH}:$(pwd)\"",
          "secret_name": "PYTHONPATH",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTHON_EXEC",
      "recommended_name": "PYTHON_EXEC",
      "service": "python",
      "credential_type": "EXEC",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/distributed/run.py",
          "line_number": 750,
          "context": "cmd = os.getenv(\"PYTHON_EXEC\", sys.executable)",
          "secret_name": "PYTHON_EXEC",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTHON_HOME",
      "recommended_name": "PYTHON_HOME",
      "service": "python",
      "credential_type": "HOME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/random/_examples/numba/extending_distributions.py",
          "line_number": 10,
          "context": "${PYTHON_HOME}/include/python${PYTHON_VERSION}m",
          "secret_name": "PYTHON_HOME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/random/_examples/numba/extending_distributions.py",
          "line_number": 12,
          "context": "${PYTHON_HOME}/lib/python${PYTHON_VERSION}/site-packages/numpy/core/include",
          "secret_name": "PYTHON_HOME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTHON_INCLUDE",
      "recommended_name": "PYTHON_INCLUDE",
      "service": "python",
      "credential_type": "INCLUDE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/random/_examples/numba/extending_distributions.py",
          "line_number": 14,
          "context": "-I${NUMPY_INCLUDE} -I${PYTHON_INCLUDE}",
          "secret_name": "PYTHON_INCLUDE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTHON_VERSION",
      "recommended_name": "PYTHON_VERSION",
      "service": "python",
      "credential_type": "VERSION",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/random/_examples/numba/extending_distributions.py",
          "line_number": 8,
          "context": "export ${PYTHON_VERSION}=3.8 # Python version",
          "secret_name": "PYTHON_VERSION",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/random/_examples/numba/extending_distributions.py",
          "line_number": 10,
          "context": "${PYTHON_HOME}/include/python${PYTHON_VERSION}m",
          "secret_name": "PYTHON_VERSION",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/numpy/random/_examples/numba/extending_distributions.py",
          "line_number": 12,
          "context": "${PYTHON_HOME}/lib/python${PYTHON_VERSION}/site-packages/numpy/core/include",
          "secret_name": "PYTHON_VERSION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTORCH_CUDA_MEMCHECK",
      "recommended_name": "PYTORCH_CUDA_MEMCHECK",
      "service": "pytorch",
      "credential_type": "CUDA_MEMCHECK",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/testing/_internal/common_device_type.py",
          "line_number": 664,
          "context": "PYTORCH_CUDA_MEMCHECK = os.getenv('PYTORCH_CUDA_MEMCHECK', '0') == '1'",
          "secret_name": "PYTORCH_CUDA_MEMCHECK",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTORCH_ENABLE_MPS_FALLBACK",
      "recommended_name": "PYTORCH_ENABLE_MPS_FALLBACK",
      "service": "pytorch",
      "credential_type": "ENABLE_MPS_FALLBACK",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/sklearn/utils/_testing.py",
          "line_number": 1334,
          "context": "if os.getenv(\"PYTORCH_ENABLE_MPS_FALLBACK\") != \"1\":",
          "secret_name": "PYTORCH_ENABLE_MPS_FALLBACK",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTORCH_HYPOTHESIS_PROFILE",
      "recommended_name": "PYTORCH_HYPOTHESIS_PROFILE",
      "service": "pytorch",
      "credential_type": "HYPOTHESIS_PROFILE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/testing/_internal/common_utils.py",
          "line_number": 1904,
          "context": "\"pytorch_ci\" if IS_CI else os.getenv('PYTORCH_HYPOTHESIS_PROFILE', 'dev')",
          "secret_name": "PYTORCH_HYPOTHESIS_PROFILE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTORCH_KEEP_TMPDIR",
      "recommended_name": "PYTORCH_KEEP_TMPDIR",
      "service": "pytorch",
      "credential_type": "KEEP_TMPDIR",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_dynamo/test_minifier_common.py",
          "line_number": 65,
          "context": "if os.getenv(\"PYTORCH_KEEP_TMPDIR\", \"0\") != \"1\":",
          "secret_name": "PYTORCH_KEEP_TMPDIR",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTORCH_NVCC",
      "recommended_name": "PYTORCH_NVCC",
      "service": "pytorch",
      "credential_type": "NVCC",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/utils/cpp_extension.py",
          "line_number": 2305,
          "context": "nvcc = os.getenv(\"PYTORCH_NVCC\")    # user can set nvcc compiler with ccache using the environment variable here",
          "secret_name": "PYTORCH_NVCC",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTORCH_NVML_BASED_CUDA_CHECK",
      "recommended_name": "PYTORCH_NVML_BASED_CUDA_CHECK",
      "service": "pytorch",
      "credential_type": "NVML_BASED_CUDA_CHECK",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/cuda/__init__.py",
          "line_number": 122,
          "context": "return os.getenv(\"PYTORCH_NVML_BASED_CUDA_CHECK\") == \"1\"",
          "secret_name": "PYTORCH_NVML_BASED_CUDA_CHECK",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTORCH_PRETRAINED_BERT_CACHE",
      "recommended_name": "PYTORCH_PRETRAINED_BERT_CACHE",
      "service": "pytorch",
      "credential_type": "PRETRAINED_BERT_CACHE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 101,
          "context": "PYTORCH_PRETRAINED_BERT_CACHE = os.getenv(\"PYTORCH_PRETRAINED_BERT_CACHE\", default_cache_path)",
          "secret_name": "PYTORCH_PRETRAINED_BERT_CACHE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTORCH_TEST_WITH_TV",
      "recommended_name": "PYTORCH_TEST_WITH_TV",
      "service": "pytorch",
      "credential_type": "TEST_WITH_TV",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/testing/_internal/common_utils.py",
          "line_number": 1192,
          "context": "TEST_WITH_TV = os.getenv('PYTORCH_TEST_WITH_TV') == '1'",
          "secret_name": "PYTORCH_TEST_WITH_TV",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PYTORCH_TRANSFORMERS_CACHE",
      "recommended_name": "PYTORCH_TRANSFORMERS_CACHE",
      "service": "pytorch",
      "credential_type": "TRANSFORMERS_CACHE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 102,
          "context": "PYTORCH_TRANSFORMERS_CACHE = os.getenv(\"PYTORCH_TRANSFORMERS_CACHE\", PYTORCH_PRETRAINED_BERT_CACHE)",
          "secret_name": "PYTORCH_TRANSFORMERS_CACHE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "PY_IGNORE_IMPORTMISMATCH",
      "recommended_name": "PY_IGNORE_IMPORTMISMATCH",
      "service": "py",
      "credential_type": "IGNORE_IMPORTMISMATCH",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/_pytest/_py/path.py",
          "line_number": 1139,
          "context": "ignore = os.getenv(\"PY_IGNORE_IMPORTMISMATCH\")",
          "secret_name": "PY_IGNORE_IMPORTMISMATCH",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "REACT_APP_API_KEY",
      "recommended_name": "REACT_APP_API_KEY",
      "service": "react",
      "credential_type": "APP_API_KEY",
      "references": [
        {
          "file_path": "frontend/src/services/api_v1.js",
          "line_number": 28,
          "context": "const API_KEY = process.env.REACT_APP_API_KEY || import.meta.env.VITE_API_KEY || 'sophia-dashboard-dev-key'; // Environment-specific API key",
          "secret_name": "REACT_APP_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "REACT_APP_API_URL",
      "recommended_name": "REACT_APP_API_URL",
      "service": "react",
      "credential_type": "APP_API_URL",
      "references": [
        {
          "file_path": "frontend/src/services/apiClient.js",
          "line_number": 7,
          "context": "const apiUrl = process.env.REACT_APP_API_URL || import.meta.env.VITE_API_URL;",
          "secret_name": "REACT_APP_API_URL",
          "usage_type": "code_reference"
        },
        {
          "file_path": "frontend/src/services/WebSocketManager.js",
          "line_number": 6,
          "context": "const apiUrl = process.env.REACT_APP_API_URL || import.meta.env.VITE_API_URL;",
          "secret_name": "REACT_APP_API_URL",
          "usage_type": "code_reference"
        },
        {
          "file_path": "frontend/src/services/api_v1.js",
          "line_number": 5,
          "context": "const apiUrl = process.env.REACT_APP_API_URL || import.meta.env.VITE_API_URL;",
          "secret_name": "REACT_APP_API_URL",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docs/VERCEL_DEPLOYMENT_GUIDE.md",
          "line_number": 30,
          "context": "const apiUrl = process.env.REACT_APP_API_URL || import.meta.env.VITE_API_URL;",
          "secret_name": "REACT_APP_API_URL",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docs/SOPHIA_AI_DASHBOARD_INTEGRATION_PLAN.md",
          "line_number": 759,
          "context": "baseURL: process.env.REACT_APP_API_URL,",
          "secret_name": "REACT_APP_API_URL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "REACT_APP_ENVIRONMENT",
      "recommended_name": "REACT_APP_ENVIRONMENT",
      "service": "react",
      "credential_type": "APP_ENVIRONMENT",
      "references": [
        {
          "file_path": "frontend/src/services/apiClient.js",
          "line_number": 8,
          "context": "const environment = process.env.REACT_APP_ENVIRONMENT || import.meta.env.VITE_ENVIRONMENT || import.meta.env.MODE || process.env.NODE_ENV;",
          "secret_name": "REACT_APP_ENVIRONMENT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "frontend/src/services/apiClient.js",
          "line_number": 46,
          "context": "const environment = process.env.REACT_APP_ENVIRONMENT || import.meta.env.VITE_ENVIRONMENT || import.meta.env.MODE || process.env.NODE_ENV;",
          "secret_name": "REACT_APP_ENVIRONMENT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "frontend/src/services/WebSocketManager.js",
          "line_number": 7,
          "context": "const environment = process.env.REACT_APP_ENVIRONMENT || import.meta.env.VITE_ENVIRONMENT || import.meta.env.MODE || process.env.NODE_ENV;",
          "secret_name": "REACT_APP_ENVIRONMENT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "frontend/src/services/api_v1.js",
          "line_number": 6,
          "context": "const environment = process.env.REACT_APP_ENVIRONMENT || import.meta.env.VITE_ENVIRONMENT || import.meta.env.MODE || process.env.NODE_ENV;",
          "secret_name": "REACT_APP_ENVIRONMENT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "frontend/src/services/api_v1.js",
          "line_number": 35,
          "context": "'X-Environment': process.env.REACT_APP_ENVIRONMENT || import.meta.env.VITE_ENVIRONMENT || import.meta.env.MODE || process.env.NODE_ENV,",
          "secret_name": "REACT_APP_ENVIRONMENT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "frontend/src/services/api_v1.js",
          "line_number": 54,
          "context": "environment: process.env.REACT_APP_ENVIRONMENT || import.meta.env.VITE_ENVIRONMENT || import.meta.env.MODE || process.env.NODE_ENV",
          "secret_name": "REACT_APP_ENVIRONMENT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "docs/VERCEL_DEPLOYMENT_GUIDE.md",
          "line_number": 31,
          "context": "const environment = process.env.REACT_APP_ENVIRONMENT || import.meta.env.VITE_ENVIRONMENT || import.meta.env.MODE || process.env.NODE_ENV;",
          "secret_name": "REACT_APP_ENVIRONMENT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "REACT_APP_WS_URL",
      "recommended_name": "REACT_APP_WS_URL",
      "service": "react",
      "credential_type": "APP_WS_URL",
      "references": [
        {
          "file_path": "frontend/src/services/WebSocketManager.js",
          "line_number": 5,
          "context": "const wsUrl = process.env.REACT_APP_WS_URL || import.meta.env.VITE_WS_URL;",
          "secret_name": "REACT_APP_WS_URL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "RED",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "activate_env.sh",
          "line_number": 26,
          "context": "echo -e \"${RED}\u274c Virtual environment not found at $VENV_PATH${NC}\"",
          "secret_name": "RED",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 18,
          "context": "echo -e \"${RED}\u274c Python 3 is not installed. Please install Python 3.8 or higher.${NC}\"",
          "secret_name": "RED",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 24,
          "context": "echo -e \"${RED}\u274c Please run this script from the sophia-main directory${NC}\"",
          "secret_name": "RED",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 68,
          "context": "echo -e \"\\n${RED}\u274c Backend failed to start. Check backend.log for errors.${NC}\"",
          "secret_name": "RED",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 89,
          "context": "echo -e \"\\n${RED}\u274c Validation failed. Please check the errors above.${NC}\"",
          "secret_name": "RED",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/verify_sentry_setup.sh",
          "line_number": 27,
          "context": "echo -e \"${RED}\u274c${NC} $description: $file (missing)\"",
          "secret_name": "RED",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/verify_sentry_setup.sh",
          "line_number": 41,
          "context": "echo -e \"${RED}\u274c${NC} $description: $cmd (not found)\"",
          "secret_name": "RED",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/setup_codacy_macos.sh",
          "line_number": 31,
          "context": "echo -e \"${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}\"",
          "secret_name": "RED",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 37,
          "context": "echo -e \"${RED}[ERROR]${NC} $1\"",
          "secret_name": "RED",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "REDIS_CLUSTER_PASSWORD",
      "recommended_name": "REDIS_CLUSTER_PASSWORD",
      "service": "redis",
      "credential_type": "CLUSTER_PASSWORD",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 69,
          "context": "fn::secret: \"${REDIS_CLUSTER_PASSWORD}\"",
          "secret_name": "REDIS_CLUSTER_PASSWORD",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 108,
          "context": "redis-cluster-password: \"${REDIS_CLUSTER_PASSWORD}\"",
          "secret_name": "REDIS_CLUSTER_PASSWORD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "REDIS_URL",
      "recommended_name": "REDIS_URL",
      "service": "redis",
      "credential_type": "URL",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 95,
          "context": "REDIS_URL: ${{ secrets.REDIS_URL }}",
          "secret_name": "REDIS_URL",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 88,
          "context": "\"REDIS_URL\": \"values.sophia.data.redis.url\",",
          "secret_name": "REDIS_URL",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    },
    {
      "current_name": "REGION",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/_inputs.py",
          "line_number": 2455,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "REGION",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/_inputs.py",
          "line_number": 2467,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "REGION",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/_inputs.py",
          "line_number": 2478,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "REGION",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/outputs.py",
          "line_number": 2133,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "REGION",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/outputs.py",
          "line_number": 2144,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "REGION",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/outputs.py",
          "line_number": 3465,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "REGION",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pulumi_gcp/alloydb/outputs.py",
          "line_number": 3475,
          "context": "This is of the format: \"projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}\".",
          "secret_name": "REGION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "RETOOL_API_TOKEN",
      "recommended_name": "RETOOL_API_TOKEN",
      "service": "retool",
      "credential_type": "API_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 120,
          "context": "RETOOL_API_TOKEN: ${{ secrets.RETOOL_API_TOKEN }}",
          "secret_name": "RETOOL_API_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 113,
          "context": "\"RETOOL_API_TOKEN\": \"values.sophia.development.retool.api_token\",",
          "secret_name": "RETOOL_API_TOKEN",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    },
    {
      "current_name": "RUNNER_OS",
      "recommended_name": "RUNNER_OS",
      "service": "runner",
      "credential_type": "OS",
      "references": [
        {
          "file_path": "scripts/dns-manager.py",
          "line_number": 140,
          "context": "os.getenv(\"RUNNER_OS\") is not None,",
          "secret_name": "RUNNER_OS",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 102,
          "context": "process.env.RUNNER_OS !== undefined",
          "secret_name": "RUNNER_OS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "RUN_SLOW",
      "recommended_name": "RUN_SLOW",
      "service": "run",
      "credential_type": "SLOW",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/testing_utils.py",
          "line_number": 1604,
          "context": "run_slow = os.getenv(\"RUN_SLOW\", False) use_tf = os.getenv(\"USE_TF\", False)",
          "secret_name": "RUN_SLOW",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SALESFORCE_ACCESS_TOKEN",
      "recommended_name": "SALESFORCE_ACCESS_TOKEN",
      "service": "salesforce",
      "credential_type": "ACCESS_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 71,
          "context": "SALESFORCE_ACCESS_TOKEN: ${{ secrets.SALESFORCE_ACCESS_TOKEN }}",
          "secret_name": "SALESFORCE_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 64,
          "context": "\"SALESFORCE_ACCESS_TOKEN\": \"values.sophia.business.salesforce.access_token\",",
          "secret_name": "SALESFORCE_ACCESS_TOKEN",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    },
    {
      "current_name": "SCIPY_DEFAULT_DTYPE",
      "recommended_name": "SCIPY_DEFAULT_DTYPE",
      "service": "scipy",
      "credential_type": "DEFAULT_DTYPE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/scipy/conftest.py",
          "line_number": 188,
          "context": "default = os.getenv('SCIPY_DEFAULT_DTYPE', default='float64')",
          "secret_name": "SCIPY_DEFAULT_DTYPE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SCIPY_XFAIL",
      "recommended_name": "SCIPY_XFAIL",
      "service": "scipy",
      "credential_type": "XFAIL",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/scipy/stats/tests/test_fit.py",
          "line_number": 111,
          "context": "run_xfail = int(os.getenv('SCIPY_XFAIL', default=False))",
          "secret_name": "SCIPY_XFAIL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SCIPY_XSLOW",
      "recommended_name": "SCIPY_XSLOW",
      "service": "scipy",
      "credential_type": "XSLOW",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/scipy/integrate/tests/test_tanhsinh.py",
          "line_number": 272,
          "context": "and not int(os.getenv('SCIPY_XSLOW', 0))):",
          "secret_name": "SCIPY_XSLOW",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/scipy/stats/tests/test_fit.py",
          "line_number": 112,
          "context": "run_xslow = int(os.getenv('SCIPY_XSLOW', default=False))",
          "secret_name": "SCIPY_XSLOW",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SCRIPT_DIR",
      "recommended_name": "SCRIPT_DIR",
      "service": "script",
      "credential_type": "DIR",
      "references": [
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 10,
          "context": "PROJECT_ROOT=\"$(cd \"${SCRIPT_DIR}/..\" && pwd)\"",
          "secret_name": "SCRIPT_DIR",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SENTENCE_TRANSFORMERS_HOME",
      "recommended_name": "SENTENCE_TRANSFORMERS_HOME",
      "service": "sentence",
      "credential_type": "TRANSFORMERS_HOME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/sentence_transformers/SentenceTransformer.py",
          "line_number": 54,
          "context": "cache_folder = os.getenv('SENTENCE_TRANSFORMERS_HOME')",
          "secret_name": "SENTENCE_TRANSFORMERS_HOME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SENTRY_DSN",
      "recommended_name": "SENTRY_DSN",
      "service": "sentry",
      "credential_type": "DSN",
      "references": [
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 199,
          "context": "sentry-dsn: \"${SENTRY_DSN}\"",
          "secret_name": "SENTRY_DSN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SERP_API_KEY",
      "recommended_name": "SERP_API_KEY",
      "service": "serp",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 112,
          "context": "SERP_API_KEY: ${{ secrets.SERP_API_KEY }}",
          "secret_name": "SERP_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 105,
          "context": "\"SERP_API_KEY\": \"values.sophia.research.serp.api_key\",",
          "secret_name": "SERP_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 80,
          "context": "fn::secret: \"${SERP_API_KEY}\"",
          "secret_name": "SERP_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "SERVICE",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 122,
          "context": "echo \"Getting secret: ${SERVICE}_${KEY}\"",
          "secret_name": "SERVICE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 133,
          "context": "echo \"Secret not found: ${SERVICE}_${KEY}\"",
          "secret_name": "SERVICE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 138,
          "context": "ENV_VAR_NAME=\"${SERVICE}_${KEY}\"",
          "secret_name": "SERVICE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 161,
          "context": "echo \"Getting config: ${SERVICE}_${KEY}\"",
          "secret_name": "SERVICE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 173,
          "context": "echo \"Config not found: ${SERVICE}_${KEY}\"",
          "secret_name": "SERVICE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/inject_secrets.sh",
          "line_number": 178,
          "context": "ENV_VAR_NAME=\"${SERVICE}_${KEY}\"",
          "secret_name": "SERVICE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SERVICE_NAME",
      "recommended_name": "SERVICE_NAME",
      "service": "service",
      "credential_type": "NAME",
      "references": [
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 159,
          "context": "kubectl set image deployment/${SERVICE_NAME} \\",
          "secret_name": "SERVICE_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 170,
          "context": "kubectl rollout status deployment/${SERVICE_NAME} \\",
          "secret_name": "SERVICE_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 182,
          "context": "kubectl get pods -l app=${SERVICE_NAME} --namespace=\"${NAMESPACE}\"",
          "secret_name": "SERVICE_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 185,
          "context": "kubectl get service ${SERVICE_NAME} --namespace=\"${NAMESPACE}\"",
          "secret_name": "SERVICE_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 192,
          "context": "if kubectl port-forward service/${SERVICE_NAME} 8080:80 --namespace=\"${NAMESPACE}\" &",
          "secret_name": "SERVICE_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 213,
          "context": "echo \"Service: ${SERVICE_NAME}\"",
          "secret_name": "SERVICE_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 219,
          "context": "echo \"  View pods: kubectl get pods -l app=${SERVICE_NAME} -n ${NAMESPACE}\"",
          "secret_name": "SERVICE_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 220,
          "context": "echo \"  View logs: kubectl logs -l app=${SERVICE_NAME} -n ${NAMESPACE} -f\"",
          "secret_name": "SERVICE_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 221,
          "context": "echo \"  Scale: kubectl scale deployment ${SERVICE_NAME} --replicas=5 -n ${NAMESPACE}\"",
          "secret_name": "SERVICE_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 229,
          "context": "kubectl delete deployment ${SERVICE_NAME} --namespace=\"${NAMESPACE}\" --ignore-not-found=true",
          "secret_name": "SERVICE_NAME",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 230,
          "context": "kubectl delete service ${SERVICE_NAME} --namespace=\"${NAMESPACE}\" --ignore-not-found=true",
          "secret_name": "SERVICE_NAME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SETUPTOOLS_ENABLE_FEATURES",
      "recommended_name": "SETUPTOOLS_ENABLE_FEATURES",
      "service": "setuptools",
      "credential_type": "ENABLE_FEATURES",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/setuptools/build_meta.py",
          "line_number": 61,
          "context": "SETUPTOOLS_ENABLE_FEATURES = os.getenv(\"SETUPTOOLS_ENABLE_FEATURES\", \"\").lower()",
          "secret_name": "SETUPTOOLS_ENABLE_FEATURES",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SETUPTOOLS_EXT_SUFFIX",
      "recommended_name": "SETUPTOOLS_EXT_SUFFIX",
      "service": "setuptools",
      "credential_type": "EXT_SUFFIX",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/setuptools/command/build_ext.py",
          "line_number": 147,
          "context": "so_ext = os.getenv('SETUPTOOLS_EXT_SUFFIX')",
          "secret_name": "SETUPTOOLS_EXT_SUFFIX",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SF_AUTH_SOCKET_ADDR",
      "recommended_name": "SF_AUTH_SOCKET_ADDR",
      "service": "sf",
      "credential_type": "AUTH_SOCKET_ADDR",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/auth/webbrowser.py",
          "line_number": 121,
          "context": "os.getenv(\"SF_AUTH_SOCKET_ADDR\", \"localhost\"),",
          "secret_name": "SF_AUTH_SOCKET_ADDR",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SF_AUTH_SOCKET_PORT",
      "recommended_name": "SF_AUTH_SOCKET_PORT",
      "service": "sf",
      "credential_type": "AUTH_SOCKET_PORT",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/auth/webbrowser.py",
          "line_number": 122,
          "context": "int(os.getenv(\"SF_AUTH_SOCKET_PORT\", 0)),",
          "secret_name": "SF_AUTH_SOCKET_PORT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SF_OCSP_ACTIVATE_NEW_ENDPOINT",
      "recommended_name": "SF_OCSP_ACTIVATE_NEW_ENDPOINT",
      "service": "sf",
      "credential_type": "OCSP_ACTIVATE_NEW_ENDPOINT",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/ocsp_snowflake.py",
          "line_number": 300,
          "context": "return os.getenv(\"SF_OCSP_ACTIVATE_NEW_ENDPOINT\", \"false\").lower() == \"true\"",
          "secret_name": "SF_OCSP_ACTIVATE_NEW_ENDPOINT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SF_OCSP_DO_RETRY",
      "recommended_name": "SF_OCSP_DO_RETRY",
      "service": "sf",
      "credential_type": "OCSP_DO_RETRY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/ocsp_snowflake.py",
          "line_number": 1028,
          "context": "return os.getenv(\"SF_OCSP_DO_RETRY\", \"true\") == \"true\"",
          "secret_name": "SF_OCSP_DO_RETRY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SF_OCSP_FAIL_OPEN",
      "recommended_name": "SF_OCSP_FAIL_OPEN",
      "service": "sf",
      "credential_type": "OCSP_FAIL_OPEN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/ocsp_snowflake.py",
          "line_number": 891,
          "context": "if os.getenv(\"SF_OCSP_FAIL_OPEN\") is not None:",
          "secret_name": "SF_OCSP_FAIL_OPEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/ocsp_snowflake.py",
          "line_number": 894,
          "context": "self.FAIL_OPEN = os.getenv(\"SF_OCSP_FAIL_OPEN\").lower() == \"true\"",
          "secret_name": "SF_OCSP_FAIL_OPEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SF_OCSP_RESPONSE_CACHE_DIR",
      "recommended_name": "SF_OCSP_RESPONSE_CACHE_DIR",
      "service": "sf",
      "credential_type": "OCSP_RESPONSE_CACHE_DIR",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/ocsp_snowflake.py",
          "line_number": 479,
          "context": "OCSPCache.CACHE_DIR = os.getenv(\"SF_OCSP_RESPONSE_CACHE_DIR\")",
          "secret_name": "SF_OCSP_RESPONSE_CACHE_DIR",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED",
      "recommended_name": "SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED",
      "service": "sf",
      "credential_type": "OCSP_RESPONSE_CACHE_SERVER_ENABLED",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/ocsp_snowflake.py",
          "line_number": 292,
          "context": "os.getenv(\"SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED\", \"true\") != \"false\"",
          "secret_name": "SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SF_OCSP_RESPONSE_CACHE_SERVER_URL",
      "recommended_name": "SF_OCSP_RESPONSE_CACHE_SERVER_URL",
      "service": "sf",
      "credential_type": "OCSP_RESPONSE_CACHE_SERVER_URL",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/ocsp_snowflake.py",
          "line_number": 289,
          "context": "self.CACHE_SERVER_URL = os.getenv(\"SF_OCSP_RESPONSE_CACHE_SERVER_URL\")",
          "secret_name": "SF_OCSP_RESPONSE_CACHE_SERVER_URL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SF_OCSP_TEST_MODE",
      "recommended_name": "SF_OCSP_TEST_MODE",
      "service": "sf",
      "credential_type": "OCSP_TEST_MODE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/ocsp_snowflake.py",
          "line_number": 881,
          "context": "self.test_mode = os.getenv(\"SF_OCSP_TEST_MODE\", None)",
          "secret_name": "SF_OCSP_TEST_MODE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SF_TEST_OCSP_CACHE_SERVER_URL",
      "recommended_name": "SF_TEST_OCSP_CACHE_SERVER_URL",
      "service": "sf",
      "credential_type": "TEST_OCSP_CACHE_SERVER_URL",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/ocsp_snowflake.py",
          "line_number": 391,
          "context": "sf_cache_server_url = os.getenv(\"SF_TEST_OCSP_CACHE_SERVER_URL\", None)",
          "secret_name": "SF_TEST_OCSP_CACHE_SERVER_URL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SF_TEST_OCSP_CERT_STATUS",
      "recommended_name": "SF_TEST_OCSP_CERT_STATUS",
      "service": "sf",
      "credential_type": "TEST_OCSP_CERT_STATUS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/ocsp_snowflake.py",
          "line_number": 1567,
          "context": "test_cert_status = os.getenv(\"SF_TEST_OCSP_CERT_STATUS\")",
          "secret_name": "SF_TEST_OCSP_CERT_STATUS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SF_TEST_OCSP_FORCE_BAD_RESPONSE_VALIDITY",
      "recommended_name": "SF_TEST_OCSP_FORCE_BAD_RESPONSE_VALIDITY",
      "service": "sf",
      "credential_type": "TEST_OCSP_FORCE_BAD_RESPONSE_VALIDITY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/ocsp_snowflake.py",
          "line_number": 1338,
          "context": "force_validity_fail = os.getenv(\"SF_TEST_OCSP_FORCE_BAD_RESPONSE_VALIDITY\")",
          "secret_name": "SF_TEST_OCSP_FORCE_BAD_RESPONSE_VALIDITY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SF_TEST_OCSP_URL",
      "recommended_name": "SF_TEST_OCSP_URL",
      "service": "sf",
      "credential_type": "TEST_OCSP_URL",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/snowflake/connector/ocsp_snowflake.py",
          "line_number": 1444,
          "context": "test_ocsp_url = os.getenv(\"SF_TEST_OCSP_URL\", None)",
          "secret_name": "SF_TEST_OCSP_URL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SHELL",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pip/_vendor/platformdirs/__init__.py",
          "line_number": 32,
          "context": "if os.getenv(\"SHELL\") or os.getenv(\"PREFIX\"):",
          "secret_name": "SHELL",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/platformdirs/__init__.py",
          "line_number": 33,
          "context": "if os.getenv(\"SHELL\") or os.getenv(\"PREFIX\"):",
          "secret_name": "SHELL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SKLEARN_SKIP_OPENMP_TEST",
      "recommended_name": "SKLEARN_SKIP_OPENMP_TEST",
      "service": "sklearn",
      "credential_type": "SKIP_OPENMP_TEST",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/sklearn/tests/test_build.py",
          "line_number": 14,
          "context": "if os.getenv(\"SKLEARN_SKIP_OPENMP_TEST\"):",
          "secret_name": "SKLEARN_SKIP_OPENMP_TEST",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SLACK_APP_TOKEN",
      "recommended_name": "SLACK_APP_TOKEN",
      "service": "slack",
      "credential_type": "APP_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 77,
          "context": "SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN }}",
          "secret_name": "SLACK_APP_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 56,
          "context": "SLACK_APP_TOKEN=${{ secrets.SLACK_APP_TOKEN }}",
          "secret_name": "SLACK_APP_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 70,
          "context": "\"SLACK_APP_TOKEN\": \"values.sophia.communication.slack.app_token\",",
          "secret_name": "SLACK_APP_TOKEN",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "docker-compose.mcp-gateway.yml",
          "line_number": 98,
          "context": "- SLACK_APP_TOKEN=${SLACK_APP_TOKEN}",
          "secret_name": "SLACK_APP_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 110,
          "context": "fn::secret: \"${SLACK_APP_TOKEN}\"",
          "secret_name": "SLACK_APP_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 173,
          "context": "slack-app-token: \"${SLACK_APP_TOKEN}\"",
          "secret_name": "SLACK_APP_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "SLACK_BOT_TOKEN",
      "recommended_name": "SLACK_BOT_TOKEN",
      "service": "slack",
      "credential_type": "BOT_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 76,
          "context": "SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}",
          "secret_name": "SLACK_BOT_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_secrets_export.yml",
          "line_number": 64,
          "context": "SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}",
          "secret_name": "SLACK_BOT_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/production_deployment.yml",
          "line_number": 49,
          "context": "SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}",
          "secret_name": "SLACK_BOT_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 151,
          "context": "SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}",
          "secret_name": "SLACK_BOT_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 55,
          "context": "SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }}",
          "secret_name": "SLACK_BOT_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 69,
          "context": "\"SLACK_BOT_TOKEN\": \"values.sophia.communication.slack.bot_token\",",
          "secret_name": "SLACK_BOT_TOKEN",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "docker-compose.mcp-gateway.yml",
          "line_number": 97,
          "context": "- SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}",
          "secret_name": "SLACK_BOT_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 108,
          "context": "fn::secret: \"${SLACK_BOT_TOKEN}\"",
          "secret_name": "SLACK_BOT_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 172,
          "context": "slack-bot-token: \"${SLACK_BOT_TOKEN}\"",
          "secret_name": "SLACK_BOT_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "SLACK_CLIENT_ID",
      "recommended_name": "SLACK_UNKNOWN",
      "service": "slack",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 79,
          "context": "SLACK_CLIENT_ID: ${{ secrets.SLACK_CLIENT_ID }}",
          "secret_name": "SLACK_CLIENT_ID",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 72,
          "context": "\"SLACK_CLIENT_ID\": \"values.sophia.communication.slack.client_id\",",
          "secret_name": "SLACK_CLIENT_ID",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": false,
      "action_required": "verify_usage"
    },
    {
      "current_name": "SLACK_CLIENT_SECRET",
      "recommended_name": "SLACK_UNKNOWN",
      "service": "slack",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 80,
          "context": "SLACK_CLIENT_SECRET: ${{ secrets.SLACK_CLIENT_SECRET }}",
          "secret_name": "SLACK_CLIENT_SECRET",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 73,
          "context": "\"SLACK_CLIENT_SECRET\": \"values.sophia.communication.slack.client_secret\",",
          "secret_name": "SLACK_CLIENT_SECRET",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": false,
      "action_required": "verify_usage"
    },
    {
      "current_name": "SLACK_SIGNING_SECRET",
      "recommended_name": "SLACK_SIGNING_SECRET",
      "service": "slack",
      "credential_type": "SIGNING_SECRET",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 78,
          "context": "SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}",
          "secret_name": "SLACK_SIGNING_SECRET",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 71,
          "context": "\"SLACK_SIGNING_SECRET\": \"values.sophia.communication.slack.signing_secret\",",
          "secret_name": "SLACK_SIGNING_SECRET",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 216,
          "context": "fn::secret: \"${SLACK_SIGNING_SECRET}\"",
          "secret_name": "SLACK_SIGNING_SECRET",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 112,
          "context": "fn::secret: \"${SLACK_SIGNING_SECRET}\"",
          "secret_name": "SLACK_SIGNING_SECRET",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 174,
          "context": "slack-signing-secret: \"${SLACK_SIGNING_SECRET}\"",
          "secret_name": "SLACK_SIGNING_SECRET",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "SLACK_TOKEN",
      "recommended_name": "SLACK_UNKNOWN",
      "service": "slack",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.production.yml",
          "line_number": 280,
          "context": "- SLACK_TOKEN=${SLACK_TOKEN}",
          "secret_name": "SLACK_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SLACK_WEBHOOK",
      "recommended_name": "SLACK_UNKNOWN",
      "service": "slack",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".github/workflows/ai-infrastructure-orchestrator.yml",
          "line_number": 317,
          "context": "SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}",
          "secret_name": "SLACK_WEBHOOK",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "SLACK_WEBHOOK_URL",
      "recommended_name": "SLACK_UNKNOWN",
      "service": "slack",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".github/workflows/infrastructure-tests.yml",
          "line_number": 274,
          "context": "SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}",
          "secret_name": "SLACK_WEBHOOK_URL",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/enhanced-deployment-oversight.yml",
          "line_number": 380,
          "context": "SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}",
          "secret_name": "SLACK_WEBHOOK_URL",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 705,
          "context": "SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}",
          "secret_name": "SLACK_WEBHOOK_URL",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 725,
          "context": "SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}",
          "secret_name": "SLACK_WEBHOOK_URL",
          "usage_type": "github_action"
        },
        {
          "file_path": "docker-compose.payready-production.yml",
          "line_number": 185,
          "context": "- SLACK_WEBHOOK=${SLACK_WEBHOOK_URL}",
          "secret_name": "SLACK_WEBHOOK_URL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "SLOW_TESTS_FILE",
      "recommended_name": "SLOW_TESTS_FILE",
      "service": "slow",
      "credential_type": "TESTS_FILE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/testing/_internal/common_utils.py",
          "line_number": 212,
          "context": "if os.getenv(\"SLOW_TESTS_FILE\", \"\"):",
          "secret_name": "SLOW_TESTS_FILE",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/testing/_internal/common_utils.py",
          "line_number": 213,
          "context": "slow_tests_dict = maybe_load_json(os.getenv(\"SLOW_TESTS_FILE\", \"\"))",
          "secret_name": "SLOW_TESTS_FILE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SMDATAPARALLEL_LOCAL_RANK",
      "recommended_name": "SMDATAPARALLEL_LOCAL_RANK",
      "service": "smdataparallel",
      "credential_type": "LOCAL_RANK",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/trainer.py",
          "line_number": 1429,
          "context": "model, device_ids=[int(os.getenv(\"SMDATAPARALLEL_LOCAL_RANK\"))]",
          "secret_name": "SMDATAPARALLEL_LOCAL_RANK",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/sagemaker/training_args_sm.py",
          "line_number": 96,
          "context": "self.local_rank = int(os.getenv(\"SMDATAPARALLEL_LOCAL_RANK\"))",
          "secret_name": "SMDATAPARALLEL_LOCAL_RANK",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SM_FRAMEWORK_MODULE",
      "recommended_name": "SM_FRAMEWORK_MODULE",
      "service": "sm",
      "credential_type": "FRAMEWORK_MODULE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 186,
          "context": "\"sm_framework\": os.getenv(\"SM_FRAMEWORK_MODULE\", None),",
          "secret_name": "SM_FRAMEWORK_MODULE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SM_FRAMEWORK_PARAMS",
      "recommended_name": "SM_FRAMEWORK_PARAMS",
      "service": "sm",
      "credential_type": "FRAMEWORK_PARAMS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 181,
          "context": "sagemaker_params = json.loads(os.getenv(\"SM_FRAMEWORK_PARAMS\", \"{}\"))",
          "secret_name": "SM_FRAMEWORK_PARAMS",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/import_utils.py",
          "line_number": 759,
          "context": "sagemaker_params = os.getenv(\"SM_FRAMEWORK_PARAMS\", \"{}\")",
          "secret_name": "SM_FRAMEWORK_PARAMS",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/import_utils.py",
          "line_number": 783,
          "context": "mpi_options = os.getenv(\"SM_FRAMEWORK_PARAMS\", \"{}\")",
          "secret_name": "SM_FRAMEWORK_PARAMS",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/sagemaker/training_args_sm.py",
          "line_number": 44,
          "context": "mpi_options = os.getenv(\"SM_FRAMEWORK_PARAMS\", \"{}\")",
          "secret_name": "SM_FRAMEWORK_PARAMS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SM_HP_MP_PARAMETERS",
      "recommended_name": "SM_HP_MP_PARAMETERS",
      "service": "sm",
      "credential_type": "HP_MP_PARAMETERS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/import_utils.py",
          "line_number": 773,
          "context": "smp_options = os.getenv(\"SM_HP_MP_PARAMETERS\", \"{}\")",
          "secret_name": "SM_HP_MP_PARAMETERS",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/sagemaker/training_args_sm.py",
          "line_number": 34,
          "context": "smp_options = os.getenv(\"SM_HP_MP_PARAMETERS\", \"{}\")",
          "secret_name": "SM_HP_MP_PARAMETERS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SM_NUM_CPUS",
      "recommended_name": "SM_NUM_CPUS",
      "service": "sm",
      "credential_type": "NUM_CPUS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 189,
          "context": "\"sm_number_cpu\": os.getenv(\"SM_NUM_CPUS\", 0),",
          "secret_name": "SM_NUM_CPUS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SM_NUM_GPUS",
      "recommended_name": "SM_NUM_GPUS",
      "service": "sm",
      "credential_type": "NUM_GPUS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 188,
          "context": "\"sm_number_gpu\": os.getenv(\"SM_NUM_GPUS\", 0),",
          "secret_name": "SM_NUM_GPUS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_ACCOUNT",
      "recommended_name": "SNOWFLAKE_ACCOUNT",
      "service": "snowflake",
      "credential_type": "ACCOUNT",
      "references": [
        {
          "file_path": ".github/workflows/test_integrations.yml",
          "line_number": 38,
          "context": "echo \"SNOWFLAKE_ACCOUNT=${{ secrets.SNOWFLAKE_ACCOUNT }}\" >> .env",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 83,
          "context": "SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy_infrastructure.yml",
          "line_number": 57,
          "context": "echo \"SNOWFLAKE_ACCOUNT=${{ secrets.SNOWFLAKE_ACCOUNT }}\" >> $GITHUB_ENV",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/infrastructure-tests.yml",
          "line_number": 145,
          "context": "SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_secrets_export.yml",
          "line_number": 37,
          "context": "SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/production_deployment.yml",
          "line_number": 50,
          "context": "SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 85,
          "context": "if [ -z \"${{ secrets.SNOWFLAKE_ACCOUNT }}\" ]; then",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 144,
          "context": "SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 42,
          "context": "SNOWFLAKE_ACCOUNT=${{ secrets.SNOWFLAKE_ACCOUNT }}",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 76,
          "context": "\"SNOWFLAKE_ACCOUNT\": \"values.sophia.data.snowflake.account\",",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "scripts/implement_missing_snowflake_schemas.py",
          "line_number": 878,
          "context": "export SNOWFLAKE_ACCOUNT=\"${SNOWFLAKE_ACCOUNT}\"",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 38,
          "context": "fn::secret: \"${SNOWFLAKE_ACCOUNT}\"",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 87,
          "context": "fn::secret: \"${SNOWFLAKE_ACCOUNT}\"",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 139,
          "context": "snowflake-account: \"${SNOWFLAKE_ACCOUNT}\"",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy_snowflake_schemas.sh",
          "line_number": 10,
          "context": "export SNOWFLAKE_ACCOUNT=\"${SNOWFLAKE_ACCOUNT}\"",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 136,
          "context": "--from-literal=SNOWFLAKE_ACCOUNT=\"${SNOWFLAKE_ACCOUNT}\" \\",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/etl/gong/README.md",
          "line_number": 100,
          "context": "\"host\": \"${SNOWFLAKE_ACCOUNT}.snowflakecomputing.com\",",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/etl/gong/README.md",
          "line_number": 163,
          "context": "\"host\": \"${SNOWFLAKE_ACCOUNT}.snowflakecomputing.com\",",
          "secret_name": "SNOWFLAKE_ACCOUNT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "SNOWFLAKE_CONNECTION",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.payready-production.yml",
          "line_number": 138,
          "context": "- SNOWFLAKE_CONNECTION=${SNOWFLAKE_CONNECTION}",
          "secret_name": "SNOWFLAKE_CONNECTION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_DATABASE",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".github/workflows/test_integrations.yml",
          "line_number": 42,
          "context": "echo \"SNOWFLAKE_DATABASE=${{ secrets.SNOWFLAKE_DATABASE }}\" >> .env",
          "secret_name": "SNOWFLAKE_DATABASE",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "SNOWFLAKE_DEV_ACCOUNT",
      "recommended_name": "SNOWFLAKE_ACCOUNT",
      "service": "snowflake",
      "credential_type": "ACCOUNT",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 13,
          "context": "- SNOWFLAKE_DEV_ACCOUNT=${SNOWFLAKE_DEV_ACCOUNT}",
          "secret_name": "SNOWFLAKE_DEV_ACCOUNT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 8,
          "context": "account: \"${SNOWFLAKE_DEV_ACCOUNT}\"",
          "secret_name": "SNOWFLAKE_DEV_ACCOUNT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_DEV_DATABASE",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 18,
          "context": "- SNOWFLAKE_DEV_DATABASE=${SNOWFLAKE_DEV_DATABASE}",
          "secret_name": "SNOWFLAKE_DEV_DATABASE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 13,
          "context": "database: \"${SNOWFLAKE_DEV_DATABASE}\"",
          "secret_name": "SNOWFLAKE_DEV_DATABASE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_DEV_PASSWORD",
      "recommended_name": "SNOWFLAKE_PASSWORD",
      "service": "snowflake",
      "credential_type": "PASSWORD",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 15,
          "context": "- SNOWFLAKE_DEV_PASSWORD=${SNOWFLAKE_DEV_PASSWORD}",
          "secret_name": "SNOWFLAKE_DEV_PASSWORD",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 10,
          "context": "password: \"${SNOWFLAKE_DEV_PASSWORD}\"",
          "secret_name": "SNOWFLAKE_DEV_PASSWORD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_DEV_PAT",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 16,
          "context": "- SNOWFLAKE_DEV_PAT=${SNOWFLAKE_DEV_PAT}",
          "secret_name": "SNOWFLAKE_DEV_PAT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 11,
          "context": "pat: \"${SNOWFLAKE_DEV_PAT}\"  # Programmatic Access Token (preferred)",
          "secret_name": "SNOWFLAKE_DEV_PAT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_DEV_ROLE",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 20,
          "context": "- SNOWFLAKE_DEV_ROLE=${SNOWFLAKE_DEV_ROLE}",
          "secret_name": "SNOWFLAKE_DEV_ROLE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 15,
          "context": "role: \"${SNOWFLAKE_DEV_ROLE}\"",
          "secret_name": "SNOWFLAKE_DEV_ROLE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_DEV_SCHEMA",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 19,
          "context": "- SNOWFLAKE_DEV_SCHEMA=${SNOWFLAKE_DEV_SCHEMA}",
          "secret_name": "SNOWFLAKE_DEV_SCHEMA",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 14,
          "context": "schema: \"${SNOWFLAKE_DEV_SCHEMA}\"",
          "secret_name": "SNOWFLAKE_DEV_SCHEMA",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_DEV_USER",
      "recommended_name": "SNOWFLAKE_USER",
      "service": "snowflake",
      "credential_type": "USER",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 14,
          "context": "- SNOWFLAKE_DEV_USER=${SNOWFLAKE_DEV_USER}",
          "secret_name": "SNOWFLAKE_DEV_USER",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 9,
          "context": "user: \"${SNOWFLAKE_DEV_USER}\"",
          "secret_name": "SNOWFLAKE_DEV_USER",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_DEV_WAREHOUSE",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 17,
          "context": "- SNOWFLAKE_DEV_WAREHOUSE=${SNOWFLAKE_DEV_WAREHOUSE}",
          "secret_name": "SNOWFLAKE_DEV_WAREHOUSE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 12,
          "context": "warehouse: \"${SNOWFLAKE_DEV_WAREHOUSE}\"",
          "secret_name": "SNOWFLAKE_DEV_WAREHOUSE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_OAUTH_CLIENT_ID",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 49,
          "context": "fn::secret: \"${SNOWFLAKE_OAUTH_CLIENT_ID}\"",
          "secret_name": "SNOWFLAKE_OAUTH_CLIENT_ID",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 144,
          "context": "snowflake-oauth-client-id: \"${SNOWFLAKE_OAUTH_CLIENT_ID}\"",
          "secret_name": "SNOWFLAKE_OAUTH_CLIENT_ID",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_OAUTH_CLIENT_SECRET",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 51,
          "context": "fn::secret: \"${SNOWFLAKE_OAUTH_CLIENT_SECRET}\"",
          "secret_name": "SNOWFLAKE_OAUTH_CLIENT_SECRET",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 145,
          "context": "snowflake-oauth-client-secret: \"${SNOWFLAKE_OAUTH_CLIENT_SECRET}\"",
          "secret_name": "SNOWFLAKE_OAUTH_CLIENT_SECRET",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_OAUTH_REFRESH_TOKEN",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 53,
          "context": "fn::secret: \"${SNOWFLAKE_OAUTH_REFRESH_TOKEN}\"",
          "secret_name": "SNOWFLAKE_OAUTH_REFRESH_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 146,
          "context": "snowflake-oauth-refresh-token: \"${SNOWFLAKE_OAUTH_REFRESH_TOKEN}\"",
          "secret_name": "SNOWFLAKE_OAUTH_REFRESH_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_PASSWORD",
      "recommended_name": "SNOWFLAKE_PASSWORD",
      "service": "snowflake",
      "credential_type": "PASSWORD",
      "references": [
        {
          "file_path": ".github/workflows/test_integrations.yml",
          "line_number": 40,
          "context": "echo \"SNOWFLAKE_PASSWORD=${{ secrets.SNOWFLAKE_PASSWORD }}\" >> .env",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 86,
          "context": "SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy_infrastructure.yml",
          "line_number": 59,
          "context": "echo \"SNOWFLAKE_PASSWORD=${{ secrets.SNOWFLAKE_PASSWORD }}\" >> $GITHUB_ENV",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/infrastructure-tests.yml",
          "line_number": 147,
          "context": "SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_secrets_export.yml",
          "line_number": 39,
          "context": "SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/production_deployment.yml",
          "line_number": 52,
          "context": "SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 89,
          "context": "if [ -z \"${{ secrets.SNOWFLAKE_PASSWORD }}\" ]; then",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 147,
          "context": "SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 44,
          "context": "SNOWFLAKE_PASSWORD=${{ secrets.SNOWFLAKE_PASSWORD }}",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 79,
          "context": "\"SNOWFLAKE_PASSWORD\": \"values.sophia.data.snowflake.password\",",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "scripts/implement_missing_snowflake_schemas.py",
          "line_number": 880,
          "context": "export SNOWFLAKE_PASSWORD=\"${SNOWFLAKE_PASSWORD}\"",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 41,
          "context": "fn::secret: \"${SNOWFLAKE_PASSWORD}\"",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 141,
          "context": "snowflake-password: \"${SNOWFLAKE_PASSWORD}\"",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy_snowflake_schemas.sh",
          "line_number": 12,
          "context": "export SNOWFLAKE_PASSWORD=\"${SNOWFLAKE_PASSWORD}\"",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 138,
          "context": "--from-literal=SNOWFLAKE_PASSWORD=\"${SNOWFLAKE_PASSWORD}\" \\",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/etl/gong/README.md",
          "line_number": 106,
          "context": "\"password\": \"${SNOWFLAKE_PASSWORD}\",",
          "secret_name": "SNOWFLAKE_PASSWORD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "SNOWFLAKE_PAT",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-platform-fixed.yml",
          "line_number": 324,
          "context": "SNOWFLAKE_PAT: ${{ secrets.SNOWFLAKE_PAT }}",
          "secret_name": "SNOWFLAKE_PAT",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform-fixed.yml",
          "line_number": 372,
          "context": "SNOWFLAKE_PAT: ${{ secrets.SNOWFLAKE_PAT }}",
          "secret_name": "SNOWFLAKE_PAT",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 380,
          "context": "SNOWFLAKE_PAT: ${{ secrets.SNOWFLAKE_PAT }}",
          "secret_name": "SNOWFLAKE_PAT",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 394,
          "context": "SNOWFLAKE_PAT: ${{ secrets.SNOWFLAKE_PAT }}",
          "secret_name": "SNOWFLAKE_PAT",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "SNOWFLAKE_PROD_ACCOUNT",
      "recommended_name": "SNOWFLAKE_ACCOUNT",
      "service": "snowflake",
      "credential_type": "ACCOUNT",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 33,
          "context": "- SNOWFLAKE_PROD_ACCOUNT=${SNOWFLAKE_PROD_ACCOUNT}",
          "secret_name": "SNOWFLAKE_PROD_ACCOUNT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 32,
          "context": "account: \"${SNOWFLAKE_PROD_ACCOUNT}\"",
          "secret_name": "SNOWFLAKE_PROD_ACCOUNT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_PROD_DATABASE",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 38,
          "context": "- SNOWFLAKE_PROD_DATABASE=${SNOWFLAKE_PROD_DATABASE}",
          "secret_name": "SNOWFLAKE_PROD_DATABASE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 37,
          "context": "database: \"${SNOWFLAKE_PROD_DATABASE}\"",
          "secret_name": "SNOWFLAKE_PROD_DATABASE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_PROD_PASSWORD",
      "recommended_name": "SNOWFLAKE_PASSWORD",
      "service": "snowflake",
      "credential_type": "PASSWORD",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 35,
          "context": "- SNOWFLAKE_PROD_PASSWORD=${SNOWFLAKE_PROD_PASSWORD}",
          "secret_name": "SNOWFLAKE_PROD_PASSWORD",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 34,
          "context": "password: \"${SNOWFLAKE_PROD_PASSWORD}\"",
          "secret_name": "SNOWFLAKE_PROD_PASSWORD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_PROD_PAT",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 36,
          "context": "- SNOWFLAKE_PROD_PAT=${SNOWFLAKE_PROD_PAT}",
          "secret_name": "SNOWFLAKE_PROD_PAT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 35,
          "context": "pat: \"${SNOWFLAKE_PROD_PAT}\"",
          "secret_name": "SNOWFLAKE_PROD_PAT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_PROD_ROLE",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 40,
          "context": "- SNOWFLAKE_PROD_ROLE=${SNOWFLAKE_PROD_ROLE}",
          "secret_name": "SNOWFLAKE_PROD_ROLE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 39,
          "context": "role: \"${SNOWFLAKE_PROD_ROLE}\"",
          "secret_name": "SNOWFLAKE_PROD_ROLE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_PROD_SCHEMA",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 39,
          "context": "- SNOWFLAKE_PROD_SCHEMA=${SNOWFLAKE_PROD_SCHEMA}",
          "secret_name": "SNOWFLAKE_PROD_SCHEMA",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 38,
          "context": "schema: \"${SNOWFLAKE_PROD_SCHEMA}\"",
          "secret_name": "SNOWFLAKE_PROD_SCHEMA",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_PROD_USER",
      "recommended_name": "SNOWFLAKE_USER",
      "service": "snowflake",
      "credential_type": "USER",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 34,
          "context": "- SNOWFLAKE_PROD_USER=${SNOWFLAKE_PROD_USER}",
          "secret_name": "SNOWFLAKE_PROD_USER",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 33,
          "context": "user: \"${SNOWFLAKE_PROD_USER}\"",
          "secret_name": "SNOWFLAKE_PROD_USER",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_PROD_WAREHOUSE",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 37,
          "context": "- SNOWFLAKE_PROD_WAREHOUSE=${SNOWFLAKE_PROD_WAREHOUSE}",
          "secret_name": "SNOWFLAKE_PROD_WAREHOUSE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 36,
          "context": "warehouse: \"${SNOWFLAKE_PROD_WAREHOUSE}\"",
          "secret_name": "SNOWFLAKE_PROD_WAREHOUSE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_ROLE",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".github/workflows/test_integrations.yml",
          "line_number": 44,
          "context": "echo \"SNOWFLAKE_ROLE=${{ secrets.SNOWFLAKE_ROLE }}\" >> .env",
          "secret_name": "SNOWFLAKE_ROLE",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 85,
          "context": "SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}",
          "secret_name": "SNOWFLAKE_ROLE",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 146,
          "context": "SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}",
          "secret_name": "SNOWFLAKE_ROLE",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 78,
          "context": "\"SNOWFLAKE_ROLE\": \"values.sophia.data.snowflake.role\",",
          "secret_name": "SNOWFLAKE_ROLE",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": false,
      "action_required": "keep"
    },
    {
      "current_name": "SNOWFLAKE_SCHEMA",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".github/workflows/test_integrations.yml",
          "line_number": 43,
          "context": "echo \"SNOWFLAKE_SCHEMA=${{ secrets.SNOWFLAKE_SCHEMA }}\" >> .env",
          "secret_name": "SNOWFLAKE_SCHEMA",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "SNOWFLAKE_STG_ACCOUNT",
      "recommended_name": "SNOWFLAKE_ACCOUNT",
      "service": "snowflake",
      "credential_type": "ACCOUNT",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 23,
          "context": "- SNOWFLAKE_STG_ACCOUNT=${SNOWFLAKE_STG_ACCOUNT}",
          "secret_name": "SNOWFLAKE_STG_ACCOUNT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 20,
          "context": "account: \"${SNOWFLAKE_STG_ACCOUNT}\"",
          "secret_name": "SNOWFLAKE_STG_ACCOUNT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_STG_DATABASE",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 28,
          "context": "- SNOWFLAKE_STG_DATABASE=${SNOWFLAKE_STG_DATABASE}",
          "secret_name": "SNOWFLAKE_STG_DATABASE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 25,
          "context": "database: \"${SNOWFLAKE_STG_DATABASE}\"",
          "secret_name": "SNOWFLAKE_STG_DATABASE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_STG_PASSWORD",
      "recommended_name": "SNOWFLAKE_PASSWORD",
      "service": "snowflake",
      "credential_type": "PASSWORD",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 25,
          "context": "- SNOWFLAKE_STG_PASSWORD=${SNOWFLAKE_STG_PASSWORD}",
          "secret_name": "SNOWFLAKE_STG_PASSWORD",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 22,
          "context": "password: \"${SNOWFLAKE_STG_PASSWORD}\"",
          "secret_name": "SNOWFLAKE_STG_PASSWORD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_STG_PAT",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 26,
          "context": "- SNOWFLAKE_STG_PAT=${SNOWFLAKE_STG_PAT}",
          "secret_name": "SNOWFLAKE_STG_PAT",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 23,
          "context": "pat: \"${SNOWFLAKE_STG_PAT}\"",
          "secret_name": "SNOWFLAKE_STG_PAT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_STG_ROLE",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 30,
          "context": "- SNOWFLAKE_STG_ROLE=${SNOWFLAKE_STG_ROLE}",
          "secret_name": "SNOWFLAKE_STG_ROLE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 27,
          "context": "role: \"${SNOWFLAKE_STG_ROLE}\"",
          "secret_name": "SNOWFLAKE_STG_ROLE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_STG_SCHEMA",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 29,
          "context": "- SNOWFLAKE_STG_SCHEMA=${SNOWFLAKE_STG_SCHEMA}",
          "secret_name": "SNOWFLAKE_STG_SCHEMA",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 26,
          "context": "schema: \"${SNOWFLAKE_STG_SCHEMA}\"",
          "secret_name": "SNOWFLAKE_STG_SCHEMA",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_STG_USER",
      "recommended_name": "SNOWFLAKE_USER",
      "service": "snowflake",
      "credential_type": "USER",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 24,
          "context": "- SNOWFLAKE_STG_USER=${SNOWFLAKE_STG_USER}",
          "secret_name": "SNOWFLAKE_STG_USER",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 21,
          "context": "user: \"${SNOWFLAKE_STG_USER}\"",
          "secret_name": "SNOWFLAKE_STG_USER",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_STG_WAREHOUSE",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "docker-compose.snowflake-admin.yml",
          "line_number": 27,
          "context": "- SNOWFLAKE_STG_WAREHOUSE=${SNOWFLAKE_STG_WAREHOUSE}",
          "secret_name": "SNOWFLAKE_STG_WAREHOUSE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "config/snowflake_admin_config.yaml",
          "line_number": 24,
          "context": "warehouse: \"${SNOWFLAKE_STG_WAREHOUSE}\"",
          "secret_name": "SNOWFLAKE_STG_WAREHOUSE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SNOWFLAKE_USER",
      "recommended_name": "SNOWFLAKE_USER",
      "service": "snowflake",
      "credential_type": "USER",
      "references": [
        {
          "file_path": ".github/workflows/test_integrations.yml",
          "line_number": 39,
          "context": "echo \"SNOWFLAKE_USER=${{ secrets.SNOWFLAKE_USER }}\" >> .env",
          "secret_name": "SNOWFLAKE_USER",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 84,
          "context": "SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}",
          "secret_name": "SNOWFLAKE_USER",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy_infrastructure.yml",
          "line_number": 58,
          "context": "echo \"SNOWFLAKE_USER=${{ secrets.SNOWFLAKE_USER }}\" >> $GITHUB_ENV",
          "secret_name": "SNOWFLAKE_USER",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/infrastructure-tests.yml",
          "line_number": 146,
          "context": "SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}",
          "secret_name": "SNOWFLAKE_USER",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_secrets_export.yml",
          "line_number": 38,
          "context": "SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}",
          "secret_name": "SNOWFLAKE_USER",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/production_deployment.yml",
          "line_number": 51,
          "context": "SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}",
          "secret_name": "SNOWFLAKE_USER",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/gong_deployment_pipeline.yml",
          "line_number": 145,
          "context": "SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}",
          "secret_name": "SNOWFLAKE_USER",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 43,
          "context": "SNOWFLAKE_USER=${{ secrets.SNOWFLAKE_USER }}",
          "secret_name": "SNOWFLAKE_USER",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 77,
          "context": "\"SNOWFLAKE_USER\": \"values.sophia.data.snowflake.user\",",
          "secret_name": "SNOWFLAKE_USER",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "scripts/implement_missing_snowflake_schemas.py",
          "line_number": 879,
          "context": "export SNOWFLAKE_USER=\"${SNOWFLAKE_USER}\"",
          "secret_name": "SNOWFLAKE_USER",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 89,
          "context": "fn::secret: \"${SNOWFLAKE_USER}\"",
          "secret_name": "SNOWFLAKE_USER",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 140,
          "context": "snowflake-user: \"${SNOWFLAKE_USER}\"",
          "secret_name": "SNOWFLAKE_USER",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy_snowflake_schemas.sh",
          "line_number": 11,
          "context": "export SNOWFLAKE_USER=\"${SNOWFLAKE_USER}\"",
          "secret_name": "SNOWFLAKE_USER",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 137,
          "context": "--from-literal=SNOWFLAKE_USER=\"${SNOWFLAKE_USER}\" \\",
          "secret_name": "SNOWFLAKE_USER",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/etl/gong/README.md",
          "line_number": 105,
          "context": "\"username\": \"${SNOWFLAKE_USER}\",",
          "secret_name": "SNOWFLAKE_USER",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "SNOWFLAKE_WAREHOUSE",
      "recommended_name": "SNOWFLAKE_UNKNOWN",
      "service": "snowflake",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".github/workflows/test_integrations.yml",
          "line_number": 41,
          "context": "echo \"SNOWFLAKE_WAREHOUSE=${{ secrets.SNOWFLAKE_WAREHOUSE }}\" >> .env",
          "secret_name": "SNOWFLAKE_WAREHOUSE",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "SOPHIA_ENVIRONMENT",
      "recommended_name": "SOPHIA_ENVIRONMENT",
      "service": "sophia",
      "credential_type": "ENVIRONMENT",
      "references": [
        {
          "file_path": "backend/app/fastapi_app.py",
          "line_number": 28,
          "context": "ENVIRONMENT = os.getenv(\"SOPHIA_ENVIRONMENT\", \"dev\")",
          "secret_name": "SOPHIA_ENVIRONMENT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SOURCE_NAMESPACE",
      "recommended_name": "SOURCE_NAMESPACE",
      "service": "source",
      "credential_type": "NAMESPACE",
      "references": [
        {
          "file_path": "backend/etl/estuary/estuary_configuration_manager.py",
          "line_number": 469,
          "context": "\"namespaceFormat\": \"${SOURCE_NAMESPACE}\",",
          "secret_name": "SOURCE_NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/etl/netsuite/estuary_netsuite_setup.py",
          "line_number": 197,
          "context": "\"namespaceFormat\": \"${SOURCE_NAMESPACE}\",",
          "secret_name": "SOURCE_NAMESPACE",
          "usage_type": "code_reference"
        },
        {
          "file_path": "backend/scripts/estuary_gong_setup.py",
          "line_number": 560,
          "context": "\"namespaceFormat\": \"${SOURCE_NAMESPACE}\",",
          "secret_name": "SOURCE_NAMESPACE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SPACE_ID",
      "recommended_name": "SPACE_ID",
      "service": "space",
      "credential_type": "ID",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/huggingface_hub/_oauth.py",
          "line_number": 186,
          "context": "if os.getenv(\"SPACE_ID\") is not None:",
          "secret_name": "SPACE_ID",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SSL_ADMIN_EMAIL",
      "recommended_name": "SSL_ADMIN_EMAIL",
      "service": "ssl",
      "credential_type": "ADMIN_EMAIL",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-intelligence-platform.yaml",
          "line_number": 97,
          "context": "fn::secret: \"${SSL_ADMIN_EMAIL}\"",
          "secret_name": "SSL_ADMIN_EMAIL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SYMPY_DEBUG",
      "recommended_name": "SYMPY_DEBUG",
      "service": "sympy",
      "credential_type": "DEBUG",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/sympy/__init__.py",
          "line_number": 45,
          "context": "debug_str = os.getenv('SYMPY_DEBUG', 'False')",
          "secret_name": "SYMPY_DEBUG",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/sympy/external/importtools.py",
          "line_number": 19,
          "context": "debug_str = os.getenv('SYMPY_DEBUG', 'False')",
          "secret_name": "SYMPY_DEBUG",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SYMPY_TEST_CLEAN_TEMP",
      "recommended_name": "SYMPY_TEST_CLEAN_TEMP",
      "service": "sympy",
      "credential_type": "TEST_CLEAN_TEMP",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/sympy/external/tests/test_codegen.py",
          "line_number": 145,
          "context": "clean = os.getenv('SYMPY_TEST_CLEAN_TEMP', 'always').lower()",
          "secret_name": "SYMPY_TEST_CLEAN_TEMP",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SYMPY_TIMINGS",
      "recommended_name": "SYMPY_TIMINGS",
      "service": "sympy",
      "credential_type": "TIMINGS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/sympy/utilities/timeutils.py",
          "line_number": 39,
          "context": "res = os.getenv('SYMPY_TIMINGS', '')",
          "secret_name": "SYMPY_TIMINGS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "SYMPY_USE_CACHE",
      "recommended_name": "SYMPY_USE_CACHE",
      "service": "sympy",
      "credential_type": "USE_CACHE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/sympy/interactive/session.py",
          "line_number": 51,
          "context": "cache = os.getenv('SYMPY_USE_CACHE')",
          "secret_name": "SYMPY_USE_CACHE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TAVILY_API_KEY",
      "recommended_name": "TAVILY_API_KEY",
      "service": "tavily",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 113,
          "context": "TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}",
          "secret_name": "TAVILY_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 106,
          "context": "\"TAVILY_API_KEY\": \"values.sophia.research.tavily.api_key\",",
          "secret_name": "TAVILY_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 83,
          "context": "fn::secret: \"${TAVILY_API_KEY}\"",
          "secret_name": "TAVILY_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "TERM",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pre_commit/color.py",
          "line_number": 98,
          "context": "os.getenv('TERM') != 'dumb'",
          "secret_name": "TERM",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 142,
          "context": "process.env.TERM !== undefined,",
          "secret_name": "TERM",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TEST_MYPYC",
      "recommended_name": "TEST_MYPYC",
      "service": "test",
      "credential_type": "MYPYC",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/mypy/test/testmypyc.py",
          "line_number": 13,
          "context": "if os.getenv(\"TEST_MYPYC\", None) == \"1\":",
          "secret_name": "TEST_MYPYC",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TOGETHERAI_API_KEY",
      "recommended_name": "TOGETHERAI_API_KEY",
      "service": "togetherai",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 61,
          "context": "TOGETHERAI_API_KEY: ${{ secrets.TOGETHERAI_API_KEY }}",
          "secret_name": "TOGETHERAI_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 54,
          "context": "\"TOGETHERAI_API_KEY\": \"values.sophia.ai.togetherai.api_key\",",
          "secret_name": "TOGETHERAI_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 49,
          "context": "fn::secret: \"${TOGETHERAI_API_KEY}\"",
          "secret_name": "TOGETHERAI_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "TORCHELASTIC_RUN_ID",
      "recommended_name": "TORCHELASTIC_RUN_ID",
      "service": "torchelastic",
      "credential_type": "RUN_ID",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/distributed/distributed_c10d.py",
          "line_number": 924,
          "context": "return os.getenv(\"TORCHELASTIC_RUN_ID\") is not None",
          "secret_name": "TORCHELASTIC_RUN_ID",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TORCH_DIST_INIT_BARRIER",
      "recommended_name": "TORCH_DIST_INIT_BARRIER",
      "service": "torch",
      "credential_type": "DIST_INIT_BARRIER",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/distributed/distributed_c10d.py",
          "line_number": 932,
          "context": "return int(os.getenv(\"TORCH_DIST_INIT_BARRIER\", \"0\"))",
          "secret_name": "TORCH_DIST_INIT_BARRIER",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TORCH_FORCE_WEIGHTS_ONLY_LOAD",
      "recommended_name": "TORCH_FORCE_WEIGHTS_ONLY_LOAD",
      "service": "torch",
      "credential_type": "FORCE_WEIGHTS_ONLY_LOAD",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/serialization.py",
          "line_number": 967,
          "context": "if os.getenv(\"TORCH_FORCE_WEIGHTS_ONLY_LOAD\", \"0\").lower() in ['1', 'y', 'yes', 'true']:",
          "secret_name": "TORCH_FORCE_WEIGHTS_ONLY_LOAD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TORCH_HOME",
      "recommended_name": "TORCH_HOME",
      "service": "torch",
      "credential_type": "HOME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/sentence_transformers/SentenceTransformer.py",
          "line_number": 61,
          "context": "torch_cache_home = os.path.expanduser(os.getenv('TORCH_HOME', os.path.join(os.getenv('XDG_CACHE_HOME', '~/.cache'), 'torch')))",
          "secret_name": "TORCH_HOME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 76,
          "context": "torch_cache_home = os.getenv(\"TORCH_HOME\", os.path.join(os.getenv(\"XDG_CACHE_HOME\", \"~/.cache\"), \"torch\"))",
          "secret_name": "TORCH_HOME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TORCH_HUB",
      "recommended_name": "TORCH_HUB",
      "service": "torch",
      "credential_type": "HUB",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/hub.py",
          "line_number": 364,
          "context": "if os.getenv('TORCH_HUB'):",
          "secret_name": "TORCH_HUB",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TORCH_INDUCTOR_INSTALL_GXX",
      "recommended_name": "TORCH_INDUCTOR_INSTALL_GXX",
      "service": "torch",
      "credential_type": "INDUCTOR_INSTALL_GXX",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_inductor/codecache.py",
          "line_number": 424,
          "context": "if not os.getenv(\"TORCH_INDUCTOR_INSTALL_GXX\"):",
          "secret_name": "TORCH_INDUCTOR_INSTALL_GXX",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TORCH_MODEL_ZOO",
      "recommended_name": "TORCH_MODEL_ZOO",
      "service": "torch",
      "credential_type": "MODEL_ZOO",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/hub.py",
          "line_number": 738,
          "context": "if os.getenv('TORCH_MODEL_ZOO'):",
          "secret_name": "TORCH_MODEL_ZOO",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TORCH_USE_RTLD_GLOBAL",
      "recommended_name": "TORCH_USE_RTLD_GLOBAL",
      "service": "torch",
      "credential_type": "USE_RTLD_GLOBAL",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/__init__.py",
          "line_number": 199,
          "context": "if (USE_RTLD_GLOBAL_WITH_LIBTORCH or os.getenv('TORCH_USE_RTLD_GLOBAL')) and \\",
          "secret_name": "TORCH_USE_RTLD_GLOBAL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TQDM_DISCORD_CHANNEL_ID",
      "recommended_name": "TQDM_DISCORD_CHANNEL_ID",
      "service": "tqdm",
      "credential_type": "DISCORD_CHANNEL_ID",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/tqdm/contrib/bells.py",
          "line_number": 9,
          "context": "+ uses `${TQDM_DISCORD_TOKEN}` and `${TQDM_DISCORD_CHANNEL_ID}`",
          "secret_name": "TQDM_DISCORD_CHANNEL_ID",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/tqdm/contrib/discord.py",
          "line_number": 115,
          "context": "[default: ${TQDM_DISCORD_CHANNEL_ID}].",
          "secret_name": "TQDM_DISCORD_CHANNEL_ID",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TQDM_DISCORD_TOKEN",
      "recommended_name": "TQDM_DISCORD_TOKEN",
      "service": "tqdm",
      "credential_type": "DISCORD_TOKEN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/tqdm/contrib/bells.py",
          "line_number": 9,
          "context": "+ uses `${TQDM_DISCORD_TOKEN}` and `${TQDM_DISCORD_CHANNEL_ID}`",
          "secret_name": "TQDM_DISCORD_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/tqdm/contrib/discord.py",
          "line_number": 113,
          "context": "[default: ${TQDM_DISCORD_TOKEN}].",
          "secret_name": "TQDM_DISCORD_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TQDM_POSITION",
      "recommended_name": "TQDM_POSITION",
      "service": "tqdm",
      "credential_type": "POSITION",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/huggingface_hub/utils/tqdm.py",
          "line_number": 209,
          "context": "if os.getenv(\"TQDM_POSITION\") == \"-1\":",
          "secret_name": "TQDM_POSITION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TQDM_SLACK_CHANNEL",
      "recommended_name": "SLACK_UNKNOWN",
      "service": "slack",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/tqdm/contrib/slack.py",
          "line_number": 78,
          "context": "[default: ${TQDM_SLACK_CHANNEL}].",
          "secret_name": "TQDM_SLACK_CHANNEL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TQDM_SLACK_TOKEN",
      "recommended_name": "SLACK_UNKNOWN",
      "service": "slack",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/tqdm/contrib/slack.py",
          "line_number": 76,
          "context": "[default: ${TQDM_SLACK_TOKEN}].",
          "secret_name": "TQDM_SLACK_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TQDM_TELEGRAM_CHAT_ID",
      "recommended_name": "TQDM_TELEGRAM_CHAT_ID",
      "service": "tqdm",
      "credential_type": "TELEGRAM_CHAT_ID",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/tqdm/contrib/bells.py",
          "line_number": 7,
          "context": "+ uses `${TQDM_TELEGRAM_TOKEN}` and `${TQDM_TELEGRAM_CHAT_ID}`",
          "secret_name": "TQDM_TELEGRAM_CHAT_ID",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/tqdm/contrib/telegram.py",
          "line_number": 112,
          "context": "[default: ${TQDM_TELEGRAM_CHAT_ID}].",
          "secret_name": "TQDM_TELEGRAM_CHAT_ID",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TQDM_TELEGRAM_TOKEN",
      "recommended_name": "TQDM_TELEGRAM_TOKEN",
      "service": "tqdm",
      "credential_type": "TELEGRAM_TOKEN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/tqdm/contrib/bells.py",
          "line_number": 7,
          "context": "+ uses `${TQDM_TELEGRAM_TOKEN}` and `${TQDM_TELEGRAM_CHAT_ID}`",
          "secret_name": "TQDM_TELEGRAM_TOKEN",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/tqdm/contrib/telegram.py",
          "line_number": 110,
          "context": "[default: ${TQDM_TELEGRAM_TOKEN}].",
          "secret_name": "TQDM_TELEGRAM_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TRAINING_JOB_ARN",
      "recommended_name": "TRAINING_JOB_ARN",
      "service": "training",
      "credential_type": "JOB_ARN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 183,
          "context": "account_id = os.getenv(\"TRAINING_JOB_ARN\").split(\":\")[4] if \"TRAINING_JOB_ARN\" in os.environ else None",
          "secret_name": "TRAINING_JOB_ARN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TRANSFORMERS_CACHE",
      "recommended_name": "TRANSFORMERS_CACHE",
      "service": "transformers",
      "credential_type": "CACHE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 104,
          "context": "TRANSFORMERS_CACHE = os.getenv(\"TRANSFORMERS_CACHE\", HUGGINGFACE_HUB_CACHE)",
          "secret_name": "TRANSFORMERS_CACHE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TRANSFORMERS_NO_ADVISORY_WARNINGS",
      "recommended_name": "TRANSFORMERS_NO_ADVISORY_WARNINGS",
      "service": "transformers",
      "credential_type": "NO_ADVISORY_WARNINGS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/logging.py",
          "line_number": 311,
          "context": "no_advisory_warnings = os.getenv(\"TRANSFORMERS_NO_ADVISORY_WARNINGS\", False)",
          "secret_name": "TRANSFORMERS_NO_ADVISORY_WARNINGS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TRANSFORMERS_USE_MULTIPROCESSING",
      "recommended_name": "TRANSFORMERS_USE_MULTIPROCESSING",
      "service": "transformers",
      "credential_type": "USE_MULTIPROCESSING",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/benchmark/benchmark_utils.py",
          "line_number": 622,
          "context": "if self.args.memory and os.getenv(\"TRANSFORMERS_USE_MULTIPROCESSING\") == 0:",
          "secret_name": "TRANSFORMERS_USE_MULTIPROCESSING",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TRANSFORMERS_VERBOSITY",
      "recommended_name": "TRANSFORMERS_VERBOSITY",
      "service": "transformers",
      "credential_type": "VERBOSITY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/logging.py",
          "line_number": 62,
          "context": "env_level_str = os.getenv(\"TRANSFORMERS_VERBOSITY\", None)",
          "secret_name": "TRANSFORMERS_VERBOSITY",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/logging.py",
          "line_number": 101,
          "context": "if os.getenv(\"TRANSFORMERS_VERBOSITY\", None) == \"detail\":",
          "secret_name": "TRANSFORMERS_VERBOSITY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TRITON_CACHE_DIR",
      "recommended_name": "TRITON_CACHE_DIR",
      "service": "triton",
      "credential_type": "CACHE_DIR",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_inductor/triton_heuristics.py",
          "line_number": 148,
          "context": "if os.getenv(\"TRITON_CACHE_DIR\") is None:",
          "secret_name": "TRITON_CACHE_DIR",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "TW_JOB_USER",
      "recommended_name": "TW_JOB_USER",
      "service": "tw",
      "credential_type": "JOB_USER",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/testing/_internal/common_utils.py",
          "line_number": 180,
          "context": "implied_by_fn=lambda: os.getenv(\"TW_JOB_USER\") == \"sandcastle\",",
          "secret_name": "TW_JOB_USER",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "USER",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 136,
          "context": "process.env.USER !== undefined && process.env.HOME !== undefined,",
          "secret_name": "USER",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/dns/ip-context-detector.ts",
          "line_number": 228,
          "context": "USER: process.env.USER,",
          "secret_name": "USER",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "USE_SYMENGINE",
      "recommended_name": "USE_SYMENGINE",
      "service": "use",
      "credential_type": "SYMENGINE",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/sympy/core/backend.py",
          "line_number": 2,
          "context": "USE_SYMENGINE = os.getenv('USE_SYMENGINE', '0')",
          "secret_name": "USE_SYMENGINE",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "USE_TF",
      "recommended_name": "USE_TF",
      "service": "use",
      "credential_type": "TF",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/testing_utils.py",
          "line_number": 1604,
          "context": "run_slow = os.getenv(\"RUN_SLOW\", False) use_tf = os.getenv(\"USE_TF\", False)",
          "secret_name": "USE_TF",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "VALIDATE_PYPROJECT_NO_NETWORK",
      "recommended_name": "VALIDATE_PYPROJECT_NO_NETWORK",
      "service": "validate",
      "credential_type": "PYPROJECT_NO_NETWORK",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/setuptools/config/_validate_pyproject/formats.py",
          "line_number": 149,
          "context": "if os.getenv(\"NO_NETWORK\") or os.getenv(\"VALIDATE_PYPROJECT_NO_NETWORK\"):",
          "secret_name": "VALIDATE_PYPROJECT_NO_NETWORK",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "VAR",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/misc.py",
          "line_number": 229,
          "context": "\"\"\"Substitute ``${VAR}`` variables in `text` with their values.",
          "secret_name": "VAR",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/misc.py",
          "line_number": 234,
          "context": "${VAR}",
          "secret_name": "VAR",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "VENICE_AI_API_KEY",
      "recommended_name": "VENICE_AI_API_KEY",
      "service": "venice",
      "credential_type": "AI_API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 63,
          "context": "VENICE_AI_API_KEY: ${{ secrets.VENICE_AI_API_KEY }}",
          "secret_name": "VENICE_AI_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 56,
          "context": "\"VENICE_AI_API_KEY\": \"values.sophia.ai.venice_ai.api_key\",",
          "secret_name": "VENICE_AI_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 55,
          "context": "fn::secret: \"${VENICE_AI_API_KEY}\"",
          "secret_name": "VENICE_AI_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "VERCEL_ACCESS_TOKEN",
      "recommended_name": "VERCEL_ACCESS_TOKEN",
      "service": "vercel",
      "credential_type": "ACCESS_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-platform-fixed.yml",
          "line_number": 200,
          "context": "vercel-token: ${{ secrets.VERCEL_ACCESS_TOKEN }}",
          "secret_name": "VERCEL_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 107,
          "context": "VERCEL_ACCESS_TOKEN: ${{ secrets.VERCEL_ACCESS_TOKEN }}",
          "secret_name": "VERCEL_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia_secrets_export.yml",
          "line_number": 51,
          "context": "VERCEL_ACCESS_TOKEN: ${{ secrets.VERCEL_ACCESS_TOKEN }}",
          "secret_name": "VERCEL_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/enhanced-deployment-oversight.yml",
          "line_number": 246,
          "context": "vercel-token: ${{ secrets.VERCEL_ACCESS_TOKEN }}",
          "secret_name": "VERCEL_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/production_deployment.yml",
          "line_number": 55,
          "context": "VERCEL_ACCESS_TOKEN: ${{ secrets.VERCEL_ACCESS_TOKEN }}",
          "secret_name": "VERCEL_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 51,
          "context": "VERCEL_ACCESS_TOKEN=${{ secrets.VERCEL_ACCESS_TOKEN }}",
          "secret_name": "VERCEL_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 216,
          "context": "vercel-token: ${{ secrets.VERCEL_ACCESS_TOKEN }}",
          "secret_name": "VERCEL_ACCESS_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 100,
          "context": "\"VERCEL_ACCESS_TOKEN\": \"values.sophia.infrastructure.vercel.access_token\",",
          "secret_name": "VERCEL_ACCESS_TOKEN",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "COMPREHENSIVE_LINEAR_VERCEL_DNS_IMPLEMENTATION_SUMMARY.md",
          "line_number": 320,
          "context": "token: ${VERCEL_ACCESS_TOKEN}",
          "secret_name": "VERCEL_ACCESS_TOKEN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "VERCEL_API_TOKEN",
      "recommended_name": "VERCEL_ACCESS_TOKEN",
      "service": "vercel",
      "credential_type": "ACCESS_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/test_integrations.yml",
          "line_number": 51,
          "context": "echo \"VERCEL_API_TOKEN=${{ secrets.VERCEL_API_TOKEN }}\" >> .env",
          "secret_name": "VERCEL_API_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy_infrastructure.yml",
          "line_number": 62,
          "context": "echo \"VERCEL_API_TOKEN=${{ secrets.VERCEL_API_TOKEN }}\" >> $GITHUB_ENV",
          "secret_name": "VERCEL_API_TOKEN",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "VERCEL_ORG_ID",
      "recommended_name": "VERCEL_ORG_ID",
      "service": "vercel",
      "credential_type": "ORG_ID",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-platform-fixed.yml",
          "line_number": 201,
          "context": "vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}",
          "secret_name": "VERCEL_ORG_ID",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform-fixed.yml",
          "line_number": 280,
          "context": "- **Vercel Org**: ${{ secrets.VERCEL_ORG_ID }}",
          "secret_name": "VERCEL_ORG_ID",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 547,
          "context": "VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}",
          "secret_name": "VERCEL_ORG_ID",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/enhanced-deployment-oversight.yml",
          "line_number": 247,
          "context": "vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}",
          "secret_name": "VERCEL_ORG_ID",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia-main.yml",
          "line_number": 334,
          "context": "vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}",
          "secret_name": "VERCEL_ORG_ID",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 217,
          "context": "vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}",
          "secret_name": "VERCEL_ORG_ID",
          "usage_type": "github_action"
        },
        {
          "file_path": "COMPREHENSIVE_LINEAR_VERCEL_DNS_IMPLEMENTATION_SUMMARY.md",
          "line_number": 321,
          "context": "org_id: ${VERCEL_ORG_ID}",
          "secret_name": "VERCEL_ORG_ID",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "VERCEL_PROJECT_ID",
      "recommended_name": "VERCEL_PROJECT_ID",
      "service": "vercel",
      "credential_type": "PROJECT_ID",
      "references": [
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 548,
          "context": "VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}",
          "secret_name": "VERCEL_PROJECT_ID",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/test_integrations.yml",
          "line_number": 53,
          "context": "echo \"VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID }}\" >> .env",
          "secret_name": "VERCEL_PROJECT_ID",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/enhanced-deployment-oversight.yml",
          "line_number": 248,
          "context": "vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}",
          "secret_name": "VERCEL_PROJECT_ID",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia-main.yml",
          "line_number": 335,
          "context": "vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}",
          "secret_name": "VERCEL_PROJECT_ID",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/unified-secret-sync.yml",
          "line_number": 52,
          "context": "VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID }}",
          "secret_name": "VERCEL_PROJECT_ID",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "VERCEL_PROJECT_ID_SOPHIA_DEV",
      "recommended_name": "VERCEL_PROJECT_ID",
      "service": "vercel",
      "credential_type": "PROJECT_ID",
      "references": [
        {
          "file_path": "COMPREHENSIVE_LINEAR_VERCEL_DNS_IMPLEMENTATION_SUMMARY.md",
          "line_number": 323,
          "context": "project_id_dev: ${VERCEL_PROJECT_ID_SOPHIA_DEV}",
          "secret_name": "VERCEL_PROJECT_ID_SOPHIA_DEV",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "VERCEL_PROJECT_ID_SOPHIA_PROD",
      "recommended_name": "VERCEL_PROJECT_ID",
      "service": "vercel",
      "credential_type": "PROJECT_ID",
      "references": [
        {
          "file_path": ".github/workflows/deploy-sophia-platform-fixed.yml",
          "line_number": 202,
          "context": "vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_SOPHIA_PROD }}",
          "secret_name": "VERCEL_PROJECT_ID_SOPHIA_PROD",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 175,
          "context": "echo \"VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID_SOPHIA_PROD }}\" >> $GITHUB_ENV",
          "secret_name": "VERCEL_PROJECT_ID_SOPHIA_PROD",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 182,
          "context": "echo \"VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID_SOPHIA_PROD }}\" >> $GITHUB_ENV",
          "secret_name": "VERCEL_PROJECT_ID_SOPHIA_PROD",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 189,
          "context": "echo \"VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID_SOPHIA_PROD }}\" >> $GITHUB_ENV",
          "secret_name": "VERCEL_PROJECT_ID_SOPHIA_PROD",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/deploy-sophia-platform.yml",
          "line_number": 196,
          "context": "echo \"VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID_SOPHIA_PROD }}\" >> $GITHUB_ENV",
          "secret_name": "VERCEL_PROJECT_ID_SOPHIA_PROD",
          "usage_type": "github_action"
        },
        {
          "file_path": "COMPREHENSIVE_LINEAR_VERCEL_DNS_IMPLEMENTATION_SUMMARY.md",
          "line_number": 322,
          "context": "project_id_prod: ${VERCEL_PROJECT_ID_SOPHIA_PROD}",
          "secret_name": "VERCEL_PROJECT_ID_SOPHIA_PROD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "VERCEL_TEAM_ID",
      "recommended_name": "VERCEL_ACCESS_TOKEN",
      "service": "vercel",
      "credential_type": "ACCESS_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/test_integrations.yml",
          "line_number": 52,
          "context": "echo \"VERCEL_TEAM_ID=${{ secrets.VERCEL_TEAM_ID }}\" >> .env",
          "secret_name": "VERCEL_TEAM_ID",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "VERCEL_TOKEN",
      "recommended_name": "VERCEL_ACCESS_TOKEN",
      "service": "vercel",
      "credential_type": "ACCESS_TOKEN",
      "references": [
        {
          "file_path": ".github/workflows/estuary-asana-deployment.yml",
          "line_number": 546,
          "context": "VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}",
          "secret_name": "VERCEL_TOKEN",
          "usage_type": "github_action"
        },
        {
          "file_path": ".github/workflows/sophia-main.yml",
          "line_number": 333,
          "context": "vercel-token: ${{ secrets.VERCEL_TOKEN }}",
          "secret_name": "VERCEL_TOKEN",
          "usage_type": "github_action"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_pulumi"
    },
    {
      "current_name": "VERSION",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 73,
          "context": "log_info \"Building Docker image: ${DOCKER_IMAGE}:${VERSION}\"",
          "secret_name": "VERSION",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 78,
          "context": "docker build -f Dockerfile.gong-webhook -t \"${DOCKER_IMAGE}:${VERSION}\" .",
          "secret_name": "VERSION",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 81,
          "context": "if [ \"${VERSION}\" != \"latest\" ]; then",
          "secret_name": "VERSION",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 82,
          "context": "docker tag \"${DOCKER_IMAGE}:${VERSION}\" \"${DOCKER_IMAGE}:latest\"",
          "secret_name": "VERSION",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 92,
          "context": "docker push \"${DOCKER_IMAGE}:${VERSION}\"",
          "secret_name": "VERSION",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 93,
          "context": "if [ \"${VERSION}\" != \"latest\" ]; then",
          "secret_name": "VERSION",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 161,
          "context": "gong-webhook=\"${DOCKER_IMAGE}:${VERSION}\"",
          "secret_name": "VERSION",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 215,
          "context": "echo \"Image: ${DOCKER_IMAGE}:${VERSION}\"",
          "secret_name": "VERSION",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "VIRTUAL_ENV_PROMPT",
      "recommended_name": "VIRTUAL_ENV_PROMPT",
      "service": "virtual",
      "credential_type": "ENV_PROMPT",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/virtualenv/activation/bash/activate.sh",
          "line_number": 73,
          "context": "PS1=\"(${VIRTUAL_ENV_PROMPT}) ${PS1-}\"",
          "secret_name": "VIRTUAL_ENV_PROMPT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "VITE_SENTRY_DSN",
      "recommended_name": "VITE_SENTRY_DSN",
      "service": "vite",
      "credential_type": "SENTRY_DSN",
      "references": [
        {
          "file_path": "docs/SOPHIA_DESIGN_SYSTEM_INTEGRATION.md",
          "line_number": 310,
          "context": "dsn: process.env.VITE_SENTRY_DSN,",
          "secret_name": "VITE_SENTRY_DSN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "VULTR_API_KEY",
      "recommended_name": "VULTR_API_KEY",
      "service": "vultr",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 108,
          "context": "VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}",
          "secret_name": "VULTR_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 101,
          "context": "\"VULTR_API_KEY\": \"values.sophia.infrastructure.vultr.api_key\",",
          "secret_name": "VULTR_API_KEY",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    },
    {
      "current_name": "WANDB_DISABLED",
      "recommended_name": "WANDB_DISABLED",
      "service": "wandb",
      "credential_type": "DISABLED",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/trainer_tf.py",
          "line_number": 133,
          "context": "elif os.getenv(\"WANDB_DISABLED\", \"\").upper() not in ENV_VARS_TRUE_VALUES:",
          "secret_name": "WANDB_DISABLED",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 80,
          "context": "if os.getenv(\"WANDB_DISABLED\", \"\").upper() in ENV_VARS_TRUE_VALUES:",
          "secret_name": "WANDB_DISABLED",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WANDB_LOG_MODEL",
      "recommended_name": "WANDB_LOG_MODEL",
      "service": "wandb",
      "credential_type": "LOG_MODEL",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 676,
          "context": "if os.getenv(\"WANDB_LOG_MODEL\", \"FALSE\").upper() in ENV_VARS_TRUE_VALUES.union({\"TRUE\"}):",
          "secret_name": "WANDB_LOG_MODEL",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 678,
          "context": "f\"Setting `WANDB_LOG_MODEL` as {os.getenv('WANDB_LOG_MODEL')} is deprecated and will be removed in \"",
          "secret_name": "WANDB_LOG_MODEL",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 681,
          "context": "logger.info(f\"Setting `WANDB_LOG_MODEL` from {os.getenv('WANDB_LOG_MODEL')} to `end` instead\")",
          "secret_name": "WANDB_LOG_MODEL",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 684,
          "context": "self._log_model = os.getenv(\"WANDB_LOG_MODEL\", \"false\").lower()",
          "secret_name": "WANDB_LOG_MODEL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WANDB_PROJECT",
      "recommended_name": "WANDB_PROJECT",
      "service": "wandb",
      "credential_type": "PROJECT",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/trainer_tf.py",
          "line_number": 273,
          "context": "wandb.init(project=os.getenv(\"WANDB_PROJECT\", \"huggingface\"), config=combined_dict, name=self.args.run_name)",
          "secret_name": "WANDB_PROJECT",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 737,
          "context": "project=os.getenv(\"WANDB_PROJECT\", \"huggingface\"),",
          "secret_name": "WANDB_PROJECT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WANDB_WATCH",
      "recommended_name": "WANDB_WATCH",
      "service": "wandb",
      "credential_type": "WATCH",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/integrations/integration_utils.py",
          "line_number": 749,
          "context": "_watch_model = os.getenv(\"WANDB_WATCH\", \"false\")",
          "secret_name": "WANDB_WATCH",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WATCHFILES_CHANGES",
      "recommended_name": "WATCHFILES_CHANGES",
      "service": "watchfiles",
      "credential_type": "CHANGES",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/watchfiles/run.py",
          "line_number": 103,
          "context": "changes = os.getenv('WATCHFILES_CHANGES')",
          "secret_name": "WATCHFILES_CHANGES",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/watchfiles/run.py",
          "line_number": 115,
          "context": "echo \"changers: ${WATCHFILES_CHANGES}\"",
          "secret_name": "WATCHFILES_CHANGES",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WATCHFILES_DEBUG",
      "recommended_name": "WATCHFILES_DEBUG",
      "service": "watchfiles",
      "credential_type": "DEBUG",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/watchfiles/main.py",
          "line_number": 353,
          "context": "env_var = os.getenv('WATCHFILES_DEBUG')",
          "secret_name": "WATCHFILES_DEBUG",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WATCHFILES_FORCE_POLLING",
      "recommended_name": "WATCHFILES_FORCE_POLLING",
      "service": "watchfiles",
      "credential_type": "FORCE_POLLING",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/watchfiles/main.py",
          "line_number": 332,
          "context": "env_var = os.getenv('WATCHFILES_FORCE_POLLING')",
          "secret_name": "WATCHFILES_FORCE_POLLING",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WATCHFILES_IGNORE_PERMISSION_DENIED",
      "recommended_name": "WATCHFILES_IGNORE_PERMISSION_DENIED",
      "service": "watchfiles",
      "credential_type": "IGNORE_PERMISSION_DENIED",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/watchfiles/main.py",
          "line_number": 372,
          "context": "env_var = os.getenv('WATCHFILES_IGNORE_PERMISSION_DENIED')",
          "secret_name": "WATCHFILES_IGNORE_PERMISSION_DENIED",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WATCHFILES_POLL_DELAY_MS",
      "recommended_name": "WATCHFILES_POLL_DELAY_MS",
      "service": "watchfiles",
      "credential_type": "POLL_DELAY_MS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/watchfiles/main.py",
          "line_number": 343,
          "context": "env_var = os.getenv('WATCHFILES_POLL_DELAY_MS')",
          "secret_name": "WATCHFILES_POLL_DELAY_MS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WAYLAND_DISPLAY",
      "recommended_name": "WAYLAND_DISPLAY",
      "service": "wayland",
      "credential_type": "DISPLAY",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/PIL/ImageGrab.py",
          "line_number": 152,
          "context": "if os.getenv(\"WAYLAND_DISPLAY\"):",
          "secret_name": "WAYLAND_DISPLAY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WEAVIATE_API_KEY",
      "recommended_name": "WEAVIATE_API_KEY",
      "service": "weaviate",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 90,
          "context": "WEAVIATE_API_KEY: ${{ secrets.WEAVIATE_API_KEY }}",
          "secret_name": "WEAVIATE_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 83,
          "context": "\"WEAVIATE_API_KEY\": \"values.sophia.data.weaviate.api_key\",",
          "secret_name": "WEAVIATE_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 71,
          "context": "fn::secret: \"${WEAVIATE_API_KEY}\"",
          "secret_name": "WEAVIATE_API_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 122,
          "context": "weaviate-api-key: \"${WEAVIATE_API_KEY}\"",
          "secret_name": "WEAVIATE_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "WEAVIATE_GRPC_ENDPOINT",
      "recommended_name": "WEAVIATE_GRPC_ENDPOINT",
      "service": "weaviate",
      "credential_type": "GRPC_ENDPOINT",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 93,
          "context": "WEAVIATE_GRPC_ENDPOINT: ${{ secrets.WEAVIATE_GRPC_ENDPOINT }}",
          "secret_name": "WEAVIATE_GRPC_ENDPOINT",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 86,
          "context": "\"WEAVIATE_GRPC_ENDPOINT\": \"values.sophia.data.weaviate.grpc_endpoint\",",
          "secret_name": "WEAVIATE_GRPC_ENDPOINT",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    },
    {
      "current_name": "WEAVIATE_REST_ENDPOINT",
      "recommended_name": "WEAVIATE_REST_ENDPOINT",
      "service": "weaviate",
      "credential_type": "REST_ENDPOINT",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 92,
          "context": "WEAVIATE_REST_ENDPOINT: ${{ secrets.WEAVIATE_REST_ENDPOINT }}",
          "secret_name": "WEAVIATE_REST_ENDPOINT",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 85,
          "context": "\"WEAVIATE_REST_ENDPOINT\": \"values.sophia.data.weaviate.rest_endpoint\",",
          "secret_name": "WEAVIATE_REST_ENDPOINT",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    },
    {
      "current_name": "WEAVIATE_URL",
      "recommended_name": "WEAVIATE_URL",
      "service": "weaviate",
      "credential_type": "URL",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 91,
          "context": "WEAVIATE_URL: ${{ secrets.WEAVIATE_URL }}",
          "secret_name": "WEAVIATE_URL",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 84,
          "context": "\"WEAVIATE_URL\": \"values.sophia.data.weaviate.url\",",
          "secret_name": "WEAVIATE_URL",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 73,
          "context": "fn::secret: \"${WEAVIATE_URL}\"",
          "secret_name": "WEAVIATE_URL",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 123,
          "context": "weaviate-url: \"${WEAVIATE_URL}\"",
          "secret_name": "WEAVIATE_URL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "WEBHOOK_BASE_URL",
      "recommended_name": "WEBHOOK_BASE_URL",
      "service": "webhook",
      "credential_type": "BASE_URL",
      "references": [
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 76,
          "context": "webhook-base-url: \"${WEBHOOK_BASE_URL}\"",
          "secret_name": "WEBHOOK_BASE_URL",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WEBHOOK_DOMAIN",
      "recommended_name": "WEBHOOK_DOMAIN",
      "service": "webhook",
      "credential_type": "DOMAIN",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 19,
          "context": "fn::secret: \"${WEBHOOK_DOMAIN}\"",
          "secret_name": "WEBHOOK_DOMAIN",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 75,
          "context": "webhook-domain: \"${WEBHOOK_DOMAIN}\"",
          "secret_name": "WEBHOOK_DOMAIN",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WEBHOOK_HOST",
      "recommended_name": "WEBHOOK_HOST",
      "service": "webhook",
      "credential_type": "HOST",
      "references": [
        {
          "file_path": "gong-webhook-service/main.py",
          "line_number": 238,
          "context": "host = os.getenv(\"WEBHOOK_HOST\", \"0.0.0.0\")",
          "secret_name": "WEBHOOK_HOST",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WEBHOOK_JWT_PRIVATE_KEY",
      "recommended_name": "WEBHOOK_JWT_PRIVATE_KEY",
      "service": "webhook",
      "credential_type": "JWT_PRIVATE_KEY",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 23,
          "context": "fn::secret: \"${WEBHOOK_JWT_PRIVATE_KEY}\"",
          "secret_name": "WEBHOOK_JWT_PRIVATE_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 77,
          "context": "webhook-jwt-private-key: \"${WEBHOOK_JWT_PRIVATE_KEY}\"",
          "secret_name": "WEBHOOK_JWT_PRIVATE_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WEBHOOK_JWT_PUBLIC_KEY",
      "recommended_name": "WEBHOOK_JWT_PUBLIC_KEY",
      "service": "webhook",
      "credential_type": "JWT_PUBLIC_KEY",
      "references": [
        {
          "file_path": "infrastructure/esc/sophia-ai-platform-base.yaml",
          "line_number": 25,
          "context": "fn::secret: \"${WEBHOOK_JWT_PUBLIC_KEY}\"",
          "secret_name": "WEBHOOK_JWT_PUBLIC_KEY",
          "usage_type": "code_reference"
        },
        {
          "file_path": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
          "line_number": 78,
          "context": "webhook-jwt-public-key: \"${WEBHOOK_JWT_PUBLIC_KEY}\"",
          "secret_name": "WEBHOOK_JWT_PUBLIC_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WEBHOOK_PORT",
      "recommended_name": "WEBHOOK_PORT",
      "service": "webhook",
      "credential_type": "PORT",
      "references": [
        {
          "file_path": "gong-webhook-service/main.py",
          "line_number": 239,
          "context": "port = int(os.getenv(\"WEBHOOK_PORT\", \"8080\"))",
          "secret_name": "WEBHOOK_PORT",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WEBHOOK_SECRET",
      "recommended_name": "WEBHOOK_SECRET",
      "service": "webhook",
      "credential_type": "SECRET",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/huggingface_hub/_webhooks_server.py",
          "line_number": 117,
          "context": "self.webhook_secret = webhook_secret or os.getenv(\"WEBHOOK_SECRET\")",
          "secret_name": "WEBHOOK_SECRET",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "WORD",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/coverage/config.py",
          "line_number": 90,
          "context": "value, ``$WORD`` or ``${WORD}`` are replaced by the value of the",
          "secret_name": "WORD",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "XAI_API_KEY",
      "recommended_name": "XAI_API_KEY",
      "service": "xai",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 62,
          "context": "XAI_API_KEY: ${{ secrets.XAI_API_KEY }}",
          "secret_name": "XAI_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 55,
          "context": "\"XAI_API_KEY\": \"values.sophia.ai.xai.api_key\",",
          "secret_name": "XAI_API_KEY",
          "usage_type": "pulumi_esc"
        },
        {
          "file_path": "infrastructure/esc/sophia-ai-production.yaml",
          "line_number": 52,
          "context": "fn::secret: \"${XAI_API_KEY}\"",
          "secret_name": "XAI_API_KEY",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "keep"
    },
    {
      "current_name": "XDG_CACHE_HOME",
      "recommended_name": "XDG_CACHE_HOME",
      "service": "xdg",
      "credential_type": "CACHE_HOME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/sentence_transformers/SentenceTransformer.py",
          "line_number": 61,
          "context": "torch_cache_home = os.path.expanduser(os.getenv('TORCH_HOME', os.path.join(os.getenv('XDG_CACHE_HOME', '~/.cache'), 'torch')))",
          "secret_name": "XDG_CACHE_HOME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/huggingface_hub/constants.py",
          "line_number": 134,
          "context": "os.path.join(os.getenv(\"XDG_CACHE_HOME\", default_home), \"huggingface\"),",
          "secret_name": "XDG_CACHE_HOME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_appdirs.py",
          "line_number": 349,
          "context": "path = os.getenv(\"XDG_CACHE_HOME\", os.path.expanduser(\"~/.cache\"))",
          "secret_name": "XDG_CACHE_HOME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 76,
          "context": "torch_cache_home = os.getenv(\"TORCH_HOME\", os.path.join(os.getenv(\"XDG_CACHE_HOME\", \"~/.cache\"), \"torch\"))",
          "secret_name": "XDG_CACHE_HOME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/utils/hub.py",
          "line_number": 80,
          "context": "os.getenv(\"HF_HOME\", os.path.join(os.getenv(\"XDG_CACHE_HOME\", \"~/.cache\"), \"huggingface\"))",
          "secret_name": "XDG_CACHE_HOME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/models/bark/convert_suno_to_hf.py",
          "line_number": 76,
          "context": "CACHE_DIR = os.path.join(os.getenv(\"XDG_CACHE_HOME\", default_cache_dir), \"suno\", \"bark_v0\")",
          "secret_name": "XDG_CACHE_HOME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/transformers/models/seamless_m4t/convert_fairseq2_to_hf.py",
          "line_number": 147,
          "context": "CACHE_DIR = os.path.join(os.getenv(\"XDG_CACHE_HOME\", default_cache_dir), \"huggingface\", \"hub\")",
          "secret_name": "XDG_CACHE_HOME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pkg_resources/_vendor/appdirs.py",
          "line_number": 306,
          "context": "path = os.getenv('XDG_CACHE_HOME', os.path.expanduser('~/.cache'))",
          "secret_name": "XDG_CACHE_HOME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "XDG_CONFIG_DIRS",
      "recommended_name": "XDG_CONFIG_DIRS",
      "service": "xdg",
      "credential_type": "CONFIG_DIRS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_appdirs.py",
          "line_number": 284,
          "context": "path = os.getenv(\"XDG_CONFIG_DIRS\", \"/etc/xdg\")",
          "secret_name": "XDG_CONFIG_DIRS",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pkg_resources/_vendor/appdirs.py",
          "line_number": 243,
          "context": "path = os.getenv('XDG_CONFIG_DIRS', '/etc/xdg')",
          "secret_name": "XDG_CONFIG_DIRS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "XDG_CONFIG_HOME",
      "recommended_name": "XDG_CONFIG_HOME",
      "service": "xdg",
      "credential_type": "CONFIG_HOME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_appdirs.py",
          "line_number": 235,
          "context": "path = os.getenv(\"XDG_CONFIG_HOME\", os.path.expanduser(\"~/.config\"))",
          "secret_name": "XDG_CONFIG_HOME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pkg_resources/_vendor/appdirs.py",
          "line_number": 198,
          "context": "path = os.getenv('XDG_CONFIG_HOME', os.path.expanduser(\"~/.config\"))",
          "secret_name": "XDG_CONFIG_HOME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "XDG_DATA_DIRS",
      "recommended_name": "XDG_DATA_DIRS",
      "service": "xdg",
      "credential_type": "DATA_DIRS",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/pkg_resources/_vendor/appdirs.py",
          "line_number": 147,
          "context": "path = os.getenv('XDG_DATA_DIRS',",
          "secret_name": "XDG_DATA_DIRS",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "XDG_DATA_HOME",
      "recommended_name": "XDG_DATA_HOME",
      "service": "xdg",
      "credential_type": "DATA_HOME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_appdirs.py",
          "line_number": 122,
          "context": "path = os.getenv(\"XDG_DATA_HOME\", os.path.expanduser(\"~/.local/share\"))",
          "secret_name": "XDG_DATA_HOME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pkg_resources/_vendor/appdirs.py",
          "line_number": 92,
          "context": "path = os.getenv('XDG_DATA_HOME', os.path.expanduser(\"~/.local/share\"))",
          "secret_name": "XDG_DATA_HOME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "XDG_STATE_HOME",
      "recommended_name": "XDG_STATE_HOME",
      "service": "xdg",
      "credential_type": "STATE_HOME",
      "references": [
        {
          "file_path": ".venv/lib/python3.11/site-packages/torch/_appdirs.py",
          "line_number": 391,
          "context": "path = os.getenv(\"XDG_STATE_HOME\", os.path.expanduser(\"~/.local/state\"))",
          "secret_name": "XDG_STATE_HOME",
          "usage_type": "code_reference"
        },
        {
          "file_path": ".venv/lib/python3.11/site-packages/pkg_resources/_vendor/appdirs.py",
          "line_number": 348,
          "context": "path = os.getenv('XDG_STATE_HOME', os.path.expanduser(\"~/.local/state\"))",
          "secret_name": "XDG_STATE_HOME",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": true,
      "action_required": "add_to_both"
    },
    {
      "current_name": "YELLOW",
      "recommended_name": "UNKNOWN_UNKNOWN",
      "service": "unknown",
      "credential_type": "UNKNOWN",
      "references": [
        {
          "file_path": "activate_env.sh",
          "line_number": 18,
          "context": "echo -e \"${YELLOW}\ud83d\udd27 Activating environment for $PROJECT_NAME${NC}\"",
          "secret_name": "YELLOW",
          "usage_type": "code_reference"
        },
        {
          "file_path": "activate_env.sh",
          "line_number": 35,
          "context": "echo -e \"${YELLOW}\ud83d\udcc4 Loading .env file...${NC}\"",
          "secret_name": "YELLOW",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 47,
          "context": "echo -e \"${YELLOW}\u26a0\ufe0f  Backend is not running. Starting it now...${NC}\"",
          "secret_name": "YELLOW",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/start_ceo_dashboard.sh",
          "line_number": 96,
          "context": "echo -e \"${YELLOW}\ud83d\udccc Note: Backend is running in background (PID: $BACKEND_PID)${NC}\"",
          "secret_name": "YELLOW",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/setup_codacy_macos.sh",
          "line_number": 27,
          "context": "echo -e \"${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}\"",
          "secret_name": "YELLOW",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/setup_codacy_macos.sh",
          "line_number": 472,
          "context": "echo -e \"${YELLOW}Documentation:${NC}\"",
          "secret_name": "YELLOW",
          "usage_type": "code_reference"
        },
        {
          "file_path": "scripts/deploy-gong-webhook-k8s.sh",
          "line_number": 33,
          "context": "echo -e \"${YELLOW}[WARNING]${NC} $1\"",
          "secret_name": "YELLOW",
          "usage_type": "code_reference"
        }
      ],
      "is_consistent": false,
      "action_required": "add_to_both"
    },
    {
      "current_name": "ZENROWS_API_KEY",
      "recommended_name": "ZENROWS_API_KEY",
      "service": "zenrows",
      "credential_type": "API_KEY",
      "references": [
        {
          "file_path": ".github/workflows/sync_secrets.yml",
          "line_number": 116,
          "context": "ZENROWS_API_KEY: ${{ secrets.ZENROWS_API_KEY }}",
          "secret_name": "ZENROWS_API_KEY",
          "usage_type": "github_action"
        },
        {
          "file_path": "scripts/ci/sync_from_gh_to_pulumi.py",
          "line_number": 109,
          "context": "\"ZENROWS_API_KEY\": \"values.sophia.research.zenrows.api_key\",",
          "secret_name": "ZENROWS_API_KEY",
          "usage_type": "pulumi_esc"
        }
      ],
      "is_consistent": true,
      "action_required": "verify_usage"
    }
  ]
}