version: "3.8"

# Production overrides for Docker Cloud deployment
# This file provides production-specific settings
# Primary deployment uses: docker-compose.cloud.yml

services:
  mcp-gateway:
    pull_policy: missing
  github-mcp:
    pull_policy: missing
  docker-mcp:
    pull_policy: missing
  slack-mcp:
    pull_policy: missing
  postgres-mcp:
    pull_policy: missing
  pulumi-mcp:
    pull_policy: missing
  sentry-mcp:
    pull_policy: missing
  sophia_ai_intelligence-mcp:
    pull_policy: missing
  sophia_business_intelligence-mcp:
    pull_policy: missing
  sophia_data_intelligence-mcp:
    pull_policy: missing
  sophia_infrastructure-mcp:
    pull_policy: missing

  sophia-backend:
    build:
      target: production
      cache_from:
        - ${DOCKER_REGISTRY}/sophia-ai:cache
    image: ${DOCKER_REGISTRY}/sophia-ai:${VERSION:-latest}
    restart: always
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "1.0"
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      - ENVIRONMENT=prod
      - LOG_LEVEL=WARNING
      - WORKERS=4

  mem0-server:
    image: ${DOCKER_REGISTRY}/mem0-server:${VERSION:-latest}
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cortex-server:
    image: ${DOCKER_REGISTRY}/cortex-server:${VERSION:-latest}
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    sysctls:
      - net.core.somaxconn=1024
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  postgres:
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4G
        reservations:
          cpus: "1.0"
          memory: 2G
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # Production monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sophia-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    restart: always
    networks:
      - sophia-network

  grafana:
    image: grafana/grafana:latest
    container_name: sophia-grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: always
    networks:
      - sophia-network

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
