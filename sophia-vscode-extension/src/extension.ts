
import * as vscode from 'vscode';
import axios from 'axios';

export function activate(context: vscode.ExtensionContext) {
    console.log('Sophia AI Assistant activated!');
    
    // Register commands
    registerCommands(context);
    
    // Setup status bar
    setupStatusBar();
    
    // Initialize chat panel
    initializeChatPanel(context);
}

function registerCommands(context: vscode.ExtensionContext) {
    // Generate Code command
    const generateCode = vscode.commands.registerCommand('sophia.generateCode', async () => {
        const editor = vscode.window.activeTextEditor;
        if (!editor) return;
        
        const selection = editor.selection;
        const selectedText = editor.document.getText(selection);
        
        const prompt = await vscode.window.showInputBox({
            prompt: 'What code would you like to generate?',
            placeHolder: 'e.g., Create a React component for user authentication'
        });
        
        if (prompt) {
            await generateCodeWithSophia(prompt, selectedText, editor);
        }
    });
    
    // Chat with Sophia command
    const chatWithSophia = vscode.commands.registerCommand('sophia.chatWithSophia', () => {
        SophiaChatPanel.createOrShow(context.extensionUri);
    });
    
    // Business Analysis command
    const businessAnalysis = vscode.commands.registerCommand('sophia.businessAnalysis', async () => {
        const editor = vscode.window.activeTextEditor;
        if (!editor) return;
        
        const code = editor.document.getText();
        await analyzeBusinessImpact(code);
    });
    
    context.subscriptions.push(generateCode, chatWithSophia, businessAnalysis);
}

async function generateCodeWithSophia(prompt: string, context: string, editor: vscode.TextEditor) {
    try {
        const config = vscode.workspace.getConfiguration('sophia');
        const apiEndpoint = config.get('apiEndpoint', 'http://localhost:8000');
        
        const response = await axios.post(`${apiEndpoint}/api/chat/enhanced`, {
            message: `Generate code: ${prompt}\n\nContext: ${context}`,
            context: 'coding',
            preferred_model: config.get('claudeModel', 'claude-3-5-sonnet-20241119')
        });
        
        const generatedCode = response.data.response;
        
        // Insert generated code
        const position = editor.selection.active;
        editor.edit(editBuilder => {
            editBuilder.insert(position, generatedCode);
        });
        
        vscode.window.showInformationMessage('Code generated by Sophia AI!');
        
    } catch (error) {
        vscode.window.showErrorMessage(`Error: ${error.message}`);
    }
}

class SophiaChatPanel {
    public static currentPanel: SophiaChatPanel | undefined;
    
    public static createOrShow(extensionUri: vscode.Uri) {
        const column = vscode.window.activeTextEditor
            ? vscode.window.activeTextEditor.viewColumn
            : undefined;
        
        if (SophiaChatPanel.currentPanel) {
            SophiaChatPanel.currentPanel._panel.reveal(column);
            return;
        }
        
        const panel = vscode.window.createWebviewPanel(
            'sophiaChat',
            'Sophia AI Chat',
            column || vscode.ViewColumn.One,
            {
                enableScripts: true,
                localResourceRoots: [extensionUri]
            }
        );
        
        SophiaChatPanel.currentPanel = new SophiaChatPanel(panel, extensionUri);
    }
    
    private constructor(private readonly _panel: vscode.WebviewPanel, extensionUri: vscode.Uri) {
        this._panel.webview.html = this._getHtmlForWebview();
        
        this._panel.onDidDispose(() => {
            SophiaChatPanel.currentPanel = undefined;
        });
        
        this._panel.webview.onDidReceiveMessage(
            async message => {
                switch (message.command) {
                    case 'sendMessage':
                        await this.handleChatMessage(message.text);
                        break;
                }
            }
        );
    }
    
    private async handleChatMessage(message: string) {
        try {
            const config = vscode.workspace.getConfiguration('sophia');
            const apiEndpoint = config.get('apiEndpoint', 'http://localhost:8000');
            
            const response = await axios.post(`${apiEndpoint}/api/chat/enhanced`, {
                message: message,
                context: 'general'
            });
            
            this._panel.webview.postMessage({
                command: 'displayResponse',
                response: response.data.response
            });
            
        } catch (error) {
            this._panel.webview.postMessage({
                command: 'displayError',
                error: error.message
            });
        }
    }
    
    private _getHtmlForWebview(): string {
        return `
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>Sophia AI Chat</title>
                <style>
                    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; }
                    .chat-container { height: 100vh; display: flex; flex-direction: column; }
                    .messages { flex: 1; overflow-y: auto; padding: 20px; }
                    .input-area { padding: 20px; border-top: 1px solid #e1e4e8; }
                    .message { margin-bottom: 15px; padding: 10px; border-radius: 8px; }
                    .user-message { background: #0366d6; color: white; margin-left: 20%; }
                    .ai-message { background: #f6f8fa; border: 1px solid #e1e4e8; margin-right: 20%; }
                </style>
            </head>
            <body>
                <div class="chat-container">
                    <div class="messages" id="messages">
                        <div class="ai-message">
                            <strong>Sophia AI:</strong> Hello! I'm your advanced AI coding assistant with business intelligence. How can I help you today?
                        </div>
                    </div>
                    <div class="input-area">
                        <input type="text" id="messageInput" placeholder="Ask Sophia AI anything..." style="width: 70%; padding: 10px;">
                        <button onclick="sendMessage()" style="padding: 10px 20px; margin-left: 10px;">Send</button>
                    </div>
                </div>
                <script>
                    const vscode = acquireVsCodeApi();
                    
                    function sendMessage() {
                        const input = document.getElementById('messageInput');
                        const message = input.value.trim();
                        if (!message) return;
                        
                        displayMessage(message, 'user');
                        input.value = '';
                        
                        vscode.postMessage({
                            command: 'sendMessage',
                            text: message
                        });
                    }
                    
                    function displayMessage(text, sender) {
                        const messages = document.getElementById('messages');
                        const messageDiv = document.createElement('div');
                        messageDiv.className = sender === 'user' ? 'user-message message' : 'ai-message message';
                        messageDiv.innerHTML = `<strong>${sender === 'user' ? 'You' : 'Sophia AI'}:</strong> ${text}`;
                        messages.appendChild(messageDiv);
                        messages.scrollTop = messages.scrollHeight;
                    }
                    
                    window.addEventListener('message', event => {
                        const message = event.data;
                        switch (message.command) {
                            case 'displayResponse':
                                displayMessage(message.response, 'ai');
                                break;
                            case 'displayError':
                                displayMessage(`Error: ${message.error}`, 'ai');
                                break;
                        }
                    });
                    
                    document.getElementById('messageInput').addEventListener('keypress', (e) => {
                        if (e.key === 'Enter') sendMessage();
                    });
                </script>
            </body>
            </html>
        `;
    }
}

export function deactivate() {}
