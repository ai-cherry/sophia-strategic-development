version: "3.8"

# Optimized Docker Swarm Configuration for Lambda Labs Deployment
# Phase 1 Docker Optimization: Enhanced HA, Health Checks, and Resource Management
# Use: docker stack deploy -c docker-compose.cloud.optimized.yml sophia-ai

services:
  # Main Sophia AI Backend - High Availability Configuration
  sophia-backend:
    image: ${DOCKER_REGISTRY:-scoobyjava15}/sophia-ai:${IMAGE_TAG:-latest}
    environment:
      - ENVIRONMENT=prod
      - PULUMI_ORG=scoobyjava-org
      - PULUMI_ACCESS_TOKEN_FILE=/run/secrets/pulumi_access_token
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://sophia:${POSTGRES_PASSWORD}@postgres:5432/sophia
      - HEALTH_CHECK_TIMEOUT=30
      - GRACEFUL_SHUTDOWN_TIMEOUT=60
    ports:
      - target: 8000
        published: 8000
        mode: ingress
    secrets:
      - pulumi_access_token
      - postgres_password
    deploy:
      mode: replicated
      replicas: 3  # Increased from 1 for HA
      placement:
        # Removed manager node constraint for better distribution
        max_replicas_per_node: 1
      resources:
        limits:
          cpus: "2.0"
          memory: 4G
        reservations:
          cpus: "1.0"
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5  # Increased attempts
        window: 120s
      update_config:
        parallelism: 1
        delay: 30s  # Increased delay for stability
        failure_action: rollback
        monitor: 120s  # Increased monitoring
        max_failure_ratio: 0.2  # More strict failure tolerance
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s
        max_failure_ratio: 0.3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health", "--max-time", "10"]
      interval: 15s  # More frequent checks
      timeout: 10s
      retries: 5  # More retries
      start_period: 90s  # Longer startup time
    networks:
      - sophia-overlay
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sophia-backend.rule=Host(`api.sophia-ai.lambda.cloud`)"
      - "traefik.http.routers.sophia-backend.tls=true"
      - "traefik.http.routers.sophia-backend.tls.certresolver=le"
      - "traefik.http.services.sophia-backend.loadbalancer.server.port=8000"
      - "traefik.http.services.sophia-backend.loadbalancer.healthcheck.path=/api/health"
      - "traefik.http.services.sophia-backend.loadbalancer.healthcheck.interval=30s"

  # Mem0 OpenMemory MCP Server - Enhanced HA
  mem0-server:
    image: ${DOCKER_REGISTRY:-scoobyjava15}/sophia-ai-mem0:${IMAGE_TAG:-latest}
    environment:
      - MEM0_API_KEY_FILE=/run/secrets/mem0_api_key
      - MEM0_HOST=mem0-service
      - MEM0_PORT=8765
      - HEALTH_CHECK_ENABLED=true
    ports:
      - target: 8080
        published: 8080
        mode: ingress
    secrets:
      - mem0_api_key
    deploy:
      mode: replicated
      replicas: 2  # Increased from 1 for HA
      placement:
        max_replicas_per_node: 1
      resources:
        limits:
          cpus: "1.0"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
      update_config:
        parallelism: 1
        delay: 20s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health", "--max-time", "5"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 45s
    networks:
      - sophia-overlay

  # Cortex AI SQL Server - Enhanced Configuration
  cortex-aisql-server:
    image: ${DOCKER_REGISTRY:-scoobyjava15}/sophia-ai-cortex:${IMAGE_TAG:-latest}
    environment:
      - SNOWFLAKE_ACCOUNT_FILE=/run/secrets/snowflake_account
      - SNOWFLAKE_USER_FILE=/run/secrets/snowflake_user
      - SNOWFLAKE_PASSWORD_FILE=/run/secrets/snowflake_password
      - CORTEX_PORT=8081
      - LOG_LEVEL=INFO
    ports:
      - target: 8081
        published: 8081
        mode: ingress
    secrets:
      - snowflake_account
      - snowflake_user
      - snowflake_password
    deploy:
      mode: replicated
      replicas: 2  # Increased from 1 for HA
      placement:
        max_replicas_per_node: 1
      resources:
        limits:
          cpus: "1.5"
          memory: 3G
        reservations:
          cpus: "0.75"
          memory: 1.5G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 180s
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 90s
        max_failure_ratio: 0.3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health", "--max-time", "10"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sophia-overlay

  # Redis - High Availability with Sentinel
  redis:
    image: redis:7.2-alpine
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
    deploy:
      mode: replicated
      replicas: 2  # Increased from 1 for HA
      placement:
        max_replicas_per_node: 1
      resources:
        limits:
          cpus: "1.0"
          memory: 1.5G
        reservations:
          cpus: "0.25"
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.3
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    networks:
      - sophia-overlay

  # PostgreSQL - Enhanced HA Configuration
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=sophia
      - POSTGRES_USER=sophia
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    secrets:
      - postgres_password
    deploy:
      mode: replicated
      replicas: 2  # Increased from 1 for HA
      placement:
        max_replicas_per_node: 1
      resources:
        limits:
          cpus: "2.0"
          memory: 4G
        reservations:
          cpus: "0.5"
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 180s
      update_config:
        parallelism: 1
        delay: 60s
        failure_action: rollback
        monitor: 120s
        max_failure_ratio: 0.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sophia -d sophia"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - sophia-overlay

  # Traefik - Enhanced Load Balancer with HA
  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.email=admin@sophia-ai.com"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.le.acme.httpchallenge=true"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--ping=true"
    ports:
      - target: 80
        published: 80
        mode: ingress
      - target: 443
        published: 443
        mode: ingress
      - target: 8080
        published: 8090
        mode: ingress
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    deploy:
      mode: replicated
      replicas: 2  # Increased from 1 for HA
      placement:
        max_replicas_per_node: 1
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - traefik-public
      - sophia-overlay
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.sophia-ai.lambda.cloud`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=le"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # Prometheus - Enhanced Monitoring
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - target: 9090
        published: 9090
        mode: ingress
    deploy:
      mode: replicated
      replicas: 2  # Increased from 1 for HA
      placement:
        max_replicas_per_node: 1
      resources:
        limits:
          cpus: "1.0"
          memory: 2G
        reservations:
          cpus: "0.25"
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sophia-overlay

  # Grafana - Enhanced Visualization
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SERVER_ROOT_URL=https://grafana.sophia-ai.lambda.cloud
      - GF_ANALYTICS_REPORTING_ENABLED=false
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - target: 3000
        published: 3000
        mode: ingress
    secrets:
      - grafana_admin_password
    deploy:
      mode: replicated
      replicas: 2  # Increased from 1 for HA
      placement:
        max_replicas_per_node: 1
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sophia-overlay
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.sophia-ai.lambda.cloud`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=le"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

# Enhanced Network Configuration
networks:
  sophia-overlay:
    driver: overlay
    driver_opts:
      encrypted: "true"
    attachable: true
    ipam:
      config:
        - subnet: 10.0.1.0/24

  traefik-public:
    driver: overlay
    driver_opts:
      encrypted: "true"
    attachable: true
    external: true

# Enhanced Volume Configuration with Backup Labels
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sophia-ai/data/postgres
    labels:
      - "backup.enable=true"
      - "backup.schedule=daily"
      - "backup.retention=30d"

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sophia-ai/data/redis
    labels:
      - "backup.enable=true"
      - "backup.schedule=hourly"
      - "backup.retention=7d"

  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sophia-ai/data/prometheus
    labels:
      - "backup.enable=true"
      - "backup.schedule=daily"
      - "backup.retention=30d"

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sophia-ai/data/grafana
    labels:
      - "backup.enable=true"
      - "backup.schedule=weekly"
      - "backup.retention=90d"

  traefik_letsencrypt:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sophia-ai/data/traefik
    labels:
      - "backup.enable=true"
      - "backup.schedule=daily"
      - "backup.retention=90d"

# Enhanced Secrets Configuration
secrets:
  pulumi_access_token:
    external: true
    name: pulumi_access_token_v1

  postgres_password:
    external: true
    name: postgres_password_v1

  mem0_api_key:
    external: true
    name: mem0_api_key_v1

  snowflake_account:
    external: true
    name: snowflake_account_v1

  snowflake_user:
    external: true
    name: snowflake_user_v1

  snowflake_password:
    external: true
    name: snowflake_password_v1

  grafana_admin_password:
    external: true
    name: grafana_admin_password_v1

# Configuration Labels for Automated Management
x-sophia-ai-config:
  version: "2.0"
  optimization_level: "phase1"
  ha_enabled: true
  monitoring_enabled: true
  backup_enabled: true
  auto_scaling: false  # Will be enabled in Phase 3 (K3s)
  load_balancing: true
  health_checks: comprehensive
  deployment_strategy: rolling_update
  rollback_enabled: true
  secrets_management: external
  network_encryption: true
  resource_limits: enforced
  restart_policies: optimized
  update_policies: conservative

