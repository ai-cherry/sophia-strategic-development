{
  "analysis_metadata": {
    "timestamp": "2025-07-07T04:57:19.603157",
    "files_analyzed": 12,
    "analyzer_version": "1.0.0"
  },
  "summary": {
    "total_lines_of_code": 7172,
    "average_complexity": 3.59,
    "total_issues": 13,
    "overall_quality_score": 98.63
  },
  "file_analyses": {
    "backend/mcp_servers/ai_memory/__init__.py": {
      "file_path": "backend/mcp_servers/ai_memory/__init__.py",
      "lines_of_code": 0,
      "logical_lines": 0,
      "comment_lines": 0,
      "blank_lines": 0,
      "cyclomatic_complexity": 0.0,
      "cognitive_complexity": 0.0,
      "maintainability_index": 100.0,
      "docstring_coverage": 0.0,
      "type_hint_coverage": 0.0,
      "syntax_errors": [],
      "style_violations": [],
      "security_issues": [],
      "performance_issues": [],
      "import_count": 0,
      "external_dependencies": [],
      "class_count": 0,
      "function_count": 0,
      "method_count": 0,
      "async_function_count": 0
    },
    "backend/mcp_servers/ai_memory/ai_memory_handlers.py": {
      "file_path": "backend/mcp_servers/ai_memory/ai_memory_handlers.py",
      "lines_of_code": 625,
      "logical_lines": 358,
      "comment_lines": 61,
      "blank_lines": 131,
      "cyclomatic_complexity": 2.6904761904761907,
      "cognitive_complexity": 0.0,
      "maintainability_index": 32.10361267889709,
      "docstring_coverage": 100.0,
      "type_hint_coverage": 100.0,
      "syntax_errors": [],
      "style_violations": [],
      "security_issues": [],
      "performance_issues": [
        "Potential blocking operations in async functions"
      ],
      "import_count": 6,
      "external_dependencies": [
        "logging",
        "embedding_operations",
        "__future__",
        "backend",
        "database_patterns",
        "async_patterns",
        "memory_operations"
      ],
      "class_count": 4,
      "function_count": 11,
      "method_count": 0,
      "async_function_count": 27
    },
    "backend/mcp_servers/ai_memory/ai_memory_models.py": {
      "file_path": "backend/mcp_servers/ai_memory/ai_memory_models.py",
      "lines_of_code": 724,
      "logical_lines": 438,
      "comment_lines": 32,
      "blank_lines": 126,
      "cyclomatic_complexity": 3.1904761904761907,
      "cognitive_complexity": 0.0,
      "maintainability_index": 22.935326348092975,
      "docstring_coverage": 153.57142857142858,
      "type_hint_coverage": 75.0,
      "syntax_errors": [],
      "style_violations": [],
      "security_issues": [],
      "performance_issues": [
        "Vector operations without explicit cleanup"
      ],
      "import_count": 8,
      "external_dependencies": [
        "embedding_operations",
        "__future__",
        "enum",
        "numpy",
        "uuid",
        "dataclasses",
        "database_patterns",
        "pydantic"
      ],
      "class_count": 15,
      "function_count": 28,
      "method_count": 0,
      "async_function_count": 0
    },
    "backend/mcp_servers/ai_memory_auto_discovery.py": {
      "file_path": "backend/mcp_servers/ai_memory_auto_discovery.py",
      "lines_of_code": 1114,
      "logical_lines": 352,
      "comment_lines": 45,
      "blank_lines": 142,
      "cyclomatic_complexity": 4.52,
      "cognitive_complexity": 0.0,
      "maintainability_index": 31.422664559586742,
      "docstring_coverage": 121.05263157894737,
      "type_hint_coverage": 73.68421052631578,
      "syntax_errors": [],
      "style_violations": [],
      "security_issues": [],
      "performance_issues": [
        "Potential blocking operations in async functions"
      ],
      "import_count": 10,
      "external_dependencies": [
        "re",
        "memory_operations",
        "enum",
        "asyncio",
        "logging",
        "backend",
        "dataclasses",
        "database_patterns",
        "async_patterns"
      ],
      "class_count": 6,
      "function_count": 9,
      "method_count": 0,
      "async_function_count": 10
    },
    "backend/mcp_servers/enhanced_ai_memory_mcp_server.py": {
      "file_path": "backend/mcp_servers/enhanced_ai_memory_mcp_server.py",
      "lines_of_code": 1531,
      "logical_lines": 493,
      "comment_lines": 74,
      "blank_lines": 202,
      "cyclomatic_complexity": 4.575757575757576,
      "cognitive_complexity": 0.0,
      "maintainability_index": 17.459855946140497,
      "docstring_coverage": 106.66666666666667,
      "type_hint_coverage": 93.33333333333333,
      "syntax_errors": [],
      "style_violations": [],
      "security_issues": [],
      "performance_issues": [
        "Potential blocking operations in async functions"
      ],
      "import_count": 12,
      "external_dependencies": [
        "mcp",
        "memory_operations",
        "enum",
        "asyncio",
        "logging",
        "pandas",
        "dataclasses",
        "mcp_patterns",
        "database_patterns",
        "async_patterns"
      ],
      "class_count": 3,
      "function_count": 9,
      "method_count": 0,
      "async_function_count": 21
    },
    "backend/mcp_servers/optimized_ai_memory_mcp_server.py": {
      "file_path": "backend/mcp_servers/optimized_ai_memory_mcp_server.py",
      "lines_of_code": 767,
      "logical_lines": 262,
      "comment_lines": 46,
      "blank_lines": 137,
      "cyclomatic_complexity": 3.3,
      "cognitive_complexity": 0.0,
      "maintainability_index": 45.67955957869058,
      "docstring_coverage": 111.76470588235294,
      "type_hint_coverage": 76.47058823529412,
      "syntax_errors": [],
      "style_violations": [],
      "security_issues": [],
      "performance_issues": [
        "Potential blocking operations in async functions"
      ],
      "import_count": 13,
      "external_dependencies": [
        "embedding_operations",
        "enum",
        "asyncio",
        "logging",
        "backend",
        "dataclasses",
        "mcp_patterns",
        "database_patterns",
        "async_patterns"
      ],
      "class_count": 3,
      "function_count": 2,
      "method_count": 0,
      "async_function_count": 15
    },
    "mcp-servers/ai-memory/enhanced_ai_memory_server.py": {
      "file_path": "mcp-servers/ai-memory/enhanced_ai_memory_server.py",
      "lines_of_code": 678,
      "logical_lines": 316,
      "comment_lines": 8,
      "blank_lines": 93,
      "cyclomatic_complexity": 3.347826086956522,
      "cognitive_complexity": 0.0,
      "maintainability_index": 26.286701941799677,
      "docstring_coverage": 85.18518518518519,
      "type_hint_coverage": 88.88888888888889,
      "syntax_errors": [],
      "style_violations": [],
      "security_issues": [],
      "performance_issues": [
        "Potential blocking operations in async functions"
      ],
      "import_count": 14,
      "external_dependencies": [
        "fastapi",
        "memory_operations",
        "logging",
        "asyncio",
        "uuid",
        "time",
        "dataclasses",
        "backend",
        "database_patterns",
        "async_patterns"
      ],
      "class_count": 1,
      "function_count": 6,
      "method_count": 0,
      "async_function_count": 21
    },
    "mcp-servers/ai_memory/__init__.py": {
      "file_path": "mcp-servers/ai_memory/__init__.py",
      "lines_of_code": 0,
      "logical_lines": 0,
      "comment_lines": 0,
      "blank_lines": 0,
      "cyclomatic_complexity": 0.0,
      "cognitive_complexity": 0.0,
      "maintainability_index": 100.0,
      "docstring_coverage": 0.0,
      "type_hint_coverage": 0.0,
      "syntax_errors": [],
      "style_violations": [],
      "security_issues": [],
      "performance_issues": [],
      "import_count": 0,
      "external_dependencies": [],
      "class_count": 0,
      "function_count": 0,
      "method_count": 0,
      "async_function_count": 0
    },
    "mcp-servers/ai_memory/enhanced_ai_memory_server.py": {
      "file_path": "mcp-servers/ai_memory/enhanced_ai_memory_server.py",
      "lines_of_code": 663,
      "logical_lines": 289,
      "comment_lines": 43,
      "blank_lines": 98,
      "cyclomatic_complexity": 2.608695652173913,
      "cognitive_complexity": 0.0,
      "maintainability_index": 38.14208808948446,
      "docstring_coverage": 85.18518518518519,
      "type_hint_coverage": 88.88888888888889,
      "syntax_errors": [],
      "style_violations": [],
      "security_issues": [],
      "performance_issues": [
        "Potential blocking operations in async functions",
        "Vector operations without explicit cleanup"
      ],
      "import_count": 11,
      "external_dependencies": [
        "fastapi",
        "memory_operations",
        "logging",
        "asyncio",
        "backend",
        "time",
        "database_patterns",
        "async_patterns"
      ],
      "class_count": 1,
      "function_count": 6,
      "method_count": 0,
      "async_function_count": 21
    },
    "scripts/ai_memory_code_quality_analyzer.py": {
      "file_path": "scripts/ai_memory_code_quality_analyzer.py",
      "lines_of_code": 582,
      "logical_lines": 362,
      "comment_lines": 55,
      "blank_lines": 114,
      "cyclomatic_complexity": 3.9,
      "cognitive_complexity": 0.0,
      "maintainability_index": 33.94208670401288,
      "docstring_coverage": 90.47619047619048,
      "type_hint_coverage": 71.42857142857143,
      "syntax_errors": [],
      "style_violations": [],
      "security_issues": [],
      "performance_issues": [
        "Potential blocking operations in async functions",
        "SELECT * queries found - consider specific column selection",
        "Vector operations without explicit cleanup"
      ],
      "import_count": 13,
      "external_dependencies": [
        "embedding_operations",
        "re",
        "memory_operations",
        "subprocess",
        "pathlib",
        "radon",
        "ast",
        "dataclasses",
        "mcp_patterns",
        "database_patterns",
        "async_patterns"
      ],
      "class_count": 5,
      "function_count": 21,
      "method_count": 0,
      "async_function_count": 0
    },
    "scripts/dev/ai_memory_health_check.py": {
      "file_path": "scripts/dev/ai_memory_health_check.py",
      "lines_of_code": 108,
      "logical_lines": 71,
      "comment_lines": 0,
      "blank_lines": 10,
      "cyclomatic_complexity": 12.0,
      "cognitive_complexity": 0.0,
      "maintainability_index": 42.082327123740356,
      "docstring_coverage": 100.0,
      "type_hint_coverage": 100.0,
      "syntax_errors": [],
      "style_violations": [],
      "security_issues": [],
      "performance_issues": [
        "Potential blocking operations in async functions"
      ],
      "import_count": 7,
      "external_dependencies": [
        "aiohttp",
        "asyncio",
        "async_patterns",
        "logging"
      ],
      "class_count": 0,
      "function_count": 0,
      "method_count": 0,
      "async_function_count": 1
    },
    "scripts/enhance_ai_memory_mcp.py": {
      "file_path": "scripts/enhance_ai_memory_mcp.py",
      "lines_of_code": 380,
      "logical_lines": 164,
      "comment_lines": 13,
      "blank_lines": 68,
      "cyclomatic_complexity": 3.0,
      "cognitive_complexity": 0.0,
      "maintainability_index": 43.7307304297965,
      "docstring_coverage": 90.9090909090909,
      "type_hint_coverage": 81.81818181818183,
      "syntax_errors": [],
      "style_violations": [],
      "security_issues": [],
      "performance_issues": [
        "Potential blocking operations in async functions"
      ],
      "import_count": 6,
      "external_dependencies": [
        "asyncio",
        "logging",
        "time",
        "aiohttp",
        "async_patterns"
      ],
      "class_count": 1,
      "function_count": 2,
      "method_count": 0,
      "async_function_count": 9
    }
  },
  "architecture_analysis": {
    "design_patterns": [
      "Handler Pattern",
      "Service Pattern",
      "Repository Pattern",
      "Data Class Pattern",
      "Async/Await Pattern"
    ],
    "solid_violations": [],
    "coupling_score": 0.0,
    "cohesion_score": 0.0,
    "abstraction_level": "unknown",
    "mcp_compliance": true,
    "mcp_patterns": [
      "MCP server structure detected"
    ],
    "mcp_violations": []
  },
  "performance_analysis": {
    "async_usage": {
      "backend/mcp_servers/ai_memory/__init__.py": {
        "async_functions": 0,
        "await_calls": 0
      },
      "backend/mcp_servers/ai_memory/ai_memory_handlers.py": {
        "async_functions": 27,
        "await_calls": 18
      },
      "backend/mcp_servers/ai_memory/ai_memory_models.py": {
        "async_functions": 0,
        "await_calls": 0
      },
      "backend/mcp_servers/ai_memory_auto_discovery.py": {
        "async_functions": 13,
        "await_calls": 17
      },
      "backend/mcp_servers/enhanced_ai_memory_mcp_server.py": {
        "async_functions": 21,
        "await_calls": 37
      },
      "backend/mcp_servers/optimized_ai_memory_mcp_server.py": {
        "async_functions": 15,
        "await_calls": 23
      },
      "mcp-servers/ai-memory/enhanced_ai_memory_server.py": {
        "async_functions": 21,
        "await_calls": 31
      },
      "mcp-servers/ai_memory/__init__.py": {
        "async_functions": 0,
        "await_calls": 0
      },
      "mcp-servers/ai_memory/enhanced_ai_memory_server.py": {
        "async_functions": 21,
        "await_calls": 35
      },
      "scripts/ai_memory_code_quality_analyzer.py": {
        "async_functions": 4,
        "await_calls": 2
      },
      "scripts/dev/ai_memory_health_check.py": {
        "async_functions": 1,
        "await_calls": 4
      },
      "scripts/enhance_ai_memory_mcp.py": {
        "async_functions": 9,
        "await_calls": 10
      }
    },
    "database_queries": [
      "Update",
      "update",
      "update",
      "update",
      "Update",
      "update",
      "update",
      "Update",
      "update",
      "update"
    ],
    "memory_usage_patterns": [],
    "optimization_opportunities": [
      "Consider query optimization and caching"
    ],
    "embedding_operations": [
      "embedding",
      "embedding",
      "embedding",
      "embedding",
      "embedding",
      "embedding",
      "embedding",
      "vector",
      "vector",
      "vector"
    ],
    "vector_operations": [],
    "model_loading_patterns": []
  },
  "recommendations": [
    "HIGH PRIORITY: Address critical code quality issues (syntax errors, security vulnerabilities)",
    "MEDIUM PRIORITY: Add type hints for better code maintainability (currently 70.8%)",
    "Consider query optimization and caching",
    "Consider implementing memory caching for frequently accessed embeddings",
    "Optimize vector similarity calculations with batch processing",
    "Implement proper error handling for external AI service calls",
    "Add comprehensive logging for memory operations debugging",
    "Consider implementing memory cleanup routines for long-running processes"
  ]
}
