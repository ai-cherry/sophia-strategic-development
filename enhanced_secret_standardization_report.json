{
  "enhanced_standardization_summary": {
    "total_secrets_discovered": 160,
    "total_mappings_generated": 240,
    "environments_configured": 3,
    "migration_phases": 3,
    "naming_pattern": "SOPHIA_{SERVICE}_{TYPE}_{ENV}",
    "esc_structure": "values.sophia.{category}.{service}.{credential}"
  },
  "secret_mappings": [
    {
      "old_name": "ANTHROPIC_API_KEY",
      "new_name": "SOPHIA_ANTHROPIC_API_KEY_PROD",
      "service": "ANTHROPIC",
      "category": "ai",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.ai.anthropic.api_key",
      "description": "ANTHROPIC API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "ANTHROPIC_API_KEY",
      "new_name": "SOPHIA_ANTHROPIC_API_KEY_STG",
      "service": "ANTHROPIC",
      "category": "ai",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.ai.anthropic.api_key",
      "description": "ANTHROPIC API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "ANTHROPIC_API_KEY",
      "new_name": "SOPHIA_ANTHROPIC_API_KEY_DEV",
      "service": "ANTHROPIC",
      "category": "ai",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.ai.anthropic.api_key",
      "description": "ANTHROPIC API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "DOCKER_TOKEN",
      "new_name": "SOPHIA_DOCKER_TOKEN_PROD",
      "service": "DOCKER",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.docker.token",
      "description": "DOCKER TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "DOCKER_TOKEN",
      "new_name": "SOPHIA_DOCKER_TOKEN_STG",
      "service": "DOCKER",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.docker.token",
      "description": "DOCKER TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "DOCKER_TOKEN",
      "new_name": "SOPHIA_DOCKER_TOKEN_DEV",
      "service": "DOCKER",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.docker.token",
      "description": "DOCKER TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "DOCKER_USERNAME",
      "new_name": "SOPHIA_DOCKER_TOKEN_PROD",
      "service": "DOCKER",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.docker.token",
      "description": "DOCKER TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "DOCKER_USERNAME",
      "new_name": "SOPHIA_DOCKER_TOKEN_STG",
      "service": "DOCKER",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.docker.token",
      "description": "DOCKER TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "DOCKER_USERNAME",
      "new_name": "SOPHIA_DOCKER_TOKEN_DEV",
      "service": "DOCKER",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.docker.token",
      "description": "DOCKER TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "GITHUB_ACTOR",
      "new_name": "SOPHIA_GITHUB_TOKEN_PROD",
      "service": "GITHUB",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "GITHUB_ACTOR",
      "new_name": "SOPHIA_GITHUB_TOKEN_STG",
      "service": "GITHUB",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "GITHUB_ACTOR",
      "new_name": "SOPHIA_GITHUB_TOKEN_DEV",
      "service": "GITHUB",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "GITHUB_JOB",
      "new_name": "SOPHIA_GITHUB_TOKEN_PROD",
      "service": "GITHUB",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "GITHUB_JOB",
      "new_name": "SOPHIA_GITHUB_TOKEN_STG",
      "service": "GITHUB",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "GITHUB_JOB",
      "new_name": "SOPHIA_GITHUB_TOKEN_DEV",
      "service": "GITHUB",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "GITHUB_PAT",
      "new_name": "SOPHIA_GITHUB_PASSWORD_PROD",
      "service": "GITHUB",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.github.password",
      "description": "GITHUB PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "GITHUB_PAT",
      "new_name": "SOPHIA_GITHUB_PASSWORD_STG",
      "service": "GITHUB",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.github.password",
      "description": "GITHUB PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "GITHUB_PAT",
      "new_name": "SOPHIA_GITHUB_PASSWORD_DEV",
      "service": "GITHUB",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.github.password",
      "description": "GITHUB PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "GITHUB_REF",
      "new_name": "SOPHIA_GITHUB_TOKEN_PROD",
      "service": "GITHUB",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "GITHUB_REF",
      "new_name": "SOPHIA_GITHUB_TOKEN_STG",
      "service": "GITHUB",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "GITHUB_REF",
      "new_name": "SOPHIA_GITHUB_TOKEN_DEV",
      "service": "GITHUB",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "GITHUB_SHA",
      "new_name": "SOPHIA_GITHUB_TOKEN_PROD",
      "service": "GITHUB",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "GITHUB_SHA",
      "new_name": "SOPHIA_GITHUB_TOKEN_STG",
      "service": "GITHUB",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "GITHUB_SHA",
      "new_name": "SOPHIA_GITHUB_TOKEN_DEV",
      "service": "GITHUB",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "GITHUB_TOKEN",
      "new_name": "SOPHIA_GITHUB_TOKEN_PROD",
      "service": "GITHUB",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "GITHUB_TOKEN",
      "new_name": "SOPHIA_GITHUB_TOKEN_STG",
      "service": "GITHUB",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "GITHUB_TOKEN",
      "new_name": "SOPHIA_GITHUB_TOKEN_DEV",
      "service": "GITHUB",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "GITHUB_WORKFLOW",
      "new_name": "SOPHIA_GITHUB_TOKEN_PROD",
      "service": "GITHUB",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "GITHUB_WORKFLOW",
      "new_name": "SOPHIA_GITHUB_TOKEN_STG",
      "service": "GITHUB",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "GITHUB_WORKFLOW",
      "new_name": "SOPHIA_GITHUB_TOKEN_DEV",
      "service": "GITHUB",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.github.token",
      "description": "GITHUB TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "GONG_ACCESS_KEY",
      "new_name": "SOPHIA_GONG_API_KEY_PROD",
      "service": "GONG",
      "category": "integration",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.integration.gong.api_key",
      "description": "GONG API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "GONG_ACCESS_KEY",
      "new_name": "SOPHIA_GONG_API_KEY_STG",
      "service": "GONG",
      "category": "integration",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.integration.gong.api_key",
      "description": "GONG API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "GONG_ACCESS_KEY",
      "new_name": "SOPHIA_GONG_API_KEY_DEV",
      "service": "GONG",
      "category": "integration",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.integration.gong.api_key",
      "description": "GONG API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "GONG_ACCESS_KEY_SECRET",
      "new_name": "SOPHIA_GONG_CLIENT_SECRET_PROD",
      "service": "GONG",
      "category": "integration",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.integration.gong.client_secret",
      "description": "GONG CLIENT_SECRET for PROD environment",
      "required": true
    },
    {
      "old_name": "GONG_ACCESS_KEY_SECRET",
      "new_name": "SOPHIA_GONG_CLIENT_SECRET_STG",
      "service": "GONG",
      "category": "integration",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.integration.gong.client_secret",
      "description": "GONG CLIENT_SECRET for STG environment",
      "required": false
    },
    {
      "old_name": "GONG_ACCESS_KEY_SECRET",
      "new_name": "SOPHIA_GONG_CLIENT_SECRET_DEV",
      "service": "GONG",
      "category": "integration",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.integration.gong.client_secret",
      "description": "GONG CLIENT_SECRET for DEV environment",
      "required": false
    },
    {
      "old_name": "GONG_API_KEY",
      "new_name": "SOPHIA_GONG_API_KEY_PROD",
      "service": "GONG",
      "category": "integration",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.integration.gong.api_key",
      "description": "GONG API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "GONG_API_KEY",
      "new_name": "SOPHIA_GONG_API_KEY_STG",
      "service": "GONG",
      "category": "integration",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.integration.gong.api_key",
      "description": "GONG API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "GONG_API_KEY",
      "new_name": "SOPHIA_GONG_API_KEY_DEV",
      "service": "GONG",
      "category": "integration",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.integration.gong.api_key",
      "description": "GONG API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "GONG_API_SECRET",
      "new_name": "SOPHIA_GONG_CLIENT_SECRET_PROD",
      "service": "GONG",
      "category": "integration",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.integration.gong.client_secret",
      "description": "GONG CLIENT_SECRET for PROD environment",
      "required": true
    },
    {
      "old_name": "GONG_API_SECRET",
      "new_name": "SOPHIA_GONG_CLIENT_SECRET_STG",
      "service": "GONG",
      "category": "integration",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.integration.gong.client_secret",
      "description": "GONG CLIENT_SECRET for STG environment",
      "required": false
    },
    {
      "old_name": "GONG_API_SECRET",
      "new_name": "SOPHIA_GONG_CLIENT_SECRET_DEV",
      "service": "GONG",
      "category": "integration",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.integration.gong.client_secret",
      "description": "GONG CLIENT_SECRET for DEV environment",
      "required": false
    },
    {
      "old_name": "GONG_BASE_URL",
      "new_name": "SOPHIA_GONG_API_KEY_PROD",
      "service": "GONG",
      "category": "integration",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.integration.gong.api_key",
      "description": "GONG API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "GONG_BASE_URL",
      "new_name": "SOPHIA_GONG_API_KEY_STG",
      "service": "GONG",
      "category": "integration",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.integration.gong.api_key",
      "description": "GONG API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "GONG_BASE_URL",
      "new_name": "SOPHIA_GONG_API_KEY_DEV",
      "service": "GONG",
      "category": "integration",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.integration.gong.api_key",
      "description": "GONG API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "GONG_CLIENT_ID",
      "new_name": "SOPHIA_GONG_API_KEY_PROD",
      "service": "GONG",
      "category": "integration",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.integration.gong.api_key",
      "description": "GONG API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "GONG_CLIENT_ID",
      "new_name": "SOPHIA_GONG_API_KEY_STG",
      "service": "GONG",
      "category": "integration",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.integration.gong.api_key",
      "description": "GONG API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "GONG_CLIENT_ID",
      "new_name": "SOPHIA_GONG_API_KEY_DEV",
      "service": "GONG",
      "category": "integration",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.integration.gong.api_key",
      "description": "GONG API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "GONG_CLIENT_SECRET",
      "new_name": "SOPHIA_GONG_CLIENT_SECRET_PROD",
      "service": "GONG",
      "category": "integration",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.integration.gong.client_secret",
      "description": "GONG CLIENT_SECRET for PROD environment",
      "required": true
    },
    {
      "old_name": "GONG_CLIENT_SECRET",
      "new_name": "SOPHIA_GONG_CLIENT_SECRET_STG",
      "service": "GONG",
      "category": "integration",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.integration.gong.client_secret",
      "description": "GONG CLIENT_SECRET for STG environment",
      "required": false
    },
    {
      "old_name": "GONG_CLIENT_SECRET",
      "new_name": "SOPHIA_GONG_CLIENT_SECRET_DEV",
      "service": "GONG",
      "category": "integration",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.integration.gong.client_secret",
      "description": "GONG CLIENT_SECRET for DEV environment",
      "required": false
    },
    {
      "old_name": "HUBSPOT_ACCESS_TOKEN",
      "new_name": "SOPHIA_HUBSPOT_TOKEN_PROD",
      "service": "HUBSPOT",
      "category": "integration",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.integration.hubspot.token",
      "description": "HUBSPOT TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "HUBSPOT_ACCESS_TOKEN",
      "new_name": "SOPHIA_HUBSPOT_TOKEN_STG",
      "service": "HUBSPOT",
      "category": "integration",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.integration.hubspot.token",
      "description": "HUBSPOT TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "HUBSPOT_ACCESS_TOKEN",
      "new_name": "SOPHIA_HUBSPOT_TOKEN_DEV",
      "service": "HUBSPOT",
      "category": "integration",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.integration.hubspot.token",
      "description": "HUBSPOT TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "HUBSPOT_API_KEY",
      "new_name": "SOPHIA_HUBSPOT_API_KEY_PROD",
      "service": "HUBSPOT",
      "category": "integration",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.integration.hubspot.api_key",
      "description": "HUBSPOT API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "HUBSPOT_API_KEY",
      "new_name": "SOPHIA_HUBSPOT_API_KEY_STG",
      "service": "HUBSPOT",
      "category": "integration",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.integration.hubspot.api_key",
      "description": "HUBSPOT API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "HUBSPOT_API_KEY",
      "new_name": "SOPHIA_HUBSPOT_API_KEY_DEV",
      "service": "HUBSPOT",
      "category": "integration",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.integration.hubspot.api_key",
      "description": "HUBSPOT API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "HUBSPOT_API_TOKEN",
      "new_name": "SOPHIA_HUBSPOT_TOKEN_PROD",
      "service": "HUBSPOT",
      "category": "integration",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.integration.hubspot.token",
      "description": "HUBSPOT TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "HUBSPOT_API_TOKEN",
      "new_name": "SOPHIA_HUBSPOT_TOKEN_STG",
      "service": "HUBSPOT",
      "category": "integration",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.integration.hubspot.token",
      "description": "HUBSPOT TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "HUBSPOT_API_TOKEN",
      "new_name": "SOPHIA_HUBSPOT_TOKEN_DEV",
      "service": "HUBSPOT",
      "category": "integration",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.integration.hubspot.token",
      "description": "HUBSPOT TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "LAMBDA_API_KEY",
      "new_name": "SOPHIA_LAMBDA_API_KEY_PROD",
      "service": "LAMBDA",
      "category": "infrastructure",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.infrastructure.lambda.api_key",
      "description": "LAMBDA API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "LAMBDA_API_KEY",
      "new_name": "SOPHIA_LAMBDA_API_KEY_STG",
      "service": "LAMBDA",
      "category": "infrastructure",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.infrastructure.lambda.api_key",
      "description": "LAMBDA API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "LAMBDA_API_KEY",
      "new_name": "SOPHIA_LAMBDA_API_KEY_DEV",
      "service": "LAMBDA",
      "category": "infrastructure",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.infrastructure.lambda.api_key",
      "description": "LAMBDA API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "LAMBDA_IP_ADDRESS",
      "new_name": "SOPHIA_LAMBDA_TOKEN_PROD",
      "service": "LAMBDA",
      "category": "infrastructure",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.infrastructure.lambda.token",
      "description": "LAMBDA TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "LAMBDA_IP_ADDRESS",
      "new_name": "SOPHIA_LAMBDA_TOKEN_STG",
      "service": "LAMBDA",
      "category": "infrastructure",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.infrastructure.lambda.token",
      "description": "LAMBDA TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "LAMBDA_IP_ADDRESS",
      "new_name": "SOPHIA_LAMBDA_TOKEN_DEV",
      "service": "LAMBDA",
      "category": "infrastructure",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.infrastructure.lambda.token",
      "description": "LAMBDA TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "LAMBDA_LABS_API_KEY",
      "new_name": "SOPHIA_LAMBDA_API_KEY_PROD",
      "service": "LAMBDA",
      "category": "infrastructure",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.infrastructure.lambda.api_key",
      "description": "LAMBDA API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "LAMBDA_LABS_API_KEY",
      "new_name": "SOPHIA_LAMBDA_API_KEY_STG",
      "service": "LAMBDA",
      "category": "infrastructure",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.infrastructure.lambda.api_key",
      "description": "LAMBDA API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "LAMBDA_LABS_API_KEY",
      "new_name": "SOPHIA_LAMBDA_API_KEY_DEV",
      "service": "LAMBDA",
      "category": "infrastructure",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.infrastructure.lambda.api_key",
      "description": "LAMBDA API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "LINEAR_API_KEY",
      "new_name": "SOPHIA_LINEAR_API_KEY_PROD",
      "service": "LINEAR",
      "category": "integration",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.integration.linear.api_key",
      "description": "LINEAR API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "LINEAR_API_KEY",
      "new_name": "SOPHIA_LINEAR_API_KEY_STG",
      "service": "LINEAR",
      "category": "integration",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.integration.linear.api_key",
      "description": "LINEAR API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "LINEAR_API_KEY",
      "new_name": "SOPHIA_LINEAR_API_KEY_DEV",
      "service": "LINEAR",
      "category": "integration",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.integration.linear.api_key",
      "description": "LINEAR API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "LLAMAINDEX_OPENAI_API_KEY",
      "new_name": "SOPHIA_OPENAI_API_KEY_PROD",
      "service": "OPENAI",
      "category": "ai",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.ai.openai.api_key",
      "description": "OPENAI API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "LLAMAINDEX_OPENAI_API_KEY",
      "new_name": "SOPHIA_OPENAI_API_KEY_STG",
      "service": "OPENAI",
      "category": "ai",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.ai.openai.api_key",
      "description": "OPENAI API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "LLAMAINDEX_OPENAI_API_KEY",
      "new_name": "SOPHIA_OPENAI_API_KEY_DEV",
      "service": "OPENAI",
      "category": "ai",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.ai.openai.api_key",
      "description": "OPENAI API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "LLAMAINDEX_PINECONE_API_KEY",
      "new_name": "SOPHIA_PINECONE_API_KEY_PROD",
      "service": "PINECONE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.pinecone.api_key",
      "description": "PINECONE API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "LLAMAINDEX_PINECONE_API_KEY",
      "new_name": "SOPHIA_PINECONE_API_KEY_STG",
      "service": "PINECONE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.pinecone.api_key",
      "description": "PINECONE API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "LLAMAINDEX_PINECONE_API_KEY",
      "new_name": "SOPHIA_PINECONE_API_KEY_DEV",
      "service": "PINECONE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.pinecone.api_key",
      "description": "PINECONE API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "LLAMAINDEX_WEAVIATE_API_KEY",
      "new_name": "SOPHIA_WEAVIATE_API_KEY_PROD",
      "service": "WEAVIATE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.weaviate.api_key",
      "description": "WEAVIATE API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "LLAMAINDEX_WEAVIATE_API_KEY",
      "new_name": "SOPHIA_WEAVIATE_API_KEY_STG",
      "service": "WEAVIATE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.weaviate.api_key",
      "description": "WEAVIATE API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "LLAMAINDEX_WEAVIATE_API_KEY",
      "new_name": "SOPHIA_WEAVIATE_API_KEY_DEV",
      "service": "WEAVIATE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.weaviate.api_key",
      "description": "WEAVIATE API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "NAMECHEAP_API_KEY",
      "new_name": "SOPHIA_NAMECHEAP_API_KEY_PROD",
      "service": "NAMECHEAP",
      "category": "infrastructure",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.infrastructure.namecheap.api_key",
      "description": "NAMECHEAP API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "NAMECHEAP_API_KEY",
      "new_name": "SOPHIA_NAMECHEAP_API_KEY_STG",
      "service": "NAMECHEAP",
      "category": "infrastructure",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.infrastructure.namecheap.api_key",
      "description": "NAMECHEAP API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "NAMECHEAP_API_KEY",
      "new_name": "SOPHIA_NAMECHEAP_API_KEY_DEV",
      "service": "NAMECHEAP",
      "category": "infrastructure",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.infrastructure.namecheap.api_key",
      "description": "NAMECHEAP API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "NAMECHEAP_API_USER",
      "new_name": "SOPHIA_NAMECHEAP_TOKEN_PROD",
      "service": "NAMECHEAP",
      "category": "infrastructure",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.infrastructure.namecheap.token",
      "description": "NAMECHEAP TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "NAMECHEAP_API_USER",
      "new_name": "SOPHIA_NAMECHEAP_TOKEN_STG",
      "service": "NAMECHEAP",
      "category": "infrastructure",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.infrastructure.namecheap.token",
      "description": "NAMECHEAP TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "NAMECHEAP_API_USER",
      "new_name": "SOPHIA_NAMECHEAP_TOKEN_DEV",
      "service": "NAMECHEAP",
      "category": "infrastructure",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.infrastructure.namecheap.token",
      "description": "NAMECHEAP TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "NAMECHEAP_USERNAME",
      "new_name": "SOPHIA_NAMECHEAP_TOKEN_PROD",
      "service": "NAMECHEAP",
      "category": "infrastructure",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.infrastructure.namecheap.token",
      "description": "NAMECHEAP TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "NAMECHEAP_USERNAME",
      "new_name": "SOPHIA_NAMECHEAP_TOKEN_STG",
      "service": "NAMECHEAP",
      "category": "infrastructure",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.infrastructure.namecheap.token",
      "description": "NAMECHEAP TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "NAMECHEAP_USERNAME",
      "new_name": "SOPHIA_NAMECHEAP_TOKEN_DEV",
      "service": "NAMECHEAP",
      "category": "infrastructure",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.infrastructure.namecheap.token",
      "description": "NAMECHEAP TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "OPENAI_API_KEY",
      "new_name": "SOPHIA_OPENAI_API_KEY_PROD",
      "service": "OPENAI",
      "category": "ai",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.ai.openai.api_key",
      "description": "OPENAI API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "OPENAI_API_KEY",
      "new_name": "SOPHIA_OPENAI_API_KEY_STG",
      "service": "OPENAI",
      "category": "ai",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.ai.openai.api_key",
      "description": "OPENAI API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "OPENAI_API_KEY",
      "new_name": "SOPHIA_OPENAI_API_KEY_DEV",
      "service": "OPENAI",
      "category": "ai",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.ai.openai.api_key",
      "description": "OPENAI API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "PINECONE_API_KEY",
      "new_name": "SOPHIA_PINECONE_API_KEY_PROD",
      "service": "PINECONE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.pinecone.api_key",
      "description": "PINECONE API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "PINECONE_API_KEY",
      "new_name": "SOPHIA_PINECONE_API_KEY_STG",
      "service": "PINECONE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.pinecone.api_key",
      "description": "PINECONE API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "PINECONE_API_KEY",
      "new_name": "SOPHIA_PINECONE_API_KEY_DEV",
      "service": "PINECONE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.pinecone.api_key",
      "description": "PINECONE API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "PINECONE_ENVIRONMENT",
      "new_name": "SOPHIA_PINECONE_PASSWORD_PROD",
      "service": "PINECONE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.pinecone.password",
      "description": "PINECONE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "PINECONE_ENVIRONMENT",
      "new_name": "SOPHIA_PINECONE_PASSWORD_STG",
      "service": "PINECONE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.pinecone.password",
      "description": "PINECONE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "PINECONE_ENVIRONMENT",
      "new_name": "SOPHIA_PINECONE_PASSWORD_DEV",
      "service": "PINECONE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.pinecone.password",
      "description": "PINECONE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "PINECONE_INDEX_NAME",
      "new_name": "SOPHIA_PINECONE_PASSWORD_PROD",
      "service": "PINECONE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.pinecone.password",
      "description": "PINECONE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "PINECONE_INDEX_NAME",
      "new_name": "SOPHIA_PINECONE_PASSWORD_STG",
      "service": "PINECONE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.pinecone.password",
      "description": "PINECONE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "PINECONE_INDEX_NAME",
      "new_name": "SOPHIA_PINECONE_PASSWORD_DEV",
      "service": "PINECONE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.pinecone.password",
      "description": "PINECONE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "PORTKEY_API_KEY",
      "new_name": "SOPHIA_PORTKEY_API_KEY_PROD",
      "service": "PORTKEY",
      "category": "ai",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.ai.portkey.api_key",
      "description": "PORTKEY API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "PORTKEY_API_KEY",
      "new_name": "SOPHIA_PORTKEY_API_KEY_STG",
      "service": "PORTKEY",
      "category": "ai",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.ai.portkey.api_key",
      "description": "PORTKEY API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "PORTKEY_API_KEY",
      "new_name": "SOPHIA_PORTKEY_API_KEY_DEV",
      "service": "PORTKEY",
      "category": "ai",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.ai.portkey.api_key",
      "description": "PORTKEY API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "PULUMI_ACCESS_TOKEN",
      "new_name": "SOPHIA_PULUMI_TOKEN_PROD",
      "service": "PULUMI",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "PULUMI_ACCESS_TOKEN",
      "new_name": "SOPHIA_PULUMI_TOKEN_STG",
      "service": "PULUMI",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "PULUMI_ACCESS_TOKEN",
      "new_name": "SOPHIA_PULUMI_TOKEN_DEV",
      "service": "PULUMI",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "PULUMI_BACKEND_URL_DEV",
      "new_name": "SOPHIA_PULUMI_TOKEN_PROD",
      "service": "PULUMI",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "PULUMI_BACKEND_URL_DEV",
      "new_name": "SOPHIA_PULUMI_TOKEN_STG",
      "service": "PULUMI",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "PULUMI_BACKEND_URL_DEV",
      "new_name": "SOPHIA_PULUMI_TOKEN_DEV",
      "service": "PULUMI",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "PULUMI_BACKEND_URL_PROD",
      "new_name": "SOPHIA_PULUMI_TOKEN_PROD",
      "service": "PULUMI",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "PULUMI_BACKEND_URL_PROD",
      "new_name": "SOPHIA_PULUMI_TOKEN_STG",
      "service": "PULUMI",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "PULUMI_BACKEND_URL_PROD",
      "new_name": "SOPHIA_PULUMI_TOKEN_DEV",
      "service": "PULUMI",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "PULUMI_BACKEND_URL_STAGING",
      "new_name": "SOPHIA_PULUMI_TOKEN_PROD",
      "service": "PULUMI",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "PULUMI_BACKEND_URL_STAGING",
      "new_name": "SOPHIA_PULUMI_TOKEN_STG",
      "service": "PULUMI",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "PULUMI_BACKEND_URL_STAGING",
      "new_name": "SOPHIA_PULUMI_TOKEN_DEV",
      "service": "PULUMI",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "PULUMI_CONFIG_PASSPHRASE",
      "new_name": "SOPHIA_PULUMI_TOKEN_PROD",
      "service": "PULUMI",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "PULUMI_CONFIG_PASSPHRASE",
      "new_name": "SOPHIA_PULUMI_TOKEN_STG",
      "service": "PULUMI",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "PULUMI_CONFIG_PASSPHRASE",
      "new_name": "SOPHIA_PULUMI_TOKEN_DEV",
      "service": "PULUMI",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "PULUMI_IP_ADDRESS",
      "new_name": "SOPHIA_PULUMI_TOKEN_PROD",
      "service": "PULUMI",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "PULUMI_IP_ADDRESS",
      "new_name": "SOPHIA_PULUMI_TOKEN_STG",
      "service": "PULUMI",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "PULUMI_IP_ADDRESS",
      "new_name": "SOPHIA_PULUMI_TOKEN_DEV",
      "service": "PULUMI",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "PULUMI_ORG",
      "new_name": "SOPHIA_PULUMI_TOKEN_PROD",
      "service": "PULUMI",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "PULUMI_ORG",
      "new_name": "SOPHIA_PULUMI_TOKEN_STG",
      "service": "PULUMI",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "PULUMI_ORG",
      "new_name": "SOPHIA_PULUMI_TOKEN_DEV",
      "service": "PULUMI",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "PULUMI_STACK",
      "new_name": "SOPHIA_PULUMI_TOKEN_PROD",
      "service": "PULUMI",
      "category": "platform",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "PULUMI_STACK",
      "new_name": "SOPHIA_PULUMI_TOKEN_STG",
      "service": "PULUMI",
      "category": "platform",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "PULUMI_STACK",
      "new_name": "SOPHIA_PULUMI_TOKEN_DEV",
      "service": "PULUMI",
      "category": "platform",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.platform.pulumi.token",
      "description": "PULUMI TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "SLACK_APP_TOKEN",
      "new_name": "SOPHIA_SLACK_TOKEN_PROD",
      "service": "SLACK",
      "category": "communication",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.communication.slack.token",
      "description": "SLACK TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "SLACK_APP_TOKEN",
      "new_name": "SOPHIA_SLACK_TOKEN_STG",
      "service": "SLACK",
      "category": "communication",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.communication.slack.token",
      "description": "SLACK TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "SLACK_APP_TOKEN",
      "new_name": "SOPHIA_SLACK_TOKEN_DEV",
      "service": "SLACK",
      "category": "communication",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.communication.slack.token",
      "description": "SLACK TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "SLACK_BOT_TOKEN",
      "new_name": "SOPHIA_SLACK_TOKEN_PROD",
      "service": "SLACK",
      "category": "communication",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.communication.slack.token",
      "description": "SLACK TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "SLACK_BOT_TOKEN",
      "new_name": "SOPHIA_SLACK_TOKEN_STG",
      "service": "SLACK",
      "category": "communication",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.communication.slack.token",
      "description": "SLACK TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "SLACK_BOT_TOKEN",
      "new_name": "SOPHIA_SLACK_TOKEN_DEV",
      "service": "SLACK",
      "category": "communication",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.communication.slack.token",
      "description": "SLACK TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "SLACK_CLIENT_ID",
      "new_name": "SOPHIA_SLACK_BOT_TOKEN_PROD",
      "service": "SLACK",
      "category": "communication",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.communication.slack.bot_token",
      "description": "SLACK BOT_TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "SLACK_CLIENT_ID",
      "new_name": "SOPHIA_SLACK_BOT_TOKEN_STG",
      "service": "SLACK",
      "category": "communication",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.communication.slack.bot_token",
      "description": "SLACK BOT_TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "SLACK_CLIENT_ID",
      "new_name": "SOPHIA_SLACK_BOT_TOKEN_DEV",
      "service": "SLACK",
      "category": "communication",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.communication.slack.bot_token",
      "description": "SLACK BOT_TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "SLACK_CLIENT_SECRET",
      "new_name": "SOPHIA_SLACK_CLIENT_SECRET_PROD",
      "service": "SLACK",
      "category": "communication",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.communication.slack.client_secret",
      "description": "SLACK CLIENT_SECRET for PROD environment",
      "required": true
    },
    {
      "old_name": "SLACK_CLIENT_SECRET",
      "new_name": "SOPHIA_SLACK_CLIENT_SECRET_STG",
      "service": "SLACK",
      "category": "communication",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.communication.slack.client_secret",
      "description": "SLACK CLIENT_SECRET for STG environment",
      "required": false
    },
    {
      "old_name": "SLACK_CLIENT_SECRET",
      "new_name": "SOPHIA_SLACK_CLIENT_SECRET_DEV",
      "service": "SLACK",
      "category": "communication",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.communication.slack.client_secret",
      "description": "SLACK CLIENT_SECRET for DEV environment",
      "required": false
    },
    {
      "old_name": "SLACK_SIGNING_SECRET",
      "new_name": "SOPHIA_SLACK_CLIENT_SECRET_PROD",
      "service": "SLACK",
      "category": "communication",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.communication.slack.client_secret",
      "description": "SLACK CLIENT_SECRET for PROD environment",
      "required": true
    },
    {
      "old_name": "SLACK_SIGNING_SECRET",
      "new_name": "SOPHIA_SLACK_CLIENT_SECRET_STG",
      "service": "SLACK",
      "category": "communication",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.communication.slack.client_secret",
      "description": "SLACK CLIENT_SECRET for STG environment",
      "required": false
    },
    {
      "old_name": "SLACK_SIGNING_SECRET",
      "new_name": "SOPHIA_SLACK_CLIENT_SECRET_DEV",
      "service": "SLACK",
      "category": "communication",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.communication.slack.client_secret",
      "description": "SLACK CLIENT_SECRET for DEV environment",
      "required": false
    },
    {
      "old_name": "SLACK_WEBHOOK",
      "new_name": "SOPHIA_SLACK_BOT_TOKEN_PROD",
      "service": "SLACK",
      "category": "communication",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.communication.slack.bot_token",
      "description": "SLACK BOT_TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "SLACK_WEBHOOK",
      "new_name": "SOPHIA_SLACK_BOT_TOKEN_STG",
      "service": "SLACK",
      "category": "communication",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.communication.slack.bot_token",
      "description": "SLACK BOT_TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "SLACK_WEBHOOK",
      "new_name": "SOPHIA_SLACK_BOT_TOKEN_DEV",
      "service": "SLACK",
      "category": "communication",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.communication.slack.bot_token",
      "description": "SLACK BOT_TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "SLACK_WEBHOOK_URL",
      "new_name": "SOPHIA_SLACK_BOT_TOKEN_PROD",
      "service": "SLACK",
      "category": "communication",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.communication.slack.bot_token",
      "description": "SLACK BOT_TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "SLACK_WEBHOOK_URL",
      "new_name": "SOPHIA_SLACK_BOT_TOKEN_STG",
      "service": "SLACK",
      "category": "communication",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.communication.slack.bot_token",
      "description": "SLACK BOT_TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "SLACK_WEBHOOK_URL",
      "new_name": "SOPHIA_SLACK_BOT_TOKEN_DEV",
      "service": "SLACK",
      "category": "communication",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.communication.slack.bot_token",
      "description": "SLACK BOT_TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_ACCOUNT",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_PROD",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "SNOWFLAKE_ACCOUNT",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_STG",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_ACCOUNT",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_DEV",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_DATABASE",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_PROD",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "SNOWFLAKE_DATABASE",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_STG",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_DATABASE",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_DEV",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_PASSWORD",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_PROD",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "SNOWFLAKE_PASSWORD",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_STG",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_PASSWORD",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_DEV",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_PAT",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_PROD",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "SNOWFLAKE_PAT",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_STG",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_PAT",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_DEV",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_ROLE",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_PROD",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "SNOWFLAKE_ROLE",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_STG",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_ROLE",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_DEV",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_SCHEMA",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_PROD",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "SNOWFLAKE_SCHEMA",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_STG",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_SCHEMA",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_DEV",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_USER",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_PROD",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "SNOWFLAKE_USER",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_STG",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_USER",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_DEV",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_WAREHOUSE",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_PROD",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "SNOWFLAKE_WAREHOUSE",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_STG",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "SNOWFLAKE_WAREHOUSE",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_DEV",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "VERCEL_ACCESS_TOKEN",
      "new_name": "SOPHIA_VERCEL_TOKEN_PROD",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "VERCEL_ACCESS_TOKEN",
      "new_name": "SOPHIA_VERCEL_TOKEN_STG",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "VERCEL_ACCESS_TOKEN",
      "new_name": "SOPHIA_VERCEL_TOKEN_DEV",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "VERCEL_API_TOKEN",
      "new_name": "SOPHIA_VERCEL_TOKEN_PROD",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "VERCEL_API_TOKEN",
      "new_name": "SOPHIA_VERCEL_TOKEN_STG",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "VERCEL_API_TOKEN",
      "new_name": "SOPHIA_VERCEL_TOKEN_DEV",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "VERCEL_ORG_ID",
      "new_name": "SOPHIA_VERCEL_TOKEN_PROD",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "VERCEL_ORG_ID",
      "new_name": "SOPHIA_VERCEL_TOKEN_STG",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "VERCEL_ORG_ID",
      "new_name": "SOPHIA_VERCEL_TOKEN_DEV",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "VERCEL_PROJECT_ID",
      "new_name": "SOPHIA_VERCEL_TOKEN_PROD",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "VERCEL_PROJECT_ID",
      "new_name": "SOPHIA_VERCEL_TOKEN_STG",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "VERCEL_PROJECT_ID",
      "new_name": "SOPHIA_VERCEL_TOKEN_DEV",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "VERCEL_PROJECT_ID_SOPHIA_PROD",
      "new_name": "SOPHIA_VERCEL_TOKEN_PROD",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "VERCEL_PROJECT_ID_SOPHIA_PROD",
      "new_name": "SOPHIA_VERCEL_TOKEN_STG",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "VERCEL_PROJECT_ID_SOPHIA_PROD",
      "new_name": "SOPHIA_VERCEL_TOKEN_DEV",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "VERCEL_TEAM_ID",
      "new_name": "SOPHIA_VERCEL_TOKEN_PROD",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "VERCEL_TEAM_ID",
      "new_name": "SOPHIA_VERCEL_TOKEN_STG",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "VERCEL_TEAM_ID",
      "new_name": "SOPHIA_VERCEL_TOKEN_DEV",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "VERCEL_TOKEN",
      "new_name": "SOPHIA_VERCEL_TOKEN_PROD",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "VERCEL_TOKEN",
      "new_name": "SOPHIA_VERCEL_TOKEN_STG",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "VERCEL_TOKEN",
      "new_name": "SOPHIA_VERCEL_TOKEN_DEV",
      "service": "VERCEL",
      "category": "infrastructure",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.infrastructure.vercel.token",
      "description": "VERCEL TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "WEAVIATE_API_KEY",
      "new_name": "SOPHIA_WEAVIATE_API_KEY_PROD",
      "service": "WEAVIATE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.weaviate.api_key",
      "description": "WEAVIATE API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "WEAVIATE_API_KEY",
      "new_name": "SOPHIA_WEAVIATE_API_KEY_STG",
      "service": "WEAVIATE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.weaviate.api_key",
      "description": "WEAVIATE API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "WEAVIATE_API_KEY",
      "new_name": "SOPHIA_WEAVIATE_API_KEY_DEV",
      "service": "WEAVIATE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.weaviate.api_key",
      "description": "WEAVIATE API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "WEAVIATE_GRPC_ENDPOINT",
      "new_name": "SOPHIA_WEAVIATE_PASSWORD_PROD",
      "service": "WEAVIATE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.weaviate.password",
      "description": "WEAVIATE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "WEAVIATE_GRPC_ENDPOINT",
      "new_name": "SOPHIA_WEAVIATE_PASSWORD_STG",
      "service": "WEAVIATE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.weaviate.password",
      "description": "WEAVIATE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "WEAVIATE_GRPC_ENDPOINT",
      "new_name": "SOPHIA_WEAVIATE_PASSWORD_DEV",
      "service": "WEAVIATE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.weaviate.password",
      "description": "WEAVIATE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "WEAVIATE_REST_ENDPOINT",
      "new_name": "SOPHIA_WEAVIATE_PASSWORD_PROD",
      "service": "WEAVIATE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.weaviate.password",
      "description": "WEAVIATE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "WEAVIATE_REST_ENDPOINT",
      "new_name": "SOPHIA_WEAVIATE_PASSWORD_STG",
      "service": "WEAVIATE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.weaviate.password",
      "description": "WEAVIATE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "WEAVIATE_REST_ENDPOINT",
      "new_name": "SOPHIA_WEAVIATE_PASSWORD_DEV",
      "service": "WEAVIATE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.weaviate.password",
      "description": "WEAVIATE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "WEAVIATE_URL",
      "new_name": "SOPHIA_WEAVIATE_PASSWORD_PROD",
      "service": "WEAVIATE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.weaviate.password",
      "description": "WEAVIATE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "WEAVIATE_URL",
      "new_name": "SOPHIA_WEAVIATE_PASSWORD_STG",
      "service": "WEAVIATE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.weaviate.password",
      "description": "WEAVIATE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "WEAVIATE_URL",
      "new_name": "SOPHIA_WEAVIATE_PASSWORD_DEV",
      "service": "WEAVIATE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.weaviate.password",
      "description": "WEAVIATE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "gong_access_key",
      "new_name": "SOPHIA_GONG_API_KEY_PROD",
      "service": "GONG",
      "category": "integration",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.integration.gong.api_key",
      "description": "GONG API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "gong_access_key",
      "new_name": "SOPHIA_GONG_API_KEY_STG",
      "service": "GONG",
      "category": "integration",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.integration.gong.api_key",
      "description": "GONG API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "gong_access_key",
      "new_name": "SOPHIA_GONG_API_KEY_DEV",
      "service": "GONG",
      "category": "integration",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.integration.gong.api_key",
      "description": "GONG API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "gong_access_key_secret",
      "new_name": "SOPHIA_GONG_CLIENT_SECRET_PROD",
      "service": "GONG",
      "category": "integration",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.integration.gong.client_secret",
      "description": "GONG CLIENT_SECRET for PROD environment",
      "required": true
    },
    {
      "old_name": "gong_access_key_secret",
      "new_name": "SOPHIA_GONG_CLIENT_SECRET_STG",
      "service": "GONG",
      "category": "integration",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.integration.gong.client_secret",
      "description": "GONG CLIENT_SECRET for STG environment",
      "required": false
    },
    {
      "old_name": "gong_access_key_secret",
      "new_name": "SOPHIA_GONG_CLIENT_SECRET_DEV",
      "service": "GONG",
      "category": "integration",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.integration.gong.client_secret",
      "description": "GONG CLIENT_SECRET for DEV environment",
      "required": false
    },
    {
      "old_name": "openai_api_key",
      "new_name": "SOPHIA_OPENAI_API_KEY_PROD",
      "service": "OPENAI",
      "category": "ai",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.ai.openai.api_key",
      "description": "OPENAI API_KEY for PROD environment",
      "required": true
    },
    {
      "old_name": "openai_api_key",
      "new_name": "SOPHIA_OPENAI_API_KEY_STG",
      "service": "OPENAI",
      "category": "ai",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.ai.openai.api_key",
      "description": "OPENAI API_KEY for STG environment",
      "required": false
    },
    {
      "old_name": "openai_api_key",
      "new_name": "SOPHIA_OPENAI_API_KEY_DEV",
      "service": "OPENAI",
      "category": "ai",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.ai.openai.api_key",
      "description": "OPENAI API_KEY for DEV environment",
      "required": false
    },
    {
      "old_name": "slack_webhook_url",
      "new_name": "SOPHIA_SLACK_BOT_TOKEN_PROD",
      "service": "SLACK",
      "category": "communication",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.communication.slack.bot_token",
      "description": "SLACK BOT_TOKEN for PROD environment",
      "required": true
    },
    {
      "old_name": "slack_webhook_url",
      "new_name": "SOPHIA_SLACK_BOT_TOKEN_STG",
      "service": "SLACK",
      "category": "communication",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.communication.slack.bot_token",
      "description": "SLACK BOT_TOKEN for STG environment",
      "required": false
    },
    {
      "old_name": "slack_webhook_url",
      "new_name": "SOPHIA_SLACK_BOT_TOKEN_DEV",
      "service": "SLACK",
      "category": "communication",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.communication.slack.bot_token",
      "description": "SLACK BOT_TOKEN for DEV environment",
      "required": false
    },
    {
      "old_name": "snowflake_account",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_PROD",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "snowflake_account",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_STG",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "snowflake_account",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_DEV",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "snowflake_database",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_PROD",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "snowflake_database",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_STG",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "snowflake_database",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_DEV",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "snowflake_password",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_PROD",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "snowflake_password",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_STG",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "snowflake_password",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_DEV",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "snowflake_role",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_PROD",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "snowflake_role",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_STG",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "snowflake_role",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_DEV",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "snowflake_schema",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_PROD",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "snowflake_schema",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_STG",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "snowflake_schema",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_DEV",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "snowflake_user",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_PROD",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "snowflake_user",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_STG",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "snowflake_user",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_DEV",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for DEV environment",
      "required": false
    },
    {
      "old_name": "snowflake_warehouse",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_PROD",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "PROD",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for PROD environment",
      "required": true
    },
    {
      "old_name": "snowflake_warehouse",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_STG",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "STG",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for STG environment",
      "required": false
    },
    {
      "old_name": "snowflake_warehouse",
      "new_name": "SOPHIA_SNOWFLAKE_PASSWORD_DEV",
      "service": "SNOWFLAKE",
      "category": "data",
      "environment": "DEV",
      "pulumi_esc_path": "values.sophia.data.snowflake.password",
      "description": "SNOWFLAKE PASSWORD for DEV environment",
      "required": false
    }
  ],
  "esc_environments": [
    {
      "name": "scoobyjava-org/sophia-ai-prod",
      "environment": "PROD",
      "values_structure": {
        "sophia": {
          "platform": {
            "name": "sophia-ai-platform",
            "version": "v2.0.0",
            "environment": "prod",
            "docker": {
              "token": "${SOPHIA_DOCKER_TOKEN_PROD}"
            },
            "github": {
              "token": "${SOPHIA_GITHUB_TOKEN_PROD}",
              "password": "${SOPHIA_GITHUB_PASSWORD_PROD}"
            },
            "pulumi": {
              "token": "${SOPHIA_PULUMI_TOKEN_PROD}"
            }
          },
          "ai": {
            "anthropic": {
              "api_key": "${SOPHIA_ANTHROPIC_API_KEY_PROD}"
            },
            "openai": {
              "api_key": "${SOPHIA_OPENAI_API_KEY_PROD}"
            },
            "portkey": {
              "api_key": "${SOPHIA_PORTKEY_API_KEY_PROD}"
            }
          },
          "integration": {
            "gong": {
              "api_key": "${SOPHIA_GONG_API_KEY_PROD}",
              "client_secret": "${SOPHIA_GONG_CLIENT_SECRET_PROD}"
            },
            "hubspot": {
              "token": "${SOPHIA_HUBSPOT_TOKEN_PROD}",
              "api_key": "${SOPHIA_HUBSPOT_API_KEY_PROD}"
            },
            "linear": {
              "api_key": "${SOPHIA_LINEAR_API_KEY_PROD}"
            }
          },
          "infrastructure": {
            "lambda": {
              "api_key": "${SOPHIA_LAMBDA_API_KEY_PROD}",
              "token": "${SOPHIA_LAMBDA_TOKEN_PROD}"
            },
            "namecheap": {
              "api_key": "${SOPHIA_NAMECHEAP_API_KEY_PROD}",
              "token": "${SOPHIA_NAMECHEAP_TOKEN_PROD}"
            },
            "vercel": {
              "token": "${SOPHIA_VERCEL_TOKEN_PROD}"
            }
          },
          "data": {
            "pinecone": {
              "api_key": "${SOPHIA_PINECONE_API_KEY_PROD}",
              "password": "${SOPHIA_PINECONE_PASSWORD_PROD}"
            },
            "weaviate": {
              "api_key": "${SOPHIA_WEAVIATE_API_KEY_PROD}",
              "password": "${SOPHIA_WEAVIATE_PASSWORD_PROD}"
            },
            "snowflake": {
              "password": "${SOPHIA_SNOWFLAKE_PASSWORD_PROD}"
            }
          },
          "communication": {
            "slack": {
              "token": "${SOPHIA_SLACK_TOKEN_PROD}",
              "bot_token": "${SOPHIA_SLACK_BOT_TOKEN_PROD}",
              "client_secret": "${SOPHIA_SLACK_CLIENT_SECRET_PROD}"
            }
          }
        }
      },
      "imports": [
        "scoobyjava-org/default/common"
      ]
    },
    {
      "name": "scoobyjava-org/sophia-ai-stg",
      "environment": "STG",
      "values_structure": {
        "sophia": {
          "platform": {
            "name": "sophia-ai-platform",
            "version": "v2.0.0",
            "environment": "stg",
            "docker": {
              "token": "${SOPHIA_DOCKER_TOKEN_STG}"
            },
            "github": {
              "token": "${SOPHIA_GITHUB_TOKEN_STG}",
              "password": "${SOPHIA_GITHUB_PASSWORD_STG}"
            },
            "pulumi": {
              "token": "${SOPHIA_PULUMI_TOKEN_STG}"
            }
          },
          "ai": {
            "anthropic": {
              "api_key": "${SOPHIA_ANTHROPIC_API_KEY_STG}"
            },
            "openai": {
              "api_key": "${SOPHIA_OPENAI_API_KEY_STG}"
            },
            "portkey": {
              "api_key": "${SOPHIA_PORTKEY_API_KEY_STG}"
            }
          },
          "integration": {
            "gong": {
              "api_key": "${SOPHIA_GONG_API_KEY_STG}",
              "client_secret": "${SOPHIA_GONG_CLIENT_SECRET_STG}"
            },
            "hubspot": {
              "token": "${SOPHIA_HUBSPOT_TOKEN_STG}",
              "api_key": "${SOPHIA_HUBSPOT_API_KEY_STG}"
            },
            "linear": {
              "api_key": "${SOPHIA_LINEAR_API_KEY_STG}"
            }
          },
          "infrastructure": {
            "lambda": {
              "api_key": "${SOPHIA_LAMBDA_API_KEY_STG}",
              "token": "${SOPHIA_LAMBDA_TOKEN_STG}"
            },
            "namecheap": {
              "api_key": "${SOPHIA_NAMECHEAP_API_KEY_STG}",
              "token": "${SOPHIA_NAMECHEAP_TOKEN_STG}"
            },
            "vercel": {
              "token": "${SOPHIA_VERCEL_TOKEN_STG}"
            }
          },
          "data": {
            "pinecone": {
              "api_key": "${SOPHIA_PINECONE_API_KEY_STG}",
              "password": "${SOPHIA_PINECONE_PASSWORD_STG}"
            },
            "weaviate": {
              "api_key": "${SOPHIA_WEAVIATE_API_KEY_STG}",
              "password": "${SOPHIA_WEAVIATE_PASSWORD_STG}"
            },
            "snowflake": {
              "password": "${SOPHIA_SNOWFLAKE_PASSWORD_STG}"
            }
          },
          "communication": {
            "slack": {
              "token": "${SOPHIA_SLACK_TOKEN_STG}",
              "bot_token": "${SOPHIA_SLACK_BOT_TOKEN_STG}",
              "client_secret": "${SOPHIA_SLACK_CLIENT_SECRET_STG}"
            }
          }
        }
      },
      "imports": [
        "scoobyjava-org/default/common"
      ]
    },
    {
      "name": "scoobyjava-org/sophia-ai-dev",
      "environment": "DEV",
      "values_structure": {
        "sophia": {
          "platform": {
            "name": "sophia-ai-platform",
            "version": "v2.0.0",
            "environment": "dev",
            "docker": {
              "token": "${SOPHIA_DOCKER_TOKEN_DEV}"
            },
            "github": {
              "token": "${SOPHIA_GITHUB_TOKEN_DEV}",
              "password": "${SOPHIA_GITHUB_PASSWORD_DEV}"
            },
            "pulumi": {
              "token": "${SOPHIA_PULUMI_TOKEN_DEV}"
            }
          },
          "ai": {
            "anthropic": {
              "api_key": "${SOPHIA_ANTHROPIC_API_KEY_DEV}"
            },
            "openai": {
              "api_key": "${SOPHIA_OPENAI_API_KEY_DEV}"
            },
            "portkey": {
              "api_key": "${SOPHIA_PORTKEY_API_KEY_DEV}"
            }
          },
          "integration": {
            "gong": {
              "api_key": "${SOPHIA_GONG_API_KEY_DEV}",
              "client_secret": "${SOPHIA_GONG_CLIENT_SECRET_DEV}"
            },
            "hubspot": {
              "token": "${SOPHIA_HUBSPOT_TOKEN_DEV}",
              "api_key": "${SOPHIA_HUBSPOT_API_KEY_DEV}"
            },
            "linear": {
              "api_key": "${SOPHIA_LINEAR_API_KEY_DEV}"
            }
          },
          "infrastructure": {
            "lambda": {
              "api_key": "${SOPHIA_LAMBDA_API_KEY_DEV}",
              "token": "${SOPHIA_LAMBDA_TOKEN_DEV}"
            },
            "namecheap": {
              "api_key": "${SOPHIA_NAMECHEAP_API_KEY_DEV}",
              "token": "${SOPHIA_NAMECHEAP_TOKEN_DEV}"
            },
            "vercel": {
              "token": "${SOPHIA_VERCEL_TOKEN_DEV}"
            }
          },
          "data": {
            "pinecone": {
              "api_key": "${SOPHIA_PINECONE_API_KEY_DEV}",
              "password": "${SOPHIA_PINECONE_PASSWORD_DEV}"
            },
            "weaviate": {
              "api_key": "${SOPHIA_WEAVIATE_API_KEY_DEV}",
              "password": "${SOPHIA_WEAVIATE_PASSWORD_DEV}"
            },
            "snowflake": {
              "password": "${SOPHIA_SNOWFLAKE_PASSWORD_DEV}"
            }
          },
          "communication": {
            "slack": {
              "token": "${SOPHIA_SLACK_TOKEN_DEV}",
              "bot_token": "${SOPHIA_SLACK_BOT_TOKEN_DEV}",
              "client_secret": "${SOPHIA_SLACK_CLIENT_SECRET_DEV}"
            }
          }
        }
      },
      "imports": [
        "scoobyjava-org/default/common"
      ]
    }
  ],
  "migration_scripts": {
    "phase1_critical.sh": "#!/bin/bash\n# Phase 1: Critical Production Secrets\nset -e\n\necho '\ud83d\udd10 Starting secret migration...'\n\n# Migrate GONG_ACCESS_KEY -> SOPHIA_GONG_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'GONG_ACCESS_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_ACCESS_KEY\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_ACCESS_KEY -> SOPHIA_GONG_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  GONG_ACCESS_KEY not found'\nfi\n\n# Migrate GONG_ACCESS_KEY_SECRET -> SOPHIA_GONG_CLIENT_SECRET_PROD\nif gh secret list --org ai-cherry | grep -q 'GONG_ACCESS_KEY_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_ACCESS_KEY_SECRET\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_ACCESS_KEY_SECRET -> SOPHIA_GONG_CLIENT_SECRET_PROD'\nelse\n  echo '\u26a0\ufe0f  GONG_ACCESS_KEY_SECRET not found'\nfi\n\n# Migrate GONG_API_KEY -> SOPHIA_GONG_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'GONG_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_API_KEY\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_API_KEY -> SOPHIA_GONG_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  GONG_API_KEY not found'\nfi\n\n# Migrate GONG_API_SECRET -> SOPHIA_GONG_CLIENT_SECRET_PROD\nif gh secret list --org ai-cherry | grep -q 'GONG_API_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_API_SECRET\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_API_SECRET -> SOPHIA_GONG_CLIENT_SECRET_PROD'\nelse\n  echo '\u26a0\ufe0f  GONG_API_SECRET not found'\nfi\n\n# Migrate GONG_BASE_URL -> SOPHIA_GONG_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'GONG_BASE_URL'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_BASE_URL\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_BASE_URL -> SOPHIA_GONG_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  GONG_BASE_URL not found'\nfi\n\n# Migrate GONG_CLIENT_ID -> SOPHIA_GONG_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'GONG_CLIENT_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_CLIENT_ID\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_CLIENT_ID -> SOPHIA_GONG_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  GONG_CLIENT_ID not found'\nfi\n\n# Migrate GONG_CLIENT_SECRET -> SOPHIA_GONG_CLIENT_SECRET_PROD\nif gh secret list --org ai-cherry | grep -q 'GONG_CLIENT_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_CLIENT_SECRET\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_CLIENT_SECRET -> SOPHIA_GONG_CLIENT_SECRET_PROD'\nelse\n  echo '\u26a0\ufe0f  GONG_CLIENT_SECRET not found'\nfi\n\n# Migrate LLAMAINDEX_OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'LLAMAINDEX_OPENAI_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LLAMAINDEX_OPENAI_API_KEY\") | .value')\n  gh secret set SOPHIA_OPENAI_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LLAMAINDEX_OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  LLAMAINDEX_OPENAI_API_KEY not found'\nfi\n\n# Migrate OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'OPENAI_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"OPENAI_API_KEY\") | .value')\n  gh secret set SOPHIA_OPENAI_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  OPENAI_API_KEY not found'\nfi\n\n# Migrate PULUMI_ACCESS_TOKEN -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_ACCESS_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_ACCESS_TOKEN\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_ACCESS_TOKEN -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_ACCESS_TOKEN not found'\nfi\n\n# Migrate PULUMI_BACKEND_URL_DEV -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_BACKEND_URL_DEV'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_BACKEND_URL_DEV\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_BACKEND_URL_DEV -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_BACKEND_URL_DEV not found'\nfi\n\n# Migrate PULUMI_BACKEND_URL_PROD -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_BACKEND_URL_PROD'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_BACKEND_URL_PROD\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_BACKEND_URL_PROD -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_BACKEND_URL_PROD not found'\nfi\n\n# Migrate PULUMI_BACKEND_URL_STAGING -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_BACKEND_URL_STAGING'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_BACKEND_URL_STAGING\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_BACKEND_URL_STAGING -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_BACKEND_URL_STAGING not found'\nfi\n\n# Migrate PULUMI_CONFIG_PASSPHRASE -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_CONFIG_PASSPHRASE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_CONFIG_PASSPHRASE\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_CONFIG_PASSPHRASE -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_CONFIG_PASSPHRASE not found'\nfi\n\n# Migrate PULUMI_IP_ADDRESS -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_IP_ADDRESS'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_IP_ADDRESS\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_IP_ADDRESS -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_IP_ADDRESS not found'\nfi\n\n# Migrate PULUMI_ORG -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_ORG'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_ORG\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_ORG -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_ORG not found'\nfi\n\n# Migrate PULUMI_STACK -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_STACK'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_STACK\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_STACK -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_STACK not found'\nfi\n\n# Migrate SNOWFLAKE_ACCOUNT -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_ACCOUNT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_ACCOUNT\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_ACCOUNT -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_ACCOUNT not found'\nfi\n\n# Migrate SNOWFLAKE_DATABASE -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_DATABASE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_DATABASE\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_DATABASE -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_DATABASE not found'\nfi\n\n# Migrate SNOWFLAKE_PASSWORD -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_PASSWORD'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_PASSWORD\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_PASSWORD -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_PASSWORD not found'\nfi\n\n# Migrate SNOWFLAKE_PAT -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_PAT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_PAT\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_PAT -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_PAT not found'\nfi\n\n# Migrate SNOWFLAKE_ROLE -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_ROLE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_ROLE\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_ROLE -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_ROLE not found'\nfi\n\n# Migrate SNOWFLAKE_SCHEMA -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_SCHEMA'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_SCHEMA\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_SCHEMA -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_SCHEMA not found'\nfi\n\n# Migrate SNOWFLAKE_USER -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_USER'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_USER\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_USER -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_USER not found'\nfi\n\n# Migrate SNOWFLAKE_WAREHOUSE -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_WAREHOUSE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_WAREHOUSE\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_WAREHOUSE -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_WAREHOUSE not found'\nfi\n\n# Migrate VERCEL_ACCESS_TOKEN -> SOPHIA_VERCEL_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'VERCEL_ACCESS_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_ACCESS_TOKEN\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_ACCESS_TOKEN -> SOPHIA_VERCEL_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  VERCEL_ACCESS_TOKEN not found'\nfi\n\n# Migrate VERCEL_API_TOKEN -> SOPHIA_VERCEL_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'VERCEL_API_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_API_TOKEN\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_API_TOKEN -> SOPHIA_VERCEL_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  VERCEL_API_TOKEN not found'\nfi\n\n# Migrate VERCEL_ORG_ID -> SOPHIA_VERCEL_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'VERCEL_ORG_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_ORG_ID\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_ORG_ID -> SOPHIA_VERCEL_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  VERCEL_ORG_ID not found'\nfi\n\n# Migrate VERCEL_PROJECT_ID -> SOPHIA_VERCEL_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'VERCEL_PROJECT_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_PROJECT_ID\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_PROJECT_ID -> SOPHIA_VERCEL_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  VERCEL_PROJECT_ID not found'\nfi\n\n# Migrate VERCEL_PROJECT_ID_SOPHIA_PROD -> SOPHIA_VERCEL_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'VERCEL_PROJECT_ID_SOPHIA_PROD'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_PROJECT_ID_SOPHIA_PROD\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_PROJECT_ID_SOPHIA_PROD -> SOPHIA_VERCEL_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  VERCEL_PROJECT_ID_SOPHIA_PROD not found'\nfi\n\n# Migrate VERCEL_TEAM_ID -> SOPHIA_VERCEL_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'VERCEL_TEAM_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_TEAM_ID\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_TEAM_ID -> SOPHIA_VERCEL_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  VERCEL_TEAM_ID not found'\nfi\n\n# Migrate VERCEL_TOKEN -> SOPHIA_VERCEL_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'VERCEL_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_TOKEN\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_TOKEN -> SOPHIA_VERCEL_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  VERCEL_TOKEN not found'\nfi\n\n# Migrate gong_access_key -> SOPHIA_GONG_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'gong_access_key'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"gong_access_key\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated gong_access_key -> SOPHIA_GONG_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  gong_access_key not found'\nfi\n\n# Migrate gong_access_key_secret -> SOPHIA_GONG_CLIENT_SECRET_PROD\nif gh secret list --org ai-cherry | grep -q 'gong_access_key_secret'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"gong_access_key_secret\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated gong_access_key_secret -> SOPHIA_GONG_CLIENT_SECRET_PROD'\nelse\n  echo '\u26a0\ufe0f  gong_access_key_secret not found'\nfi\n\n# Migrate openai_api_key -> SOPHIA_OPENAI_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'openai_api_key'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"openai_api_key\") | .value')\n  gh secret set SOPHIA_OPENAI_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated openai_api_key -> SOPHIA_OPENAI_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  openai_api_key not found'\nfi\n\n# Migrate snowflake_account -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'snowflake_account'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_account\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_account -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  snowflake_account not found'\nfi\n\n# Migrate snowflake_database -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'snowflake_database'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_database\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_database -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  snowflake_database not found'\nfi\n\n# Migrate snowflake_password -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'snowflake_password'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_password\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_password -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  snowflake_password not found'\nfi\n\n# Migrate snowflake_role -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'snowflake_role'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_role\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_role -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  snowflake_role not found'\nfi\n\n# Migrate snowflake_schema -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'snowflake_schema'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_schema\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_schema -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  snowflake_schema not found'\nfi\n\n# Migrate snowflake_user -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'snowflake_user'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_user\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_user -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  snowflake_user not found'\nfi\n\n# Migrate snowflake_warehouse -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'snowflake_warehouse'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_warehouse\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_warehouse -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  snowflake_warehouse not found'\nfi\n\n# Update Pulumi ESC environments\necho '\ud83d\udcdd Updating Pulumi ESC configurations...'\n# Update scoobyjava-org/sophia-ai-prod\npulumi env init scoobyjava-org/sophia-ai-prod --yes || true\necho '{\"sophia\": {\"platform\": {\"name\": \"sophia-ai-platform\", \"version\": \"v2.0.0\", \"environment\": \"prod\", \"docker\": {\"token\": \"${SOPHIA_DOCKER_TOKEN_PROD}\"}, \"github\": {\"token\": \"${SOPHIA_GITHUB_TOKEN_PROD}\", \"password\": \"${SOPHIA_GITHUB_PASSWORD_PROD}\"}, \"pulumi\": {\"token\": \"${SOPHIA_PULUMI_TOKEN_PROD}\"}}, \"ai\": {\"anthropic\": {\"api_key\": \"${SOPHIA_ANTHROPIC_API_KEY_PROD}\"}, \"openai\": {\"api_key\": \"${SOPHIA_OPENAI_API_KEY_PROD}\"}, \"portkey\": {\"api_key\": \"${SOPHIA_PORTKEY_API_KEY_PROD}\"}}, \"integration\": {\"gong\": {\"api_key\": \"${SOPHIA_GONG_API_KEY_PROD}\", \"client_secret\": \"${SOPHIA_GONG_CLIENT_SECRET_PROD}\"}, \"hubspot\": {\"token\": \"${SOPHIA_HUBSPOT_TOKEN_PROD}\", \"api_key\": \"${SOPHIA_HUBSPOT_API_KEY_PROD}\"}, \"linear\": {\"api_key\": \"${SOPHIA_LINEAR_API_KEY_PROD}\"}}, \"infrastructure\": {\"lambda\": {\"api_key\": \"${SOPHIA_LAMBDA_API_KEY_PROD}\", \"token\": \"${SOPHIA_LAMBDA_TOKEN_PROD}\"}, \"namecheap\": {\"api_key\": \"${SOPHIA_NAMECHEAP_API_KEY_PROD}\", \"token\": \"${SOPHIA_NAMECHEAP_TOKEN_PROD}\"}, \"vercel\": {\"token\": \"${SOPHIA_VERCEL_TOKEN_PROD}\"}}, \"data\": {\"pinecone\": {\"api_key\": \"${SOPHIA_PINECONE_API_KEY_PROD}\", \"password\": \"${SOPHIA_PINECONE_PASSWORD_PROD}\"}, \"weaviate\": {\"api_key\": \"${SOPHIA_WEAVIATE_API_KEY_PROD}\", \"password\": \"${SOPHIA_WEAVIATE_PASSWORD_PROD}\"}, \"snowflake\": {\"password\": \"${SOPHIA_SNOWFLAKE_PASSWORD_PROD}\"}}, \"communication\": {\"slack\": {\"token\": \"${SOPHIA_SLACK_TOKEN_PROD}\", \"bot_token\": \"${SOPHIA_SLACK_BOT_TOKEN_PROD}\", \"client_secret\": \"${SOPHIA_SLACK_CLIENT_SECRET_PROD}\"}}}}' | pulumi env set scoobyjava-org/sophia-ai-prod --\necho '\u2705 Updated scoobyjava-org/sophia-ai-prod'\n\necho '\ud83c\udf89 Migration completed successfully!'",
    "phase2_production.sh": "#!/bin/bash\n# Phase 2: All Production Secrets\nset -e\n\necho '\ud83d\udd10 Starting secret migration...'\n\n# Migrate ANTHROPIC_API_KEY -> SOPHIA_ANTHROPIC_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'ANTHROPIC_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"ANTHROPIC_API_KEY\") | .value')\n  gh secret set SOPHIA_ANTHROPIC_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated ANTHROPIC_API_KEY -> SOPHIA_ANTHROPIC_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  ANTHROPIC_API_KEY not found'\nfi\n\n# Migrate DOCKER_TOKEN -> SOPHIA_DOCKER_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'DOCKER_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"DOCKER_TOKEN\") | .value')\n  gh secret set SOPHIA_DOCKER_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated DOCKER_TOKEN -> SOPHIA_DOCKER_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  DOCKER_TOKEN not found'\nfi\n\n# Migrate DOCKER_USERNAME -> SOPHIA_DOCKER_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'DOCKER_USERNAME'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"DOCKER_USERNAME\") | .value')\n  gh secret set SOPHIA_DOCKER_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated DOCKER_USERNAME -> SOPHIA_DOCKER_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  DOCKER_USERNAME not found'\nfi\n\n# Migrate GITHUB_ACTOR -> SOPHIA_GITHUB_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'GITHUB_ACTOR'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_ACTOR\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_ACTOR -> SOPHIA_GITHUB_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  GITHUB_ACTOR not found'\nfi\n\n# Migrate GITHUB_JOB -> SOPHIA_GITHUB_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'GITHUB_JOB'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_JOB\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_JOB -> SOPHIA_GITHUB_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  GITHUB_JOB not found'\nfi\n\n# Migrate GITHUB_PAT -> SOPHIA_GITHUB_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'GITHUB_PAT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_PAT\") | .value')\n  gh secret set SOPHIA_GITHUB_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_PAT -> SOPHIA_GITHUB_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  GITHUB_PAT not found'\nfi\n\n# Migrate GITHUB_REF -> SOPHIA_GITHUB_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'GITHUB_REF'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_REF\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_REF -> SOPHIA_GITHUB_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  GITHUB_REF not found'\nfi\n\n# Migrate GITHUB_SHA -> SOPHIA_GITHUB_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'GITHUB_SHA'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_SHA\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_SHA -> SOPHIA_GITHUB_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  GITHUB_SHA not found'\nfi\n\n# Migrate GITHUB_TOKEN -> SOPHIA_GITHUB_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'GITHUB_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_TOKEN\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_TOKEN -> SOPHIA_GITHUB_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  GITHUB_TOKEN not found'\nfi\n\n# Migrate GITHUB_WORKFLOW -> SOPHIA_GITHUB_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'GITHUB_WORKFLOW'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_WORKFLOW\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_WORKFLOW -> SOPHIA_GITHUB_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  GITHUB_WORKFLOW not found'\nfi\n\n# Migrate GONG_ACCESS_KEY -> SOPHIA_GONG_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'GONG_ACCESS_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_ACCESS_KEY\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_ACCESS_KEY -> SOPHIA_GONG_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  GONG_ACCESS_KEY not found'\nfi\n\n# Migrate GONG_ACCESS_KEY_SECRET -> SOPHIA_GONG_CLIENT_SECRET_PROD\nif gh secret list --org ai-cherry | grep -q 'GONG_ACCESS_KEY_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_ACCESS_KEY_SECRET\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_ACCESS_KEY_SECRET -> SOPHIA_GONG_CLIENT_SECRET_PROD'\nelse\n  echo '\u26a0\ufe0f  GONG_ACCESS_KEY_SECRET not found'\nfi\n\n# Migrate GONG_API_KEY -> SOPHIA_GONG_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'GONG_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_API_KEY\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_API_KEY -> SOPHIA_GONG_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  GONG_API_KEY not found'\nfi\n\n# Migrate GONG_API_SECRET -> SOPHIA_GONG_CLIENT_SECRET_PROD\nif gh secret list --org ai-cherry | grep -q 'GONG_API_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_API_SECRET\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_API_SECRET -> SOPHIA_GONG_CLIENT_SECRET_PROD'\nelse\n  echo '\u26a0\ufe0f  GONG_API_SECRET not found'\nfi\n\n# Migrate GONG_BASE_URL -> SOPHIA_GONG_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'GONG_BASE_URL'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_BASE_URL\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_BASE_URL -> SOPHIA_GONG_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  GONG_BASE_URL not found'\nfi\n\n# Migrate GONG_CLIENT_ID -> SOPHIA_GONG_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'GONG_CLIENT_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_CLIENT_ID\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_CLIENT_ID -> SOPHIA_GONG_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  GONG_CLIENT_ID not found'\nfi\n\n# Migrate GONG_CLIENT_SECRET -> SOPHIA_GONG_CLIENT_SECRET_PROD\nif gh secret list --org ai-cherry | grep -q 'GONG_CLIENT_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_CLIENT_SECRET\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_CLIENT_SECRET -> SOPHIA_GONG_CLIENT_SECRET_PROD'\nelse\n  echo '\u26a0\ufe0f  GONG_CLIENT_SECRET not found'\nfi\n\n# Migrate HUBSPOT_ACCESS_TOKEN -> SOPHIA_HUBSPOT_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'HUBSPOT_ACCESS_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"HUBSPOT_ACCESS_TOKEN\") | .value')\n  gh secret set SOPHIA_HUBSPOT_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated HUBSPOT_ACCESS_TOKEN -> SOPHIA_HUBSPOT_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  HUBSPOT_ACCESS_TOKEN not found'\nfi\n\n# Migrate HUBSPOT_API_KEY -> SOPHIA_HUBSPOT_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'HUBSPOT_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"HUBSPOT_API_KEY\") | .value')\n  gh secret set SOPHIA_HUBSPOT_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated HUBSPOT_API_KEY -> SOPHIA_HUBSPOT_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  HUBSPOT_API_KEY not found'\nfi\n\n# Migrate HUBSPOT_API_TOKEN -> SOPHIA_HUBSPOT_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'HUBSPOT_API_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"HUBSPOT_API_TOKEN\") | .value')\n  gh secret set SOPHIA_HUBSPOT_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated HUBSPOT_API_TOKEN -> SOPHIA_HUBSPOT_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  HUBSPOT_API_TOKEN not found'\nfi\n\n# Migrate LAMBDA_API_KEY -> SOPHIA_LAMBDA_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'LAMBDA_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LAMBDA_API_KEY\") | .value')\n  gh secret set SOPHIA_LAMBDA_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LAMBDA_API_KEY -> SOPHIA_LAMBDA_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  LAMBDA_API_KEY not found'\nfi\n\n# Migrate LAMBDA_IP_ADDRESS -> SOPHIA_LAMBDA_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'LAMBDA_IP_ADDRESS'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LAMBDA_IP_ADDRESS\") | .value')\n  gh secret set SOPHIA_LAMBDA_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LAMBDA_IP_ADDRESS -> SOPHIA_LAMBDA_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  LAMBDA_IP_ADDRESS not found'\nfi\n\n# Migrate LAMBDA_LABS_API_KEY -> SOPHIA_LAMBDA_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'LAMBDA_LABS_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LAMBDA_LABS_API_KEY\") | .value')\n  gh secret set SOPHIA_LAMBDA_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LAMBDA_LABS_API_KEY -> SOPHIA_LAMBDA_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  LAMBDA_LABS_API_KEY not found'\nfi\n\n# Migrate LINEAR_API_KEY -> SOPHIA_LINEAR_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'LINEAR_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LINEAR_API_KEY\") | .value')\n  gh secret set SOPHIA_LINEAR_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LINEAR_API_KEY -> SOPHIA_LINEAR_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  LINEAR_API_KEY not found'\nfi\n\n# Migrate LLAMAINDEX_OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'LLAMAINDEX_OPENAI_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LLAMAINDEX_OPENAI_API_KEY\") | .value')\n  gh secret set SOPHIA_OPENAI_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LLAMAINDEX_OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  LLAMAINDEX_OPENAI_API_KEY not found'\nfi\n\n# Migrate LLAMAINDEX_PINECONE_API_KEY -> SOPHIA_PINECONE_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'LLAMAINDEX_PINECONE_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LLAMAINDEX_PINECONE_API_KEY\") | .value')\n  gh secret set SOPHIA_PINECONE_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LLAMAINDEX_PINECONE_API_KEY -> SOPHIA_PINECONE_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  LLAMAINDEX_PINECONE_API_KEY not found'\nfi\n\n# Migrate LLAMAINDEX_WEAVIATE_API_KEY -> SOPHIA_WEAVIATE_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'LLAMAINDEX_WEAVIATE_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LLAMAINDEX_WEAVIATE_API_KEY\") | .value')\n  gh secret set SOPHIA_WEAVIATE_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LLAMAINDEX_WEAVIATE_API_KEY -> SOPHIA_WEAVIATE_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  LLAMAINDEX_WEAVIATE_API_KEY not found'\nfi\n\n# Migrate NAMECHEAP_API_KEY -> SOPHIA_NAMECHEAP_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'NAMECHEAP_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"NAMECHEAP_API_KEY\") | .value')\n  gh secret set SOPHIA_NAMECHEAP_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated NAMECHEAP_API_KEY -> SOPHIA_NAMECHEAP_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  NAMECHEAP_API_KEY not found'\nfi\n\n# Migrate NAMECHEAP_API_USER -> SOPHIA_NAMECHEAP_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'NAMECHEAP_API_USER'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"NAMECHEAP_API_USER\") | .value')\n  gh secret set SOPHIA_NAMECHEAP_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated NAMECHEAP_API_USER -> SOPHIA_NAMECHEAP_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  NAMECHEAP_API_USER not found'\nfi\n\n# Migrate NAMECHEAP_USERNAME -> SOPHIA_NAMECHEAP_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'NAMECHEAP_USERNAME'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"NAMECHEAP_USERNAME\") | .value')\n  gh secret set SOPHIA_NAMECHEAP_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated NAMECHEAP_USERNAME -> SOPHIA_NAMECHEAP_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  NAMECHEAP_USERNAME not found'\nfi\n\n# Migrate OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'OPENAI_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"OPENAI_API_KEY\") | .value')\n  gh secret set SOPHIA_OPENAI_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  OPENAI_API_KEY not found'\nfi\n\n# Migrate PINECONE_API_KEY -> SOPHIA_PINECONE_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'PINECONE_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PINECONE_API_KEY\") | .value')\n  gh secret set SOPHIA_PINECONE_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PINECONE_API_KEY -> SOPHIA_PINECONE_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  PINECONE_API_KEY not found'\nfi\n\n# Migrate PINECONE_ENVIRONMENT -> SOPHIA_PINECONE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'PINECONE_ENVIRONMENT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PINECONE_ENVIRONMENT\") | .value')\n  gh secret set SOPHIA_PINECONE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PINECONE_ENVIRONMENT -> SOPHIA_PINECONE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  PINECONE_ENVIRONMENT not found'\nfi\n\n# Migrate PINECONE_INDEX_NAME -> SOPHIA_PINECONE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'PINECONE_INDEX_NAME'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PINECONE_INDEX_NAME\") | .value')\n  gh secret set SOPHIA_PINECONE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PINECONE_INDEX_NAME -> SOPHIA_PINECONE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  PINECONE_INDEX_NAME not found'\nfi\n\n# Migrate PORTKEY_API_KEY -> SOPHIA_PORTKEY_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'PORTKEY_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PORTKEY_API_KEY\") | .value')\n  gh secret set SOPHIA_PORTKEY_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PORTKEY_API_KEY -> SOPHIA_PORTKEY_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  PORTKEY_API_KEY not found'\nfi\n\n# Migrate PULUMI_ACCESS_TOKEN -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_ACCESS_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_ACCESS_TOKEN\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_ACCESS_TOKEN -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_ACCESS_TOKEN not found'\nfi\n\n# Migrate PULUMI_BACKEND_URL_DEV -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_BACKEND_URL_DEV'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_BACKEND_URL_DEV\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_BACKEND_URL_DEV -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_BACKEND_URL_DEV not found'\nfi\n\n# Migrate PULUMI_BACKEND_URL_PROD -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_BACKEND_URL_PROD'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_BACKEND_URL_PROD\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_BACKEND_URL_PROD -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_BACKEND_URL_PROD not found'\nfi\n\n# Migrate PULUMI_BACKEND_URL_STAGING -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_BACKEND_URL_STAGING'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_BACKEND_URL_STAGING\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_BACKEND_URL_STAGING -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_BACKEND_URL_STAGING not found'\nfi\n\n# Migrate PULUMI_CONFIG_PASSPHRASE -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_CONFIG_PASSPHRASE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_CONFIG_PASSPHRASE\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_CONFIG_PASSPHRASE -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_CONFIG_PASSPHRASE not found'\nfi\n\n# Migrate PULUMI_IP_ADDRESS -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_IP_ADDRESS'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_IP_ADDRESS\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_IP_ADDRESS -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_IP_ADDRESS not found'\nfi\n\n# Migrate PULUMI_ORG -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_ORG'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_ORG\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_ORG -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_ORG not found'\nfi\n\n# Migrate PULUMI_STACK -> SOPHIA_PULUMI_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'PULUMI_STACK'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_STACK\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_STACK -> SOPHIA_PULUMI_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  PULUMI_STACK not found'\nfi\n\n# Migrate SLACK_APP_TOKEN -> SOPHIA_SLACK_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'SLACK_APP_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_APP_TOKEN\") | .value')\n  gh secret set SOPHIA_SLACK_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_APP_TOKEN -> SOPHIA_SLACK_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  SLACK_APP_TOKEN not found'\nfi\n\n# Migrate SLACK_BOT_TOKEN -> SOPHIA_SLACK_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'SLACK_BOT_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_BOT_TOKEN\") | .value')\n  gh secret set SOPHIA_SLACK_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_BOT_TOKEN -> SOPHIA_SLACK_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  SLACK_BOT_TOKEN not found'\nfi\n\n# Migrate SLACK_CLIENT_ID -> SOPHIA_SLACK_BOT_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'SLACK_CLIENT_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_CLIENT_ID\") | .value')\n  gh secret set SOPHIA_SLACK_BOT_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_CLIENT_ID -> SOPHIA_SLACK_BOT_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  SLACK_CLIENT_ID not found'\nfi\n\n# Migrate SLACK_CLIENT_SECRET -> SOPHIA_SLACK_CLIENT_SECRET_PROD\nif gh secret list --org ai-cherry | grep -q 'SLACK_CLIENT_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_CLIENT_SECRET\") | .value')\n  gh secret set SOPHIA_SLACK_CLIENT_SECRET_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_CLIENT_SECRET -> SOPHIA_SLACK_CLIENT_SECRET_PROD'\nelse\n  echo '\u26a0\ufe0f  SLACK_CLIENT_SECRET not found'\nfi\n\n# Migrate SLACK_SIGNING_SECRET -> SOPHIA_SLACK_CLIENT_SECRET_PROD\nif gh secret list --org ai-cherry | grep -q 'SLACK_SIGNING_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_SIGNING_SECRET\") | .value')\n  gh secret set SOPHIA_SLACK_CLIENT_SECRET_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_SIGNING_SECRET -> SOPHIA_SLACK_CLIENT_SECRET_PROD'\nelse\n  echo '\u26a0\ufe0f  SLACK_SIGNING_SECRET not found'\nfi\n\n# Migrate SLACK_WEBHOOK -> SOPHIA_SLACK_BOT_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'SLACK_WEBHOOK'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_WEBHOOK\") | .value')\n  gh secret set SOPHIA_SLACK_BOT_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_WEBHOOK -> SOPHIA_SLACK_BOT_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  SLACK_WEBHOOK not found'\nfi\n\n# Migrate SLACK_WEBHOOK_URL -> SOPHIA_SLACK_BOT_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'SLACK_WEBHOOK_URL'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_WEBHOOK_URL\") | .value')\n  gh secret set SOPHIA_SLACK_BOT_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_WEBHOOK_URL -> SOPHIA_SLACK_BOT_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  SLACK_WEBHOOK_URL not found'\nfi\n\n# Migrate SNOWFLAKE_ACCOUNT -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_ACCOUNT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_ACCOUNT\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_ACCOUNT -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_ACCOUNT not found'\nfi\n\n# Migrate SNOWFLAKE_DATABASE -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_DATABASE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_DATABASE\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_DATABASE -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_DATABASE not found'\nfi\n\n# Migrate SNOWFLAKE_PASSWORD -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_PASSWORD'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_PASSWORD\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_PASSWORD -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_PASSWORD not found'\nfi\n\n# Migrate SNOWFLAKE_PAT -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_PAT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_PAT\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_PAT -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_PAT not found'\nfi\n\n# Migrate SNOWFLAKE_ROLE -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_ROLE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_ROLE\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_ROLE -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_ROLE not found'\nfi\n\n# Migrate SNOWFLAKE_SCHEMA -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_SCHEMA'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_SCHEMA\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_SCHEMA -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_SCHEMA not found'\nfi\n\n# Migrate SNOWFLAKE_USER -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_USER'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_USER\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_USER -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_USER not found'\nfi\n\n# Migrate SNOWFLAKE_WAREHOUSE -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_WAREHOUSE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_WAREHOUSE\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_WAREHOUSE -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_WAREHOUSE not found'\nfi\n\n# Migrate VERCEL_ACCESS_TOKEN -> SOPHIA_VERCEL_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'VERCEL_ACCESS_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_ACCESS_TOKEN\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_ACCESS_TOKEN -> SOPHIA_VERCEL_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  VERCEL_ACCESS_TOKEN not found'\nfi\n\n# Migrate VERCEL_API_TOKEN -> SOPHIA_VERCEL_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'VERCEL_API_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_API_TOKEN\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_API_TOKEN -> SOPHIA_VERCEL_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  VERCEL_API_TOKEN not found'\nfi\n\n# Migrate VERCEL_ORG_ID -> SOPHIA_VERCEL_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'VERCEL_ORG_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_ORG_ID\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_ORG_ID -> SOPHIA_VERCEL_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  VERCEL_ORG_ID not found'\nfi\n\n# Migrate VERCEL_PROJECT_ID -> SOPHIA_VERCEL_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'VERCEL_PROJECT_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_PROJECT_ID\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_PROJECT_ID -> SOPHIA_VERCEL_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  VERCEL_PROJECT_ID not found'\nfi\n\n# Migrate VERCEL_PROJECT_ID_SOPHIA_PROD -> SOPHIA_VERCEL_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'VERCEL_PROJECT_ID_SOPHIA_PROD'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_PROJECT_ID_SOPHIA_PROD\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_PROJECT_ID_SOPHIA_PROD -> SOPHIA_VERCEL_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  VERCEL_PROJECT_ID_SOPHIA_PROD not found'\nfi\n\n# Migrate VERCEL_TEAM_ID -> SOPHIA_VERCEL_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'VERCEL_TEAM_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_TEAM_ID\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_TEAM_ID -> SOPHIA_VERCEL_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  VERCEL_TEAM_ID not found'\nfi\n\n# Migrate VERCEL_TOKEN -> SOPHIA_VERCEL_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'VERCEL_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_TOKEN\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_TOKEN -> SOPHIA_VERCEL_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  VERCEL_TOKEN not found'\nfi\n\n# Migrate WEAVIATE_API_KEY -> SOPHIA_WEAVIATE_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'WEAVIATE_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"WEAVIATE_API_KEY\") | .value')\n  gh secret set SOPHIA_WEAVIATE_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated WEAVIATE_API_KEY -> SOPHIA_WEAVIATE_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  WEAVIATE_API_KEY not found'\nfi\n\n# Migrate WEAVIATE_GRPC_ENDPOINT -> SOPHIA_WEAVIATE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'WEAVIATE_GRPC_ENDPOINT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"WEAVIATE_GRPC_ENDPOINT\") | .value')\n  gh secret set SOPHIA_WEAVIATE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated WEAVIATE_GRPC_ENDPOINT -> SOPHIA_WEAVIATE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  WEAVIATE_GRPC_ENDPOINT not found'\nfi\n\n# Migrate WEAVIATE_REST_ENDPOINT -> SOPHIA_WEAVIATE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'WEAVIATE_REST_ENDPOINT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"WEAVIATE_REST_ENDPOINT\") | .value')\n  gh secret set SOPHIA_WEAVIATE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated WEAVIATE_REST_ENDPOINT -> SOPHIA_WEAVIATE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  WEAVIATE_REST_ENDPOINT not found'\nfi\n\n# Migrate WEAVIATE_URL -> SOPHIA_WEAVIATE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'WEAVIATE_URL'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"WEAVIATE_URL\") | .value')\n  gh secret set SOPHIA_WEAVIATE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated WEAVIATE_URL -> SOPHIA_WEAVIATE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  WEAVIATE_URL not found'\nfi\n\n# Migrate gong_access_key -> SOPHIA_GONG_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'gong_access_key'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"gong_access_key\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated gong_access_key -> SOPHIA_GONG_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  gong_access_key not found'\nfi\n\n# Migrate gong_access_key_secret -> SOPHIA_GONG_CLIENT_SECRET_PROD\nif gh secret list --org ai-cherry | grep -q 'gong_access_key_secret'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"gong_access_key_secret\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated gong_access_key_secret -> SOPHIA_GONG_CLIENT_SECRET_PROD'\nelse\n  echo '\u26a0\ufe0f  gong_access_key_secret not found'\nfi\n\n# Migrate openai_api_key -> SOPHIA_OPENAI_API_KEY_PROD\nif gh secret list --org ai-cherry | grep -q 'openai_api_key'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"openai_api_key\") | .value')\n  gh secret set SOPHIA_OPENAI_API_KEY_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated openai_api_key -> SOPHIA_OPENAI_API_KEY_PROD'\nelse\n  echo '\u26a0\ufe0f  openai_api_key not found'\nfi\n\n# Migrate slack_webhook_url -> SOPHIA_SLACK_BOT_TOKEN_PROD\nif gh secret list --org ai-cherry | grep -q 'slack_webhook_url'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"slack_webhook_url\") | .value')\n  gh secret set SOPHIA_SLACK_BOT_TOKEN_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated slack_webhook_url -> SOPHIA_SLACK_BOT_TOKEN_PROD'\nelse\n  echo '\u26a0\ufe0f  slack_webhook_url not found'\nfi\n\n# Migrate snowflake_account -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'snowflake_account'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_account\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_account -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  snowflake_account not found'\nfi\n\n# Migrate snowflake_database -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'snowflake_database'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_database\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_database -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  snowflake_database not found'\nfi\n\n# Migrate snowflake_password -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'snowflake_password'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_password\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_password -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  snowflake_password not found'\nfi\n\n# Migrate snowflake_role -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'snowflake_role'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_role\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_role -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  snowflake_role not found'\nfi\n\n# Migrate snowflake_schema -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'snowflake_schema'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_schema\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_schema -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  snowflake_schema not found'\nfi\n\n# Migrate snowflake_user -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'snowflake_user'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_user\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_user -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  snowflake_user not found'\nfi\n\n# Migrate snowflake_warehouse -> SOPHIA_SNOWFLAKE_PASSWORD_PROD\nif gh secret list --org ai-cherry | grep -q 'snowflake_warehouse'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_warehouse\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_PROD --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_warehouse -> SOPHIA_SNOWFLAKE_PASSWORD_PROD'\nelse\n  echo '\u26a0\ufe0f  snowflake_warehouse not found'\nfi\n\n# Update Pulumi ESC environments\necho '\ud83d\udcdd Updating Pulumi ESC configurations...'\n# Update scoobyjava-org/sophia-ai-prod\npulumi env init scoobyjava-org/sophia-ai-prod --yes || true\necho '{\"sophia\": {\"platform\": {\"name\": \"sophia-ai-platform\", \"version\": \"v2.0.0\", \"environment\": \"prod\", \"docker\": {\"token\": \"${SOPHIA_DOCKER_TOKEN_PROD}\"}, \"github\": {\"token\": \"${SOPHIA_GITHUB_TOKEN_PROD}\", \"password\": \"${SOPHIA_GITHUB_PASSWORD_PROD}\"}, \"pulumi\": {\"token\": \"${SOPHIA_PULUMI_TOKEN_PROD}\"}}, \"ai\": {\"anthropic\": {\"api_key\": \"${SOPHIA_ANTHROPIC_API_KEY_PROD}\"}, \"openai\": {\"api_key\": \"${SOPHIA_OPENAI_API_KEY_PROD}\"}, \"portkey\": {\"api_key\": \"${SOPHIA_PORTKEY_API_KEY_PROD}\"}}, \"integration\": {\"gong\": {\"api_key\": \"${SOPHIA_GONG_API_KEY_PROD}\", \"client_secret\": \"${SOPHIA_GONG_CLIENT_SECRET_PROD}\"}, \"hubspot\": {\"token\": \"${SOPHIA_HUBSPOT_TOKEN_PROD}\", \"api_key\": \"${SOPHIA_HUBSPOT_API_KEY_PROD}\"}, \"linear\": {\"api_key\": \"${SOPHIA_LINEAR_API_KEY_PROD}\"}}, \"infrastructure\": {\"lambda\": {\"api_key\": \"${SOPHIA_LAMBDA_API_KEY_PROD}\", \"token\": \"${SOPHIA_LAMBDA_TOKEN_PROD}\"}, \"namecheap\": {\"api_key\": \"${SOPHIA_NAMECHEAP_API_KEY_PROD}\", \"token\": \"${SOPHIA_NAMECHEAP_TOKEN_PROD}\"}, \"vercel\": {\"token\": \"${SOPHIA_VERCEL_TOKEN_PROD}\"}}, \"data\": {\"pinecone\": {\"api_key\": \"${SOPHIA_PINECONE_API_KEY_PROD}\", \"password\": \"${SOPHIA_PINECONE_PASSWORD_PROD}\"}, \"weaviate\": {\"api_key\": \"${SOPHIA_WEAVIATE_API_KEY_PROD}\", \"password\": \"${SOPHIA_WEAVIATE_PASSWORD_PROD}\"}, \"snowflake\": {\"password\": \"${SOPHIA_SNOWFLAKE_PASSWORD_PROD}\"}}, \"communication\": {\"slack\": {\"token\": \"${SOPHIA_SLACK_TOKEN_PROD}\", \"bot_token\": \"${SOPHIA_SLACK_BOT_TOKEN_PROD}\", \"client_secret\": \"${SOPHIA_SLACK_CLIENT_SECRET_PROD}\"}}}}' | pulumi env set scoobyjava-org/sophia-ai-prod --\necho '\u2705 Updated scoobyjava-org/sophia-ai-prod'\n\necho '\ud83c\udf89 Migration completed successfully!'",
    "phase3_environments.sh": "#!/bin/bash\n# Phase 3: Staging and Development Secrets\nset -e\n\necho '\ud83d\udd10 Starting secret migration...'\n\n# Migrate ANTHROPIC_API_KEY -> SOPHIA_ANTHROPIC_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'ANTHROPIC_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"ANTHROPIC_API_KEY\") | .value')\n  gh secret set SOPHIA_ANTHROPIC_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated ANTHROPIC_API_KEY -> SOPHIA_ANTHROPIC_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  ANTHROPIC_API_KEY not found'\nfi\n\n# Migrate ANTHROPIC_API_KEY -> SOPHIA_ANTHROPIC_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'ANTHROPIC_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"ANTHROPIC_API_KEY\") | .value')\n  gh secret set SOPHIA_ANTHROPIC_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated ANTHROPIC_API_KEY -> SOPHIA_ANTHROPIC_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  ANTHROPIC_API_KEY not found'\nfi\n\n# Migrate DOCKER_TOKEN -> SOPHIA_DOCKER_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'DOCKER_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"DOCKER_TOKEN\") | .value')\n  gh secret set SOPHIA_DOCKER_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated DOCKER_TOKEN -> SOPHIA_DOCKER_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  DOCKER_TOKEN not found'\nfi\n\n# Migrate DOCKER_TOKEN -> SOPHIA_DOCKER_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'DOCKER_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"DOCKER_TOKEN\") | .value')\n  gh secret set SOPHIA_DOCKER_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated DOCKER_TOKEN -> SOPHIA_DOCKER_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  DOCKER_TOKEN not found'\nfi\n\n# Migrate DOCKER_USERNAME -> SOPHIA_DOCKER_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'DOCKER_USERNAME'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"DOCKER_USERNAME\") | .value')\n  gh secret set SOPHIA_DOCKER_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated DOCKER_USERNAME -> SOPHIA_DOCKER_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  DOCKER_USERNAME not found'\nfi\n\n# Migrate DOCKER_USERNAME -> SOPHIA_DOCKER_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'DOCKER_USERNAME'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"DOCKER_USERNAME\") | .value')\n  gh secret set SOPHIA_DOCKER_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated DOCKER_USERNAME -> SOPHIA_DOCKER_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  DOCKER_USERNAME not found'\nfi\n\n# Migrate GITHUB_ACTOR -> SOPHIA_GITHUB_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'GITHUB_ACTOR'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_ACTOR\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_ACTOR -> SOPHIA_GITHUB_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  GITHUB_ACTOR not found'\nfi\n\n# Migrate GITHUB_ACTOR -> SOPHIA_GITHUB_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'GITHUB_ACTOR'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_ACTOR\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_ACTOR -> SOPHIA_GITHUB_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  GITHUB_ACTOR not found'\nfi\n\n# Migrate GITHUB_JOB -> SOPHIA_GITHUB_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'GITHUB_JOB'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_JOB\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_JOB -> SOPHIA_GITHUB_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  GITHUB_JOB not found'\nfi\n\n# Migrate GITHUB_JOB -> SOPHIA_GITHUB_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'GITHUB_JOB'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_JOB\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_JOB -> SOPHIA_GITHUB_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  GITHUB_JOB not found'\nfi\n\n# Migrate GITHUB_PAT -> SOPHIA_GITHUB_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'GITHUB_PAT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_PAT\") | .value')\n  gh secret set SOPHIA_GITHUB_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_PAT -> SOPHIA_GITHUB_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  GITHUB_PAT not found'\nfi\n\n# Migrate GITHUB_PAT -> SOPHIA_GITHUB_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'GITHUB_PAT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_PAT\") | .value')\n  gh secret set SOPHIA_GITHUB_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_PAT -> SOPHIA_GITHUB_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  GITHUB_PAT not found'\nfi\n\n# Migrate GITHUB_REF -> SOPHIA_GITHUB_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'GITHUB_REF'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_REF\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_REF -> SOPHIA_GITHUB_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  GITHUB_REF not found'\nfi\n\n# Migrate GITHUB_REF -> SOPHIA_GITHUB_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'GITHUB_REF'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_REF\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_REF -> SOPHIA_GITHUB_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  GITHUB_REF not found'\nfi\n\n# Migrate GITHUB_SHA -> SOPHIA_GITHUB_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'GITHUB_SHA'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_SHA\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_SHA -> SOPHIA_GITHUB_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  GITHUB_SHA not found'\nfi\n\n# Migrate GITHUB_SHA -> SOPHIA_GITHUB_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'GITHUB_SHA'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_SHA\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_SHA -> SOPHIA_GITHUB_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  GITHUB_SHA not found'\nfi\n\n# Migrate GITHUB_TOKEN -> SOPHIA_GITHUB_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'GITHUB_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_TOKEN\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_TOKEN -> SOPHIA_GITHUB_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  GITHUB_TOKEN not found'\nfi\n\n# Migrate GITHUB_TOKEN -> SOPHIA_GITHUB_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'GITHUB_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_TOKEN\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_TOKEN -> SOPHIA_GITHUB_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  GITHUB_TOKEN not found'\nfi\n\n# Migrate GITHUB_WORKFLOW -> SOPHIA_GITHUB_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'GITHUB_WORKFLOW'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_WORKFLOW\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_WORKFLOW -> SOPHIA_GITHUB_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  GITHUB_WORKFLOW not found'\nfi\n\n# Migrate GITHUB_WORKFLOW -> SOPHIA_GITHUB_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'GITHUB_WORKFLOW'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GITHUB_WORKFLOW\") | .value')\n  gh secret set SOPHIA_GITHUB_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GITHUB_WORKFLOW -> SOPHIA_GITHUB_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  GITHUB_WORKFLOW not found'\nfi\n\n# Migrate GONG_ACCESS_KEY -> SOPHIA_GONG_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'GONG_ACCESS_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_ACCESS_KEY\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_ACCESS_KEY -> SOPHIA_GONG_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  GONG_ACCESS_KEY not found'\nfi\n\n# Migrate GONG_ACCESS_KEY -> SOPHIA_GONG_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'GONG_ACCESS_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_ACCESS_KEY\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_ACCESS_KEY -> SOPHIA_GONG_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  GONG_ACCESS_KEY not found'\nfi\n\n# Migrate GONG_ACCESS_KEY_SECRET -> SOPHIA_GONG_CLIENT_SECRET_STG\nif gh secret list --org ai-cherry | grep -q 'GONG_ACCESS_KEY_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_ACCESS_KEY_SECRET\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_ACCESS_KEY_SECRET -> SOPHIA_GONG_CLIENT_SECRET_STG'\nelse\n  echo '\u26a0\ufe0f  GONG_ACCESS_KEY_SECRET not found'\nfi\n\n# Migrate GONG_ACCESS_KEY_SECRET -> SOPHIA_GONG_CLIENT_SECRET_DEV\nif gh secret list --org ai-cherry | grep -q 'GONG_ACCESS_KEY_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_ACCESS_KEY_SECRET\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_ACCESS_KEY_SECRET -> SOPHIA_GONG_CLIENT_SECRET_DEV'\nelse\n  echo '\u26a0\ufe0f  GONG_ACCESS_KEY_SECRET not found'\nfi\n\n# Migrate GONG_API_KEY -> SOPHIA_GONG_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'GONG_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_API_KEY\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_API_KEY -> SOPHIA_GONG_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  GONG_API_KEY not found'\nfi\n\n# Migrate GONG_API_KEY -> SOPHIA_GONG_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'GONG_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_API_KEY\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_API_KEY -> SOPHIA_GONG_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  GONG_API_KEY not found'\nfi\n\n# Migrate GONG_API_SECRET -> SOPHIA_GONG_CLIENT_SECRET_STG\nif gh secret list --org ai-cherry | grep -q 'GONG_API_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_API_SECRET\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_API_SECRET -> SOPHIA_GONG_CLIENT_SECRET_STG'\nelse\n  echo '\u26a0\ufe0f  GONG_API_SECRET not found'\nfi\n\n# Migrate GONG_API_SECRET -> SOPHIA_GONG_CLIENT_SECRET_DEV\nif gh secret list --org ai-cherry | grep -q 'GONG_API_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_API_SECRET\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_API_SECRET -> SOPHIA_GONG_CLIENT_SECRET_DEV'\nelse\n  echo '\u26a0\ufe0f  GONG_API_SECRET not found'\nfi\n\n# Migrate GONG_BASE_URL -> SOPHIA_GONG_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'GONG_BASE_URL'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_BASE_URL\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_BASE_URL -> SOPHIA_GONG_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  GONG_BASE_URL not found'\nfi\n\n# Migrate GONG_BASE_URL -> SOPHIA_GONG_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'GONG_BASE_URL'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_BASE_URL\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_BASE_URL -> SOPHIA_GONG_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  GONG_BASE_URL not found'\nfi\n\n# Migrate GONG_CLIENT_ID -> SOPHIA_GONG_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'GONG_CLIENT_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_CLIENT_ID\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_CLIENT_ID -> SOPHIA_GONG_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  GONG_CLIENT_ID not found'\nfi\n\n# Migrate GONG_CLIENT_ID -> SOPHIA_GONG_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'GONG_CLIENT_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_CLIENT_ID\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_CLIENT_ID -> SOPHIA_GONG_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  GONG_CLIENT_ID not found'\nfi\n\n# Migrate GONG_CLIENT_SECRET -> SOPHIA_GONG_CLIENT_SECRET_STG\nif gh secret list --org ai-cherry | grep -q 'GONG_CLIENT_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_CLIENT_SECRET\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_CLIENT_SECRET -> SOPHIA_GONG_CLIENT_SECRET_STG'\nelse\n  echo '\u26a0\ufe0f  GONG_CLIENT_SECRET not found'\nfi\n\n# Migrate GONG_CLIENT_SECRET -> SOPHIA_GONG_CLIENT_SECRET_DEV\nif gh secret list --org ai-cherry | grep -q 'GONG_CLIENT_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"GONG_CLIENT_SECRET\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated GONG_CLIENT_SECRET -> SOPHIA_GONG_CLIENT_SECRET_DEV'\nelse\n  echo '\u26a0\ufe0f  GONG_CLIENT_SECRET not found'\nfi\n\n# Migrate HUBSPOT_ACCESS_TOKEN -> SOPHIA_HUBSPOT_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'HUBSPOT_ACCESS_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"HUBSPOT_ACCESS_TOKEN\") | .value')\n  gh secret set SOPHIA_HUBSPOT_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated HUBSPOT_ACCESS_TOKEN -> SOPHIA_HUBSPOT_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  HUBSPOT_ACCESS_TOKEN not found'\nfi\n\n# Migrate HUBSPOT_ACCESS_TOKEN -> SOPHIA_HUBSPOT_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'HUBSPOT_ACCESS_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"HUBSPOT_ACCESS_TOKEN\") | .value')\n  gh secret set SOPHIA_HUBSPOT_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated HUBSPOT_ACCESS_TOKEN -> SOPHIA_HUBSPOT_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  HUBSPOT_ACCESS_TOKEN not found'\nfi\n\n# Migrate HUBSPOT_API_KEY -> SOPHIA_HUBSPOT_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'HUBSPOT_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"HUBSPOT_API_KEY\") | .value')\n  gh secret set SOPHIA_HUBSPOT_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated HUBSPOT_API_KEY -> SOPHIA_HUBSPOT_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  HUBSPOT_API_KEY not found'\nfi\n\n# Migrate HUBSPOT_API_KEY -> SOPHIA_HUBSPOT_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'HUBSPOT_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"HUBSPOT_API_KEY\") | .value')\n  gh secret set SOPHIA_HUBSPOT_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated HUBSPOT_API_KEY -> SOPHIA_HUBSPOT_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  HUBSPOT_API_KEY not found'\nfi\n\n# Migrate HUBSPOT_API_TOKEN -> SOPHIA_HUBSPOT_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'HUBSPOT_API_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"HUBSPOT_API_TOKEN\") | .value')\n  gh secret set SOPHIA_HUBSPOT_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated HUBSPOT_API_TOKEN -> SOPHIA_HUBSPOT_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  HUBSPOT_API_TOKEN not found'\nfi\n\n# Migrate HUBSPOT_API_TOKEN -> SOPHIA_HUBSPOT_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'HUBSPOT_API_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"HUBSPOT_API_TOKEN\") | .value')\n  gh secret set SOPHIA_HUBSPOT_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated HUBSPOT_API_TOKEN -> SOPHIA_HUBSPOT_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  HUBSPOT_API_TOKEN not found'\nfi\n\n# Migrate LAMBDA_API_KEY -> SOPHIA_LAMBDA_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'LAMBDA_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LAMBDA_API_KEY\") | .value')\n  gh secret set SOPHIA_LAMBDA_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LAMBDA_API_KEY -> SOPHIA_LAMBDA_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  LAMBDA_API_KEY not found'\nfi\n\n# Migrate LAMBDA_API_KEY -> SOPHIA_LAMBDA_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'LAMBDA_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LAMBDA_API_KEY\") | .value')\n  gh secret set SOPHIA_LAMBDA_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LAMBDA_API_KEY -> SOPHIA_LAMBDA_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  LAMBDA_API_KEY not found'\nfi\n\n# Migrate LAMBDA_IP_ADDRESS -> SOPHIA_LAMBDA_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'LAMBDA_IP_ADDRESS'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LAMBDA_IP_ADDRESS\") | .value')\n  gh secret set SOPHIA_LAMBDA_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LAMBDA_IP_ADDRESS -> SOPHIA_LAMBDA_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  LAMBDA_IP_ADDRESS not found'\nfi\n\n# Migrate LAMBDA_IP_ADDRESS -> SOPHIA_LAMBDA_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'LAMBDA_IP_ADDRESS'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LAMBDA_IP_ADDRESS\") | .value')\n  gh secret set SOPHIA_LAMBDA_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LAMBDA_IP_ADDRESS -> SOPHIA_LAMBDA_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  LAMBDA_IP_ADDRESS not found'\nfi\n\n# Migrate LAMBDA_LABS_API_KEY -> SOPHIA_LAMBDA_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'LAMBDA_LABS_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LAMBDA_LABS_API_KEY\") | .value')\n  gh secret set SOPHIA_LAMBDA_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LAMBDA_LABS_API_KEY -> SOPHIA_LAMBDA_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  LAMBDA_LABS_API_KEY not found'\nfi\n\n# Migrate LAMBDA_LABS_API_KEY -> SOPHIA_LAMBDA_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'LAMBDA_LABS_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LAMBDA_LABS_API_KEY\") | .value')\n  gh secret set SOPHIA_LAMBDA_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LAMBDA_LABS_API_KEY -> SOPHIA_LAMBDA_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  LAMBDA_LABS_API_KEY not found'\nfi\n\n# Migrate LINEAR_API_KEY -> SOPHIA_LINEAR_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'LINEAR_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LINEAR_API_KEY\") | .value')\n  gh secret set SOPHIA_LINEAR_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LINEAR_API_KEY -> SOPHIA_LINEAR_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  LINEAR_API_KEY not found'\nfi\n\n# Migrate LINEAR_API_KEY -> SOPHIA_LINEAR_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'LINEAR_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LINEAR_API_KEY\") | .value')\n  gh secret set SOPHIA_LINEAR_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LINEAR_API_KEY -> SOPHIA_LINEAR_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  LINEAR_API_KEY not found'\nfi\n\n# Migrate LLAMAINDEX_OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'LLAMAINDEX_OPENAI_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LLAMAINDEX_OPENAI_API_KEY\") | .value')\n  gh secret set SOPHIA_OPENAI_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LLAMAINDEX_OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  LLAMAINDEX_OPENAI_API_KEY not found'\nfi\n\n# Migrate LLAMAINDEX_OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'LLAMAINDEX_OPENAI_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LLAMAINDEX_OPENAI_API_KEY\") | .value')\n  gh secret set SOPHIA_OPENAI_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LLAMAINDEX_OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  LLAMAINDEX_OPENAI_API_KEY not found'\nfi\n\n# Migrate LLAMAINDEX_PINECONE_API_KEY -> SOPHIA_PINECONE_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'LLAMAINDEX_PINECONE_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LLAMAINDEX_PINECONE_API_KEY\") | .value')\n  gh secret set SOPHIA_PINECONE_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LLAMAINDEX_PINECONE_API_KEY -> SOPHIA_PINECONE_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  LLAMAINDEX_PINECONE_API_KEY not found'\nfi\n\n# Migrate LLAMAINDEX_PINECONE_API_KEY -> SOPHIA_PINECONE_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'LLAMAINDEX_PINECONE_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LLAMAINDEX_PINECONE_API_KEY\") | .value')\n  gh secret set SOPHIA_PINECONE_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LLAMAINDEX_PINECONE_API_KEY -> SOPHIA_PINECONE_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  LLAMAINDEX_PINECONE_API_KEY not found'\nfi\n\n# Migrate LLAMAINDEX_WEAVIATE_API_KEY -> SOPHIA_WEAVIATE_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'LLAMAINDEX_WEAVIATE_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LLAMAINDEX_WEAVIATE_API_KEY\") | .value')\n  gh secret set SOPHIA_WEAVIATE_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LLAMAINDEX_WEAVIATE_API_KEY -> SOPHIA_WEAVIATE_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  LLAMAINDEX_WEAVIATE_API_KEY not found'\nfi\n\n# Migrate LLAMAINDEX_WEAVIATE_API_KEY -> SOPHIA_WEAVIATE_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'LLAMAINDEX_WEAVIATE_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"LLAMAINDEX_WEAVIATE_API_KEY\") | .value')\n  gh secret set SOPHIA_WEAVIATE_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated LLAMAINDEX_WEAVIATE_API_KEY -> SOPHIA_WEAVIATE_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  LLAMAINDEX_WEAVIATE_API_KEY not found'\nfi\n\n# Migrate NAMECHEAP_API_KEY -> SOPHIA_NAMECHEAP_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'NAMECHEAP_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"NAMECHEAP_API_KEY\") | .value')\n  gh secret set SOPHIA_NAMECHEAP_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated NAMECHEAP_API_KEY -> SOPHIA_NAMECHEAP_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  NAMECHEAP_API_KEY not found'\nfi\n\n# Migrate NAMECHEAP_API_KEY -> SOPHIA_NAMECHEAP_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'NAMECHEAP_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"NAMECHEAP_API_KEY\") | .value')\n  gh secret set SOPHIA_NAMECHEAP_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated NAMECHEAP_API_KEY -> SOPHIA_NAMECHEAP_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  NAMECHEAP_API_KEY not found'\nfi\n\n# Migrate NAMECHEAP_API_USER -> SOPHIA_NAMECHEAP_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'NAMECHEAP_API_USER'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"NAMECHEAP_API_USER\") | .value')\n  gh secret set SOPHIA_NAMECHEAP_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated NAMECHEAP_API_USER -> SOPHIA_NAMECHEAP_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  NAMECHEAP_API_USER not found'\nfi\n\n# Migrate NAMECHEAP_API_USER -> SOPHIA_NAMECHEAP_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'NAMECHEAP_API_USER'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"NAMECHEAP_API_USER\") | .value')\n  gh secret set SOPHIA_NAMECHEAP_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated NAMECHEAP_API_USER -> SOPHIA_NAMECHEAP_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  NAMECHEAP_API_USER not found'\nfi\n\n# Migrate NAMECHEAP_USERNAME -> SOPHIA_NAMECHEAP_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'NAMECHEAP_USERNAME'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"NAMECHEAP_USERNAME\") | .value')\n  gh secret set SOPHIA_NAMECHEAP_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated NAMECHEAP_USERNAME -> SOPHIA_NAMECHEAP_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  NAMECHEAP_USERNAME not found'\nfi\n\n# Migrate NAMECHEAP_USERNAME -> SOPHIA_NAMECHEAP_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'NAMECHEAP_USERNAME'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"NAMECHEAP_USERNAME\") | .value')\n  gh secret set SOPHIA_NAMECHEAP_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated NAMECHEAP_USERNAME -> SOPHIA_NAMECHEAP_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  NAMECHEAP_USERNAME not found'\nfi\n\n# Migrate OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'OPENAI_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"OPENAI_API_KEY\") | .value')\n  gh secret set SOPHIA_OPENAI_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  OPENAI_API_KEY not found'\nfi\n\n# Migrate OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'OPENAI_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"OPENAI_API_KEY\") | .value')\n  gh secret set SOPHIA_OPENAI_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated OPENAI_API_KEY -> SOPHIA_OPENAI_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  OPENAI_API_KEY not found'\nfi\n\n# Migrate PINECONE_API_KEY -> SOPHIA_PINECONE_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'PINECONE_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PINECONE_API_KEY\") | .value')\n  gh secret set SOPHIA_PINECONE_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PINECONE_API_KEY -> SOPHIA_PINECONE_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  PINECONE_API_KEY not found'\nfi\n\n# Migrate PINECONE_API_KEY -> SOPHIA_PINECONE_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'PINECONE_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PINECONE_API_KEY\") | .value')\n  gh secret set SOPHIA_PINECONE_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PINECONE_API_KEY -> SOPHIA_PINECONE_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  PINECONE_API_KEY not found'\nfi\n\n# Migrate PINECONE_ENVIRONMENT -> SOPHIA_PINECONE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'PINECONE_ENVIRONMENT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PINECONE_ENVIRONMENT\") | .value')\n  gh secret set SOPHIA_PINECONE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PINECONE_ENVIRONMENT -> SOPHIA_PINECONE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  PINECONE_ENVIRONMENT not found'\nfi\n\n# Migrate PINECONE_ENVIRONMENT -> SOPHIA_PINECONE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'PINECONE_ENVIRONMENT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PINECONE_ENVIRONMENT\") | .value')\n  gh secret set SOPHIA_PINECONE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PINECONE_ENVIRONMENT -> SOPHIA_PINECONE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  PINECONE_ENVIRONMENT not found'\nfi\n\n# Migrate PINECONE_INDEX_NAME -> SOPHIA_PINECONE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'PINECONE_INDEX_NAME'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PINECONE_INDEX_NAME\") | .value')\n  gh secret set SOPHIA_PINECONE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PINECONE_INDEX_NAME -> SOPHIA_PINECONE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  PINECONE_INDEX_NAME not found'\nfi\n\n# Migrate PINECONE_INDEX_NAME -> SOPHIA_PINECONE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'PINECONE_INDEX_NAME'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PINECONE_INDEX_NAME\") | .value')\n  gh secret set SOPHIA_PINECONE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PINECONE_INDEX_NAME -> SOPHIA_PINECONE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  PINECONE_INDEX_NAME not found'\nfi\n\n# Migrate PORTKEY_API_KEY -> SOPHIA_PORTKEY_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'PORTKEY_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PORTKEY_API_KEY\") | .value')\n  gh secret set SOPHIA_PORTKEY_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PORTKEY_API_KEY -> SOPHIA_PORTKEY_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  PORTKEY_API_KEY not found'\nfi\n\n# Migrate PORTKEY_API_KEY -> SOPHIA_PORTKEY_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'PORTKEY_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PORTKEY_API_KEY\") | .value')\n  gh secret set SOPHIA_PORTKEY_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PORTKEY_API_KEY -> SOPHIA_PORTKEY_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  PORTKEY_API_KEY not found'\nfi\n\n# Migrate PULUMI_ACCESS_TOKEN -> SOPHIA_PULUMI_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'PULUMI_ACCESS_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_ACCESS_TOKEN\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_ACCESS_TOKEN -> SOPHIA_PULUMI_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  PULUMI_ACCESS_TOKEN not found'\nfi\n\n# Migrate PULUMI_ACCESS_TOKEN -> SOPHIA_PULUMI_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'PULUMI_ACCESS_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_ACCESS_TOKEN\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_ACCESS_TOKEN -> SOPHIA_PULUMI_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  PULUMI_ACCESS_TOKEN not found'\nfi\n\n# Migrate PULUMI_BACKEND_URL_DEV -> SOPHIA_PULUMI_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'PULUMI_BACKEND_URL_DEV'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_BACKEND_URL_DEV\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_BACKEND_URL_DEV -> SOPHIA_PULUMI_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  PULUMI_BACKEND_URL_DEV not found'\nfi\n\n# Migrate PULUMI_BACKEND_URL_DEV -> SOPHIA_PULUMI_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'PULUMI_BACKEND_URL_DEV'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_BACKEND_URL_DEV\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_BACKEND_URL_DEV -> SOPHIA_PULUMI_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  PULUMI_BACKEND_URL_DEV not found'\nfi\n\n# Migrate PULUMI_BACKEND_URL_PROD -> SOPHIA_PULUMI_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'PULUMI_BACKEND_URL_PROD'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_BACKEND_URL_PROD\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_BACKEND_URL_PROD -> SOPHIA_PULUMI_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  PULUMI_BACKEND_URL_PROD not found'\nfi\n\n# Migrate PULUMI_BACKEND_URL_PROD -> SOPHIA_PULUMI_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'PULUMI_BACKEND_URL_PROD'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_BACKEND_URL_PROD\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_BACKEND_URL_PROD -> SOPHIA_PULUMI_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  PULUMI_BACKEND_URL_PROD not found'\nfi\n\n# Migrate PULUMI_BACKEND_URL_STAGING -> SOPHIA_PULUMI_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'PULUMI_BACKEND_URL_STAGING'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_BACKEND_URL_STAGING\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_BACKEND_URL_STAGING -> SOPHIA_PULUMI_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  PULUMI_BACKEND_URL_STAGING not found'\nfi\n\n# Migrate PULUMI_BACKEND_URL_STAGING -> SOPHIA_PULUMI_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'PULUMI_BACKEND_URL_STAGING'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_BACKEND_URL_STAGING\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_BACKEND_URL_STAGING -> SOPHIA_PULUMI_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  PULUMI_BACKEND_URL_STAGING not found'\nfi\n\n# Migrate PULUMI_CONFIG_PASSPHRASE -> SOPHIA_PULUMI_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'PULUMI_CONFIG_PASSPHRASE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_CONFIG_PASSPHRASE\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_CONFIG_PASSPHRASE -> SOPHIA_PULUMI_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  PULUMI_CONFIG_PASSPHRASE not found'\nfi\n\n# Migrate PULUMI_CONFIG_PASSPHRASE -> SOPHIA_PULUMI_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'PULUMI_CONFIG_PASSPHRASE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_CONFIG_PASSPHRASE\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_CONFIG_PASSPHRASE -> SOPHIA_PULUMI_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  PULUMI_CONFIG_PASSPHRASE not found'\nfi\n\n# Migrate PULUMI_IP_ADDRESS -> SOPHIA_PULUMI_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'PULUMI_IP_ADDRESS'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_IP_ADDRESS\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_IP_ADDRESS -> SOPHIA_PULUMI_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  PULUMI_IP_ADDRESS not found'\nfi\n\n# Migrate PULUMI_IP_ADDRESS -> SOPHIA_PULUMI_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'PULUMI_IP_ADDRESS'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_IP_ADDRESS\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_IP_ADDRESS -> SOPHIA_PULUMI_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  PULUMI_IP_ADDRESS not found'\nfi\n\n# Migrate PULUMI_ORG -> SOPHIA_PULUMI_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'PULUMI_ORG'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_ORG\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_ORG -> SOPHIA_PULUMI_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  PULUMI_ORG not found'\nfi\n\n# Migrate PULUMI_ORG -> SOPHIA_PULUMI_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'PULUMI_ORG'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_ORG\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_ORG -> SOPHIA_PULUMI_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  PULUMI_ORG not found'\nfi\n\n# Migrate PULUMI_STACK -> SOPHIA_PULUMI_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'PULUMI_STACK'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_STACK\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_STACK -> SOPHIA_PULUMI_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  PULUMI_STACK not found'\nfi\n\n# Migrate PULUMI_STACK -> SOPHIA_PULUMI_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'PULUMI_STACK'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"PULUMI_STACK\") | .value')\n  gh secret set SOPHIA_PULUMI_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated PULUMI_STACK -> SOPHIA_PULUMI_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  PULUMI_STACK not found'\nfi\n\n# Migrate SLACK_APP_TOKEN -> SOPHIA_SLACK_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'SLACK_APP_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_APP_TOKEN\") | .value')\n  gh secret set SOPHIA_SLACK_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_APP_TOKEN -> SOPHIA_SLACK_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  SLACK_APP_TOKEN not found'\nfi\n\n# Migrate SLACK_APP_TOKEN -> SOPHIA_SLACK_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'SLACK_APP_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_APP_TOKEN\") | .value')\n  gh secret set SOPHIA_SLACK_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_APP_TOKEN -> SOPHIA_SLACK_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  SLACK_APP_TOKEN not found'\nfi\n\n# Migrate SLACK_BOT_TOKEN -> SOPHIA_SLACK_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'SLACK_BOT_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_BOT_TOKEN\") | .value')\n  gh secret set SOPHIA_SLACK_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_BOT_TOKEN -> SOPHIA_SLACK_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  SLACK_BOT_TOKEN not found'\nfi\n\n# Migrate SLACK_BOT_TOKEN -> SOPHIA_SLACK_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'SLACK_BOT_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_BOT_TOKEN\") | .value')\n  gh secret set SOPHIA_SLACK_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_BOT_TOKEN -> SOPHIA_SLACK_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  SLACK_BOT_TOKEN not found'\nfi\n\n# Migrate SLACK_CLIENT_ID -> SOPHIA_SLACK_BOT_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'SLACK_CLIENT_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_CLIENT_ID\") | .value')\n  gh secret set SOPHIA_SLACK_BOT_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_CLIENT_ID -> SOPHIA_SLACK_BOT_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  SLACK_CLIENT_ID not found'\nfi\n\n# Migrate SLACK_CLIENT_ID -> SOPHIA_SLACK_BOT_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'SLACK_CLIENT_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_CLIENT_ID\") | .value')\n  gh secret set SOPHIA_SLACK_BOT_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_CLIENT_ID -> SOPHIA_SLACK_BOT_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  SLACK_CLIENT_ID not found'\nfi\n\n# Migrate SLACK_CLIENT_SECRET -> SOPHIA_SLACK_CLIENT_SECRET_STG\nif gh secret list --org ai-cherry | grep -q 'SLACK_CLIENT_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_CLIENT_SECRET\") | .value')\n  gh secret set SOPHIA_SLACK_CLIENT_SECRET_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_CLIENT_SECRET -> SOPHIA_SLACK_CLIENT_SECRET_STG'\nelse\n  echo '\u26a0\ufe0f  SLACK_CLIENT_SECRET not found'\nfi\n\n# Migrate SLACK_CLIENT_SECRET -> SOPHIA_SLACK_CLIENT_SECRET_DEV\nif gh secret list --org ai-cherry | grep -q 'SLACK_CLIENT_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_CLIENT_SECRET\") | .value')\n  gh secret set SOPHIA_SLACK_CLIENT_SECRET_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_CLIENT_SECRET -> SOPHIA_SLACK_CLIENT_SECRET_DEV'\nelse\n  echo '\u26a0\ufe0f  SLACK_CLIENT_SECRET not found'\nfi\n\n# Migrate SLACK_SIGNING_SECRET -> SOPHIA_SLACK_CLIENT_SECRET_STG\nif gh secret list --org ai-cherry | grep -q 'SLACK_SIGNING_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_SIGNING_SECRET\") | .value')\n  gh secret set SOPHIA_SLACK_CLIENT_SECRET_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_SIGNING_SECRET -> SOPHIA_SLACK_CLIENT_SECRET_STG'\nelse\n  echo '\u26a0\ufe0f  SLACK_SIGNING_SECRET not found'\nfi\n\n# Migrate SLACK_SIGNING_SECRET -> SOPHIA_SLACK_CLIENT_SECRET_DEV\nif gh secret list --org ai-cherry | grep -q 'SLACK_SIGNING_SECRET'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_SIGNING_SECRET\") | .value')\n  gh secret set SOPHIA_SLACK_CLIENT_SECRET_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_SIGNING_SECRET -> SOPHIA_SLACK_CLIENT_SECRET_DEV'\nelse\n  echo '\u26a0\ufe0f  SLACK_SIGNING_SECRET not found'\nfi\n\n# Migrate SLACK_WEBHOOK -> SOPHIA_SLACK_BOT_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'SLACK_WEBHOOK'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_WEBHOOK\") | .value')\n  gh secret set SOPHIA_SLACK_BOT_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_WEBHOOK -> SOPHIA_SLACK_BOT_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  SLACK_WEBHOOK not found'\nfi\n\n# Migrate SLACK_WEBHOOK -> SOPHIA_SLACK_BOT_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'SLACK_WEBHOOK'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_WEBHOOK\") | .value')\n  gh secret set SOPHIA_SLACK_BOT_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_WEBHOOK -> SOPHIA_SLACK_BOT_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  SLACK_WEBHOOK not found'\nfi\n\n# Migrate SLACK_WEBHOOK_URL -> SOPHIA_SLACK_BOT_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'SLACK_WEBHOOK_URL'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_WEBHOOK_URL\") | .value')\n  gh secret set SOPHIA_SLACK_BOT_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_WEBHOOK_URL -> SOPHIA_SLACK_BOT_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  SLACK_WEBHOOK_URL not found'\nfi\n\n# Migrate SLACK_WEBHOOK_URL -> SOPHIA_SLACK_BOT_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'SLACK_WEBHOOK_URL'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SLACK_WEBHOOK_URL\") | .value')\n  gh secret set SOPHIA_SLACK_BOT_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SLACK_WEBHOOK_URL -> SOPHIA_SLACK_BOT_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  SLACK_WEBHOOK_URL not found'\nfi\n\n# Migrate SNOWFLAKE_ACCOUNT -> SOPHIA_SNOWFLAKE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_ACCOUNT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_ACCOUNT\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_ACCOUNT -> SOPHIA_SNOWFLAKE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_ACCOUNT not found'\nfi\n\n# Migrate SNOWFLAKE_ACCOUNT -> SOPHIA_SNOWFLAKE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_ACCOUNT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_ACCOUNT\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_ACCOUNT -> SOPHIA_SNOWFLAKE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_ACCOUNT not found'\nfi\n\n# Migrate SNOWFLAKE_DATABASE -> SOPHIA_SNOWFLAKE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_DATABASE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_DATABASE\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_DATABASE -> SOPHIA_SNOWFLAKE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_DATABASE not found'\nfi\n\n# Migrate SNOWFLAKE_DATABASE -> SOPHIA_SNOWFLAKE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_DATABASE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_DATABASE\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_DATABASE -> SOPHIA_SNOWFLAKE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_DATABASE not found'\nfi\n\n# Migrate SNOWFLAKE_PASSWORD -> SOPHIA_SNOWFLAKE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_PASSWORD'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_PASSWORD\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_PASSWORD -> SOPHIA_SNOWFLAKE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_PASSWORD not found'\nfi\n\n# Migrate SNOWFLAKE_PASSWORD -> SOPHIA_SNOWFLAKE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_PASSWORD'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_PASSWORD\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_PASSWORD -> SOPHIA_SNOWFLAKE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_PASSWORD not found'\nfi\n\n# Migrate SNOWFLAKE_PAT -> SOPHIA_SNOWFLAKE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_PAT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_PAT\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_PAT -> SOPHIA_SNOWFLAKE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_PAT not found'\nfi\n\n# Migrate SNOWFLAKE_PAT -> SOPHIA_SNOWFLAKE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_PAT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_PAT\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_PAT -> SOPHIA_SNOWFLAKE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_PAT not found'\nfi\n\n# Migrate SNOWFLAKE_ROLE -> SOPHIA_SNOWFLAKE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_ROLE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_ROLE\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_ROLE -> SOPHIA_SNOWFLAKE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_ROLE not found'\nfi\n\n# Migrate SNOWFLAKE_ROLE -> SOPHIA_SNOWFLAKE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_ROLE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_ROLE\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_ROLE -> SOPHIA_SNOWFLAKE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_ROLE not found'\nfi\n\n# Migrate SNOWFLAKE_SCHEMA -> SOPHIA_SNOWFLAKE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_SCHEMA'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_SCHEMA\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_SCHEMA -> SOPHIA_SNOWFLAKE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_SCHEMA not found'\nfi\n\n# Migrate SNOWFLAKE_SCHEMA -> SOPHIA_SNOWFLAKE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_SCHEMA'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_SCHEMA\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_SCHEMA -> SOPHIA_SNOWFLAKE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_SCHEMA not found'\nfi\n\n# Migrate SNOWFLAKE_USER -> SOPHIA_SNOWFLAKE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_USER'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_USER\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_USER -> SOPHIA_SNOWFLAKE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_USER not found'\nfi\n\n# Migrate SNOWFLAKE_USER -> SOPHIA_SNOWFLAKE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_USER'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_USER\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_USER -> SOPHIA_SNOWFLAKE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_USER not found'\nfi\n\n# Migrate SNOWFLAKE_WAREHOUSE -> SOPHIA_SNOWFLAKE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_WAREHOUSE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_WAREHOUSE\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_WAREHOUSE -> SOPHIA_SNOWFLAKE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_WAREHOUSE not found'\nfi\n\n# Migrate SNOWFLAKE_WAREHOUSE -> SOPHIA_SNOWFLAKE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'SNOWFLAKE_WAREHOUSE'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"SNOWFLAKE_WAREHOUSE\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated SNOWFLAKE_WAREHOUSE -> SOPHIA_SNOWFLAKE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  SNOWFLAKE_WAREHOUSE not found'\nfi\n\n# Migrate VERCEL_ACCESS_TOKEN -> SOPHIA_VERCEL_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'VERCEL_ACCESS_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_ACCESS_TOKEN\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_ACCESS_TOKEN -> SOPHIA_VERCEL_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  VERCEL_ACCESS_TOKEN not found'\nfi\n\n# Migrate VERCEL_ACCESS_TOKEN -> SOPHIA_VERCEL_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'VERCEL_ACCESS_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_ACCESS_TOKEN\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_ACCESS_TOKEN -> SOPHIA_VERCEL_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  VERCEL_ACCESS_TOKEN not found'\nfi\n\n# Migrate VERCEL_API_TOKEN -> SOPHIA_VERCEL_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'VERCEL_API_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_API_TOKEN\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_API_TOKEN -> SOPHIA_VERCEL_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  VERCEL_API_TOKEN not found'\nfi\n\n# Migrate VERCEL_API_TOKEN -> SOPHIA_VERCEL_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'VERCEL_API_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_API_TOKEN\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_API_TOKEN -> SOPHIA_VERCEL_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  VERCEL_API_TOKEN not found'\nfi\n\n# Migrate VERCEL_ORG_ID -> SOPHIA_VERCEL_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'VERCEL_ORG_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_ORG_ID\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_ORG_ID -> SOPHIA_VERCEL_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  VERCEL_ORG_ID not found'\nfi\n\n# Migrate VERCEL_ORG_ID -> SOPHIA_VERCEL_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'VERCEL_ORG_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_ORG_ID\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_ORG_ID -> SOPHIA_VERCEL_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  VERCEL_ORG_ID not found'\nfi\n\n# Migrate VERCEL_PROJECT_ID -> SOPHIA_VERCEL_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'VERCEL_PROJECT_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_PROJECT_ID\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_PROJECT_ID -> SOPHIA_VERCEL_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  VERCEL_PROJECT_ID not found'\nfi\n\n# Migrate VERCEL_PROJECT_ID -> SOPHIA_VERCEL_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'VERCEL_PROJECT_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_PROJECT_ID\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_PROJECT_ID -> SOPHIA_VERCEL_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  VERCEL_PROJECT_ID not found'\nfi\n\n# Migrate VERCEL_PROJECT_ID_SOPHIA_PROD -> SOPHIA_VERCEL_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'VERCEL_PROJECT_ID_SOPHIA_PROD'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_PROJECT_ID_SOPHIA_PROD\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_PROJECT_ID_SOPHIA_PROD -> SOPHIA_VERCEL_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  VERCEL_PROJECT_ID_SOPHIA_PROD not found'\nfi\n\n# Migrate VERCEL_PROJECT_ID_SOPHIA_PROD -> SOPHIA_VERCEL_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'VERCEL_PROJECT_ID_SOPHIA_PROD'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_PROJECT_ID_SOPHIA_PROD\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_PROJECT_ID_SOPHIA_PROD -> SOPHIA_VERCEL_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  VERCEL_PROJECT_ID_SOPHIA_PROD not found'\nfi\n\n# Migrate VERCEL_TEAM_ID -> SOPHIA_VERCEL_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'VERCEL_TEAM_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_TEAM_ID\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_TEAM_ID -> SOPHIA_VERCEL_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  VERCEL_TEAM_ID not found'\nfi\n\n# Migrate VERCEL_TEAM_ID -> SOPHIA_VERCEL_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'VERCEL_TEAM_ID'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_TEAM_ID\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_TEAM_ID -> SOPHIA_VERCEL_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  VERCEL_TEAM_ID not found'\nfi\n\n# Migrate VERCEL_TOKEN -> SOPHIA_VERCEL_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'VERCEL_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_TOKEN\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_TOKEN -> SOPHIA_VERCEL_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  VERCEL_TOKEN not found'\nfi\n\n# Migrate VERCEL_TOKEN -> SOPHIA_VERCEL_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'VERCEL_TOKEN'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"VERCEL_TOKEN\") | .value')\n  gh secret set SOPHIA_VERCEL_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated VERCEL_TOKEN -> SOPHIA_VERCEL_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  VERCEL_TOKEN not found'\nfi\n\n# Migrate WEAVIATE_API_KEY -> SOPHIA_WEAVIATE_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'WEAVIATE_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"WEAVIATE_API_KEY\") | .value')\n  gh secret set SOPHIA_WEAVIATE_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated WEAVIATE_API_KEY -> SOPHIA_WEAVIATE_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  WEAVIATE_API_KEY not found'\nfi\n\n# Migrate WEAVIATE_API_KEY -> SOPHIA_WEAVIATE_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'WEAVIATE_API_KEY'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"WEAVIATE_API_KEY\") | .value')\n  gh secret set SOPHIA_WEAVIATE_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated WEAVIATE_API_KEY -> SOPHIA_WEAVIATE_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  WEAVIATE_API_KEY not found'\nfi\n\n# Migrate WEAVIATE_GRPC_ENDPOINT -> SOPHIA_WEAVIATE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'WEAVIATE_GRPC_ENDPOINT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"WEAVIATE_GRPC_ENDPOINT\") | .value')\n  gh secret set SOPHIA_WEAVIATE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated WEAVIATE_GRPC_ENDPOINT -> SOPHIA_WEAVIATE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  WEAVIATE_GRPC_ENDPOINT not found'\nfi\n\n# Migrate WEAVIATE_GRPC_ENDPOINT -> SOPHIA_WEAVIATE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'WEAVIATE_GRPC_ENDPOINT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"WEAVIATE_GRPC_ENDPOINT\") | .value')\n  gh secret set SOPHIA_WEAVIATE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated WEAVIATE_GRPC_ENDPOINT -> SOPHIA_WEAVIATE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  WEAVIATE_GRPC_ENDPOINT not found'\nfi\n\n# Migrate WEAVIATE_REST_ENDPOINT -> SOPHIA_WEAVIATE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'WEAVIATE_REST_ENDPOINT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"WEAVIATE_REST_ENDPOINT\") | .value')\n  gh secret set SOPHIA_WEAVIATE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated WEAVIATE_REST_ENDPOINT -> SOPHIA_WEAVIATE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  WEAVIATE_REST_ENDPOINT not found'\nfi\n\n# Migrate WEAVIATE_REST_ENDPOINT -> SOPHIA_WEAVIATE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'WEAVIATE_REST_ENDPOINT'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"WEAVIATE_REST_ENDPOINT\") | .value')\n  gh secret set SOPHIA_WEAVIATE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated WEAVIATE_REST_ENDPOINT -> SOPHIA_WEAVIATE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  WEAVIATE_REST_ENDPOINT not found'\nfi\n\n# Migrate WEAVIATE_URL -> SOPHIA_WEAVIATE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'WEAVIATE_URL'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"WEAVIATE_URL\") | .value')\n  gh secret set SOPHIA_WEAVIATE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated WEAVIATE_URL -> SOPHIA_WEAVIATE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  WEAVIATE_URL not found'\nfi\n\n# Migrate WEAVIATE_URL -> SOPHIA_WEAVIATE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'WEAVIATE_URL'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"WEAVIATE_URL\") | .value')\n  gh secret set SOPHIA_WEAVIATE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated WEAVIATE_URL -> SOPHIA_WEAVIATE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  WEAVIATE_URL not found'\nfi\n\n# Migrate gong_access_key -> SOPHIA_GONG_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'gong_access_key'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"gong_access_key\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated gong_access_key -> SOPHIA_GONG_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  gong_access_key not found'\nfi\n\n# Migrate gong_access_key -> SOPHIA_GONG_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'gong_access_key'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"gong_access_key\") | .value')\n  gh secret set SOPHIA_GONG_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated gong_access_key -> SOPHIA_GONG_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  gong_access_key not found'\nfi\n\n# Migrate gong_access_key_secret -> SOPHIA_GONG_CLIENT_SECRET_STG\nif gh secret list --org ai-cherry | grep -q 'gong_access_key_secret'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"gong_access_key_secret\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated gong_access_key_secret -> SOPHIA_GONG_CLIENT_SECRET_STG'\nelse\n  echo '\u26a0\ufe0f  gong_access_key_secret not found'\nfi\n\n# Migrate gong_access_key_secret -> SOPHIA_GONG_CLIENT_SECRET_DEV\nif gh secret list --org ai-cherry | grep -q 'gong_access_key_secret'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"gong_access_key_secret\") | .value')\n  gh secret set SOPHIA_GONG_CLIENT_SECRET_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated gong_access_key_secret -> SOPHIA_GONG_CLIENT_SECRET_DEV'\nelse\n  echo '\u26a0\ufe0f  gong_access_key_secret not found'\nfi\n\n# Migrate openai_api_key -> SOPHIA_OPENAI_API_KEY_STG\nif gh secret list --org ai-cherry | grep -q 'openai_api_key'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"openai_api_key\") | .value')\n  gh secret set SOPHIA_OPENAI_API_KEY_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated openai_api_key -> SOPHIA_OPENAI_API_KEY_STG'\nelse\n  echo '\u26a0\ufe0f  openai_api_key not found'\nfi\n\n# Migrate openai_api_key -> SOPHIA_OPENAI_API_KEY_DEV\nif gh secret list --org ai-cherry | grep -q 'openai_api_key'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"openai_api_key\") | .value')\n  gh secret set SOPHIA_OPENAI_API_KEY_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated openai_api_key -> SOPHIA_OPENAI_API_KEY_DEV'\nelse\n  echo '\u26a0\ufe0f  openai_api_key not found'\nfi\n\n# Migrate slack_webhook_url -> SOPHIA_SLACK_BOT_TOKEN_STG\nif gh secret list --org ai-cherry | grep -q 'slack_webhook_url'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"slack_webhook_url\") | .value')\n  gh secret set SOPHIA_SLACK_BOT_TOKEN_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated slack_webhook_url -> SOPHIA_SLACK_BOT_TOKEN_STG'\nelse\n  echo '\u26a0\ufe0f  slack_webhook_url not found'\nfi\n\n# Migrate slack_webhook_url -> SOPHIA_SLACK_BOT_TOKEN_DEV\nif gh secret list --org ai-cherry | grep -q 'slack_webhook_url'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"slack_webhook_url\") | .value')\n  gh secret set SOPHIA_SLACK_BOT_TOKEN_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated slack_webhook_url -> SOPHIA_SLACK_BOT_TOKEN_DEV'\nelse\n  echo '\u26a0\ufe0f  slack_webhook_url not found'\nfi\n\n# Migrate snowflake_account -> SOPHIA_SNOWFLAKE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'snowflake_account'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_account\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_account -> SOPHIA_SNOWFLAKE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  snowflake_account not found'\nfi\n\n# Migrate snowflake_account -> SOPHIA_SNOWFLAKE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'snowflake_account'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_account\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_account -> SOPHIA_SNOWFLAKE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  snowflake_account not found'\nfi\n\n# Migrate snowflake_database -> SOPHIA_SNOWFLAKE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'snowflake_database'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_database\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_database -> SOPHIA_SNOWFLAKE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  snowflake_database not found'\nfi\n\n# Migrate snowflake_database -> SOPHIA_SNOWFLAKE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'snowflake_database'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_database\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_database -> SOPHIA_SNOWFLAKE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  snowflake_database not found'\nfi\n\n# Migrate snowflake_password -> SOPHIA_SNOWFLAKE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'snowflake_password'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_password\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_password -> SOPHIA_SNOWFLAKE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  snowflake_password not found'\nfi\n\n# Migrate snowflake_password -> SOPHIA_SNOWFLAKE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'snowflake_password'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_password\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_password -> SOPHIA_SNOWFLAKE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  snowflake_password not found'\nfi\n\n# Migrate snowflake_role -> SOPHIA_SNOWFLAKE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'snowflake_role'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_role\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_role -> SOPHIA_SNOWFLAKE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  snowflake_role not found'\nfi\n\n# Migrate snowflake_role -> SOPHIA_SNOWFLAKE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'snowflake_role'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_role\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_role -> SOPHIA_SNOWFLAKE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  snowflake_role not found'\nfi\n\n# Migrate snowflake_schema -> SOPHIA_SNOWFLAKE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'snowflake_schema'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_schema\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_schema -> SOPHIA_SNOWFLAKE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  snowflake_schema not found'\nfi\n\n# Migrate snowflake_schema -> SOPHIA_SNOWFLAKE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'snowflake_schema'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_schema\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_schema -> SOPHIA_SNOWFLAKE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  snowflake_schema not found'\nfi\n\n# Migrate snowflake_user -> SOPHIA_SNOWFLAKE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'snowflake_user'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_user\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_user -> SOPHIA_SNOWFLAKE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  snowflake_user not found'\nfi\n\n# Migrate snowflake_user -> SOPHIA_SNOWFLAKE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'snowflake_user'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_user\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_user -> SOPHIA_SNOWFLAKE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  snowflake_user not found'\nfi\n\n# Migrate snowflake_warehouse -> SOPHIA_SNOWFLAKE_PASSWORD_STG\nif gh secret list --org ai-cherry | grep -q 'snowflake_warehouse'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_warehouse\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_STG --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_warehouse -> SOPHIA_SNOWFLAKE_PASSWORD_STG'\nelse\n  echo '\u26a0\ufe0f  snowflake_warehouse not found'\nfi\n\n# Migrate snowflake_warehouse -> SOPHIA_SNOWFLAKE_PASSWORD_DEV\nif gh secret list --org ai-cherry | grep -q 'snowflake_warehouse'; then\n  OLD_VALUE=$(gh secret list --org ai-cherry --json name,value | jq -r '.[] | select(.name==\"snowflake_warehouse\") | .value')\n  gh secret set SOPHIA_SNOWFLAKE_PASSWORD_DEV --body \"$OLD_VALUE\" --org ai-cherry\n  echo '\u2705 Migrated snowflake_warehouse -> SOPHIA_SNOWFLAKE_PASSWORD_DEV'\nelse\n  echo '\u26a0\ufe0f  snowflake_warehouse not found'\nfi\n\n# Update Pulumi ESC environments\necho '\ud83d\udcdd Updating Pulumi ESC configurations...'\n# Update scoobyjava-org/sophia-ai-stg\npulumi env init scoobyjava-org/sophia-ai-stg --yes || true\necho '{\"sophia\": {\"platform\": {\"name\": \"sophia-ai-platform\", \"version\": \"v2.0.0\", \"environment\": \"stg\", \"docker\": {\"token\": \"${SOPHIA_DOCKER_TOKEN_STG}\"}, \"github\": {\"token\": \"${SOPHIA_GITHUB_TOKEN_STG}\", \"password\": \"${SOPHIA_GITHUB_PASSWORD_STG}\"}, \"pulumi\": {\"token\": \"${SOPHIA_PULUMI_TOKEN_STG}\"}}, \"ai\": {\"anthropic\": {\"api_key\": \"${SOPHIA_ANTHROPIC_API_KEY_STG}\"}, \"openai\": {\"api_key\": \"${SOPHIA_OPENAI_API_KEY_STG}\"}, \"portkey\": {\"api_key\": \"${SOPHIA_PORTKEY_API_KEY_STG}\"}}, \"integration\": {\"gong\": {\"api_key\": \"${SOPHIA_GONG_API_KEY_STG}\", \"client_secret\": \"${SOPHIA_GONG_CLIENT_SECRET_STG}\"}, \"hubspot\": {\"token\": \"${SOPHIA_HUBSPOT_TOKEN_STG}\", \"api_key\": \"${SOPHIA_HUBSPOT_API_KEY_STG}\"}, \"linear\": {\"api_key\": \"${SOPHIA_LINEAR_API_KEY_STG}\"}}, \"infrastructure\": {\"lambda\": {\"api_key\": \"${SOPHIA_LAMBDA_API_KEY_STG}\", \"token\": \"${SOPHIA_LAMBDA_TOKEN_STG}\"}, \"namecheap\": {\"api_key\": \"${SOPHIA_NAMECHEAP_API_KEY_STG}\", \"token\": \"${SOPHIA_NAMECHEAP_TOKEN_STG}\"}, \"vercel\": {\"token\": \"${SOPHIA_VERCEL_TOKEN_STG}\"}}, \"data\": {\"pinecone\": {\"api_key\": \"${SOPHIA_PINECONE_API_KEY_STG}\", \"password\": \"${SOPHIA_PINECONE_PASSWORD_STG}\"}, \"weaviate\": {\"api_key\": \"${SOPHIA_WEAVIATE_API_KEY_STG}\", \"password\": \"${SOPHIA_WEAVIATE_PASSWORD_STG}\"}, \"snowflake\": {\"password\": \"${SOPHIA_SNOWFLAKE_PASSWORD_STG}\"}}, \"communication\": {\"slack\": {\"token\": \"${SOPHIA_SLACK_TOKEN_STG}\", \"bot_token\": \"${SOPHIA_SLACK_BOT_TOKEN_STG}\", \"client_secret\": \"${SOPHIA_SLACK_CLIENT_SECRET_STG}\"}}}}' | pulumi env set scoobyjava-org/sophia-ai-stg --\necho '\u2705 Updated scoobyjava-org/sophia-ai-stg'\n\n# Update scoobyjava-org/sophia-ai-dev\npulumi env init scoobyjava-org/sophia-ai-dev --yes || true\necho '{\"sophia\": {\"platform\": {\"name\": \"sophia-ai-platform\", \"version\": \"v2.0.0\", \"environment\": \"dev\", \"docker\": {\"token\": \"${SOPHIA_DOCKER_TOKEN_DEV}\"}, \"github\": {\"token\": \"${SOPHIA_GITHUB_TOKEN_DEV}\", \"password\": \"${SOPHIA_GITHUB_PASSWORD_DEV}\"}, \"pulumi\": {\"token\": \"${SOPHIA_PULUMI_TOKEN_DEV}\"}}, \"ai\": {\"anthropic\": {\"api_key\": \"${SOPHIA_ANTHROPIC_API_KEY_DEV}\"}, \"openai\": {\"api_key\": \"${SOPHIA_OPENAI_API_KEY_DEV}\"}, \"portkey\": {\"api_key\": \"${SOPHIA_PORTKEY_API_KEY_DEV}\"}}, \"integration\": {\"gong\": {\"api_key\": \"${SOPHIA_GONG_API_KEY_DEV}\", \"client_secret\": \"${SOPHIA_GONG_CLIENT_SECRET_DEV}\"}, \"hubspot\": {\"token\": \"${SOPHIA_HUBSPOT_TOKEN_DEV}\", \"api_key\": \"${SOPHIA_HUBSPOT_API_KEY_DEV}\"}, \"linear\": {\"api_key\": \"${SOPHIA_LINEAR_API_KEY_DEV}\"}}, \"infrastructure\": {\"lambda\": {\"api_key\": \"${SOPHIA_LAMBDA_API_KEY_DEV}\", \"token\": \"${SOPHIA_LAMBDA_TOKEN_DEV}\"}, \"namecheap\": {\"api_key\": \"${SOPHIA_NAMECHEAP_API_KEY_DEV}\", \"token\": \"${SOPHIA_NAMECHEAP_TOKEN_DEV}\"}, \"vercel\": {\"token\": \"${SOPHIA_VERCEL_TOKEN_DEV}\"}}, \"data\": {\"pinecone\": {\"api_key\": \"${SOPHIA_PINECONE_API_KEY_DEV}\", \"password\": \"${SOPHIA_PINECONE_PASSWORD_DEV}\"}, \"weaviate\": {\"api_key\": \"${SOPHIA_WEAVIATE_API_KEY_DEV}\", \"password\": \"${SOPHIA_WEAVIATE_PASSWORD_DEV}\"}, \"snowflake\": {\"password\": \"${SOPHIA_SNOWFLAKE_PASSWORD_DEV}\"}}, \"communication\": {\"slack\": {\"token\": \"${SOPHIA_SLACK_TOKEN_DEV}\", \"bot_token\": \"${SOPHIA_SLACK_BOT_TOKEN_DEV}\", \"client_secret\": \"${SOPHIA_SLACK_CLIENT_SECRET_DEV}\"}}}}' | pulumi env set scoobyjava-org/sophia-ai-dev --\necho '\u2705 Updated scoobyjava-org/sophia-ai-dev'\n\necho '\ud83c\udf89 Migration completed successfully!'"
  },
  "implementation_plan": {
    "phase_1": "Critical production secrets (OPENAI, SNOWFLAKE, VERCEL, PULUMI, GONG)",
    "phase_2": "All production environment secrets",
    "phase_3": "Staging and development environment secrets",
    "phase_4": "Cleanup and validation"
  },
  "next_steps": [
    "Review generated migration scripts",
    "Execute Phase 1 migration for critical secrets",
    "Update backend/core/auto_esc_config.py with enhanced structure",
    "Test Pulumi ESC integration",
    "Execute remaining migration phases",
    "Clean up old secret references"
  ]
}