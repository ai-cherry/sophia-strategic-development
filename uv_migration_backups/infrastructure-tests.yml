name: Infrastructure Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/**'
      - 'tests/infrastructure/**'
      - '.github/workflows/infrastructure-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - 'tests/infrastructure/**'
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance
          - security

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == ''

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-cov pytest-xdist pytest-asyncio

    - name: Run unit tests
      run: |
        pytest tests/infrastructure/unit/ -v --tb=short --cov=infrastructure --cov-report=xml

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: infrastructure-unit
        name: infrastructure-unit-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == ''

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-asyncio

    - name: Set up test environment
      run: |
        # Create test configuration
        echo "Creating test environment configuration..."
        mkdir -p ~/.pulumi
        echo '{"environment": "test"}' > ~/.pulumi/test-config.json

    - name: Run integration tests
      run: |
        pytest tests/infrastructure/integration/ -v --tb=short -m integration
      env:
        PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'e2e'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-asyncio

    - name: Set up Pulumi
      uses: pulumi/setup-pulumi@v2
      with:
        pulumi-version: latest

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Run E2E tests
      run: |
        pytest tests/infrastructure/e2e/ -v --tb=short -m e2e
      env:
        PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        GONG_API_KEY: ${{ secrets.GONG_API_KEY }}

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'performance' || (github.event.inputs.test_type == 'all' && github.event_name == 'schedule')

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-asyncio

    - name: Run performance tests
      run: |
        pytest tests/infrastructure/performance/ -v --tb=short -m performance

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: tests/infrastructure/performance/performance_report.json

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'security' || (github.event.inputs.test_type == 'all' && github.event_name == 'schedule')

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest bandit safety

    - name: Run security tests
      run: |
        # Run pytest security tests
        pytest tests/infrastructure/security/ -v --tb=short -m security || true

        # Run bandit security scan
        bandit -r infrastructure/ -f json -o bandit-report.json

        # Check for known vulnerabilities
        safety check --json > safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()

    steps:
    - uses: actions/checkout@v3

    - name: Download test results
      uses: actions/download-artifact@v3

    - name: Generate test summary
      env:
        EVENT_NAME: ${{ github.event_name }}
        REF_NAME: ${{ github.ref_name }}
        COMMIT_SHA: ${{ github.sha }}
      run: |
        echo "## Infrastructure Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Check job statuses
        if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
          echo "✅ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ Integration Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Integration Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Execution Details" >> $GITHUB_STEP_SUMMARY
        echo "- Triggered by: $EVENT_NAME" >> $GITHUB_STEP_SUMMARY
        echo "- Branch: $REF_NAME" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: $COMMIT_SHA" >> $GITHUB_STEP_SUMMARY

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: failure() && github.event_name != 'pull_request'

    steps:
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Infrastructure tests failed!
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Workflow: ${{ github.workflow }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
