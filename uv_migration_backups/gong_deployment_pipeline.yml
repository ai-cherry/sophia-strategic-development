name: Gong Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean
      reason:
        description: 'Reason for deployment'
        required: true
        default: 'Gong pipeline deployment'
  push:
    branches: [main]
    paths:
      - 'backend/scripts/estuary_gong_setup.py'
      - 'backend/scripts/deploy_gong_snowflake_setup.py'
      - 'scripts/ci/sync_from_gh_to_pulumi.py'
      - 'scripts/test_gong_deployment_readiness.py'
      - '.github/workflows/gong_deployment_pipeline.yml'

env:
  PYTHON_VERSION: '3.11'
  PULUMI_ORG: 'scoobyjava-org'
  DEPLOYMENT_ENV: ${{ github.event.inputs.deployment_environment || 'dev' }}

jobs:
  validate-prerequisites:
    name: 🔍 Validate Prerequisites
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.validation.outputs.should_proceed }}
      validation_summary: ${{ steps.validation.outputs.summary }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Setup Pulumi CLI
        uses: pulumi/actions@v5

      - name: Validate Prerequisites
        id: validation
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          echo "🔍 Validating deployment prerequisites..."
          
          # Check Pulumi access
          pulumi login
          pulumi whoami
          
          # Check if critical secrets are available
          MISSING_SECRETS=()
          
          if [ -z "${{ secrets.GONG_ACCESS_KEY }}" ]; then
            MISSING_SECRETS+=("GONG_ACCESS_KEY")
          fi
          
          if [ -z "${{ secrets.GONG_CLIENT_SECRET }}" ]; then
            MISSING_SECRETS+=("GONG_CLIENT_SECRET")
          fi
          
          if [ -z "${{ secrets.SNOWFLAKE_ACCOUNT }}" ]; then
            MISSING_SECRETS+=("SNOWFLAKE_ACCOUNT")
          fi
          
          if [ -z "${{ secrets.SNOWFLAKE_PASSWORD }}" ]; then
            MISSING_SECRETS+=("SNOWFLAKE_PASSWORD")
          fi
          
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            MISSING_SECRETS+=("OPENAI_API_KEY")
          fi
          
          if [ -z "${{ secrets.PINECONE_API_KEY }}" ]; then
            MISSING_SECRETS+=("PINECONE_API_KEY")
          fi
          
          if [ ${#MISSING_SECRETS[@]} -eq 0 ]; then
            echo "✅ All critical secrets available"
            echo "should_proceed=true" >> $GITHUB_OUTPUT
            echo "summary=All prerequisites validated successfully" >> $GITHUB_OUTPUT
          else
            echo "❌ Missing critical secrets: ${MISSING_SECRETS[*]}"
            echo "should_proceed=false" >> $GITHUB_OUTPUT
            echo "summary=Missing critical secrets: ${MISSING_SECRETS[*]}" >> $GITHUB_OUTPUT
          fi

  sync-secrets-to-esc:
    name: 🔄 Sync Secrets to Pulumi ESC
    runs-on: ubuntu-latest
    needs: validate-prerequisites
    if: needs.validate-prerequisites.outputs.should_proceed == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Setup Pulumi CLI
        uses: pulumi/actions@v5

      - name: Sync Secrets to Pulumi ESC
        run: python scripts/ci/sync_from_gh_to_pulumi.py
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          # Critical secrets for Gong deployment
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GONG_ACCESS_KEY: ${{ secrets.GONG_ACCESS_KEY }}
          GONG_CLIENT_SECRET: ${{ secrets.GONG_CLIENT_SECRET }}
          GONG_BASE_URL: ${{ secrets.GONG_BASE_URL }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT }}
          HUBSPOT_ACCESS_TOKEN: ${{ secrets.HUBSPOT_ACCESS_TOKEN }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          ESTUARY_ACCESS_TOKEN: ${{ secrets.ESTUARY_ACCESS_TOKEN }}

      - name: Upload Sync Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-sync-report
          path: sync_report.json
          retention-days: 30

  test-deployment-readiness:
    name: 🧪 Test Deployment Readiness
    runs-on: ubuntu-latest
    needs: [validate-prerequisites, sync-secrets-to-esc]
    if: needs.validate-prerequisites.outputs.should_proceed == 'true'
    outputs:
      deployment_ready: ${{ steps.readiness.outputs.ready }}
      test_summary: ${{ steps.readiness.outputs.summary }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Setup Pulumi CLI
        uses: pulumi/actions@v5

      - name: Set Pulumi Organization
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          export PULUMI_ORG=${{ env.PULUMI_ORG }}
          pulumi login
          echo "PULUMI_ORG=${{ env.PULUMI_ORG }}" >> $GITHUB_ENV

      - name: Run Deployment Readiness Tests
        id: readiness
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_ORG: ${{ env.PULUMI_ORG }}
        run: |
          echo "🧪 Running Gong deployment readiness tests..."
          
          if python scripts/test_gong_deployment_readiness.py; then
            echo "✅ Deployment readiness tests passed"
            echo "ready=true" >> $GITHUB_OUTPUT
            echo "summary=All deployment readiness tests passed" >> $GITHUB_OUTPUT
          else
            echo "❌ Deployment readiness tests failed"
            echo "ready=false" >> $GITHUB_OUTPUT
            echo "summary=Deployment readiness tests failed - check logs" >> $GITHUB_OUTPUT
          fi

      - name: Upload Readiness Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-readiness-report
          path: gong_deployment_readiness_report.json
          retention-days: 30

  notify-deployment-status:
    name: 📢 Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate-prerequisites, sync-secrets-to-esc, test-deployment-readiness]
    if: always()
    
    steps:
      - name: Determine Overall Status
        id: status
        run: |
          if [[ "${{ needs.test-deployment-readiness.outputs.deployment_ready }}" == "true" ]]; then
            echo "status=SUCCESS" >> $GITHUB_OUTPUT
            echo "message=🎉 Gong pipeline ready for deployment in ${{ env.DEPLOYMENT_ENV }}!" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.test-deployment-readiness.outputs.deployment_ready }}" == "false" ]]; then
            echo "status=NOT_READY" >> $GITHUB_OUTPUT
            echo "message=⚠️ Gong pipeline not ready for deployment - tests failed" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.validate-prerequisites.outputs.should_proceed }}" == "false" ]]; then
            echo "status=PREREQUISITES_FAILED" >> $GITHUB_OUTPUT
            echo "message=❌ Prerequisites validation failed - missing secrets" >> $GITHUB_OUTPUT
          else
            echo "status=UNKNOWN" >> $GITHUB_OUTPUT
            echo "message=❓ Deployment status unknown" >> $GITHUB_OUTPUT
          fi

      - name: Final Status Report
        run: |
          echo "🏁 FINAL DEPLOYMENT STATUS"
          echo "=========================="
          echo "Status: ${{ steps.status.outputs.status }}"
          echo "Message: ${{ steps.status.outputs.message }}"
          echo "Environment: ${{ env.DEPLOYMENT_ENV }}"
          echo "Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Add to step summary
          echo "## 🚀 Gong Deployment Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Message:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.DEPLOYMENT_ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered By:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.status.outputs.status }}" == "SUCCESS" ]]; then
            echo "✅ Ready to proceed with manual deployment verification" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Fix identified issues before proceeding with deployment" >> $GITHUB_STEP_SUMMARY
          fi
