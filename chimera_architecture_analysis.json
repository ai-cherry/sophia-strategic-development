{
  "timestamp": "2025-07-07T10:06:38.588278",
  "chat_components": {
    "frontend_components": [
      "frontend/src/components/shared/EnhancedUnifiedChat.tsx",
      "frontend/src/components/shared/EnhancedUnifiedChatFixed.tsx"
    ],
    "backend_routes": [
      "backend/api/enhanced_unified_chat_routes.py",
      "backend/api/enhanced_unified_chat_routes_integration.py",
      "backend/api/unified_chat_routes.py",
      "backend/api/unified_chat_routes_v2.py"
    ],
    "services": [
      "backend/services/aiac_chat_integration.py",
      "backend/services/chat_driven_metadata_service.py",
      "backend/services/enhanced_chat_context_service.py",
      "backend/services/enhanced_unified_chat_service.py",
      "backend/services/enhanced_unified_chat_service_performance.py",
      "backend/services/snowflake_admin_chat_integration.py",
      "backend/services/unified_chat_service.py",
      "backend/services/_archived_chat_services/20250703_142237_enhanced_ceo_chat_service.py",
      "backend/services/_archived_chat_services/20250703_142237_enhanced_ceo_universal_chat_service.py",
      "backend/services/_archived_chat_services/20250703_142237_unified_chat_service.py",
      "backend/services/chat/base_chat_service.py",
      "backend/services/infrastructure_chat/sophia_infrastructure_chat.py"
    ],
    "agents": [
      "backend/agents/business_intelligence_group/bi_agent_coordinator.py",
      "backend/agents/core/base_agent.py",
      "backend/agents/core/langgraph_agent_base.py",
      "backend/agents/development_group/development_agent_coordinator.py",
      "backend/agents/enhanced/cortex_agent_orchestrator.py",
      "backend/agents/enhanced/data_models.py",
      "backend/agents/infrastructure/sophia_infrastructure_agent.py",
      "backend/agents/integrations/gong_data_integration.py",
      "backend/agents/integrations/optimized_gong_data_integration.py",
      "backend/agents/research/orchestration_research_agent.py",
      "backend/agents/specialized/asana_project_intelligence_agent.py",
      "backend/agents/specialized/call_analysis_agent.py",
      "backend/agents/specialized/enhanced_sales_coach_agent.py",
      "backend/agents/specialized/interactive_sales_coach_agent.py",
      "backend/agents/specialized/linear_project_health_agent.py",
      "backend/agents/specialized/marketing_analysis_agent.py",
      "backend/agents/specialized/sales_coach_agent.py",
      "backend/agents/specialized/sales_intelligence_agent.py",
      "backend/agents/specialized/sales_intelligence_agent_core.py",
      "backend/agents/specialized/sales_intelligence_agent_handlers.py",
      "backend/agents/specialized/sales_intelligence_agent_models.py",
      "backend/agents/specialized/sales_intelligence_agent_utils.py",
      "backend/agents/specialized/slack_analysis_agent.py",
      "backend/agents/specialized/snowflake_admin_agent.py"
    ]
  },
  "data_integrations": {
    "postgresql": {
      "status": "detected",
      "files": [
        "backend/database/postgresql_staging_manager.py",
        "backend/core/database.py",
        "backend/core/optimized_database_manager.py"
      ]
    },
    "redis": {
      "status": "detected",
      "files": [
        "backend/integrations/gong_redis_client.py",
        "backend/core/cache_manager.py",
        "backend/core/enhanced_cache_manager.py",
        "backend/core/hierarchical_cache.py",
        "backend/core/optimized_cache.py",
        "backend/services/gptcache_service.py",
        "tests/test_enhanced_cache.py"
      ]
    },
    "snowflake": {
      "status": "detected",
      "files": [
        "complete_snowflake_setup.py",
        "create_snowflake_status_report.py",
        "deploy_snowflake_stability_simple.py",
        "final_snowflake_fix.py",
        "fix_snowflake_codewide.py",
        "fix_snowflake_connection_final.py",
        "snowflake_advanced_features_implementation.py",
        "backend/agents/specialized/snowflake_admin_agent.py",
        "backend/core/aligned_snowflake_config.py",
        "backend/core/comprehensive_snowflake_config.py",
        "backend/core/enhanced_snowflake_config.py",
        "backend/core/secure_snowflake_config.py",
        "backend/core/snowflake_abstraction.py",
        "backend/core/snowflake_config_manager.py",
        "backend/core/snowflake_config_override.py",
        "backend/core/snowflake_override.py",
        "backend/core/snowflake_production_config.py",
        "backend/core/snowflake_schema_integration.py",
        "backend/core/snowflake_standard_config.py",
        "backend/infrastructure/adapters/snowflake_adapter.py",
        "backend/infrastructure/persistence/repositories/snowflake_call_repository.py",
        "backend/integrations/gong_snowflake_client.py",
        "backend/mcp_servers/snowflake_admin_mcp_server.py",
        "backend/scripts/deploy_snowflake_schema.py",
        "backend/services/enhanced_snowflake_cortex_service.py",
        "backend/services/snowflake_admin_chat_integration.py",
        "backend/services/snowflake_cortex_aisql.py",
        "backend/services/snowflake_intelligence_service.py",
        "backend/services/snowflake_metadata_optimizer.py",
        "backend/services/llm_gateway/snowflake_cortex_enhanced.py",
        "backend/utils/enhanced_snowflake_cortex_service.py",
        "backend/utils/optimized_snowflake_cortex_service.py",
        "backend/utils/optimized_snowflake_cortex_service_core.py",
        "backend/utils/optimized_snowflake_cortex_service_handlers.py",
        "backend/utils/optimized_snowflake_cortex_service_models.py",
        "backend/utils/optimized_snowflake_cortex_service_utils.py",
        "backend/utils/snowflake_cortex_service.py",
        "backend/utils/snowflake_cortex_service_core.py",
        "backend/utils/snowflake_cortex_service_handlers.py",
        "backend/utils/snowflake_cortex_service_models.py",
        "backend/utils/snowflake_cortex_service_utils.py",
        "backend/utils/snowflake_gong_connector.py",
        "backend/utils/snowflake_hubspot_connector.py",
        "mcp-servers/snowflake_cortex/production_snowflake_cortex_mcp_server.py",
        "mcp-servers/snowflake_cortex/snowflake_cortex_mcp_server.py",
        "mcp-servers/snowflake_unified/unified_snowflake_server.py",
        "patches/snowflake_test_util_fix.py",
        "scripts/analyze_snowflake_config.py",
        "scripts/optimize_snowflake_for_sophia.py",
        "scripts/snowflake_alignment_setup.py",
        "scripts/snowflake_cleanup_and_standardize.py",
        "scripts/snowflake_config_manager.py",
        "scripts/standardize_snowflake_config.py",
        "scripts/update_snowflake_schemas.py",
        "scripts/verify_and_align_snowflake.py",
        "cortex_agents_advanced_implementation.py",
        "backend/agents/enhanced/cortex_agent_orchestrator.py",
        "backend/core/cortex_ai_config.py",
        "backend/mcp_servers/cortex_aisql/cortex_mcp_server.py",
        "backend/scripts/deploy_cortex_functions.py",
        "backend/services/cortex_agent_service.py",
        "backend/services/cortex_router.py",
        "backend/services/enhanced_cortex_agent_service.py",
        "backend/services/enhanced_snowflake_cortex_service.py",
        "backend/services/snowflake_cortex_aisql.py",
        "backend/services/llm_gateway/snowflake_cortex_enhanced.py",
        "backend/utils/enhanced_snowflake_cortex_service.py",
        "backend/utils/optimized_snowflake_cortex_service.py",
        "backend/utils/optimized_snowflake_cortex_service_core.py",
        "backend/utils/optimized_snowflake_cortex_service_handlers.py",
        "backend/utils/optimized_snowflake_cortex_service_models.py",
        "backend/utils/optimized_snowflake_cortex_service_utils.py",
        "backend/utils/snowflake_cortex_service.py",
        "backend/utils/snowflake_cortex_service_core.py",
        "backend/utils/snowflake_cortex_service_handlers.py",
        "backend/utils/snowflake_cortex_service_models.py",
        "backend/utils/snowflake_cortex_service_utils.py",
        "mcp-servers/snowflake_cortex/production_snowflake_cortex_mcp_server.py",
        "mcp-servers/snowflake_cortex/snowflake_cortex_mcp_server.py",
        "scripts/setup_cortex_ai_complete.py",
        "tests/test_cortex_service_decomposition.py"
      ]
    },
    "vector_stores": {
      "status": "detected",
      "files": [
        "backend/services/vector_indexing_service.py",
        "backend/services/vector_intelligence_router.py"
      ]
    }
  },
  "ai_services": {
    "llm_services": {
      "status": "detected",
      "files": [
        "backend/api/llm_metrics_routes.py",
        "backend/monitoring/llm_metrics.py",
        "backend/security/llm_audit.py",
        "backend/services/advanced_llm_service.py",
        "backend/services/unified_llm_service.py",
        "backend/services/enhanced_portkey_llm_gateway.py",
        "scripts/find_all_llm_files_to_migrate.py",
        "main.py",
        "unified_ai_assistant.py",
        "unified_ai_coding_assistant.py",
        "archive/ai_memory_backup_20250707_050332/ai_memory_auto_discovery.py",
        "archive/ai_memory_backup_20250707_050332/enhanced_ai_memory_mcp_server.py",
        "archive/ai_memory_backup_20250707_050332/optimized_ai_memory_mcp_server.py",
        "archive/ai_memory_backup_20250707_050332/ai_memory/ai_memory_handlers.py",
        "archive/ai_memory_backup_20250707_050332/ai_memory/ai_memory_models.py",
        "archive/ai_memory_backup_20250707_050340/ai_memory_auto_discovery.py",
        "archive/ai_memory_backup_20250707_050340/enhanced_ai_memory_mcp_server.py",
        "archive/ai_memory_backup_20250707_050340/optimized_ai_memory_mcp_server.py",
        "archive/ai_memory_backup_20250707_050340/ai_memory/ai_memory_handlers.py",
        "archive/ai_memory_backup_20250707_050340/ai_memory/ai_memory_models.py",
        "archive/ai_memory_backup_20250707_050340/ai_memory/enhanced_ai_memory_server.py",
        "archive/ai_memory_backup_20250707_050340/ai-memory/enhanced_ai_memory_server.py",
        "backend/fastapi_main.py",
        "backend/api/ai_memory_health_routes.py",
        "backend/application/ports/services/ai_service.py",
        "backend/core/constitutional_ai.py",
        "backend/core/cortex_ai_config.py",
        "backend/mcp_servers/ai_memory_auto_discovery.py",
        "backend/mcp_servers/ai_code_quality/ai_code_quality_mcp_server.py",
        "backend/mcp_servers/ai_memory/ai_memory_handlers.py",
        "backend/mcp_servers/ai_memory/ai_memory_models.py",
        "backend/n8n_bridge/main.py",
        "backend/services/ai_junk_prevention_service.py",
        "backend/services/aiac_chat_integration.py",
        "backend/services/constitutional_ai.py",
        "backend/services/conversational_training_service.py",
        "backend/services/snowflake_cortex_aisql.py",
        "backend/services/sophia_ai_orchestrator.py",
        "backend/services/unified_ai_orchestration_service.py",
        "backend/services/ai_training/interactive_training_service.py",
        "gong-webhook-service/main.py",
        "mcp-servers/hubspot_unified/src/mcp_server_hubspot/faiss_manager.py",
        "mcp-servers/huggingface_ai/huggingface_ai_mcp_server.py",
        "mcp-servers/ai_memory_deprecated/enhanced_ai_memory_server.py",
        "scripts/ai_analyze_salesforce_data.py",
        "scripts/ai_enhanced_dns_manager.py",
        "scripts/archive_remaining_docs.py",
        "scripts/cursor_ai_analysis.py",
        "scripts/enhance_ai_memory_mcp.py",
        "scripts/automated_maintenance_system.py",
        "scripts/launch_ai_server_alternative.py",
        "scripts/setup_cortex_ai_complete.py",
        "scripts/ai_memory_code_quality_analyzer.py",
        "scripts/dev/ai_memory_health_check.py",
        "scripts/security/ai_security_assessment.py"
      ]
    },
    "portkey_integration": {
      "status": "detected",
      "files": [
        "backend/integrations/portkey_gateway_service.py",
        "backend/services/enhanced_portkey_llm_gateway.py",
        "backend/services/llm_gateway/portkey_integration.py",
        "mcp-servers/portkey_admin/portkey_admin_mcp_server.py"
      ]
    },
    "openrouter_integration": {
      "status": "detected",
      "files": [
        "backend/services/llm_gateway/openrouter_integration.py"
      ]
    },
    "langgraph_workflows": {
      "status": "detected",
      "files": [
        "backend/agents/core/langgraph_agent_base.py",
        "backend/orchestration/langgraph_mcp_orchestrator.py",
        "backend/services/langgraph_learning_orchestrator.py",
        "backend/workflows/enhanced_langgraph_orchestration.py",
        "backend/workflows/enhanced_langgraph_patterns.py",
        "backend/workflows/langgraph_agent_orchestration.py",
        "enhanced_coding_workflow_integration.py",
        "example_enhanced_workflow.py",
        "setup_enhanced_coding_workflow.py",
        "sophia_workflow_runner.py",
        "backend/workflows/multi_agent_workflow.py",
        "scripts/n8n-workflow-automation.py"
      ]
    }
  }
}