version: '3.8'

# Docker Swarm/Cloud Configuration for Lambda Labs Deployment
# This file configures Sophia AI for production deployment on Lambda Labs infrastructure
# Use: docker stack deploy -c docker-compose.cloud.yml sophia-ai

services:
  # Main Sophia AI Backend - Scalable across Lambda Labs instances
  sophia-backend:
    image: ${DOCKER_REGISTRY:-scoobyjava15}/sophia-ai:${IMAGE_TAG:-latest}
    environment:
      - ENVIRONMENT=prod
      - PULUMI_ORG=scoobyjava-org
      - PULUMI_ACCESS_TOKEN_FILE=/run/secrets/pulumi_access_token
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://sophia:${POSTGRES_PASSWORD}@postgres:5432/sophia
    ports:
      - target: 8000
        published: 8000
        mode: ingress
    secrets:
      - pulumi_access_token
      - postgres_password
    deploy:
      mode: replicated
      replicas: 3
      placement:
        constraints:
          - node.role == worker
          - node.labels.gpu == true
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s
        max_failure_ratio: 0.3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sophia-overlay
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sophia-backend.rule=Host(`api.sophia-ai.lambda.cloud`)"
      - "traefik.http.routers.sophia-backend.tls=true"
      - "traefik.http.routers.sophia-backend.tls.certresolver=le"
      - "traefik.http.services.sophia-backend.loadbalancer.server.port=8000"

  # Mem0 OpenMemory MCP Server - Distributed across Lambda Labs
  mem0-server:
    image: ${DOCKER_REGISTRY:-scoobyjava15}/sophia-ai-mem0:${IMAGE_TAG:-latest}
    environment:
      - MEM0_API_KEY_FILE=/run/secrets/mem0_api_key
      - MEM0_HOST=mem0-service
      - MEM0_PORT=8765
    ports:
      - target: 8080
        published: 8080
        mode: ingress
    secrets:
      - mem0_api_key
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == worker
          - node.labels.memory_optimized == true
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - sophia-overlay
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mem0-server.rule=Host(`mem0.sophia-ai.lambda.cloud`)"
      - "traefik.http.routers.mem0-server.tls=true"

  # Cortex AISQL MCP Server - AI-optimized deployment
  cortex-server:
    image: ${DOCKER_REGISTRY:-scoobyjava15}/sophia-ai-cortex:${IMAGE_TAG:-latest}
    environment:
      - SNOWFLAKE_ACCOUNT_FILE=/run/secrets/snowflake_account
      - SNOWFLAKE_USER_FILE=/run/secrets/snowflake_user
      - SNOWFLAKE_PASSWORD_FILE=/run/secrets/snowflake_password
      - SNOWFLAKE_WAREHOUSE=SOPHIA_WH
      - SNOWFLAKE_DATABASE=SOPHIA_AI
      - SNOWFLAKE_SCHEMA=PUBLIC
    ports:
      - target: 8080
        published: 8081
        mode: ingress
    secrets:
      - snowflake_account
      - snowflake_user
      - snowflake_password
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == worker
          - node.labels.gpu == true
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
          generic_resources:
            - discrete_resource_spec:
                kind: 'NVIDIA-GPU'
                value: 1
        reservations:
          cpus: '2.0'
          memory: 4G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - sophia-overlay
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cortex-server.rule=Host(`cortex.sophia-ai.lambda.cloud`)"
      - "traefik.http.routers.cortex-server.tls=true"

  # Redis - Distributed caching across Lambda Labs
  redis:
    image: redis:7-alpine
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --bind 0.0.0.0
    ports:
      - target: 6379
        published: 6379
        mode: host
    volumes:
      - redis_data:/data
    deploy:
      mode: replicated
      replicas: 3
      placement:
        constraints:
          - node.role == worker
        preferences:
          - spread: node.labels.zone
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sophia-overlay

  # PostgreSQL - High-availability database
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=sophia
      - POSTGRES_USER=sophia
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - target: 5432
        published: 5432
        mode: host
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
          - node.labels.storage == ssd
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sophia -d sophia"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sophia-overlay

  # Traefik - Load balancer and reverse proxy
  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmmode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.tlschallenge=true"
      - "--certificatesresolvers.le.acme.email=admin@sophia-ai.com"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--global.checkNewVersion=false"
      - "--global.sendAnonymousUsage=false"
    ports:
      - target: 80
        published: 80
        mode: ingress
      - target: 443
        published: 443
        mode: ingress
      - target: 8080
        published: 8090
        mode: ingress
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - traefik-public
      - sophia-overlay
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.sophia-ai.lambda.cloud`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.service=api@internal"

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - target: 9090
        published: 9090
        mode: ingress
    volumes:
      - prometheus_data:/prometheus
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - sophia-overlay

  # Grafana - Monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - target: 3000
        published: 3000
        mode: ingress
    secrets:
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    networks:
      - sophia-overlay

# Docker Secrets for secure credential management
secrets:
  pulumi_access_token:
    external: true
  postgres_password:
    external: true
  mem0_api_key:
    external: true
  snowflake_account:
    external: true
  snowflake_user:
    external: true
  snowflake_password:
    external: true
  grafana_password:
    external: true

# Persistent volumes for stateful services
volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sophia-ai/data/redis
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sophia-ai/data/postgres
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sophia-ai/data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sophia-ai/data/grafana
  traefik_letsencrypt:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sophia-ai/data/traefik

# Overlay networks for service communication
networks:
  sophia-overlay:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 10.0.1.0/24
  traefik-public:
    driver: overlay
    attachable: true
    external: true 