#!/usr/bin/env python3
"""
Sophia AI Complete System Startup
Comprehensive script to start all essential services for active development
"""

import asyncio
import os
import signal
import subprocess
import sys
import time
from pathlib import Path

import aiohttp


class SophiaSystemManager:
    def __init__(self):
        self.processes = []
        self.services_status = {}
        self.root_path = Path(__file__).parent

    def setup_environment(self):
        """Setup essential environment variables"""
        os.environ["PULUMI_ORG"] = "scoobyjava-org"
        os.environ["PYTHONPATH"] = str(self.root_path)

        # Set minimal environment variables to prevent startup failures
        essential_vars = {
            "OPENAI_API_KEY": "",
            "PINECONE_API_KEY": "",
            "REDIS_URL": "redis://localhost:6379",
            "DATABASE_URL": "postgresql://localhost:5432/sophia",
            "ENVIRONMENT": "development",
        }

        for key, default_value in essential_vars.items():
            if key not in os.environ:
                os.environ[key] = default_value

    def start_infrastructure(self):
        """Start core infrastructure services"""
        print("üîß Starting infrastructure services...")

        try:
            # Start PostgreSQL and Redis
            subprocess.run(
                ["docker-compose", "up", "-d", "postgres", "redis"],
                check=True,
                capture_output=True,
            )
            print("‚úÖ PostgreSQL and Redis started")
            time.sleep(3)
            self.services_status["infrastructure"] = "healthy"
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è  Infrastructure services may already be running: {e}")
            self.services_status["infrastructure"] = "unknown"

    def check_port_open(self, port):
        """Check if a port is open"""
        import socket

        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex(("localhost", port))
        sock.close()
        return result == 0

    def start_mcp_servers(self):
        """Start MCP servers if not already running"""
        print("üöÄ Checking MCP servers...")

        # Check if MCP servers are already running
        mcp_ports = {9000: "AI Memory", 3008: "Codacy", 3006: "Asana", 3007: "Notion"}
        running_count = 0

        for port, name in mcp_ports.items():
            if self.check_port_open(port):
                print(f"‚úÖ {name} MCP server already running on port {port}")
                running_count += 1
            else:
                print(f"‚ö†Ô∏è  {name} MCP server not running on port {port}")

        if running_count == len(mcp_ports):
            print("‚úÖ All MCP servers are running")
            self.services_status["mcp_servers"] = "healthy"
        else:
            print(f"‚ö†Ô∏è  Only {running_count}/{len(mcp_ports)} MCP servers running")
            print("üí° Run 'python start_mcp_servers.py' to start MCP servers")
            self.services_status["mcp_servers"] = "partial"

    def start_backend_simplified(self):
        """Start simplified Sophia backend"""
        print("üöÄ Starting Sophia backend...")

        # Check if backend is already running
        if self.check_port_open(8000):
            print("‚úÖ Sophia backend already running on port 8000")
            self.services_status["backend"] = "healthy"
            return True

        # Create a simplified backend startup script
        backend_script = f"""
import os
import sys
import uvicorn
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from datetime import datetime

# Set environment
os.environ["PULUMI_ORG"] = "scoobyjava-org"
sys.path.append("{self.root_path}")

# Create minimal FastAPI app
app = FastAPI(title="Sophia AI Backend", version="2.0.0")

@app.get("/health")
async def health_check():
    return JSONResponse(content={{
        "status": "healthy",
        "service": "sophia-backend",
        "timestamp": datetime.now().isoformat(),
        "version": "2.0.0"
    }})

@app.get("/api/v1/status")
async def system_status():
    return JSONResponse(content={{
        "backend": "running",
        "mcp_servers": {{
            "ai_memory": "http://localhost:9000",
            "codacy": "http://localhost:3008",
            "asana": "http://localhost:3006",
            "notion": "http://localhost:3007"
        }},
        "infrastructure": {{
            "postgres": "running",
            "redis": "running"
        }}
    }})

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")
"""

        # Write simplified backend script
        backend_path = self.root_path / "temp_sophia_backend.py"
        with open(backend_path, "w") as f:
            f.write(backend_script)

        try:
            # Start simplified backend
            proc = subprocess.Popen(
                [sys.executable, str(backend_path)],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            self.processes.append(
                {
                    "name": "Sophia Backend",
                    "process": proc,
                    "port": 8000,
                    "script_path": backend_path,
                }
            )

            # Wait and check if it started
            time.sleep(3)

            if proc.poll() is None and self.check_port_open(8000):
                print("‚úÖ Sophia backend started successfully on port 8000")
                self.services_status["backend"] = "healthy"
                return True
            else:
                stdout, stderr = proc.communicate()
                print(f"‚ùå Backend failed to start: {stderr.decode()}")
                self.services_status["backend"] = "failed"
                return False

        except Exception as e:
            print(f"‚ùå Error starting backend: {e}")
            self.services_status["backend"] = "error"
            return False

    async def run_system_health_check(self):
        """Run comprehensive system health check"""
        print("\\nüè• Running System Health Check")
        print("=" * 50)

        services = {
            "AI Memory MCP": "http://localhost:9000/health",
            "Codacy MCP": "http://localhost:3008/health",
            "Asana MCP": "http://localhost:3006/health",
            "Notion MCP": "http://localhost:3007/health",
            "Sophia Backend": "http://localhost:8000/health",
        }

        healthy_count = 0

        async with aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=3)
        ) as session:
            for service_name, url in services.items():
                try:
                    async with session.get(url) as response:
                        if response.status == 200:
                            print(f"üü¢ {service_name}: HEALTHY")
                            healthy_count += 1
                        else:
                            print(f"üî¥ {service_name}: HTTP {response.status}")
                except Exception:
                    print(f"üî¥ {service_name}: UNREACHABLE")

        print(f"\\nüìä System Health: {healthy_count}/{len(services)} services healthy")

        if healthy_count == len(services):
            print("üéâ SOPHIA AI SYSTEM FULLY OPERATIONAL!")
            self.print_next_steps()
        else:
            print("‚ö†Ô∏è  Some services need attention")
            self.print_troubleshooting()

    def print_next_steps(self):
        """Print next steps for development"""
        print("\\nüéØ NEXT STEPS FOR ACTIVE DEVELOPMENT:")
        print("=" * 50)
        print("1. üîó **Cursor IDE Integration:**")
        print(
            "   - MCP servers are ready for @ai_memory, @codacy, @asana, @notion commands"
        )
        print("   - Backend API available at http://localhost:8000")

        print("\\n2. üß™ **Testing & Monitoring:**")
        print("   - Run: python simple_mcp_test.py")
        print("   - Monitor: python test_and_monitor_mcp.py monitor")

        print("\\n3. üöÄ **Development Workflow:**")
        print("   - Use natural language commands in Cursor")
        print("   - Access unified API at http://localhost:8000/api/v1/")
        print("   - View system status at http://localhost:8000/api/v1/status")

        print("\\n4. üîß **Advanced Features:**")
        print(
            "   - Scale MCP servers: docker-compose -f docker-compose.mcp-gateway.yml up"
        )

    def print_troubleshooting(self):
        """Print troubleshooting guide"""
        print("\\nüîß TROUBLESHOOTING:")
        print("=" * 30)
        print("1. Start MCP servers: python start_mcp_servers.py")
        print("2. Check infrastructure: docker-compose ps")
        print("3. Restart system: Ctrl+C then re-run this script")
        print("4. View logs: Check terminal output for error messages")

    def stop_all_services(self):
        """Stop all running services"""
        print("\\nüõë Stopping all services...")

        for service_info in self.processes:
            name = service_info["name"]
            proc = service_info["process"]
            script_path = service_info.get("script_path")

            if proc.poll() is None:
                print(f"üîÑ Stopping {name}...")
                proc.terminate()
                try:
                    proc.wait(timeout=5)
                    print(f"‚úÖ {name} stopped")
                except subprocess.TimeoutExpired:
                    proc.kill()
                    print(f"‚ö†Ô∏è  {name} force killed")

            # Clean up temporary script
            if script_path and script_path.exists():
                script_path.unlink()

        print("‚úÖ All services stopped")

    def signal_handler(self, signum, frame):
        """Handle shutdown signals"""
        print(f"\\nüì° Received signal {signum}")
        self.stop_all_services()
        sys.exit(0)


async def main():
    manager = SophiaSystemManager()

    # Setup signal handlers
    signal.signal(signal.SIGINT, manager.signal_handler)
    signal.signal(signal.SIGTERM, manager.signal_handler)

    try:
        print("üöÄ Sophia AI Complete System Startup")
        print("=" * 50)

        # Setup environment
        manager.setup_environment()
        print("‚úÖ Environment configured")

        # Start infrastructure
        manager.start_infrastructure()

        # Check MCP servers
        manager.start_mcp_servers()

        # Start simplified backend
        manager.start_backend_simplified()

        # Run health check
        await manager.run_system_health_check()

        print("\\nüéâ Sophia AI system is ready for development!")
        print("Press Ctrl+C to stop all services")

        # Graceful shutdown handling
shutdown_event = asyncio.Event()

def signal_handler(signum, frame):
    logger.info(f"Received signal {signum}, initiating graceful shutdown...")
    shutdown_event.set()

# Setup signal handlers
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

logger.info("üéâ Sophia AI system is ready!")
logger.info("Press Ctrl+C to stop all services")

# Wait for shutdown signal instead of infinite sleep
try:
    await shutdown_event.wait()
except KeyboardInterrupt:
    logger.info("üõë Shutdown requested")

    except KeyboardInterrupt:
        print("\\nüõë Shutdown requested")
    except Exception as e:
        print(f"\\nüí• Unexpected error: {e}")
        return 1
    finally:
        manager.stop_all_services()

    return 0


if __name__ == "__main__":
    sys.exit(asyncio.run(main()))
