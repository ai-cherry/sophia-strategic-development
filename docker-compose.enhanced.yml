# Enhanced Docker Swarm Configuration for Sophia AI
# Building on existing docker-compose.cloud.yml with performance and reliability improvements

version: '3.8'

networks:
  sophia-overlay:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: 'true'
      # Enhanced network performance
      com.docker.network.driver.mtu: 1500

  # High-performance network for critical services
  sophia-performance:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: 'true'
      com.docker.network.driver.mtu: 9000  # Jumbo frames for internal communication

# Enhanced secret management with better organization
secrets:
  sophia_secrets:
    external: true
    name: sophia-ai-unified-secrets
  performance_config:
    external: true
    name: sophia-ai-performance-config
  monitoring_config:
    external: true
    name: sophia-ai-monitoring-config

# Enhanced volume configuration with performance optimization
volumes:
  postgres_data:
    driver_opts:
      type: none
      o: bind
      device: /opt/sophia-ai/data/postgres
  redis_data:
    driver_opts:
      type: none
      o: bind
      device: /opt/sophia-ai/data/redis
  prometheus_data:
    driver_opts:
      type: none
      o: bind
      device: /opt/sophia-ai/data/prometheus
  grafana_data:
    driver_opts:
      type: none
      o: bind
      device: /opt/sophia-ai/data/grafana

# Shared configuration templates for better maintainability
x-common-deploy: &common-deploy
  restart_policy:
    condition: on-failure
    delay: 5s
    max_attempts: 3
    window: 120s
  update_config:
    parallelism: 1
    delay: 10s
    failure_action: rollback
    monitor: 30s
    max_failure_ratio: 0.2
  rollback_config:
    parallelism: 1
    delay: 5s
    failure_action: pause
    monitor: 30s

# Resource templates optimized for Lambda Labs infrastructure
x-high-performance: &high-performance
  limits:
    cpus: '2.0'
    memory: 4G
  reservations:
    cpus: '1.0'
    memory: 2G

x-medium-performance: &medium-performance
  limits:
    cpus: '1.0'
    memory: 2G
  reservations:
    cpus: '0.5'
    memory: 1G

x-low-performance: &low-performance
  limits:
    cpus: '0.5'
    memory: 1G
  reservations:
    cpus: '0.25'
    memory: 512M

# Enhanced health check templates
x-api-healthcheck: &api-healthcheck
  test: ["CMD", "curl", "-f", "http://localhost:${PORT}/health"]
  interval: 20s
  timeout: 10s
  retries: 3
  start_period: 40s

x-database-healthcheck: &database-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

services:
  # CORE BACKEND SERVICES
  sophia-ai-backend:
    image: scoobyjava15/sophia-ai-backend:latest
    deploy:
      <<: *common-deploy
      replicas: 3
      resources: *high-performance
      placement:
        constraints:
          - node.role == worker
        preferences:
          - spread: node.labels.zone
    environment:
      - ENVIRONMENT=prod
      - PULUMI_ORG=scoobyjava-org
      - LAMBDA_LABS_HOST=192.222.58.232
      - PORT=8000
      # Performance optimizations
      - UVICORN_WORKERS=4
      - UVICORN_MAX_REQUESTS=1000
      - UVICORN_MAX_REQUESTS_JITTER=50
      - WORKER_CONNECTIONS=1000
      # Database connection pooling
      - DB_POOL_SIZE=20
      - DB_MAX_OVERFLOW=30
      - DB_POOL_TIMEOUT=30
      # Redis connection optimization
      - REDIS_MAX_CONNECTIONS=100
      - REDIS_RETRY_ON_TIMEOUT=true
    healthcheck:
      <<: *api-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    networks:
      - sophia-performance
      - sophia-overlay
    secrets:
      - sophia_secrets
      - performance_config
    volumes:
      - /opt/sophia-ai/logs:/app/logs
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # AI MEMORY MCP SERVER - Enhanced
  ai-memory-enhanced:
    image: scoobyjava15/sophia-ai-memory:latest
    deploy:
      <<: *common-deploy
      replicas: 3
      resources: *high-performance
      placement:
        constraints:
          - node.role == worker
          - node.labels.memory-optimized == true
    environment:
      - ENVIRONMENT=prod
      - PULUMI_ORG=scoobyjava-org
      - PORT=9001
      # Memory optimization
      - MEMORY_CACHE_SIZE=1GB
      - VECTOR_INDEX_CACHE_SIZE=500MB
      - EMBEDDING_BATCH_SIZE=50
      # Connection pooling
      - POSTGRES_POOL_SIZE=15
      - REDIS_POOL_SIZE=20
    healthcheck:
      <<: *api-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:9001/health"]
    networks:
      - sophia-performance
    secrets:
      - sophia_secrets
    volumes:
      - /opt/sophia-ai/ai-memory-cache:/app/cache

  # SNOWFLAKE CORTEX - GPU Optimized
  snowflake-cortex-enhanced:
    image: scoobyjava15/sophia-snowflake-cortex:latest
    deploy:
      <<: *common-deploy
      replicas: 2
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
      placement:
        constraints:
          - node.role == worker
          - node.labels.gpu == true
    environment:
      - ENVIRONMENT=prod
      - PULUMI_ORG=scoobyjava-org
      - PORT=9030
      # GPU optimization
      - CUDA_VISIBLE_DEVICES=all
      - NVIDIA_VISIBLE_DEVICES=all
      # Snowflake optimization
      - SNOWFLAKE_WAREHOUSE=SOPHIA_AI_CORTEX_WH
      - SNOWFLAKE_MAX_CONNECTIONS=20
      - CORTEX_BATCH_SIZE=100
    healthcheck:
      <<: *api-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:9030/health"]
    networks:
      - sophia-performance
    secrets:
      - sophia_secrets
    runtime: nvidia

  # REDIS - Enhanced Performance
  redis-enhanced:
    image: redis:7-alpine
    command: |
      redis-server
      --appendonly yes
      --maxmemory 4gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --tcp-backlog 511
      --save 900 1 300 10 60 10000
    deploy:
      <<: *common-deploy
      replicas: 1
      resources: *high-performance
      placement:
        constraints:
          - node.role == manager
          - node.labels.ssd == true
    healthcheck:
      <<: *database-healthcheck
      test: ["CMD", "redis-cli", "ping"]
    networks:
      - sophia-performance
      - sophia-overlay
    volumes:
      - redis_data:/data
    sysctls:
      - net.core.somaxconn=1024

  # POSTGRESQL - Performance Optimized
  postgres-enhanced:
    image: postgres:15-alpine
    deploy:
      <<: *common-deploy
      replicas: 1
      resources: *high-performance
      placement:
        constraints:
          - node.role == manager
          - node.labels.ssd == true
    environment:
      - POSTGRES_DB=sophia_ai
      - POSTGRES_USER=sophia
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      # Performance optimization
      - POSTGRES_SHARED_BUFFERS=1GB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=3GB
      - POSTGRES_MAINTENANCE_WORK_MEM=256MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
      - POSTGRES_RANDOM_PAGE_COST=1.1
      - POSTGRES_EFFECTIVE_IO_CONCURRENCY=200
    healthcheck:
      <<: *database-healthcheck
      test: ["CMD-SHELL", "pg_isready -U sophia"]
    networks:
      - sophia-performance
      - sophia-overlay
    secrets:
      - sophia_secrets
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /opt/sophia-ai/postgres-config:/etc/postgresql

  # MCP GATEWAY - Load Balanced
  mcp-gateway-enhanced:
    image: scoobyjava15/sophia-mcp-gateway:latest
    deploy:
      <<: *common-deploy
      replicas: 3
      resources: *medium-performance
      placement:
        constraints:
          - node.role == worker
    environment:
      - ENVIRONMENT=prod
      - PULUMI_ORG=scoobyjava-org
      - PORT=9000
      # Load balancing optimization
      - GATEWAY_MAX_CONNECTIONS=500
      - GATEWAY_TIMEOUT=30s
      - GATEWAY_RETRY_ATTEMPTS=3
    healthcheck:
      <<: *api-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
    networks:
      - sophia-performance
    secrets:
      - sophia_secrets
    ports:
      - "9000:9000"

  # MONITORING SERVICES
  prometheus-enhanced:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.no-lockfile'
    deploy:
      <<: *common-deploy
      replicas: 1
      resources: *medium-performance
      placement:
        constraints:
          - node.role == manager
    networks:
      - sophia-overlay
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - /opt/sophia-ai/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    secrets:
      - monitoring_config

  grafana-enhanced:
    image: grafana/grafana:latest
    deploy:
      <<: *common-deploy
      replicas: 1
      resources: *medium-performance
      placement:
        constraints:
          - node.role == manager
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-piechart-panel
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      # Performance optimization
      - GF_DATABASE_MAX_OPEN_CONN=300
      - GF_DATABASE_MAX_IDLE_CONN=50
    networks:
      - sophia-overlay
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - /opt/sophia-ai/monitoring/grafana:/etc/grafana/provisioning:ro
    secrets:
      - sophia_secrets
      - monitoring_config

  # PERFORMANCE MONITORING SERVICE
  performance-monitor:
    image: scoobyjava15/sophia-performance-monitor:latest
    deploy:
      <<: *common-deploy
      replicas: 1
      resources: *low-performance
      placement:
        constraints:
          - node.role == worker
    environment:
      - ENVIRONMENT=prod
      - MONITORING_INTERVAL=30s
      - ALERT_THRESHOLDS_FILE=/run/secrets/performance_config
    networks:
      - sophia-performance
      - sophia-overlay
    secrets:
      - sophia_secrets
      - performance_config
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  # HEALTH CHECK SERVICE
  health-aggregator:
    image: scoobyjava15/sophia-health-aggregator:latest
    deploy:
      <<: *common-deploy
      replicas: 1
      resources: *low-performance
    environment:
      - ENVIRONMENT=prod
      - CHECK_INTERVAL=10s
      - SERVICES_CONFIG_FILE=/run/secrets/monitoring_config
    networks:
      - sophia-performance
      - sophia-overlay
    secrets:
      - sophia_secrets
      - monitoring_config
    ports:
      - "8080:8080"

# Enhanced logging configuration
x-logging: &logging
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "5"
    labels: "service,environment"
