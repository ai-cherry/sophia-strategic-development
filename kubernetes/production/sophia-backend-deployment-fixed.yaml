apiVersion: v1
kind: ConfigMap
metadata:
  name: sophia-backend-app
  namespace: sophia-ai-prod
data:
  app.py: |
    from fastapi import FastAPI
    from fastapi.responses import JSONResponse
    import asyncio
    import os
    import uvicorn
    
    app = FastAPI(title="Sophia AI Backend", version="1.0.0")
    
    @app.get("/")
    async def root():
        return {"message": "Sophia AI Backend is running", "environment": os.getenv("ENVIRONMENT", "dev")}
    
    @app.get("/health")
    async def health():
        return JSONResponse(
            status_code=200,
            content={
                "status": "healthy",
                "environment": os.getenv("ENVIRONMENT"),
                "gpu_available": os.getenv("NVIDIA_VISIBLE_DEVICES", "none"),
                "timestamp": "2025-07-15T17:45:00Z"
            }
        )
    
    @app.get("/api/health")
    async def api_health():
        return await health()
    
    if __name__ == "__main__":
        uvicorn.run(app, host="0.0.0.0", port=8000)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sophia-backend-fixed
  namespace: sophia-ai-prod
  labels:
    app: sophia-backend-fixed
    component: api
    environment: production
    fix-version: direct-exec-v1
spec:
  replicas: 1  # Start with 1 replica for debugging
  selector:
    matchLabels:
      app: sophia-backend-fixed
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: sophia-backend-fixed
        component: api
        fix-version: direct-exec-v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      # CRITICAL FIX: Temporarily run as root for debugging
      # User analysis: "Permission Surgery: Run as root temporarily for debug"
      securityContext:
        runAsUser: 0  # Run as root to eliminate permission issues
        runAsGroup: 0
      
      containers:
      - name: sophia-backend
        image: python:3.11-slim
        imagePullPolicy: Always
        
        # CRITICAL FIX: Direct execution without copying
        # User solution: "Nuke the cp/Exec Chain: Ditch complex argsâ€”use direct exec from mount"
        command: ["sh", "-c"]
        args: 
        - |
          echo "=== Sophia AI Backend Startup ==="
          echo "Environment: $ENVIRONMENT"
          echo "User: $(id)"
          echo "Working directory: $(pwd)"
          echo "Python version: $(python --version)"
          echo "Installing FastAPI and uvicorn..."
          pip install --no-cache-dir fastapi uvicorn
          echo "Starting application from ConfigMap..."
          python /app-source/app.py
        
        ports:
        - containerPort: 8000
          name: http
        
        # Environment variables
        env:
        - name: ENVIRONMENT
          value: "prod"
        - name: PULUMI_ORG
          value: "scoobyjava-org"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: PORT
          value: "8000"
        
        # Volume mounts - ConfigMap as read-only source
        volumeMounts:
        - name: app-code
          mountPath: /app-source
          readOnly: true  # Explicit read-only as suggested
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Startup probe for pip install
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12  # Allow 60 seconds for pip install
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
            nvidia.com/gpu: "0"  # Explicitly request no GPU
          limits:
            memory: "1Gi"
            cpu: "500m"
            nvidia.com/gpu: "0"  # Explicitly limit no GPU
      
      # Volumes
      volumes:
      - name: app-code
        configMap:
          name: sophia-backend-app
          defaultMode: 0755  # Ensure executable permissions
      
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      
      # Service account
      serviceAccountName: default
---
apiVersion: v1
kind: Service
metadata:
  name: sophia-backend-fixed
  namespace: sophia-ai-prod
  labels:
    app: sophia-backend-fixed
spec:
  selector:
    app: sophia-backend-fixed
  ports:
  - port: 8000
    targetPort: 8000
    name: http
  type: ClusterIP 