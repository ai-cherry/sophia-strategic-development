{{- range $serverName, $server := .Values.servers }}
{{- if $server.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $server.name }}
  namespace: {{ $.Values.namespace.name }}
  labels:
    app: sophia-mcp
    component: {{ $server.name }}
    tier: {{ $server.tier }}
    version: {{ $.Chart.AppVersion }}
  annotations:
    deployment.kubernetes.io/revision: "{{ $.Release.Revision }}"
spec:
  replicas: {{ $server.replicas }}
  selector:
    matchLabels:
      app: sophia-mcp
      component: {{ $server.name }}
  template:
    metadata:
      labels:
        app: sophia-mcp
        component: {{ $server.name }}
        tier: {{ $server.tier }}
        version: {{ $.Chart.AppVersion }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ $server.port }}"
        prometheus.io/path: "/metrics"
    spec:
      {{- with $.Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: sophia-mcp
      securityContext:
        {{- toYaml $.Values.global.securityContext | nindent 8 }}
      containers:
      - name: {{ $server.name }}
        image: "{{ $.Values.global.dockerRegistry }}/{{ $server.image }}"
        imagePullPolicy: {{ $.Values.global.imagePullPolicy }}
        ports:
        - name: http
          containerPort: {{ $server.port }}
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: SERVER_NAME
          value: {{ $server.name }}
        - name: SERVER_PORT
          value: "{{ $server.port }}"
        - name: SERVER_TIER
          value: {{ $server.tier }}
        - name: LAMBDA_LABS_HOST
          value: {{ $.Values.global.lambdaLabsHost }}
        - name: ENVIRONMENT
          value: {{ $.Values.global.environment }}
        - name: PULUMI_ORG
          value: "scoobyjava-org"
        {{- range $key, $value := $server.env }}
        - name: {{ $key }}
          value: "{{ $value }}"
        {{- end }}
        envFrom:
        - configMapRef:
            name: mcp-config
        - secretRef:
            name: mcp-secrets
        resources:
          {{- toYaml $server.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /startup
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: config
        configMap:
          name: {{ $server.name }}-config
          optional: true
      - name: cache
        emptyDir:
          sizeLimit: 1Gi
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
{{- end }}
{{- end }}

{{- range $serviceName, $service := .Values.centralServices }}
{{- if $service.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $service.name }}
  namespace: {{ $.Values.namespace.name }}
  labels:
    app: sophia-mcp
    component: {{ $service.name }}
    type: central-service
    version: {{ $.Chart.AppVersion }}
spec:
  replicas: {{ $service.replicas }}
  selector:
    matchLabels:
      app: sophia-mcp
      component: {{ $service.name }}
  template:
    metadata:
      labels:
        app: sophia-mcp
        component: {{ $service.name }}
        type: central-service
        version: {{ $.Chart.AppVersion }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ $service.port }}"
    spec:
      {{- with $.Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: sophia-mcp
      containers:
      - name: {{ $service.name }}
        image: "{{ $.Values.global.dockerRegistry }}/{{ $service.image }}"
        imagePullPolicy: {{ $.Values.global.imagePullPolicy }}
        ports:
        - name: http
          containerPort: {{ $service.port }}
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: {{ $service.name }}
        - name: SERVICE_PORT
          value: "{{ $service.port }}"
        - name: LAMBDA_LABS_HOST
          value: {{ $.Values.global.lambdaLabsHost }}
        - name: ENVIRONMENT
          value: {{ $.Values.global.environment }}
        envFrom:
        - configMapRef:
            name: mcp-config
        - secretRef:
            name: mcp-secrets
        resources:
          {{- toYaml $service.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 20
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
{{- end }}
{{- end }} 