{
  "summary": {
    "total_files_scanned": 212,
    "unique_secrets_found": 379,
    "access_patterns": {
      "secrets_ref": 73,
      "os_getenv": 134,
      "os_environ_get": 10,
      "os_environ": 45,
      "get_config_value": 293,
      "env_var_ref": 429,
      "process_env": 137
    },
    "potential_issues": 29
  },
  "naming_conventions": {
    "uppercase_underscore": 300,
    "lowercase_underscore": 79,
    "camelCase": 0,
    "mixed": 0
  },
  "top_secrets": [
    [
      "snowflake_password",
      51
    ],
    [
      "snowflake_account",
      25
    ],
    [
      "gong_access_key",
      22
    ],
    [
      "openai_api_key",
      21
    ],
    [
      "snowflake_user",
      18
    ],
    [
      "PULUMI_ACCESS_TOKEN",
      17
    ],
    [
      "ESTUARY_ACCESS_TOKEN",
      15
    ],
    [
      "CI",
      14
    ],
    [
      "NODE_ENV",
      14
    ],
    [
      "SNOWFLAKE_ACCOUNT",
      13
    ],
    [
      "VERCEL_TOKEN",
      13
    ],
    [
      "GONG_ACCESS_KEY",
      13
    ],
    [
      "PORTKEY_VIRTUAL_KEY",
      12
    ],
    [
      "GITHUB_TOKEN",
      11
    ],
    [
      "JWT_SECRET",
      11
    ],
    [
      "PORTKEY_API_KEY",
      11
    ],
    [
      "DATABASE_PASSWORD",
      10
    ],
    [
      "SNOWFLAKE_PASSWORD",
      10
    ],
    [
      "PULUMI_ORG",
      10
    ],
    [
      "REDIS_PASSWORD",
      10
    ]
  ],
  "access_pattern_details": {
    "secrets_ref": [
      {
        "file": "simple_validation_fix.py",
        "secret": "ASANA_PAT_TOKEN"
      },
      {
        "file": "simple_validation_fix.py",
        "secret": "SALESFORCE_ACCESS_TOKEN"
      },
      {
        "file": "simple_validation_fix.py",
        "secret": "SLACK_CLIENT_ID"
      },
      {
        "file": "simple_validation_fix.py",
        "secret": "SLACK_CLIENT_SECRET"
      },
      {
        "file": "simple_validation_fix.py",
        "secret": "SLACK_SIGNING_SECRET"
      },
      {
        "file": "simple_validation_fix.py",
        "secret": "SLACK_APP_TOKEN"
      },
      {
        "file": "simple_validation_fix.py",
        "secret": "SLACK_REFRESH_TOKEN"
      },
      {
        "file": "simple_validation_fix.py",
        "secret": "SLACK_SOCKET_TOKEN"
      },
      {
        "file": "simple_validation_fix.py",
        "secret": "HUBSPOT_CLIENT_SECRET"
      },
      {
        "file": "simple_validation_fix.py",
        "secret": "GONG_ACCESS_KEY_SECRET"
      },
      {
        "file": "simple_validation_results.json",
        "secret": "ASANA_PAT_TOKEN"
      },
      {
        "file": "simple_validation_results.json",
        "secret": "SALESFORCE_ACCESS_TOKEN"
      },
      {
        "file": "simple_validation_results.json",
        "secret": "SLACK_CLIENT_ID"
      },
      {
        "file": "simple_validation_results.json",
        "secret": "SLACK_CLIENT_SECRET"
      },
      {
        "file": "simple_validation_results.json",
        "secret": "SLACK_SIGNING_SECRET"
      },
      {
        "file": "simple_validation_results.json",
        "secret": "SLACK_APP_TOKEN"
      },
      {
        "file": "simple_validation_results.json",
        "secret": "SLACK_REFRESH_TOKEN"
      },
      {
        "file": "simple_validation_results.json",
        "secret": "SLACK_SOCKET_TOKEN"
      },
      {
        "file": "simple_validation_results.json",
        "secret": "HUBSPOT_CLIENT_SECRET"
      },
      {
        "file": "simple_validation_results.json",
        "secret": "GONG_ACCESS_KEY_SECRET"
      },
      {
        "file": "comprehensive_secrets_audit.py",
        "secret": "SECRET_NAME"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "PORTKEY_API_KEY"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "SALESFORCE_OAUTH_TOKEN"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "HUBSPOT_API_KEY"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "INTERCOM_ACCESS_TOKEN"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "GONG_ACCESS_KEY"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "GONG_CLIENT_SECRET"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "SNOWFLAKE_ACCOUNT"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "SNOWFLAKE_USERNAME"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "SNOWFLAKE_PASSWORD"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "N"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "REDIS_URL"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "VERCEL_ANALYTICS_ID"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "SENTRY_DSN"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "VERCEL_TOKEN"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "GITHUB_TOKEN"
      },
      {
        "file": "pulumi-esc-configuration.yaml",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "scripts/deployment_refactoring_phase3.py",
        "secret": "GITHUB_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "ESTUARY_FLOW_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "POSTGRESQL_HOST"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "POSTGRESQL_PASSWORD"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "POSTGRESQL_CONNECTION_STRING"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "REDIS_HOST"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "REDIS_PASSWORD"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "REDIS_URL"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "LAMBDA_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "LAMBDA_SSH_PRIVATE_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "LAMBDA_IP_ADDRESS"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "SNOWFLAKE_ACCOUNT"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "SOPHIA_AI_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "HUBSPOT_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "HUBSPOT_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "HUBSPOT_PORTAL_ID"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "GONG_ACCESS_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "GONG_CLIENT_SECRET"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "GONG_WEBHOOK_SECRET"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "SLACK_BOT_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "SLACK_APP_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "SLACK_SIGNING_SECRET"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "SLACK_CLIENT_ID"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "SLACK_CLIENT_SECRET"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "OPENAI_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "ANTHROPIC_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "PORTKEY_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "PORTKEY_CONFIG"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "PINECONE_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "PINECONE_ENVIRONMENT"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "VERCEL_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "VERCEL_PROJECT_ID"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "VERCEL_ORG_ID"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "GITHUB_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "GITHUB_WEBHOOK_SECRET"
      },
      {
        "file": "infrastructure/pulumi-esc-update.py",
        "secret": "PULUMI_ACCESS_TOKEN"
      }
    ],
    "os_getenv": [
      {
        "file": "sophia_ecosystem_diagnostic.py",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "ui-ux-agent/start_ui_ux_agent_system.py",
        "secret": "FIGMA_PERSONAL_ACCESS_TOKEN"
      },
      {
        "file": "scripts/deploy-complete-sophia-stack.py",
        "secret": "DATABASE_PASSWORD"
      },
      {
        "file": "scripts/deploy-complete-sophia-stack.py",
        "secret": "REDIS_PASSWORD"
      },
      {
        "file": "scripts/deploy-complete-sophia-stack.py",
        "secret": "SNOWFLAKE_USER"
      },
      {
        "file": "scripts/deploy-complete-sophia-stack.py",
        "secret": "SNOWFLAKE_PASSWORD"
      },
      {
        "file": "scripts/deploy-complete-sophia-stack.py",
        "secret": "SNOWFLAKE_ACCOUNT"
      },
      {
        "file": "scripts/deploy-complete-sophia-stack.py",
        "secret": "SNOWFLAKE_WAREHOUSE"
      },
      {
        "file": "scripts/deploy-complete-sophia-stack.py",
        "secret": "SNOWFLAKE_DATABASE"
      },
      {
        "file": "scripts/deploy-complete-sophia-stack.py",
        "secret": "SNOWFLAKE_ROLE"
      },
      {
        "file": "scripts/deploy-complete-sophia-stack.py",
        "secret": "REDIS_PASSWORD"
      },
      {
        "file": "scripts/dns-manager.py",
        "secret": "GITHUB_ACTIONS"
      },
      {
        "file": "scripts/dns-manager.py",
        "secret": "CI"
      },
      {
        "file": "scripts/dns-manager.py",
        "secret": "GITHUB_REPOSITORY"
      },
      {
        "file": "scripts/dns-manager.py",
        "secret": "GITHUB_RUN_ID"
      },
      {
        "file": "scripts/dns-manager.py",
        "secret": "RUNNER_OS"
      },
      {
        "file": "scripts/dns-manager.py",
        "secret": "PULUMI_COMMAND"
      },
      {
        "file": "scripts/dns-manager.py",
        "secret": "PULUMI_ORGANIZATION"
      },
      {
        "file": "scripts/dns-manager.py",
        "secret": "PULUMI_STACK"
      },
      {
        "file": "scripts/dns-manager.py",
        "secret": "KUBERNETES_SERVICE_HOST"
      },
      {
        "file": "scripts/implement_phase1_mcp_recovery.py",
        "secret": "PULUMI_ORG"
      },
      {
        "file": "scripts/pulumi-esc-sync.py",
        "secret": "GITHUB_TOKEN"
      },
      {
        "file": "scripts/pulumi-esc-sync.py",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "scripts/pulumi-esc-sync.py",
        "secret": "VERCEL_TOKEN"
      },
      {
        "file": "scripts/force-vercel-deployment.py",
        "secret": "VERCEL_TOKEN"
      },
      {
        "file": "scripts/force-vercel-deployment.py",
        "secret": "VERCEL_ORG_ID"
      },
      {
        "file": "scripts/force-vercel-deployment.py",
        "secret": "VERCEL_PROJECT_ID"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "LAMBDA_LABS_API_KEY"
      },
      {
        "file": "scripts/deploy_sophia_production.py",
        "secret": "VERCEL_TOKEN"
      },
      {
        "file": "scripts/critical_security_remediation.py",
        "secret": "DATABASE_PASSWORD"
      },
      {
        "file": "scripts/critical_security_remediation.py",
        "secret": "JWT_SECRET"
      },
      {
        "file": "scripts/critical_security_remediation.py",
        "secret": "WEBHOOK_SECRET"
      },
      {
        "file": "scripts/deploy-sophia-complete-stack.py",
        "secret": "LAMBDA_IP_ADDRESS"
      },
      {
        "file": "scripts/deploy-sophia-complete-stack.py",
        "secret": "GITHUB_ACTIONS"
      },
      {
        "file": "scripts/deploy-sophia-complete-stack.py",
        "secret": "ESTUARY_ACCESS_TOKEN"
      },
      {
        "file": "scripts/n8n-workflow-automation.py",
        "secret": "SOPHIA_API_KEY"
      },
      {
        "file": "scripts/deployment_refactoring_phase1.py",
        "secret": "SNOWFLAKE_ACCOUNT"
      },
      {
        "file": "scripts/deployment_refactoring_phase1.py",
        "secret": "SNOWFLAKE_USER"
      },
      {
        "file": "scripts/deployment_refactoring_phase1.py",
        "secret": "SNOWFLAKE_WAREHOUSE"
      },
      {
        "file": "scripts/deployment_refactoring_phase1.py",
        "secret": "SNOWFLAKE_DATABASE"
      },
      {
        "file": "scripts/deployment_refactoring_phase1.py",
        "secret": "POSTGRES_USER"
      },
      {
        "file": "scripts/deployment_refactoring_phase1.py",
        "secret": "POSTGRES_PASSWORD"
      },
      {
        "file": "scripts/deployment_refactoring_phase1.py",
        "secret": "POSTGRES_DATABASE"
      },
      {
        "file": "scripts/deployment_refactoring_phase1.py",
        "secret": "REDIS_PASSWORD"
      },
      {
        "file": "scripts/lambda-labs-complete-setup.py",
        "secret": "LAMBDA_IP_ADDRESS"
      },
      {
        "file": "scripts/lambda-labs-complete-setup.py",
        "secret": "SNOWFLAKE_ACCOUNT"
      },
      {
        "file": "scripts/lambda-labs-complete-setup.py",
        "secret": "SOPHIA_AI_TOKEN"
      },
      {
        "file": "scripts/lambda-labs-complete-setup.py",
        "secret": "HUBSPOT_ACCESS_TOKEN"
      },
      {
        "file": "scripts/lambda-labs-complete-setup.py",
        "secret": "GONG_ACCESS_KEY"
      },
      {
        "file": "scripts/lambda-labs-complete-setup.py",
        "secret": "GONG_ACCESS_KEY_SECRET"
      },
      {
        "file": "scripts/lambda-labs-complete-setup.py",
        "secret": "DATABASE_PASSWORD"
      },
      {
        "file": "scripts/update-github-secrets-template.py",
        "secret": "GITHUB_PAT"
      },
      {
        "file": "scripts/deployment-monitor.py",
        "secret": "ALERT_WEBHOOK_URL"
      },
      {
        "file": "scripts/comprehensive_critical_security_fixes.py",
        "secret": "DATABASE_PASSWORD"
      },
      {
        "file": "scripts/comprehensive_critical_security_fixes.py",
        "secret": "JWT_SECRET"
      },
      {
        "file": "scripts/comprehensive_critical_security_fixes.py",
        "secret": "WEBHOOK_SECRET"
      },
      {
        "file": "scripts/comprehensive_critical_security_fixes.py",
        "secret": "API_KEY"
      },
      {
        "file": "scripts/comprehensive_critical_security_fixes.py",
        "secret": "SECRET_KEY"
      },
      {
        "file": "scripts/automated_webhook_manager.py",
        "secret": "GONG_WEBHOOK_JWT_PUBLIC_KEY"
      },
      {
        "file": "scripts/automated_webhook_manager.py",
        "secret": "SLACK_SIGNING_SECRET"
      },
      {
        "file": "scripts/automated_webhook_manager.py",
        "secret": "ESTUARY_CLIENT_ID"
      },
      {
        "file": "scripts/automated_webhook_manager.py",
        "secret": "ESTUARY_CLIENT_SECRET"
      },
      {
        "file": "scripts/automated_webhook_manager.py",
        "secret": "ESTUARY_ACCESS_TOKEN"
      },
      {
        "file": "scripts/automated_webhook_manager.py",
        "secret": "VERCEL_TOKEN"
      },
      {
        "file": "scripts/automated_webhook_manager.py",
        "secret": "FIGMA_ACCESS_TOKEN"
      },
      {
        "file": "scripts/vercel_optimization.py",
        "secret": "VERCEL_ORG_ID"
      },
      {
        "file": "scripts/lambda-labs-provisioner.py",
        "secret": "LAMBDA_LABS_SSH_PUBLIC_KEY"
      },
      {
        "file": "scripts/lambda-labs-provisioner.py",
        "secret": "LAMBDA_LABS_API_KEY"
      },
      {
        "file": "scripts/lambda-labs-provisioner.py",
        "secret": "LAMBDA_LABS_SSH_PRIVATE_KEY"
      },
      {
        "file": "scripts/automated_webhook_deployment.py",
        "secret": "GONG_WEBHOOK_JWT_PUBLIC_KEY"
      },
      {
        "file": "scripts/automated_webhook_deployment.py",
        "secret": "SLACK_SIGNING_SECRET"
      },
      {
        "file": "scripts/fix_remaining_critical_vulnerabilities.py",
        "secret": "CEO_ACCESS_TOKEN"
      },
      {
        "file": "scripts/fix_remaining_critical_vulnerabilities.py",
        "secret": "DATABASE_PASSWORD"
      },
      {
        "file": "scripts/fix_remaining_critical_vulnerabilities.py",
        "secret": "JWT_SECRET"
      },
      {
        "file": "scripts/fix_remaining_critical_vulnerabilities.py",
        "secret": "WEBHOOK_SECRET"
      },
      {
        "file": "scripts/test_pipedream_integration.py",
        "secret": "PIPEDREAM_API_KEY"
      },
      {
        "file": "backend/core/unified_connection_manager.py",
        "secret": "SNOWFLAKE_ACCOUNT"
      },
      {
        "file": "backend/core/unified_connection_manager.py",
        "secret": "SNOWFLAKE_USER"
      },
      {
        "file": "backend/core/unified_connection_manager.py",
        "secret": "SNOWFLAKE_WAREHOUSE"
      },
      {
        "file": "backend/core/unified_connection_manager.py",
        "secret": "SNOWFLAKE_DATABASE"
      },
      {
        "file": "backend/core/unified_connection_manager.py",
        "secret": "POSTGRES_USER"
      },
      {
        "file": "backend/core/unified_connection_manager.py",
        "secret": "POSTGRES_PASSWORD"
      },
      {
        "file": "backend/core/unified_connection_manager.py",
        "secret": "POSTGRES_DATABASE"
      },
      {
        "file": "backend/core/unified_connection_manager.py",
        "secret": "REDIS_PASSWORD"
      },
      {
        "file": "backend/core/simple_config.py",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "backend/core/sophia_env_config.py",
        "secret": "ENVIRONMENT"
      },
      {
        "file": "backend/core/sophia_env_config.py",
        "secret": "ENVIRONMENT"
      },
      {
        "file": "backend/core/sophia_env_config.py",
        "secret": "PULUMI_ORG"
      },
      {
        "file": "backend/core/sophia_env_config.py",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "backend/core/security_config.py",
        "secret": "DATABASE_PASSWORD"
      },
      {
        "file": "backend/core/security_config.py",
        "secret": "JWT_SECRET"
      },
      {
        "file": "backend/core/security_config.py",
        "secret": "WEBHOOK_SECRET"
      },
      {
        "file": "backend/core/security_config.py",
        "secret": "JWT_SECRET"
      },
      {
        "file": "backend/core/security_config.py",
        "secret": "JWT_SECRET"
      },
      {
        "file": "backend/etl/gong_api_extractor_clean.py",
        "secret": "GONG_ACCESS_KEY"
      },
      {
        "file": "backend/etl/gong_api_extractor_clean.py",
        "secret": "GONG_ACCESS_KEY_SECRET"
      },
      {
        "file": "backend/etl/gong_api_extractor_clean.py",
        "secret": "POSTGRESQL_CONNECTION_STRING"
      },
      {
        "file": "backend/integrations/estuary_flow_manager.py",
        "secret": "ESTUARY_ACCESS_TOKEN"
      },
      {
        "file": "backend/integrations/estuary_flow_manager.py",
        "secret": "ESTUARY_REFRESH_TOKEN"
      },
      {
        "file": "backend/integrations/estuary_flow_manager.py",
        "secret": "ESTUARY_REFRESH_TOKEN"
      },
      {
        "file": "backend/api/costar_routes.py",
        "secret": "LLM_GATEWAY_API_KEY"
      },
      {
        "file": "backend/infrastructure/adapters/estuary_adapter.py",
        "secret": "SNOWFLAKE_ACCOUNT"
      },
      {
        "file": "backend/infrastructure/adapters/estuary_adapter.py",
        "secret": "SNOWFLAKE_USER"
      },
      {
        "file": "backend/infrastructure/adapters/estuary_adapter.py",
        "secret": "SOPHIA_AI_TOKEN"
      },
      {
        "file": "backend/services/infrastructure_chat/sophia_infrastructure_chat.py",
        "secret": "LLM_GATEWAY_API_KEY"
      },
      {
        "file": "scripts/ci/sync_from_gh_to_pulumi.py",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "api/middleware/security.py",
        "secret": "REDIS_URL"
      },
      {
        "file": "api/monitoring/health.py",
        "secret": "VITE_PORTKEY_API_KEY"
      },
      {
        "file": "api/monitoring/health.py",
        "secret": "VITE_SALESFORCE_OAUTH_TOKEN"
      },
      {
        "file": "api/monitoring/health.py",
        "secret": "VITE_HUBSPOT_API_KEY"
      },
      {
        "file": "api/monitoring/health.py",
        "secret": "VITE_INTERCOM_ACCESS_TOKEN"
      },
      {
        "file": "api/monitoring/health.py",
        "secret": "GONG_ACCESS_KEY"
      },
      {
        "file": "api/monitoring/health.py",
        "secret": "REDIS_URL"
      },
      {
        "file": "external/davidamom_snowflake/server.py",
        "secret": "SNOWFLAKE_USER"
      },
      {
        "file": "external/davidamom_snowflake/server.py",
        "secret": "SNOWFLAKE_ACCOUNT"
      },
      {
        "file": "external/davidamom_snowflake/server.py",
        "secret": "SNOWFLAKE_DATABASE"
      },
      {
        "file": "external/davidamom_snowflake/server.py",
        "secret": "SNOWFLAKE_WAREHOUSE"
      },
      {
        "file": "external/davidamom_snowflake/server.py",
        "secret": "SNOWFLAKE_PRIVATE_KEY_FILE"
      },
      {
        "file": "external/davidamom_snowflake/server.py",
        "secret": "SNOWFLAKE_PRIVATE_KEY_PASSPHRASE"
      },
      {
        "file": "external/davidamom_snowflake/server.py",
        "secret": "SNOWFLAKE_PASSWORD"
      },
      {
        "file": "external/snowflake_cortex_official/cortex_agents.py",
        "secret": "SEMANTIC_MODEL_FILE"
      },
      {
        "file": "external/snowflake_cortex_official/cortex_agents.py",
        "secret": "CORTEX_SEARCH_SERVICE"
      },
      {
        "file": "external/snowflake_cortex_official/cortex_agents.py",
        "secret": "SNOWFLAKE_ACCOUNT_URL"
      },
      {
        "file": "external/snowflake_cortex_official/cortex_agents.py",
        "secret": "SNOWFLAKE_PAT"
      },
      {
        "file": "external/dynamike_snowflake/snowflake_mcp_server/main.py",
        "secret": "SNOWFLAKE_WAREHOUSE"
      },
      {
        "file": "external/dynamike_snowflake/snowflake_mcp_server/main.py",
        "secret": "SNOWFLAKE_DATABASE"
      },
      {
        "file": "external/dynamike_snowflake/snowflake_mcp_server/main.py",
        "secret": "SNOWFLAKE_SCHEMA"
      },
      {
        "file": "external/dynamike_snowflake/snowflake_mcp_server/main.py",
        "secret": "SNOWFLAKE_ROLE"
      },
      {
        "file": "external/anthropic-mcp-python-sdk/examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
        "secret": "LLM_API_KEY"
      },
      {
        "file": "pulumi/esc/sophia-ai-production.yaml",
        "secret": "SNOWFLAKE_PASSWORD"
      },
      {
        "file": "mcp-servers/linear/linear_mcp_server.py",
        "secret": "LINEAR_TEAM_ID"
      },
      {
        "file": "mcp-servers/asana/asana_mcp_server.py",
        "secret": "ASANA_WORKSPACE_GID"
      },
      {
        "file": "mcp-servers/snowflake_cortex/snowflake_cortex_mcp_server.py",
        "secret": "SNOWFLAKE_ACCOUNT"
      },
      {
        "file": "mcp-servers/snowflake_cortex/snowflake_cortex_mcp_server.py",
        "secret": "SNOWFLAKE_USER"
      }
    ],
    "os_environ_get": [
      {
        "file": "github_integration_strategy.py",
        "secret": "GITHUB_TOKEN"
      },
      {
        "file": "fix_snowflake_codewide.py",
        "secret": "SNOWFLAKE_ACCOUNT"
      },
      {
        "file": "scripts/validate_dev_environment.py",
        "secret": "VIRTUAL_ENV"
      },
      {
        "file": "scripts/security_fixes_examples.py",
        "secret": "API_KEY"
      },
      {
        "file": "scripts/security_fixes_examples.py",
        "secret": "WEBHOOK_SECRET"
      },
      {
        "file": "scripts/security_fixes_examples.py",
        "secret": "DATABASE_PASSWORD"
      },
      {
        "file": "scripts/validate_environment.py",
        "secret": "VIRTUAL_ENV"
      },
      {
        "file": "implementation_scripts/setup_forks.py",
        "secret": "GITHUB_TOKEN"
      },
      {
        "file": "backend/security/audit_logger.py",
        "secret": "SOPHIA_AUDIT_FILE_PATH"
      },
      {
        "file": "backend/security/audit_logger.py",
        "secret": "SOPHIA_AUDIT_SENTRY_DSN"
      }
    ],
    "os_environ": [
      {
        "file": "load_github_secrets_permanently.py",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "start_mcp_servers.py",
        "secret": "PULUMI_ORG"
      },
      {
        "file": "start_mcp_servers.py",
        "secret": "PYTHONPATH"
      },
      {
        "file": "start_mcp_servers.py",
        "secret": "OPENAI_API_KEY"
      },
      {
        "file": "start_mcp_servers.py",
        "secret": "PINECONE_API_KEY"
      },
      {
        "file": "start_sophia_absolute_fix.py",
        "secret": "SNOWFLAKE_ACCOUNT"
      },
      {
        "file": "start_sophia_absolute_fix.py",
        "secret": "SNOWFLAKE_USER"
      },
      {
        "file": "start_sophia_absolute_fix.py",
        "secret": "SNOWFLAKE_DATABASE"
      },
      {
        "file": "start_sophia_absolute_fix.py",
        "secret": "SNOWFLAKE_WAREHOUSE"
      },
      {
        "file": "start_sophia_absolute_fix.py",
        "secret": "SNOWFLAKE_ROLE"
      },
      {
        "file": "start_sophia_absolute_fix.py",
        "secret": "SNOWFLAKE_SCHEMA"
      },
      {
        "file": "estuary_advanced_integration.py",
        "secret": "ESTUARY_ACCESS_TOKEN"
      },
      {
        "file": "start_enhanced_mcp_servers.py",
        "secret": "PULUMI_ORG"
      },
      {
        "file": "start_enhanced_mcp_servers.py",
        "secret": "PYTHONPATH"
      },
      {
        "file": "start_enhanced_mcp_servers.py",
        "secret": "OPENAI_API_KEY"
      },
      {
        "file": "start_enhanced_mcp_servers.py",
        "secret": "PINECONE_API_KEY"
      },
      {
        "file": "implement_phase1a_foundation.py",
        "secret": "ENVIRONMENT"
      },
      {
        "file": "implement_phase1a_foundation.py",
        "secret": "PULUMI_ORG"
      },
      {
        "file": "deploy_estuary_foundation.py",
        "secret": "ESTUARY_ACCESS_TOKEN"
      },
      {
        "file": "deploy_estuary_foundation.py",
        "secret": "ESTUARY_REFRESH_TOKEN"
      },
      {
        "file": "fix_snowflake_codewide.py",
        "secret": "ENVIRONMENT"
      },
      {
        "file": "fix_snowflake_codewide.py",
        "secret": "PULUMI_ORG"
      },
      {
        "file": "ultimate_snowflake_fix.py",
        "secret": "SNOWFLAKE_ACCOUNT"
      },
      {
        "file": "ultimate_snowflake_fix.py",
        "secret": "SNOWFLAKE_USER"
      },
      {
        "file": "ultimate_snowflake_fix.py",
        "secret": "SNOWFLAKE_DATABASE"
      },
      {
        "file": "ultimate_snowflake_fix.py",
        "secret": "SNOWFLAKE_WAREHOUSE"
      },
      {
        "file": "ultimate_snowflake_fix.py",
        "secret": "SNOWFLAKE_ROLE"
      },
      {
        "file": "ultimate_snowflake_fix.py",
        "secret": "SNOWFLAKE_SCHEMA"
      },
      {
        "file": "ultimate_snowflake_fix.py",
        "secret": "SNOWFLAKE_ACCOUNT"
      },
      {
        "file": "ultimate_snowflake_fix.py",
        "secret": "SNOWFLAKE_USER"
      },
      {
        "file": "ultimate_snowflake_fix.py",
        "secret": "SNOWFLAKE_DATABASE"
      },
      {
        "file": "ultimate_snowflake_fix.py",
        "secret": "SNOWFLAKE_WAREHOUSE"
      },
      {
        "file": "ultimate_snowflake_fix.py",
        "secret": "SNOWFLAKE_ROLE"
      },
      {
        "file": "ultimate_snowflake_fix.py",
        "secret": "SNOWFLAKE_SCHEMA"
      },
      {
        "file": "start_sophia_complete.py",
        "secret": "PULUMI_ORG"
      },
      {
        "file": "start_sophia_complete.py",
        "secret": "PYTHONPATH"
      },
      {
        "file": "start_sophia_complete.py",
        "secret": "PULUMI_ORG"
      },
      {
        "file": "deploy_estuary_foundation_corrected.py",
        "secret": "ESTUARY_ACCESS_TOKEN"
      },
      {
        "file": "claude-cli-integration/setup_claude_api.py",
        "secret": "ANTHROPIC_API_KEY"
      },
      {
        "file": "backend/core/sophia_env_config.py",
        "secret": "ENVIRONMENT"
      },
      {
        "file": "backend/core/sophia_env_config.py",
        "secret": "PULUMI_ORG"
      },
      {
        "file": "backend/core/sophia_env_config.py",
        "secret": "ENVIRONMENT"
      },
      {
        "file": "backend/core/startup_config.py",
        "secret": "ENVIRONMENT"
      },
      {
        "file": "backend/core/startup_config.py",
        "secret": "PULUMI_ORG"
      },
      {
        "file": "mcp-servers/hubspot/src/mcp_server_hubspot/__init__.py",
        "secret": "HUBSPOT_STORAGE_DIR"
      }
    ],
    "get_config_value": [
      {
        "file": "comprehensive_alignment_analysis_and_fix.py",
        "secret": "snowflake_password"
      },
      {
        "file": "start_mcp_servers.py",
        "secret": "openai_api_key"
      },
      {
        "file": "start_mcp_servers.py",
        "secret": "pinecone_api_key"
      },
      {
        "file": "estuary_advanced_integration.py",
        "secret": "estuary_access_token"
      },
      {
        "file": "estuary_advanced_integration.py",
        "secret": "snowflake_password"
      },
      {
        "file": "start_enhanced_mcp_servers.py",
        "secret": "openai_api_key"
      },
      {
        "file": "start_enhanced_mcp_servers.py",
        "secret": "pinecone_api_key"
      },
      {
        "file": "cortex_agents_advanced_implementation.py",
        "secret": "snowflake_password"
      },
      {
        "file": "deploy_estuary_foundation.py",
        "secret": "snowflake_password"
      },
      {
        "file": "fix_alignment_issues.py",
        "secret": "snowflake_password"
      },
      {
        "file": "final_codebase_alignment_update.py",
        "secret": "openai_api_key"
      },
      {
        "file": "final_codebase_alignment_update.py",
        "secret": "lambda_api_key"
      },
      {
        "file": "final_codebase_alignment_update.py",
        "secret": "hubspot_access_token"
      },
      {
        "file": "deploy_snowflake_stability_simple.py",
        "secret": "snowflake_password"
      },
      {
        "file": "deploy_comprehensive_upgrade.py",
        "secret": "estuary_access_token"
      },
      {
        "file": "deploy_complete_platform.py",
        "secret": "snowflake_password"
      },
      {
        "file": "deploy_complete_platform.py",
        "secret": "snowflake_password"
      },
      {
        "file": "deploy_complete_platform.py",
        "secret": "snowflake_password"
      },
      {
        "file": "fix_snowflake_codewide.py",
        "secret": "snowflake_password"
      },
      {
        "file": "deploy_estuary_foundation_corrected.py",
        "secret": "snowflake_password"
      },
      {
        "file": "sophia_standalone_server.py",
        "secret": "snowflake_password"
      },
      {
        "file": "snowflake_advanced_features_implementation.py",
        "secret": "snowflake_password"
      },
      {
        "file": "claude-cli-integration/setup_claude_api.py",
        "secret": "anthropic_api_key"
      },
      {
        "file": "ui-ux-agent/phase2_enhancements.py",
        "secret": "FIGMA_PAT"
      },
      {
        "file": "ui-ux-agent/start_ui_ux_agent_system.py",
        "secret": "FIGMA_PAT"
      },
      {
        "file": "ui-ux-agent/start_ui_ux_agent_system.py",
        "secret": "figma_pat"
      },
      {
        "file": "ui-ux-agent/start_ui_ux_agent_system.py",
        "secret": "openai_api_key"
      },
      {
        "file": "ui-ux-agent/start_ui_ux_agent_system.py",
        "secret": "openrouter_api_key"
      },
      {
        "file": "ui-ux-agent/start_ui_ux_agent_system.py",
        "secret": "figma_pat"
      },
      {
        "file": "scripts/deploy_snowflake_stability.py",
        "secret": "snowflake_account"
      },
      {
        "file": "scripts/deploy_snowflake_stability.py",
        "secret": "snowflake_user"
      },
      {
        "file": "scripts/deploy_snowflake_stability.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/estuary_integration_manager.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/estuary_integration_manager.py",
        "secret": "slack_bot_token"
      },
      {
        "file": "scripts/enhanced_batch_embed_data.py",
        "secret": "snowflake_account"
      },
      {
        "file": "scripts/enhanced_batch_embed_data.py",
        "secret": "snowflake_user"
      },
      {
        "file": "scripts/enhanced_batch_embed_data.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/fix_snowflake_connectivity.py",
        "secret": "snowflake_account"
      },
      {
        "file": "scripts/fix_snowflake_connectivity.py",
        "secret": "snowflake_user"
      },
      {
        "file": "scripts/fix_snowflake_connectivity.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/property_assets_ingestion_stub.py",
        "secret": "snowflake_account"
      },
      {
        "file": "scripts/property_assets_ingestion_stub.py",
        "secret": "snowflake_user"
      },
      {
        "file": "scripts/property_assets_ingestion_stub.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/ceo_intelligence_ingestion_stub.py",
        "secret": "snowflake_account"
      },
      {
        "file": "scripts/ceo_intelligence_ingestion_stub.py",
        "secret": "snowflake_user"
      },
      {
        "file": "scripts/ceo_intelligence_ingestion_stub.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/week4_clean_architecture_compliance.py",
        "secret": "{env_var.lower()}"
      },
      {
        "file": "scripts/snowflake_config_manager.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/configure_github_organization_security.py",
        "secret": "github_token"
      },
      {
        "file": "scripts/configure_github_organization_security.py",
        "secret": "github_token"
      },
      {
        "file": "scripts/deploy_snowflake_stability_standalone.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/ai_web_research_ingestion_stub.py",
        "secret": "snowflake_account"
      },
      {
        "file": "scripts/ai_web_research_ingestion_stub.py",
        "secret": "snowflake_user"
      },
      {
        "file": "scripts/ai_web_research_ingestion_stub.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/comprehensive_secret_codebase_update.py",
        "secret": "{config_key}"
      },
      {
        "file": "scripts/comprehensive_secret_codebase_update.py",
        "secret": "{config_key}"
      },
      {
        "file": "scripts/comprehensive_secret_codebase_update.py",
        "secret": "{new}"
      },
      {
        "file": "scripts/deployment_refactoring_phase1.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/automated_webhook_manager.py",
        "secret": "gong_access_key"
      },
      {
        "file": "scripts/automated_webhook_manager.py",
        "secret": "gong_client_secret"
      },
      {
        "file": "scripts/automated_webhook_manager.py",
        "secret": "slack_bot_token"
      },
      {
        "file": "scripts/automated_webhook_manager.py",
        "secret": "slack_app_token"
      },
      {
        "file": "scripts/automated_webhook_manager.py",
        "secret": "hubspot_access_token"
      },
      {
        "file": "scripts/automated_webhook_manager.py",
        "secret": "linear_api_key"
      },
      {
        "file": "scripts/automated_webhook_manager.py",
        "secret": "asana_access_token"
      },
      {
        "file": "scripts/vercel_optimization.py",
        "secret": "vercel_access_token"
      },
      {
        "file": "scripts/fix_remaining_critical_vulnerabilities.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/fix_remaining_critical_vulnerabilities.py",
        "secret": "gong_access_key"
      },
      {
        "file": "infrastructure/lambda-labs-integration.py",
        "secret": "lambda_labs_api_key"
      },
      {
        "file": "infrastructure/lambda-labs-integration.py",
        "secret": "lambda_labs_ssh_private_key"
      },
      {
        "file": "infrastructure/lambda-labs-integration.py",
        "secret": "estuary_access_token"
      },
      {
        "file": "infrastructure/lambda-labs-deployment.py",
        "secret": "lambda_api_key"
      },
      {
        "file": "infrastructure/lambda-labs-deployment.py",
        "secret": "lambda_ssh_private_key"
      },
      {
        "file": "infrastructure/lambda-labs-deployment.py",
        "secret": "postgresql_password"
      },
      {
        "file": "ui-ux-agent/mcp-servers/langchain-agents/ui_ux_agent.py",
        "secret": "openai_api_key"
      },
      {
        "file": "ui-ux-agent/mcp-servers/langchain-agents/ui_ux_agent.py",
        "secret": "openrouter_api_key"
      },
      {
        "file": "ui-ux-agent/mcp-servers/figma-dev-mode/figma_mcp_server.py",
        "secret": "FIGMA_PAT"
      },
      {
        "file": "ui-ux-agent/mcp-servers/figma-dev-mode/figma_mcp_server.py",
        "secret": "figma_pat"
      },
      {
        "file": "ui-ux-agent/mcp-servers/figma-dev-mode/figma_mcp_server.py",
        "secret": "openai_api_key"
      },
      {
        "file": "ui-ux-agent/mcp-servers/figma-dev-mode/figma_mcp_server.py",
        "secret": "openrouter_api_key"
      },
      {
        "file": "backend/database/postgresql_staging_manager.py",
        "secret": "postgresql_host"
      },
      {
        "file": "backend/database/postgresql_staging_manager.py",
        "secret": "postgresql_user"
      },
      {
        "file": "backend/database/postgresql_staging_manager.py",
        "secret": "postgresql_password"
      },
      {
        "file": "backend/core/comprehensive_snowflake_config.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/core/enhanced_snowflake_config.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/core/config_validator.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/core/config_validator.py",
        "secret": "gong_client_secret"
      },
      {
        "file": "backend/core/config_validator.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/core/config_validator.py",
        "secret": "snowflake_user"
      },
      {
        "file": "backend/core/config_validator.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/core/config_validator.py",
        "secret": "portkey_api_key"
      },
      {
        "file": "backend/core/config_validator.py",
        "secret": "openai_api_key"
      },
      {
        "file": "backend/core/config_validator.py",
        "secret": "openrouter_api_key"
      },
      {
        "file": "backend/core/config_validator.py",
        "secret": "pinecone_api_key"
      },
      {
        "file": "backend/core/config_validator.py",
        "secret": "pinecone_environment"
      },
      {
        "file": "backend/core/config_validator.py",
        "secret": "hubspot_access_token"
      },
      {
        "file": "backend/core/config_validator.py",
        "secret": "slack_bot_token"
      },
      {
        "file": "backend/core/config_validator.py",
        "secret": "linear_api_key"
      },
      {
        "file": "backend/core/optimized_connection_manager.py",
        "secret": "postgres_user"
      },
      {
        "file": "backend/core/optimized_connection_manager.py",
        "secret": "postgres_password"
      },
      {
        "file": "backend/core/optimized_connection_manager.py",
        "secret": "postgres_database"
      },
      {
        "file": "backend/core/optimized_connection_manager.py",
        "secret": "redis_password"
      },
      {
        "file": "backend/core/snowflake_schema_integration.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/core/snowflake_config_override.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/core/unified_connection_manager.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/core/secure_snowflake_config.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/core/secure_snowflake_config.py",
        "secret": "sophia_ai_token"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "estuary_access_token"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "gong_access_key_secret"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "slack_bot_token"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "slack_app_token"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "slack_signing_secret"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "hubspot_access_token"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "hubspot_portal_id"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "intercom_access_token"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "intercom_app_id"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "snowflake_user"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "snowflake_role"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "snowflake_warehouse"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "snowflake_database"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "snowflake_schema"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "estuary_tenant"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "estuary_endpoint"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "jwt_secret"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "jwt_algorithm"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "jwt_expiration_hours"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "lambda_api_key"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "LAMBDA_API_KEY"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "lambda_ip_address"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "LAMBDA_IP_ADDRESS"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "lambda_ssh_private_key"
      },
      {
        "file": "backend/core/auto_esc_config.py",
        "secret": "LAMBDA_SSH_PRIVATE_KEY"
      },
      {
        "file": "backend/core/optimized_database_manager.py",
        "secret": "postgres_password"
      },
      {
        "file": "backend/core/optimized_database_manager.py",
        "secret": "redis_password"
      },
      {
        "file": "backend/core/optimized_database_manager.py",
        "secret": "mysql_password"
      },
      {
        "file": "backend/etl/enhanced_unified_data_pipeline.py",
        "secret": "database_password"
      },
      {
        "file": "backend/etl/enhanced_unified_data_pipeline.py",
        "secret": "redis_password"
      },
      {
        "file": "backend/etl/enhanced_unified_data_pipeline.py",
        "secret": "estuary_access_token"
      },
      {
        "file": "backend/etl/enhanced_unified_data_pipeline.py",
        "secret": "hubspot_access_token"
      },
      {
        "file": "backend/etl/enhanced_unified_data_pipeline.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/etl/enhanced_unified_data_pipeline.py",
        "secret": "gong_access_key_secret"
      },
      {
        "file": "backend/etl/enhanced_unified_data_pipeline.py",
        "secret": "slack_bot_token"
      },
      {
        "file": "backend/etl/enhanced_unified_data_pipeline_backup.py",
        "secret": "database_password"
      },
      {
        "file": "backend/etl/enhanced_unified_data_pipeline_backup.py",
        "secret": "redis_password"
      },
      {
        "file": "backend/etl/enhanced_unified_data_pipeline_backup.py",
        "secret": "estuary_access_token"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "estuary_flow_access_token"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "hubspot_api_key"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "postgresql_host"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "postgresql_user"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "postgresql_password"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "gong_access_key_secret"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "postgresql_host"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "postgresql_user"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "postgresql_password"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "slack_bot_token"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "postgresql_host"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "postgresql_user"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "postgresql_password"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "postgresql_host"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "postgresql_user"
      },
      {
        "file": "backend/etl/estuary_flow_orchestrator.py",
        "secret": "postgresql_password"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "estuary_access_token"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "gong_access_key_secret"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "slack_bot_token"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "hubspot_access_token"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "intercom_access_token"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "snowflake_user"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "snowflake_user"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "snowflake_user"
      },
      {
        "file": "backend/integrations/advanced_estuary_flow_manager.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/scripts/enhanced_deploy_gong_snowflake_setup.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/scripts/enhanced_deploy_gong_snowflake_setup.py",
        "secret": "snowflake_user"
      },
      {
        "file": "backend/scripts/enhanced_deploy_gong_snowflake_setup.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/scripts/sophia_data_pipeline_ultimate.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/scripts/sophia_data_pipeline_ultimate.py",
        "secret": "gong_access_key_secret"
      },
      {
        "file": "backend/scripts/sophia_data_pipeline_ultimate.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/scripts/sophia_data_pipeline_ultimate.py",
        "secret": "snowflake_user"
      },
      {
        "file": "backend/scripts/sophia_data_pipeline_ultimate.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/scripts/estuary_gong_setup.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/scripts/estuary_gong_setup.py",
        "secret": "gong_client_secret"
      },
      {
        "file": "backend/scripts/estuary_gong_setup.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/scripts/estuary_gong_setup.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/scripts/enhanced_estuary_integration_test_suite.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/scripts/enhanced_estuary_integration_test_suite.py",
        "secret": "gong_client_secret"
      },
      {
        "file": "backend/scripts/enhanced_estuary_integration_test_suite.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/scripts/enhanced_estuary_integration_test_suite.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/scripts/enhanced_estuary_integration_test_suite.py",
        "secret": "openai_api_key"
      },
      {
        "file": "backend/scripts/enhanced_gong_pipeline_test_suite.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/scripts/deploy_gong_snowflake_setup.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/scripts/deploy_gong_snowflake_setup.py",
        "secret": "snowflake_user"
      },
      {
        "file": "backend/scripts/deploy_gong_snowflake_setup.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/scripts/deploy_gong_snowflake_setup.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/scripts/deploy_gong_snowflake_setup.py",
        "secret": "snowflake_user"
      },
      {
        "file": "backend/scripts/deploy_gong_snowflake_setup.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/mcp_servers/ai_memory_auto_discovery.py",
        "secret": "openai_api_key"
      },
      {
        "file": "backend/api/llm_strategy_routes.py",
        "secret": "portkey_api_key"
      },
      {
        "file": "backend/api/llm_strategy_routes.py",
        "secret": "openrouter_api_key"
      },
      {
        "file": "backend/infrastructure/sophia_iac_orchestrator.py",
        "secret": "openai_api_key"
      },
      {
        "file": "backend/services/enhanced_cortex_agent_service.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/services/enhanced_cortex_agent_service.py",
        "secret": "snowflake_user"
      },
      {
        "file": "backend/services/enhanced_cortex_agent_service.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/services/enhanced_portkey_orchestrator.py",
        "secret": "portkey_virtual_key_deepseek"
      },
      {
        "file": "backend/services/enhanced_portkey_orchestrator.py",
        "secret": "portkey_virtual_key_openai"
      },
      {
        "file": "backend/services/enhanced_portkey_orchestrator.py",
        "secret": "portkey_virtual_key_anthropic"
      },
      {
        "file": "backend/services/enhanced_portkey_orchestrator.py",
        "secret": "portkey_virtual_key_qwen"
      },
      {
        "file": "backend/services/enhanced_portkey_orchestrator.py",
        "secret": "portkey_virtual_key_grok"
      },
      {
        "file": "backend/services/enhanced_portkey_orchestrator.py",
        "secret": "portkey_virtual_key_perplexity"
      },
      {
        "file": "backend/services/enhanced_portkey_orchestrator.py",
        "secret": "portkey_virtual_key_together"
      },
      {
        "file": "backend/services/enhanced_portkey_orchestrator.py",
        "secret": "portkey_virtual_key_groq"
      },
      {
        "file": "backend/services/enhanced_portkey_orchestrator.py",
        "secret": "portkey_virtual_key_mistral"
      },
      {
        "file": "backend/services/enhanced_portkey_orchestrator.py",
        "secret": "portkey_virtual_key_cohere"
      },
      {
        "file": "backend/services/enhanced_portkey_orchestrator.py",
        "secret": "portkey_virtual_key_prod"
      },
      {
        "file": "backend/services/unified_ai_orchestration_service.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/services/simplified_portkey_service.py",
        "secret": "values_sophia_ai_portkey_virtual_key_prod"
      },
      {
        "file": "backend/services/kb_management_service.py",
        "secret": "openai_api_key"
      },
      {
        "file": "backend/services/chat_driven_metadata_service.py",
        "secret": "openai_api_key"
      },
      {
        "file": "backend/services/comprehensive_memory_service.py",
        "secret": "pinecone_api_key"
      },
      {
        "file": "backend/services/comprehensive_memory_service.py",
        "secret": "pinecone_environment"
      },
      {
        "file": "backend/services/smart_ai_service.py",
        "secret": "PORTKEY_API_KEY"
      },
      {
        "file": "backend/services/smart_ai_service.py",
        "secret": "PORTKEY_VIRTUAL_KEY_PROD"
      },
      {
        "file": "backend/services/smart_ai_service.py",
        "secret": "OPENROUTER_API_KEY"
      },
      {
        "file": "backend/services/vector_indexing_service.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/app/_deprecated_apps/stabilized_fastapi_app.py",
        "secret": "openai_api_key"
      },
      {
        "file": "backend/app/_deprecated_apps/stabilized_fastapi_app.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/app/_deprecated_apps/minimal_app.py",
        "secret": "openai_api_key"
      },
      {
        "file": "backend/app/_deprecated_apps/minimal_app.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/app/_deprecated_apps/working_app.py",
        "secret": "openai_api_key"
      },
      {
        "file": "backend/app/_deprecated_apps/working_app.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/app/_deprecated_apps/working_app.py",
        "secret": "openai_api_key"
      },
      {
        "file": "backend/app/_deprecated_apps/working_app.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/app/_deprecated_apps/simple_app.py",
        "secret": "openai_api_key"
      },
      {
        "file": "backend/app/_deprecated_apps/simple_app.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/etl/payready_core/ingest_core_sql_data.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/etl/payready_core/ingest_core_sql_data.py",
        "secret": "snowflake_user"
      },
      {
        "file": "backend/etl/payready_core/ingest_core_sql_data.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/etl/netsuite/estuary_netsuite_setup.py",
        "secret": "netsuite_realm"
      },
      {
        "file": "backend/etl/netsuite/estuary_netsuite_setup.py",
        "secret": "netsuite_consumer_key"
      },
      {
        "file": "backend/etl/netsuite/estuary_netsuite_setup.py",
        "secret": "netsuite_consumer_secret"
      },
      {
        "file": "backend/etl/netsuite/estuary_netsuite_setup.py",
        "secret": "netsuite_token_id"
      },
      {
        "file": "backend/etl/netsuite/estuary_netsuite_setup.py",
        "secret": "netsuite_token_secret"
      },
      {
        "file": "backend/etl/netsuite/estuary_netsuite_setup.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/etl/netsuite/estuary_netsuite_setup.py",
        "secret": "snowflake_user"
      },
      {
        "file": "backend/etl/netsuite/estuary_netsuite_setup.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/etl/estuary/estuary_configuration_manager.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/etl/estuary/estuary_configuration_manager.py",
        "secret": "gong_client_secret"
      },
      {
        "file": "backend/etl/estuary/estuary_configuration_manager.py",
        "secret": "asana_api_token"
      },
      {
        "file": "backend/etl/estuary/estuary_configuration_manager.py",
        "secret": "snowflake_account"
      },
      {
        "file": "backend/etl/estuary/estuary_configuration_manager.py",
        "secret": "snowflake_password"
      },
      {
        "file": "backend/agents/specialized/snowflake_admin_agent.py",
        "secret": "openai_api_key"
      },
      {
        "file": "backend/infrastructure/adapters/estuary_adapter.py",
        "secret": "gong_access_key"
      },
      {
        "file": "backend/infrastructure/adapters/estuary_adapter.py",
        "secret": "gong_client_secret"
      },
      {
        "file": "backend/infrastructure/adapters/estuary_adapter.py",
        "secret": "slack_bot_token"
      },
      {
        "file": "backend/services/infrastructure_chat/sophia_infrastructure_chat.py",
        "secret": "openai_api_key"
      },
      {
        "file": "scripts/security/comprehensive_security_remediation.py",
        "secret": "{config_key}"
      },
      {
        "file": "scripts/security/comprehensive_security_remediation.py",
        "secret": "api_token"
      },
      {
        "file": "scripts/security/remove_exposed_secrets.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/security/remove_exposed_secrets.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/security/remove_exposed_secrets.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/security/remove_exposed_secrets.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/security/remove_exposed_secrets.py",
        "secret": "gong_access_key"
      },
      {
        "file": "scripts/security/remove_exposed_secrets.py",
        "secret": "gong_access_key"
      },
      {
        "file": "scripts/security/security_audit_and_cleanup.py",
        "secret": "{secret_type}"
      },
      {
        "file": "scripts/ci/deployment_health_gate.py",
        "secret": "openai_api_key"
      },
      {
        "file": "scripts/ci/deployment_health_gate.py",
        "secret": "snowflake_account"
      },
      {
        "file": "scripts/ci/deployment_health_gate.py",
        "secret": "snowflake_password"
      },
      {
        "file": "scripts/ci/deployment_health_gate.py",
        "secret": "openai_api_key"
      },
      {
        "file": "scripts/ci/deployment_health_gate.py",
        "secret": "anthropic_api_key"
      },
      {
        "file": "scripts/ci/deployment_health_gate.py",
        "secret": "pinecone_api_key"
      },
      {
        "file": "mcp-servers/linear/linear_mcp_server.py",
        "secret": "linear_api_key"
      },
      {
        "file": "mcp-servers/snowflake/production_snowflake_mcp_server.py",
        "secret": "snowflake.account"
      },
      {
        "file": "mcp-servers/snowflake/production_snowflake_mcp_server.py",
        "secret": "snowflake.user"
      },
      {
        "file": "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py",
        "secret": "apify_api_token"
      },
      {
        "file": "mcp-servers/huggingface_ai/huggingface_ai_mcp_server.py",
        "secret": "huggingface_token"
      },
      {
        "file": "mcp-servers/codacy/codacy_mcp_server.py",
        "secret": "secret_name"
      },
      {
        "file": "mcp-servers/codacy/codacy_mcp_server.py",
        "secret": "CODACY_API_TOKEN"
      },
      {
        "file": "mcp-servers/slack/go_slack_integration.py",
        "secret": "slack_bot_token"
      },
      {
        "file": "mcp-servers/asana/asana_mcp_server.py",
        "secret": "asana_access_token"
      },
      {
        "file": "mcp-servers/snowflake_cortex/snowflake_cortex_mcp_server.py",
        "secret": "snowflake_password"
      },
      {
        "file": "mcp-servers/hubspot/tests/get_closed_ticket_conversations.py",
        "secret": "hubspot_access_token"
      },
      {
        "file": "mcp-servers/hubspot/src/mcp_server_hubspot/hubspot_client.py",
        "secret": "hubspot_access_token"
      }
    ],
    "env_var_ref": [
      {
        "file": "docker-compose.payready-production.yml",
        "secret": "APOLLO_API_KEY"
      },
      {
        "file": "docker-compose.payready-production.yml",
        "secret": "LINKEDIN_API_KEY"
      },
      {
        "file": "docker-compose.payready-production.yml",
        "secret": "COSTAR_API_KEY"
      },
      {
        "file": "docker-compose.payready-production.yml",
        "secret": "APOLLO_API_KEY"
      },
      {
        "file": "docker-compose.payready-production.yml",
        "secret": "BUZZ_API_KEY"
      },
      {
        "file": "docker-compose.payready-production.yml",
        "secret": "SLACK_WEBHOOK_URL"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "LAMBDA_API_KEY"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "LAMBDA_SSH_PRIVATE_KEY"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "ESTUARY_ACCESS_TOKEN"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "ESTUARY_REFRESH_TOKEN"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "GONG_ACCESS_KEY"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "GONG_ACCESS_KEY_SECRET"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "GONG_BASE_URL"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "GONG_CLIENT_ACCESS_KEY"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "GONG_CLIENT_SECRET"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "HUBSPOT_ACCESS_TOKEN"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "HUBSPOT_CLIENT_SECRET"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "ANTHROPIC_API_KEY"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "GROQ_API_KEY"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "GROQ_VIRTUAL_KEY"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "MISTRAL_API_KEY"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "MISTRAL_VIRTUAL_KEY"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "COHERE_API_KEY"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "COHERE_VIRTUAL_KEY"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "HUGGINGFACE_API_TOKEN"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "LANGCHAIN_API_KEY"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "LANGSMITH_API_KEY"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "LANGSMITH_ORG_ID"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "GITHUB_TOKEN"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "VERCEL_TOKEN"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "VERCEL_ORG_ID"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "VERCEL_PROJECT_ID"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "POSTGRESQL_PASSWORD"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "REDIS_URL"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "REDIS_PASSWORD"
      },
      {
        "file": "pulumi-esc-github-imports.yaml",
        "secret": "SNOWFLAKE_PASSWORD"
      },
      {
        "file": "docker-compose.snowflake-admin.yml",
        "secret": "SNOWFLAKE_DEV_PASSWORD"
      },
      {
        "file": "docker-compose.snowflake-admin.yml",
        "secret": "SNOWFLAKE_STG_PASSWORD"
      },
      {
        "file": "docker-compose.snowflake-admin.yml",
        "secret": "SNOWFLAKE_PROD_PASSWORD"
      },
      {
        "file": "docker-compose.snowflake-admin.yml",
        "secret": "OPENAI_API_KEY"
      },
      {
        "file": "docker-compose.snowflake-admin.yml",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "deploy_estuary_foundation.py",
        "secret": "GITHUB_ACCESS_TOKEN"
      },
      {
        "file": "deploy_estuary_foundation.py",
        "secret": "HUBSPOT_CLIENT_ID"
      },
      {
        "file": "deploy_estuary_foundation.py",
        "secret": "HUBSPOT_CLIENT_SECRET"
      },
      {
        "file": "deploy_estuary_foundation.py",
        "secret": "HUBSPOT_REFRESH_TOKEN"
      },
      {
        "file": "deploy_estuary_foundation.py",
        "secret": "SLACK_API_TOKEN"
      },
      {
        "file": "docker-compose.staging-simple.yml",
        "secret": "POSTGRES_PASSWORD"
      },
      {
        "file": "docker-compose.production.yml",
        "secret": "GRAFANA_PASSWORD"
      },
      {
        "file": "docker-compose.production.yml",
        "secret": "POSTGRES_PASSWORD"
      },
      {
        "file": "docker-compose.production.yml",
        "secret": "POSTGRES_REPLICATION_PASSWORD"
      },
      {
        "file": "cursor_mcp_config.json",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "cursor_mcp_config.json",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "cursor_mcp_config.json",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "cursor_mcp_config.json",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "cursor_mcp_config.json",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "docker-compose.mcp-gateway.yml",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "docker-compose.mcp-gateway.yml",
        "secret": "GITHUB_TOKEN"
      },
      {
        "file": "docker-compose.mcp-gateway.yml",
        "secret": "SLACK_BOT_TOKEN"
      },
      {
        "file": "docker-compose.mcp-gateway.yml",
        "secret": "SLACK_APP_TOKEN"
      },
      {
        "file": "docker-compose.mcp-gateway.yml",
        "secret": "ASANA_ACCESS_TOKEN"
      },
      {
        "file": "docker-compose.mcp-gateway.yml",
        "secret": "NOTION_ACCESS_TOKEN"
      },
      {
        "file": "docker-compose.mcp-gateway.yml",
        "secret": "CODACY_ACCOUNT_TOKEN"
      },
      {
        "file": "docker-compose.mcp-gateway.yml",
        "secret": "CODACY_PROJECT_TOKEN"
      },
      {
        "file": "docker-compose.yml",
        "secret": "DATABASE_URL"
      },
      {
        "file": "docker-compose.yml",
        "secret": "REDIS_URL"
      },
      {
        "file": "docker-compose.yml",
        "secret": "SOPHIA_AI_TOKEN"
      },
      {
        "file": "docker-compose.yml",
        "secret": "PINECONE_API_KEY"
      },
      {
        "file": "docker-compose.yml",
        "secret": "WEAVIATE_URL"
      },
      {
        "file": "docker-compose.yml",
        "secret": "WEAVIATE_API_KEY"
      },
      {
        "file": "docker-compose.yml",
        "secret": "OPENAI_API_KEY"
      },
      {
        "file": "docker-compose.yml",
        "secret": "ANTHROPIC_API_KEY"
      },
      {
        "file": "docker-compose.yml",
        "secret": "SECRET_KEY"
      },
      {
        "file": "docker-compose.yml",
        "secret": "JWT_SECRET"
      },
      {
        "file": "docker-compose.yml",
        "secret": "ARIZE_SPACE_ID"
      },
      {
        "file": "docker-compose.yml",
        "secret": "ARIZE_API_KEY"
      },
      {
        "file": "docker-compose.yml",
        "secret": "POSTGRES_PASSWORD"
      },
      {
        "file": "deploy_estuary_foundation_corrected.py",
        "secret": "GITHUB_ACCESS_TOKEN"
      },
      {
        "file": "snowflake_advanced_features_implementation.py",
        "secret": "ROW_ID"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "LAMBDA_API_KEY"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "LAMBDA_SSH_PRIVATE_KEY"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "ESTUARY_ACCESS_TOKEN"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "ESTUARY_REFRESH_TOKEN"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "GONG_ACCESS_KEY"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "GONG_ACCESS_KEY_SECRET"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "GONG_BASE_URL"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "GONG_CLIENT_ACCESS_KEY"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "GONG_CLIENT_SECRET"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "HUBSPOT_ACCESS_TOKEN"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "HUBSPOT_CLIENT_SECRET"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "ANTHROPIC_API_KEY"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "GROQ_API_KEY"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "GROQ_VIRTUAL_KEY"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "MISTRAL_API_KEY"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "MISTRAL_VIRTUAL_KEY"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "COHERE_API_KEY"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "COHERE_VIRTUAL_KEY"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "HUGGINGFACE_API_TOKEN"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "LANGCHAIN_API_KEY"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "LANGSMITH_API_KEY"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "LANGSMITH_ORG_ID"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "GITHUB_TOKEN"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "VERCEL_TOKEN"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "VERCEL_ORG_ID"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "VERCEL_PROJECT_ID"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "DOCKER_PASSWORD"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "NPM_TOKEN"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "POSTGRESQL_PASSWORD"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "REDIS_URL"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "REDIS_PASSWORD"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "SNOWFLAKE_PASSWORD"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "JWT_SECRET"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "ENCRYPTION_KEY"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "API_SECRET"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "SLACK_BOT_TOKEN"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "SLACK_WEBHOOK_URL"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "NOTION_TOKEN"
      },
      {
        "file": "pulumi-esc-production-config.yaml",
        "secret": "ASANA_TOKEN"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_ARIZE_SPACE_ID"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_ARIZE_API_KEY"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_OPENROUTER_API_KEY"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_PORTKEY_API_KEY"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_HUGGINGFACE_API_TOKEN"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_TOGETHER_AI_API_KEY"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_APIFY_API_TOKEN"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_PHANTOM_BUSTER_API_KEY"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_TWINGLY_API_KEY"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_TAVILY_API_KEY"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_ZENROWS_API_KEY"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_LAMBDA_LABS_API_KEY"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_PULUMI_ACCESS_TOKEN"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_DOCKER_TOKEN"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_SNOWFLAKE_PASSWORD"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_PINECONE_API_KEY"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_LOOKER_API_KEY"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_MIXPANEL_API_KEY"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_CODACY_ACCOUNT_TOKEN"
      },
      {
        "file": ".cursor/mcp_settings.json",
        "secret": "ESC_CODACY_PROJECT_TOKEN"
      },
      {
        "file": "config/snowflake_admin_config.yaml",
        "secret": "SNOWFLAKE_DEV_PASSWORD"
      },
      {
        "file": "config/snowflake_admin_config.yaml",
        "secret": "SNOWFLAKE_STG_PASSWORD"
      },
      {
        "file": "config/snowflake_admin_config.yaml",
        "secret": "SNOWFLAKE_PROD_PASSWORD"
      },
      {
        "file": "config/cursor_phase1_mcp_config.json",
        "secret": "SNOWFLAKE_PASSWORD"
      },
      {
        "file": "config/cursor_phase1_mcp_config.json",
        "secret": "APOLLO_IO_API_KEY"
      },
      {
        "file": "config/cursor_phase1_mcp_config.json",
        "secret": "APIFY_TOKEN"
      },
      {
        "file": "config/cursor_phase1_mcp_config.json",
        "secret": "FIGMA_ACCESS_TOKEN"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "LAMBDA_LABS_API_KEY"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "SSH_KEY"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "SSH_KEY"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "SSH_KEY"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "LAMBDA_LABS_API_KEY"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "PUBLIC_KEY"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "LAMBDA_LABS_API_KEY"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "INSTANCE_ID"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "INSTANCE_ID"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "LAMBDA_LABS_API_KEY"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "SSH_KEY"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "SSH_KEY"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "VERSION_ID"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "SSH_KEY"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "SSH_KEY"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "SSH_KEY"
      },
      {
        "file": "scripts/automated_lambda_labs_deployment.py",
        "secret": "SSH_KEY"
      },
      {
        "file": "scripts/deployment_refactoring_phase3.py",
        "secret": "POSTGRES_PASSWORD"
      },
      {
        "file": "scripts/deployment_refactoring_phase3.py",
        "secret": "POSTGRES_REPLICATION_PASSWORD"
      },
      {
        "file": "scripts/deployment_refactoring_phase3.py",
        "secret": "GRAFANA_PASSWORD"
      },
      {
        "file": "scripts/deploy_to_staging_fixed.py",
        "secret": "POSTGRES_PASSWORD"
      },
      {
        "file": "scripts/deploy_enhanced_mcp_ecosystem.py",
        "secret": "GITHUB_TOKEN"
      },
      {
        "file": "scripts/deploy_enhanced_mcp_ecosystem.py",
        "secret": "PORTKEY_API_KEY"
      },
      {
        "file": "scripts/deploy_enhanced_mcp_ecosystem.py",
        "secret": "OPENROUTER_API_KEY"
      },
      {
        "file": "scripts/replace_estuary_with_estuary.py",
        "secret": "ESTUARY_ACCESS_TOKEN"
      },
      {
        "file": "scripts/replace_estuary_with_estuary.py",
        "secret": "ESTUARY_REFRESH_TOKEN"
      },
      {
        "file": "scripts/replace_estuary_with_estuary.py",
        "secret": "GITHUB_ACCESS_TOKEN"
      },
      {
        "file": "scripts/replace_estuary_with_estuary.py",
        "secret": "HUBSPOT_CLIENT_ID"
      },
      {
        "file": "scripts/replace_estuary_with_estuary.py",
        "secret": "HUBSPOT_CLIENT_SECRET"
      },
      {
        "file": "scripts/replace_estuary_with_estuary.py",
        "secret": "HUBSPOT_REFRESH_TOKEN"
      },
      {
        "file": "scripts/replace_estuary_with_estuary.py",
        "secret": "SLACK_API_TOKEN"
      },
      {
        "file": "scripts/vercel_optimization.py",
        "secret": "ANALYTICS_ID"
      },
      {
        "file": "scripts/implement_missing_snowflake_schemas.py",
        "secret": "SNOWFLAKE_PASSWORD"
      },
      {
        "file": "estuary-config/sophia-ai-flows.yaml",
        "secret": "HUBSPOT_ACCESS_TOKEN"
      },
      {
        "file": "estuary-config/sophia-ai-flows.yaml",
        "secret": "GONG_ACCESS_KEY"
      },
      {
        "file": "estuary-config/sophia-ai-flows.yaml",
        "secret": "GONG_ACCESS_KEY_SECRET"
      },
      {
        "file": "estuary-config/sophia-ai-flows.yaml",
        "secret": "SLACK_BOT_TOKEN"
      },
      {
        "file": "estuary-config/sophia-ai-flows.yaml",
        "secret": "DATABASE_PASSWORD"
      },
      {
        "file": "estuary-config/sophia-ai-flows.yaml",
        "secret": "SOPHIA_AI_TOKEN"
      },
      {
        "file": "estuary-config/sophia-ai-flows.yaml",
        "secret": "REDIS_PASSWORD"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "LAMBDA_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "LAMBDA_SSH_PRIVATE_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "DATABASE_URL"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "DATABASE_SSH_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "KUBERNETES_CLUSTER_ID"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "ESTUARY_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "ESTUARY_REFRESH_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "GONG_ACCESS_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "GONG_ACCESS_KEY_SECRET"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "GONG_BASE_URL"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "GONG_CLIENT_ACCESS_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "GONG_CLIENT_SECRET"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "HUBSPOT_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "HUBSPOT_CLIENT_SECRET"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "AIRBYTE_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "AIRBYTE_CLIENT_ID"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "AIRBYTE_CLIENT_SECRET"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "ANTHROPIC_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "GROQ_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "GROQ_VIRTUAL_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "MISTRAL_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "MISTRAL_VIRTUAL_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "COHERE_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "COHERE_VIRTUAL_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "CODESTRAL_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "CODESTRAL_ORG_ID"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "HUGGINGFACE_API_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "LANGCHAIN_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "LANGSMITH_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "LANGSMITH_ORG_ID"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "LLAMA_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "ENCRYPTION_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "BACKUP_ENCRYPTION_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "JWT_SECRET"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "API_SECRET_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "GH_API_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "GH_CLASSIC_PAT_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "GH_FINE_GRAINED_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "DOCKER_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "DOCKER_PERSONAL_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "NPM_API_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "GRAFANA_URL"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "GRAFANA_PASSWORD"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "KIBANA_URL"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "NOTION_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "LINEAR_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "ASANA_API_TOKEN"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "FIGMA_PROJECT_ID"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "APOLLO_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "BRAVE_API_KEY"
      },
      {
        "file": "infrastructure/pulumi-esc-comprehensive-update.py",
        "secret": "NAMECHEAP_API_KEY"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "DATABASE_PASSWORD"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "REDIS_PASSWORD"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "ESTUARY_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "ESTUARY_REFRESH_TOKEN"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "DATABASE_PASSWORD"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "REDIS_PASSWORD"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "SOPHIA_AI_TOKEN"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "GONG_ACCESS_KEY"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "GONG_ACCESS_KEY_SECRET"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "HUBSPOT_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "ESTUARY_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "OPENAI_API_KEY"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "ANTHROPIC_API_KEY"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "GROQ_API_KEY"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "PINECONE_API_KEY"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "GRAFANA_ADMIN_PASSWORD"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "ESTUARY_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/sophia-ai-complete-stack.yml",
        "secret": "SOPHIA_AI_TOKEN"
      },
      {
        "file": "frontend/src/services/api_v1.js",
        "secret": "API_BASE_URL"
      },
      {
        "file": "config/pulumi/estuary-secrets.yaml",
        "secret": "GITHUB_ACCESS_TOKEN"
      },
      {
        "file": "config/pulumi/estuary-secrets.yaml",
        "secret": "HUBSPOT_CLIENT_ID"
      },
      {
        "file": "config/pulumi/estuary-secrets.yaml",
        "secret": "HUBSPOT_CLIENT_SECRET"
      },
      {
        "file": "config/pulumi/estuary-secrets.yaml",
        "secret": "HUBSPOT_REFRESH_TOKEN"
      },
      {
        "file": "config/pulumi/estuary-secrets.yaml",
        "secret": "SLACK_API_TOKEN"
      },
      {
        "file": "config/pulumi/estuary-secrets.yaml",
        "secret": "ESTUARY_ACCESS_TOKEN"
      },
      {
        "file": "config/pulumi/estuary-secrets.yaml",
        "secret": "ESTUARY_REFRESH_TOKEN"
      },
      {
        "file": "config/backups/simplified_mcp_config_20250701_003324.json",
        "secret": "PORTKEY_VIRTUAL_KEY"
      },
      {
        "file": "config/backups/simplified_mcp_config_20250701_003324.json",
        "secret": "PORTKEY_VIRTUAL_KEY"
      },
      {
        "file": "config/backups/simplified_mcp_config_20250701_003324.json",
        "secret": "PORTKEY_VIRTUAL_KEY"
      },
      {
        "file": "config/backups/simplified_mcp_config_20250701_003324.json",
        "secret": "PORTKEY_VIRTUAL_KEY"
      },
      {
        "file": "config/backups/cursor_enhanced_mcp_config_20250701_003324.json",
        "secret": "PORTKEY_API_KEY"
      },
      {
        "file": "config/backups/cursor_enhanced_mcp_config_20250701_003324.json",
        "secret": "PORTKEY_VIRTUAL_KEY"
      },
      {
        "file": "config/backups/cursor_enhanced_mcp_config_20250701_003324.json",
        "secret": "OPENAI_API_KEY"
      },
      {
        "file": "config/backups/cursor_enhanced_mcp_config_20250701_003324.json",
        "secret": "PINECONE_API_KEY"
      },
      {
        "file": "config/backups/cursor_enhanced_mcp_config_20250701_003324.json",
        "secret": "PORTKEY_API_KEY"
      },
      {
        "file": "config/backups/cursor_enhanced_mcp_config_20250701_003324.json",
        "secret": "PORTKEY_VIRTUAL_KEY"
      },
      {
        "file": "config/backups/cursor_enhanced_mcp_config_20250701_003324.json",
        "secret": "PORTKEY_VIRTUAL_KEY"
      },
      {
        "file": "config/backups/cursor_enhanced_mcp_config_20250701_003324.json",
        "secret": "PORTKEY_VIRTUAL_KEY"
      },
      {
        "file": "config/backups/cursor_enhanced_mcp_config_20250701_003324.json",
        "secret": "PORTKEY_VIRTUAL_KEY"
      },
      {
        "file": "config/backups/cursor_enhanced_mcp_config_20250701_003324.json",
        "secret": "PORTKEY_VIRTUAL_KEY"
      },
      {
        "file": "config/backups/cursor_enhanced_mcp_config_20250701_003324.json",
        "secret": "GITHUB_TOKEN"
      },
      {
        "file": "config/backups/cursor_enhanced_mcp_config_20250701_003324.json",
        "secret": "PORTKEY_API_KEY"
      },
      {
        "file": "config/backups/cursor_enhanced_mcp_config_20250701_003324.json",
        "secret": "OPENROUTER_API_KEY"
      },
      {
        "file": "config/estuary/apollo-capture.flow.yaml",
        "secret": "APOLLO_API_KEY"
      },
      {
        "file": "config/estuary/slack-capture.flow.yaml",
        "secret": "SLACK_API_TOKEN"
      },
      {
        "file": "config/estuary/hubspot-capture.flow.yaml",
        "secret": "HUBSPOT_CLIENT_ID"
      },
      {
        "file": "config/estuary/hubspot-capture.flow.yaml",
        "secret": "HUBSPOT_CLIENT_SECRET"
      },
      {
        "file": "config/estuary/hubspot-capture.flow.yaml",
        "secret": "HUBSPOT_REFRESH_TOKEN"
      },
      {
        "file": "config/estuary/github-capture.flow.yaml",
        "secret": "GITHUB_ACCESS_TOKEN"
      },
      {
        "file": "config/estuary/usergems-capture.flow.yaml",
        "secret": "USERGEMS_API_KEY"
      },
      {
        "file": "config/mcp/phase1/apify_config.json",
        "secret": "APIFY_TOKEN"
      },
      {
        "file": "backend/integrations/estuary_flow_manager.py",
        "secret": "SNOWFLAKE_PAT_TOKEN"
      },
      {
        "file": "backend/integrations/estuary_flow_manager.py",
        "secret": "GITHUB_ACCESS_TOKEN"
      },
      {
        "file": "backend/integrations/estuary_flow_manager.py",
        "secret": "HUBSPOT_CLIENT_ID"
      },
      {
        "file": "backend/integrations/estuary_flow_manager.py",
        "secret": "HUBSPOT_CLIENT_SECRET"
      },
      {
        "file": "backend/integrations/estuary_flow_manager.py",
        "secret": "HUBSPOT_REFRESH_TOKEN"
      },
      {
        "file": "backend/integrations/estuary_flow_manager.py",
        "secret": "SLACK_API_TOKEN"
      },
      {
        "file": "backend/integrations/estuary_flow_manager.py",
        "secret": "USERGEMS_API_KEY"
      },
      {
        "file": "backend/integrations/estuary_flow_manager.py",
        "secret": "APOLLO_API_KEY"
      },
      {
        "file": "backend/integrations/estuary_flow_manager.py",
        "secret": "ESTUARY_ACCESS_TOKEN"
      },
      {
        "file": "backend/services/real_time_streaming_service.py",
        "secret": "ROW_ID"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/src/components/__tests__/AuthDebugger.test.tsx",
        "secret": "SESSION_KEY"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/src/components/__tests__/AuthDebugger.test.tsx",
        "secret": "SESSION_KEY"
      },
      {
        "file": "infrastructure/vercel/index.ts",
        "secret": "VERCEL_TOKEN"
      },
      {
        "file": "infrastructure/vercel/index.ts",
        "secret": "VERCEL_TOKEN"
      },
      {
        "file": "infrastructure/vercel/index.ts",
        "secret": "VERCEL_TOKEN"
      },
      {
        "file": "infrastructure/vercel/index.ts",
        "secret": "VERCEL_TOKEN"
      },
      {
        "file": "infrastructure/vercel/index.ts",
        "secret": "PROD_PROJECT_ID"
      },
      {
        "file": "infrastructure/vercel/index.ts",
        "secret": "DEV_PROJECT_ID"
      },
      {
        "file": "infrastructure/vercel/index.ts",
        "secret": "NAMECHEAP_API_KEY"
      },
      {
        "file": "infrastructure/vercel/index.ts",
        "secret": "NAMECHEAP_API_KEY"
      },
      {
        "file": "infrastructure/vercel/index.ts",
        "secret": "VERCEL_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "WEBHOOK_JWT_PRIVATE_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "WEBHOOK_JWT_PUBLIC_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "SNOWFLAKE_PASSWORD"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "SNOWFLAKE_OAUTH_CLIENT_ID"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "SNOWFLAKE_OAUTH_CLIENT_SECRET"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "SNOWFLAKE_OAUTH_REFRESH_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "REDIS_CLUSTER_PASSWORD"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "AGENT_ORCHESTRATOR_AUTH_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "AGENT_COMMUNICATION_SECRET"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "GONG_ACCESS_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "GONG_CLIENT_SECRET"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "GONG_OAUTH_CLIENT_ID"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "GONG_OAUTH_CLIENT_SECRET"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "GONG_OAUTH_REFRESH_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "GONG_WEBHOOK_SECRET"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "ARIZE_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "ARIZE_SPACE_ID"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "PROMETHEUS_AUTH_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "GRAFANA_URL"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "GRAFANA_PASSWORD"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "GRAFANA_ADMIN_PASSWORD"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "MCP_GITHUB_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "MCP_SLACK_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "SLACK_SIGNING_SECRET"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "MCP_LINEAR_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "MCP_DOCKER_REGISTRY_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "ENCRYPTION_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "AZURE_OIDC_CLIENT_ID"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "PORTKEY_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-platform-base.yaml",
        "secret": "OPENROUTER_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "AGNO_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "OPENROUTER_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "PORTKEY_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "PORTKEY_VIRTUAL_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "OPENAI_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "ANTHROPIC_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "HUGGINGFACE_API_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "LANGCHAIN_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "ARIZE_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "ARIZE_SPACE_ID"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "MISTRAL_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "DEEPSEEK_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "CODESTRAL_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "TOGETHERAI_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "XAI_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "VENICE_AI_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "LLAMA_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "PINECONE_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "WEAVIATE_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "WEAVIATE_URL"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "APIFY_API_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "SERP_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "TAVILY_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "DATABASE_URL"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "GRAFANA_URL"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "GRAFANA_PASSWORD"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "PROMETHEUS_URL"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "SLACK_BOT_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "SLACK_APP_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "SLACK_SIGNING_SECRET"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "JWT_SECRET"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "ENCRYPTION_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "LAMBDA_LABS_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "LAMBDA_LABS_SSH_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "DOCKER_PERSONAL_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "GONG_ACCESS_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "GONG_CLIENT_SECRET"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "HUBSPOT_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "LINEAR_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-ai-production.yaml",
        "secret": "NOTION_API_KEY"
      },
      {
        "file": "infrastructure/esc/sophia-intelligence-platform.yaml",
        "secret": "NAMECHEAP_API_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "AZURE_CLIENT_ID"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "PULUMI_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "ENCRYPTION_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "JWT_SECRET"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "WEBHOOK_BASE_URL"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "WEBHOOK_JWT_PRIVATE_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "WEBHOOK_JWT_PUBLIC_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "GONG_ACCESS_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "GONG_CLIENT_SECRET"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "GONG_WEBHOOK_SECRET"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "GONG_OAUTH_CLIENT_ID"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "GONG_OAUTH_CLIENT_SECRET"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "GONG_OAUTH_REFRESH_TOKEN"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "AGENT_ORCHESTRATOR_AUTH_TOKEN"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "AGENT_COMMUNICATION_SECRET"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "REDIS_CLUSTER_PASSWORD"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "OPENAI_API_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "OPENROUTER_API_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "PORTKEY_API_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "PORTKEY_VIRTUAL_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "ANTHROPIC_API_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "ARIZE_API_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "PINECONE_API_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "WEAVIATE_API_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "WEAVIATE_URL"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "SNOWFLAKE_PASSWORD"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "SNOWFLAKE_OAUTH_CLIENT_ID"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "SNOWFLAKE_OAUTH_CLIENT_SECRET"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "SNOWFLAKE_OAUTH_REFRESH_TOKEN"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "DATABASE_URL"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "MCP_GITHUB_TOKEN"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "MCP_SLACK_TOKEN"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "MCP_LINEAR_TOKEN"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "MCP_DOCKER_REGISTRY_TOKEN"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "SLACK_BOT_TOKEN"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "SLACK_APP_TOKEN"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "SLACK_SIGNING_SECRET"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "HUBSPOT_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "LINEAR_API_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "NOTION_API_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "ARIZE_API_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "ARIZE_SPACE_ID"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "PROMETHEUS_AUTH_TOKEN"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "GRAFANA_URL"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "GRAFANA_PASSWORD"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "GRAFANA_ADMIN_PASSWORD"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "AZURE_OIDC_CLIENT_ID"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "DOCKER_PERSONAL_ACCESS_TOKEN"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "LAMBDA_LABS_API_KEY"
      },
      {
        "file": "infrastructure/kubernetes/sophia-platform-secrets.yaml",
        "secret": "LAMBDA_LABS_SSH_KEY"
      }
    ],
    "process_env": [
      {
        "file": "frontend/vite.config.production.js",
        "secret": "NODE_ENV"
      },
      {
        "file": "frontend/vite.config.production.js",
        "secret": "VITE_SOPHIA_API_URL"
      },
      {
        "file": "frontend/vite.config.production.js",
        "secret": "NODE_ENV"
      },
      {
        "file": "frontend/vite.config.production.js",
        "secret": "VERCEL_GIT_COMMIT_SHA"
      },
      {
        "file": "frontend/vite.config.production.js",
        "secret": "NODE_ENV"
      },
      {
        "file": "frontend/src/SimpleApp.jsx",
        "secret": "NODE_ENV"
      },
      {
        "file": "frontend/src/SimpleApp.jsx",
        "secret": "NODE_ENV"
      },
      {
        "file": "frontend/src/lib/figma-integration.js",
        "secret": "FIGMA_PERSONAL_ACCESS_TOKEN"
      },
      {
        "file": "frontend/src/services/apiClient.js",
        "secret": "REACT_APP_API_URL"
      },
      {
        "file": "frontend/src/services/apiClient.js",
        "secret": "REACT_APP_API_URL"
      },
      {
        "file": "frontend/src/services/apiClient.js",
        "secret": "REACT_APP_API_URL"
      },
      {
        "file": "frontend/src/services/apiClient.js",
        "secret": "NODE_ENV"
      },
      {
        "file": "frontend/src/services/WebSocketManager.js",
        "secret": "NODE_ENV"
      },
      {
        "file": "frontend/src/services/api_v1.js",
        "secret": "NODE_ENV"
      },
      {
        "file": "frontend/src/services/api_v1.js",
        "secret": "NODE_ENV"
      },
      {
        "file": "frontend/src/services/api_v1.js",
        "secret": "NODE_ENV"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_BACKEND_URL"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_WS_URL"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_FIGMA_PERSONAL_ACCESS_TOKEN"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_FIGMA_FILE_KEY"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_ENABLE_FIGMA_INTEGRATION"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_DESIGN_SYSTEM_MODE"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_GLASSMORPHISM_ENABLED"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_ENABLE_ENHANCED_DASHBOARD"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_ENABLE_CHART_JS_DASHBOARD"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_ENABLE_REAL_TIME_CHARTS"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_ENABLE_FIGMA_INTEGRATION"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_ENABLE_PERFORMANCE_MONITORING"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_ANALYTICS_ENABLED"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_ERROR_TRACKING_ENABLED"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_DEBUG_MODE"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_CEO_ACCESS_TOKEN"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_ADMIN_MODE"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_DEPLOYMENT_ENV"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VITE_BUILD_VERSION"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VERCEL_DEPLOYMENT_ID"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VERCEL_GIT_COMMIT_SHA"
      },
      {
        "file": "config/environment/production.js",
        "secret": "VERCEL_GIT_COMMIT_REF"
      },
      {
        "file": "external/glips_figma_context/tsup.config.ts",
        "secret": "NPM_PACKAGE_VERSION"
      },
      {
        "file": "external/microsoft_playwright/playwright.config.ts",
        "secret": "CI"
      },
      {
        "file": "external/microsoft_playwright/playwright.config.ts",
        "secret": "CI"
      },
      {
        "file": "external/microsoft_playwright/playwright.config.ts",
        "secret": "CI"
      },
      {
        "file": "external/microsoft_playwright/playwright.config.ts",
        "secret": "MCP_IN_DOCKER"
      },
      {
        "file": "external/openrouter_search/src/index.ts",
        "secret": "OPENROUTER_API_KEY"
      },
      {
        "file": "external/glips_figma_context/src/mcp.ts",
        "secret": "NPM_PACKAGE_VERSION"
      },
      {
        "file": "external/glips_figma_context/src/cli.ts",
        "secret": "NODE_ENV"
      },
      {
        "file": "external/glips_figma_context/src/config.ts",
        "secret": "NPM_PACKAGE_VERSION"
      },
      {
        "file": "external/glips_figma_context/src/config.ts",
        "secret": "FIGMA_API_KEY"
      },
      {
        "file": "external/glips_figma_context/src/config.ts",
        "secret": "FIGMA_API_KEY"
      },
      {
        "file": "external/glips_figma_context/src/config.ts",
        "secret": "FIGMA_OAUTH_TOKEN"
      },
      {
        "file": "external/glips_figma_context/src/config.ts",
        "secret": "FIGMA_OAUTH_TOKEN"
      },
      {
        "file": "external/glips_figma_context/src/config.ts",
        "secret": "PORT"
      },
      {
        "file": "external/glips_figma_context/src/config.ts",
        "secret": "PORT"
      },
      {
        "file": "external/glips_figma_context/src/config.ts",
        "secret": "OUTPUT_FORMAT"
      },
      {
        "file": "external/glips_figma_context/src/config.ts",
        "secret": "OUTPUT_FORMAT"
      },
      {
        "file": "external/glips_figma_context/src/tests/integration.test.ts",
        "secret": "FIGMA_API_KEY"
      },
      {
        "file": "external/glips_figma_context/src/tests/integration.test.ts",
        "secret": "FIGMA_FILE_KEY"
      },
      {
        "file": "external/glips_figma_context/src/services/figma.ts",
        "secret": "NODE_ENV"
      },
      {
        "file": "external/anthropic-mcp-servers/src/memory/index.ts",
        "secret": "MEMORY_FILE_PATH"
      },
      {
        "file": "external/anthropic-mcp-servers/src/memory/index.ts",
        "secret": "MEMORY_FILE_PATH"
      },
      {
        "file": "external/anthropic-mcp-servers/src/memory/index.ts",
        "secret": "MEMORY_FILE_PATH"
      },
      {
        "file": "external/anthropic-mcp-servers/src/memory/index.ts",
        "secret": "MEMORY_FILE_PATH"
      },
      {
        "file": "external/anthropic-mcp-servers/src/everything/sse.ts",
        "secret": "PORT"
      },
      {
        "file": "external/anthropic-mcp-servers/src/everything/streamableHttp.ts",
        "secret": "PORT"
      },
      {
        "file": "external/anthropic-mcp-servers/src/sequentialthinking/index.ts",
        "secret": "DISABLE_THOUGHT_LOGGING"
      },
      {
        "file": "external/portkey_admin/src/services/portkey.service.ts",
        "secret": "PORTKEY_API_KEY"
      },
      {
        "file": "external/microsoft_playwright/tests/fixtures.ts",
        "secret": "CI"
      },
      {
        "file": "external/microsoft_playwright/tests/fixtures.ts",
        "secret": "PWMCP_DEBUG"
      },
      {
        "file": "external/microsoft_playwright/src/browserContextFactory.ts",
        "secret": "XDG_CACHE_HOME"
      },
      {
        "file": "external/microsoft_playwright/src/browserContextFactory.ts",
        "secret": "LOCALAPPDATA"
      },
      {
        "file": "external/microsoft_playwright/src/fileUtils.ts",
        "secret": "XDG_CACHE_HOME"
      },
      {
        "file": "external/microsoft_playwright/src/fileUtils.ts",
        "secret": "LOCALAPPDATA"
      },
      {
        "file": "external/microsoft_playwright/src/config.ts",
        "secret": "DISPLAY"
      },
      {
        "file": "external/microsoft_playwright/src/config.ts",
        "secret": "PW_BROWSER_AGENT"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/playwright.config.ts",
        "secret": "CI"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/playwright.config.ts",
        "secret": "CI"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/playwright.config.ts",
        "secret": "CI"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/playwright.config.ts",
        "secret": "CI"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/playwright.config.ts",
        "secret": "CI"
      },
      {
        "file": "external/anthropic-mcp-inspector/server/src/index.ts",
        "secret": "MCP_ENV_VARS"
      },
      {
        "file": "external/anthropic-mcp-inspector/server/src/index.ts",
        "secret": "MCP_ENV_VARS"
      },
      {
        "file": "external/anthropic-mcp-inspector/server/src/index.ts",
        "secret": "MCP_PROXY_TOKEN"
      },
      {
        "file": "external/anthropic-mcp-inspector/server/src/index.ts",
        "secret": "DANGEROUSLY_OMIT_AUTH"
      },
      {
        "file": "external/anthropic-mcp-inspector/server/src/index.ts",
        "secret": "CLIENT_PORT"
      },
      {
        "file": "external/anthropic-mcp-inspector/server/src/index.ts",
        "secret": "ALLOWED_ORIGINS"
      },
      {
        "file": "external/anthropic-mcp-inspector/server/src/index.ts",
        "secret": "SERVER_PORT"
      },
      {
        "file": "external/anthropic-mcp-inspector/server/src/index.ts",
        "secret": "HOST"
      },
      {
        "file": "external/anthropic-mcp-inspector/cli/src/cli.ts",
        "secret": "CLIENT_PORT"
      },
      {
        "file": "external/anthropic-mcp-inspector/cli/src/cli.ts",
        "secret": "SERVER_PORT"
      },
      {
        "file": "external/anthropic-mcp-inspector/cli/src/cli.ts",
        "secret": "DEBUG"
      },
      {
        "file": "external/anthropic-mcp-inspector/cli/src/cli.ts",
        "secret": "DEBUG"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/bin/client.js",
        "secret": "CLIENT_PORT"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/bin/client.js",
        "secret": "HOST"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/bin/client.js",
        "secret": "INSPECTOR_URL"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/bin/client.js",
        "secret": "MCP_AUTO_OPEN_ENABLED"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/bin/start.js",
        "secret": "HOST"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/bin/start.js",
        "secret": "HOST"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/bin/start.js",
        "secret": "MCP_AUTO_OPEN_ENABLED"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/bin/start.js",
        "secret": "DEBUG"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/bin/start.js",
        "secret": "CLIENT_PORT"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/bin/start.js",
        "secret": "SERVER_PORT"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/bin/start.js",
        "secret": "DANGEROUSLY_OMIT_AUTH"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/bin/start.js",
        "secret": "DEBUG"
      },
      {
        "file": "external/anthropic-mcp-inspector/client/e2e/global-teardown.js",
        "secret": "CI"
      },
      {
        "file": "infrastructure/vercel/index.ts",
        "secret": "VERCEL_TEAM_ID"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "GITHUB_ACTIONS"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "CI"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "GITHUB_REPOSITORY"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "GITHUB_RUN_ID"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "GITHUB_WORKFLOW"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "RUNNER_OS"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "PULUMI_COMMAND"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "PULUMI_ORGANIZATION"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "PULUMI_STACK"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "PULUMI_PROJECT"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "PULUMI_CONFIG"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "KUBERNETES_SERVICE_HOST"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "AWS_REGION"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "AZURE_LOCATION"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "USER"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "HOME"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "PWD"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "CI"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "GITHUB_ACTIONS"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "TERM"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "LAMBDA_LABS_CONTEXT"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "NODE_ENV"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "GITHUB_ACTIONS"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "CI"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "GITHUB_REPOSITORY"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "PULUMI_COMMAND"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "PULUMI_ORGANIZATION"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "PULUMI_STACK"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "NODE_ENV"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "LAMBDA_LABS_CONTEXT"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "USER"
      },
      {
        "file": "infrastructure/dns/ip-context-detector.ts",
        "secret": "HOME"
      }
    ]
  },
  "files_with_secrets": {
    "simple_validation_fix.py": {
      "secrets_ref": [
        "ASANA_PAT_TOKEN",
        "SALESFORCE_ACCESS_TOKEN",
        "SLACK_CLIENT_ID",
        "SLACK_CLIENT_SECRET",
        "SLACK_SIGNING_SECRET",
        "SLACK_APP_TOKEN",
        "SLACK_REFRESH_TOKEN",
        "SLACK_SOCKET_TOKEN",
        "HUBSPOT_CLIENT_SECRET",
        "GONG_ACCESS_KEY_SECRET"
      ]
    },
    "simple_validation_results.json": {
      "secrets_ref": [
        "ASANA_PAT_TOKEN",
        "SALESFORCE_ACCESS_TOKEN",
        "SLACK_CLIENT_ID",
        "SLACK_CLIENT_SECRET",
        "SLACK_SIGNING_SECRET",
        "SLACK_APP_TOKEN",
        "SLACK_REFRESH_TOKEN",
        "SLACK_SOCKET_TOKEN",
        "HUBSPOT_CLIENT_SECRET",
        "GONG_ACCESS_KEY_SECRET"
      ]
    },
    "comprehensive_secrets_audit.py": {
      "secrets_ref": [
        "SECRET_NAME"
      ]
    },
    "sophia_ecosystem_diagnostic.py": {
      "os_getenv": [
        "PULUMI_ACCESS_TOKEN"
      ]
    },
    "github_integration_strategy.py": {
      "os_environ_get": [
        "GITHUB_TOKEN"
      ]
    },
    "load_github_secrets_permanently.py": {
      "os_environ": [
        "PULUMI_ACCESS_TOKEN"
      ]
    },
    "comprehensive_alignment_analysis_and_fix.py": {
      "get_config_value": [
        "snowflake_password"
      ]
    },
    "start_mcp_servers.py": {
      "get_config_value": [
        "openai_api_key",
        "pinecone_api_key"
      ],
      "os_environ": [
        "PULUMI_ORG",
        "PYTHONPATH",
        "OPENAI_API_KEY",
        "PINECONE_API_KEY"
      ]
    },
    "start_sophia_absolute_fix.py": {
      "os_environ": [
        "SNOWFLAKE_ACCOUNT",
        "SNOWFLAKE_USER",
        "SNOWFLAKE_DATABASE",
        "SNOWFLAKE_WAREHOUSE",
        "SNOWFLAKE_ROLE",
        "SNOWFLAKE_SCHEMA"
      ]
    },
    "estuary_advanced_integration.py": {
      "get_config_value": [
        "estuary_access_token",
        "snowflake_password"
      ],
      "os_environ": [
        "ESTUARY_ACCESS_TOKEN"
      ]
    },
    "docker-compose.payready-production.yml": {
      "env_var_ref": [
        "APOLLO_API_KEY",
        "LINKEDIN_API_KEY",
        "COSTAR_API_KEY",
        "APOLLO_API_KEY",
        "BUZZ_API_KEY",
        "SLACK_WEBHOOK_URL"
      ]
    },
    "pulumi-esc-configuration.yaml": {
      "secrets_ref": [
        "PORTKEY_API_KEY",
        "SALESFORCE_OAUTH_TOKEN",
        "HUBSPOT_API_KEY",
        "INTERCOM_ACCESS_TOKEN",
        "GONG_ACCESS_KEY",
        "GONG_CLIENT_SECRET",
        "SNOWFLAKE_ACCOUNT",
        "SNOWFLAKE_USERNAME",
        "SNOWFLAKE_PASSWORD",
        "N",
        "REDIS_URL",
        "VERCEL_ANALYTICS_ID",
        "SENTRY_DSN",
        "VERCEL_TOKEN",
        "GITHUB_TOKEN",
        "PULUMI_ACCESS_TOKEN"
      ]
    },
    "pulumi-esc-github-imports.yaml": {
      "env_var_ref": [
        "LAMBDA_API_KEY",
        "LAMBDA_SSH_PRIVATE_KEY",
        "ESTUARY_ACCESS_TOKEN",
        "ESTUARY_REFRESH_TOKEN",
        "GONG_ACCESS_KEY",
        "GONG_ACCESS_KEY_SECRET",
        "GONG_BASE_URL",
        "GONG_CLIENT_ACCESS_KEY",
        "GONG_CLIENT_SECRET",
        "HUBSPOT_ACCESS_TOKEN",
        "HUBSPOT_CLIENT_SECRET",
        "ANTHROPIC_API_KEY",
        "GROQ_API_KEY",
        "GROQ_VIRTUAL_KEY",
        "MISTRAL_API_KEY",
        "MISTRAL_VIRTUAL_KEY",
        "COHERE_API_KEY",
        "COHERE_VIRTUAL_KEY",
        "HUGGINGFACE_API_TOKEN",
        "LANGCHAIN_API_KEY",
        "LANGSMITH_API_KEY",
        "LANGSMITH_ORG_ID",
        "GITHUB_TOKEN",
        "VERCEL_TOKEN",
        "VERCEL_ORG_ID",
        "VERCEL_PROJECT_ID",
        "POSTGRESQL_PASSWORD",
        "REDIS_URL",
        "REDIS_PASSWORD",
        "SNOWFLAKE_PASSWORD"
      ]
    },
    "docker-compose.snowflake-admin.yml": {
      "env_var_ref": [
        "SNOWFLAKE_DEV_PASSWORD",
        "SNOWFLAKE_STG_PASSWORD",
        "SNOWFLAKE_PROD_PASSWORD",
        "OPENAI_API_KEY",
        "PULUMI_ACCESS_TOKEN"
      ]
    },
    "start_enhanced_mcp_servers.py": {
      "get_config_value": [
        "openai_api_key",
        "pinecone_api_key"
      ],
      "os_environ": [
        "PULUMI_ORG",
        "PYTHONPATH",
        "OPENAI_API_KEY",
        "PINECONE_API_KEY"
      ]
    },
    "implement_phase1a_foundation.py": {
      "os_environ": [
        "ENVIRONMENT",
        "PULUMI_ORG"
      ]
    },
    "cortex_agents_advanced_implementation.py": {
      "get_config_value": [
        "snowflake_password"
      ]
    },
    "deploy_estuary_foundation.py": {
      "get_config_value": [
        "snowflake_password"
      ],
      "os_environ": [
        "ESTUARY_ACCESS_TOKEN",
        "ESTUARY_REFRESH_TOKEN"
      ],
      "env_var_ref": [
        "GITHUB_ACCESS_TOKEN",
        "HUBSPOT_CLIENT_ID",
        "HUBSPOT_CLIENT_SECRET",
        "HUBSPOT_REFRESH_TOKEN",
        "SLACK_API_TOKEN"
      ]
    },
    "fix_alignment_issues.py": {
      "get_config_value": [
        "snowflake_password"
      ]
    },
    "final_codebase_alignment_update.py": {
      "get_config_value": [
        "openai_api_key",
        "lambda_api_key",
        "hubspot_access_token"
      ]
    },
    "deploy_snowflake_stability_simple.py": {
      "get_config_value": [
        "snowflake_password"
      ]
    },
    "docker-compose.staging-simple.yml": {
      "env_var_ref": [
        "POSTGRES_PASSWORD"
      ]
    },
    "deploy_comprehensive_upgrade.py": {
      "get_config_value": [
        "estuary_access_token"
      ]
    },
    "docker-compose.production.yml": {
      "env_var_ref": [
        "GRAFANA_PASSWORD",
        "POSTGRES_PASSWORD",
        "POSTGRES_REPLICATION_PASSWORD"
      ]
    },
    "deploy_complete_platform.py": {
      "get_config_value": [
        "snowflake_password",
        "snowflake_password",
        "snowflake_password"
      ]
    },
    "cursor_mcp_config.json": {
      "env_var_ref": [
        "PULUMI_ACCESS_TOKEN",
        "PULUMI_ACCESS_TOKEN",
        "PULUMI_ACCESS_TOKEN",
        "PULUMI_ACCESS_TOKEN",
        "PULUMI_ACCESS_TOKEN"
      ]
    },
    "fix_snowflake_codewide.py": {
      "get_config_value": [
        "snowflake_password"
      ],
      "os_environ": [
        "ENVIRONMENT",
        "PULUMI_ORG"
      ],
      "os_environ_get": [
        "SNOWFLAKE_ACCOUNT"
      ]
    },
    "ultimate_snowflake_fix.py": {
      "os_environ": [
        "SNOWFLAKE_ACCOUNT",
        "SNOWFLAKE_USER",
        "SNOWFLAKE_DATABASE",
        "SNOWFLAKE_WAREHOUSE",
        "SNOWFLAKE_ROLE",
        "SNOWFLAKE_SCHEMA",
        "SNOWFLAKE_ACCOUNT",
        "SNOWFLAKE_USER",
        "SNOWFLAKE_DATABASE",
        "SNOWFLAKE_WAREHOUSE",
        "SNOWFLAKE_ROLE",
        "SNOWFLAKE_SCHEMA"
      ]
    },
    "docker-compose.mcp-gateway.yml": {
      "env_var_ref": [
        "PULUMI_ACCESS_TOKEN",
        "GITHUB_TOKEN",
        "SLACK_BOT_TOKEN",
        "SLACK_APP_TOKEN",
        "ASANA_ACCESS_TOKEN",
        "NOTION_ACCESS_TOKEN",
        "CODACY_ACCOUNT_TOKEN",
        "CODACY_PROJECT_TOKEN"
      ]
    },
    "docker-compose.yml": {
      "env_var_ref": [
        "DATABASE_URL",
        "REDIS_URL",
        "SOPHIA_AI_TOKEN",
        "PINECONE_API_KEY",
        "WEAVIATE_URL",
        "WEAVIATE_API_KEY",
        "OPENAI_API_KEY",
        "ANTHROPIC_API_KEY",
        "SECRET_KEY",
        "JWT_SECRET",
        "ARIZE_SPACE_ID",
        "ARIZE_API_KEY",
        "POSTGRES_PASSWORD"
      ]
    },
    "start_sophia_complete.py": {
      "os_environ": [
        "PULUMI_ORG",
        "PYTHONPATH",
        "PULUMI_ORG"
      ]
    },
    "deploy_estuary_foundation_corrected.py": {
      "get_config_value": [
        "snowflake_password"
      ],
      "os_environ": [
        "ESTUARY_ACCESS_TOKEN"
      ],
      "env_var_ref": [
        "GITHUB_ACCESS_TOKEN"
      ]
    },
    "sophia_standalone_server.py": {
      "get_config_value": [
        "snowflake_password"
      ]
    },
    "snowflake_advanced_features_implementation.py": {
      "get_config_value": [
        "snowflake_password"
      ],
      "env_var_ref": [
        "ROW_ID"
      ]
    },
    "pulumi-esc-production-config.yaml": {
      "env_var_ref": [
        "LAMBDA_API_KEY",
        "LAMBDA_SSH_PRIVATE_KEY",
        "ESTUARY_ACCESS_TOKEN",
        "ESTUARY_REFRESH_TOKEN",
        "GONG_ACCESS_KEY",
        "GONG_ACCESS_KEY_SECRET",
        "GONG_BASE_URL",
        "GONG_CLIENT_ACCESS_KEY",
        "GONG_CLIENT_SECRET",
        "HUBSPOT_ACCESS_TOKEN",
        "HUBSPOT_CLIENT_SECRET",
        "ANTHROPIC_API_KEY",
        "GROQ_API_KEY",
        "GROQ_VIRTUAL_KEY",
        "MISTRAL_API_KEY",
        "MISTRAL_VIRTUAL_KEY",
        "COHERE_API_KEY",
        "COHERE_VIRTUAL_KEY",
        "HUGGINGFACE_API_TOKEN",
        "LANGCHAIN_API_KEY",
        "LANGSMITH_API_KEY",
        "LANGSMITH_ORG_ID",
        "GITHUB_TOKEN",
        "VERCEL_TOKEN",
        "VERCEL_ORG_ID",
        "VERCEL_PROJECT_ID",
        "DOCKER_PASSWORD",
        "NPM_TOKEN",
        "POSTGRESQL_PASSWORD",
        "REDIS_URL",
        "REDIS_PASSWORD",
        "SNOWFLAKE_PASSWORD",
        "JWT_SECRET",
        "ENCRYPTION_KEY",
        "API_SECRET",
        "SLACK_BOT_TOKEN",
        "SLACK_WEBHOOK_URL",
        "NOTION_TOKEN",
        "ASANA_TOKEN"
      ]
    },
    ".cursor/mcp_settings.json": {
      "env_var_ref": [
        "ESC_ARIZE_SPACE_ID",
        "ESC_ARIZE_API_KEY",
        "ESC_OPENROUTER_API_KEY",
        "ESC_PORTKEY_API_KEY",
        "ESC_HUGGINGFACE_API_TOKEN",
        "ESC_TOGETHER_AI_API_KEY",
        "ESC_APIFY_API_TOKEN",
        "ESC_PHANTOM_BUSTER_API_KEY",
        "ESC_TWINGLY_API_KEY",
        "ESC_TAVILY_API_KEY",
        "ESC_ZENROWS_API_KEY",
        "ESC_LAMBDA_LABS_API_KEY",
        "ESC_PULUMI_ACCESS_TOKEN",
        "ESC_DOCKER_TOKEN",
        "ESC_SNOWFLAKE_PASSWORD",
        "ESC_PINECONE_API_KEY",
        "ESC_LOOKER_API_KEY",
        "ESC_MIXPANEL_API_KEY",
        "ESC_CODACY_ACCOUNT_TOKEN",
        "ESC_CODACY_PROJECT_TOKEN"
      ]
    },
    "frontend/vite.config.production.js": {
      "process_env": [
        "NODE_ENV",
        "VITE_SOPHIA_API_URL",
        "NODE_ENV",
        "VERCEL_GIT_COMMIT_SHA",
        "NODE_ENV"
      ]
    },
    "claude-cli-integration/setup_claude_api.py": {
      "get_config_value": [
        "anthropic_api_key"
      ],
      "os_environ": [
        "ANTHROPIC_API_KEY"
      ]
    },
    "config/snowflake_admin_config.yaml": {
      "env_var_ref": [
        "SNOWFLAKE_DEV_PASSWORD",
        "SNOWFLAKE_STG_PASSWORD",
        "SNOWFLAKE_PROD_PASSWORD"
      ]
    },
    "config/cursor_phase1_mcp_config.json": {
      "env_var_ref": [
        "SNOWFLAKE_PASSWORD",
        "APOLLO_IO_API_KEY",
        "APIFY_TOKEN",
        "FIGMA_ACCESS_TOKEN"
      ]
    },
    "ui-ux-agent/phase2_enhancements.py": {
      "get_config_value": [
        "FIGMA_PAT"
      ]
    },
    "ui-ux-agent/start_ui_ux_agent_system.py": {
      "get_config_value": [
        "FIGMA_PAT",
        "figma_pat",
        "openai_api_key",
        "openrouter_api_key",
        "figma_pat"
      ],
      "os_getenv": [
        "FIGMA_PERSONAL_ACCESS_TOKEN"
      ]
    },
    "scripts/deploy_snowflake_stability.py": {
      "get_config_value": [
        "snowflake_account",
        "snowflake_user",
        "snowflake_password"
      ]
    },
    "scripts/estuary_integration_manager.py": {
      "get_config_value": [
        "snowflake_password",
        "slack_bot_token"
      ]
    },
    "scripts/deploy-complete-sophia-stack.py": {
      "os_getenv": [
        "DATABASE_PASSWORD",
        "REDIS_PASSWORD",
        "SNOWFLAKE_USER",
        "SNOWFLAKE_PASSWORD",
        "SNOWFLAKE_ACCOUNT",
        "SNOWFLAKE_WAREHOUSE",
        "SNOWFLAKE_DATABASE",
        "SNOWFLAKE_ROLE",
        "REDIS_PASSWORD"
      ]
    },
    "scripts/validate_dev_environment.py": {
      "os_environ_get": [
        "VIRTUAL_ENV"
      ]
    },
    "scripts/dns-manager.py": {
      "os_getenv": [
        "GITHUB_ACTIONS",
        "CI",
        "GITHUB_REPOSITORY",
        "GITHUB_RUN_ID",
        "RUNNER_OS",
        "PULUMI_COMMAND",
        "PULUMI_ORGANIZATION",
        "PULUMI_STACK",
        "KUBERNETES_SERVICE_HOST"
      ]
    },
    "scripts/enhanced_batch_embed_data.py": {
      "get_config_value": [
        "snowflake_account",
        "snowflake_user",
        "snowflake_password"
      ]
    },
    "scripts/implement_phase1_mcp_recovery.py": {
      "os_getenv": [
        "PULUMI_ORG"
      ]
    },
    "scripts/pulumi-esc-sync.py": {
      "os_getenv": [
        "GITHUB_TOKEN",
        "PULUMI_ACCESS_TOKEN",
        "VERCEL_TOKEN"
      ]
    },
    "scripts/fix_snowflake_connectivity.py": {
      "get_config_value": [
        "snowflake_account",
        "snowflake_user",
        "snowflake_password"
      ]
    },
    "scripts/property_assets_ingestion_stub.py": {
      "get_config_value": [
        "snowflake_account",
        "snowflake_user",
        "snowflake_password"
      ]
    },
    "scripts/force-vercel-deployment.py": {
      "os_getenv": [
        "VERCEL_TOKEN",
        "VERCEL_ORG_ID",
        "VERCEL_PROJECT_ID"
      ]
    },
    "scripts/automated_lambda_labs_deployment.py": {
      "os_getenv": [
        "LAMBDA_LABS_API_KEY"
      ],
      "env_var_ref": [
        "LAMBDA_LABS_API_KEY",
        "SSH_KEY",
        "SSH_KEY",
        "SSH_KEY",
        "LAMBDA_LABS_API_KEY",
        "PUBLIC_KEY",
        "LAMBDA_LABS_API_KEY",
        "INSTANCE_ID",
        "INSTANCE_ID",
        "LAMBDA_LABS_API_KEY",
        "SSH_KEY",
        "SSH_KEY",
        "VERSION_ID",
        "SSH_KEY",
        "SSH_KEY",
        "SSH_KEY",
        "SSH_KEY"
      ]
    },
    "scripts/ceo_intelligence_ingestion_stub.py": {
      "get_config_value": [
        "snowflake_account",
        "snowflake_user",
        "snowflake_password"
      ]
    },
    "scripts/week4_clean_architecture_compliance.py": {
      "get_config_value": [
        "{env_var.lower()}"
      ]
    },
    "scripts/snowflake_config_manager.py": {
      "get_config_value": [
        "snowflake_password"
      ]
    },
    "scripts/deploy_sophia_production.py": {
      "os_getenv": [
        "VERCEL_TOKEN"
      ]
    },
    "scripts/configure_github_organization_security.py": {
      "get_config_value": [
        "github_token",
        "github_token"
      ]
    },
    "scripts/deployment_refactoring_phase3.py": {
      "env_var_ref": [
        "POSTGRES_PASSWORD",
        "POSTGRES_REPLICATION_PASSWORD",
        "GRAFANA_PASSWORD"
      ],
      "secrets_ref": [
        "GITHUB_TOKEN"
      ]
    },
    "scripts/deploy_snowflake_stability_standalone.py": {
      "get_config_value": [
        "snowflake_password"
      ]
    },
    "scripts/critical_security_remediation.py": {
      "os_getenv": [
        "DATABASE_PASSWORD",
        "JWT_SECRET",
        "WEBHOOK_SECRET"
      ]
    },
    "scripts/security_fixes_examples.py": {
      "os_environ_get": [
        "API_KEY",
        "WEBHOOK_SECRET",
        "DATABASE_PASSWORD"
      ]
    },
    "scripts/ai_web_research_ingestion_stub.py": {
      "get_config_value": [
        "snowflake_account",
        "snowflake_user",
        "snowflake_password"
      ]
    },
    "scripts/deploy-sophia-complete-stack.py": {
      "os_getenv": [
        "LAMBDA_IP_ADDRESS",
        "GITHUB_ACTIONS",
        "ESTUARY_ACCESS_TOKEN"
      ]
    },
    "scripts/comprehensive_secret_codebase_update.py": {
      "get_config_value": [
        "{config_key}",
        "{config_key}",
        "{new}"
      ]
    },
    "scripts/n8n-workflow-automation.py": {
      "os_getenv": [
        "SOPHIA_API_KEY"
      ]
    },
    "scripts/deployment_refactoring_phase1.py": {
      "get_config_value": [
        "snowflake_password"
      ],
      "os_getenv": [
        "SNOWFLAKE_ACCOUNT",
        "SNOWFLAKE_USER",
        "SNOWFLAKE_WAREHOUSE",
        "SNOWFLAKE_DATABASE",
        "POSTGRES_USER",
        "POSTGRES_PASSWORD",
        "POSTGRES_DATABASE",
        "REDIS_PASSWORD"
      ]
    },
    "scripts/lambda-labs-complete-setup.py": {
      "os_getenv": [
        "LAMBDA_IP_ADDRESS",
        "SNOWFLAKE_ACCOUNT",
        "SOPHIA_AI_TOKEN",
        "HUBSPOT_ACCESS_TOKEN",
        "GONG_ACCESS_KEY",
        "GONG_ACCESS_KEY_SECRET",
        "DATABASE_PASSWORD"
      ]
    },
    "scripts/update-github-secrets-template.py": {
      "os_getenv": [
        "GITHUB_PAT"
      ]
    },
    "scripts/deployment-monitor.py": {
      "os_getenv": [
        "ALERT_WEBHOOK_URL"
      ]
    },
    "scripts/deploy_to_staging_fixed.py": {
      "env_var_ref": [
        "POSTGRES_PASSWORD"
      ]
    },
    "scripts/deploy_enhanced_mcp_ecosystem.py": {
      "env_var_ref": [
        "GITHUB_TOKEN",
        "PORTKEY_API_KEY",
        "OPENROUTER_API_KEY"
      ]
    },
    "scripts/replace_estuary_with_estuary.py": {
      "env_var_ref": [
        "ESTUARY_ACCESS_TOKEN",
        "ESTUARY_REFRESH_TOKEN",
        "GITHUB_ACCESS_TOKEN",
        "HUBSPOT_CLIENT_ID",
        "HUBSPOT_CLIENT_SECRET",
        "HUBSPOT_REFRESH_TOKEN",
        "SLACK_API_TOKEN"
      ]
    },
    "scripts/comprehensive_critical_security_fixes.py": {
      "os_getenv": [
        "DATABASE_PASSWORD",
        "JWT_SECRET",
        "WEBHOOK_SECRET",
        "API_KEY",
        "SECRET_KEY"
      ]
    },
    "scripts/automated_webhook_manager.py": {
      "get_config_value": [
        "gong_access_key",
        "gong_client_secret",
        "slack_bot_token",
        "slack_app_token",
        "hubspot_access_token",
        "linear_api_key",
        "asana_access_token"
      ],
      "os_getenv": [
        "GONG_WEBHOOK_JWT_PUBLIC_KEY",
        "SLACK_SIGNING_SECRET",
        "ESTUARY_CLIENT_ID",
        "ESTUARY_CLIENT_SECRET",
        "ESTUARY_ACCESS_TOKEN",
        "VERCEL_TOKEN",
        "FIGMA_ACCESS_TOKEN"
      ]
    },
    "scripts/vercel_optimization.py": {
      "get_config_value": [
        "vercel_access_token"
      ],
      "os_getenv": [
        "VERCEL_ORG_ID"
      ],
      "env_var_ref": [
        "ANALYTICS_ID"
      ]
    },
    "scripts/lambda-labs-provisioner.py": {
      "os_getenv": [
        "LAMBDA_LABS_SSH_PUBLIC_KEY",
        "LAMBDA_LABS_API_KEY",
        "LAMBDA_LABS_SSH_PRIVATE_KEY"
      ]
    },
    "scripts/automated_webhook_deployment.py": {
      "os_getenv": [
        "GONG_WEBHOOK_JWT_PUBLIC_KEY",
        "SLACK_SIGNING_SECRET"
      ]
    },
    "scripts/fix_remaining_critical_vulnerabilities.py": {
      "get_config_value": [
        "snowflake_password",
        "gong_access_key"
      ],
      "os_getenv": [
        "CEO_ACCESS_TOKEN",
        "DATABASE_PASSWORD",
        "JWT_SECRET",
        "WEBHOOK_SECRET"
      ]
    },
    "scripts/validate_environment.py": {
      "os_environ_get": [
        "VIRTUAL_ENV"
      ]
    },
    "scripts/test_pipedream_integration.py": {
      "os_getenv": [
        "PIPEDREAM_API_KEY"
      ]
    },
    "scripts/implement_missing_snowflake_schemas.py": {
      "env_var_ref": [
        "SNOWFLAKE_PASSWORD"
      ]
    },
    "estuary-config/sophia-ai-flows.yaml": {
      "env_var_ref": [
        "HUBSPOT_ACCESS_TOKEN",
        "GONG_ACCESS_KEY",
        "GONG_ACCESS_KEY_SECRET",
        "SLACK_BOT_TOKEN",
        "DATABASE_PASSWORD",
        "SOPHIA_AI_TOKEN",
        "REDIS_PASSWORD"
      ]
    },
    "infrastructure/pulumi-esc-update.py": {
      "secrets_ref": [
        "ESTUARY_FLOW_ACCESS_TOKEN",
        "POSTGRESQL_HOST",
        "POSTGRESQL_PASSWORD",
        "POSTGRESQL_CONNECTION_STRING",
        "REDIS_HOST",
        "REDIS_PASSWORD",
        "REDIS_URL",
        "LAMBDA_API_KEY",
        "LAMBDA_SSH_PRIVATE_KEY",
        "LAMBDA_IP_ADDRESS",
        "SNOWFLAKE_ACCOUNT",
        "SOPHIA_AI_TOKEN",
        "HUBSPOT_ACCESS_TOKEN",
        "HUBSPOT_API_KEY",
        "HUBSPOT_PORTAL_ID",
        "GONG_ACCESS_KEY",
        "GONG_CLIENT_SECRET",
        "GONG_WEBHOOK_SECRET",
        "SLACK_BOT_TOKEN",
        "SLACK_APP_TOKEN",
        "SLACK_SIGNING_SECRET",
        "SLACK_CLIENT_ID",
        "SLACK_CLIENT_SECRET",
        "OPENAI_API_KEY",
        "ANTHROPIC_API_KEY",
        "PORTKEY_API_KEY",
        "PORTKEY_CONFIG",
        "PINECONE_API_KEY",
        "PINECONE_ENVIRONMENT",
        "VERCEL_TOKEN",
        "VERCEL_PROJECT_ID",
        "VERCEL_ORG_ID",
        "GITHUB_TOKEN",
        "GITHUB_WEBHOOK_SECRET",
        "PULUMI_ACCESS_TOKEN"
      ]
    },
    "infrastructure/pulumi-esc-comprehensive-update.py": {
      "env_var_ref": [
        "LAMBDA_API_KEY",
        "LAMBDA_SSH_PRIVATE_KEY",
        "DATABASE_URL",
        "DATABASE_SSH_KEY",
        "KUBERNETES_CLUSTER_ID",
        "ESTUARY_ACCESS_TOKEN",
        "ESTUARY_REFRESH_TOKEN",
        "GONG_ACCESS_KEY",
        "GONG_ACCESS_KEY_SECRET",
        "GONG_BASE_URL",
        "GONG_CLIENT_ACCESS_KEY",
        "GONG_CLIENT_SECRET",
        "HUBSPOT_ACCESS_TOKEN",
        "HUBSPOT_CLIENT_SECRET",
        "AIRBYTE_ACCESS_TOKEN",
        "AIRBYTE_CLIENT_ID",
        "AIRBYTE_CLIENT_SECRET",
        "ANTHROPIC_API_KEY",
        "GROQ_API_KEY",
        "GROQ_VIRTUAL_KEY",
        "MISTRAL_API_KEY",
        "MISTRAL_VIRTUAL_KEY",
        "COHERE_API_KEY",
        "COHERE_VIRTUAL_KEY",
        "CODESTRAL_API_KEY",
        "CODESTRAL_ORG_ID",
        "HUGGINGFACE_API_TOKEN",
        "LANGCHAIN_API_KEY",
        "LANGSMITH_API_KEY",
        "LANGSMITH_ORG_ID",
        "LLAMA_API_KEY",
        "ENCRYPTION_KEY",
        "BACKUP_ENCRYPTION_KEY",
        "JWT_SECRET",
        "API_SECRET_KEY",
        "GH_API_TOKEN",
        "GH_CLASSIC_PAT_TOKEN",
        "GH_FINE_GRAINED_TOKEN",
        "DOCKER_TOKEN",
        "DOCKER_PERSONAL_ACCESS_TOKEN",
        "NPM_API_TOKEN",
        "GRAFANA_URL",
        "GRAFANA_PASSWORD",
        "KIBANA_URL",
        "NOTION_API_KEY",
        "LINEAR_API_KEY",
        "ASANA_API_TOKEN",
        "FIGMA_PROJECT_ID",
        "APOLLO_API_KEY",
        "BRAVE_API_KEY",
        "NAMECHEAP_API_KEY"
      ]
    },
    "infrastructure/lambda-labs-integration.py": {
      "get_config_value": [
        "lambda_labs_api_key",
        "lambda_labs_ssh_private_key",
        "estuary_access_token"
      ]
    },
    "infrastructure/sophia-ai-complete-stack.yml": {
      "env_var_ref": [
        "DATABASE_PASSWORD",
        "REDIS_PASSWORD",
        "ESTUARY_ACCESS_TOKEN",
        "ESTUARY_REFRESH_TOKEN",
        "DATABASE_PASSWORD",
        "REDIS_PASSWORD",
        "SOPHIA_AI_TOKEN",
        "GONG_ACCESS_KEY",
        "GONG_ACCESS_KEY_SECRET",
        "HUBSPOT_ACCESS_TOKEN",
        "ESTUARY_ACCESS_TOKEN",
        "OPENAI_API_KEY",
        "ANTHROPIC_API_KEY",
        "GROQ_API_KEY",
        "PINECONE_API_KEY",
        "GRAFANA_ADMIN_PASSWORD",
        "ESTUARY_ACCESS_TOKEN",
        "SOPHIA_AI_TOKEN"
      ]
    },
    "infrastructure/lambda-labs-deployment.py": {
      "get_config_value": [
        "lambda_api_key",
        "lambda_ssh_private_key",
        "postgresql_password"
      ]
    },
    "implementation_scripts/setup_forks.py": {
      "os_environ_get": [
        "GITHUB_TOKEN"
      ]
    },
    "frontend/src/SimpleApp.jsx": {
      "process_env": [
        "NODE_ENV",
        "NODE_ENV"
      ]
    },
    "frontend/src/lib/figma-integration.js": {
      "process_env": [
        "FIGMA_PERSONAL_ACCESS_TOKEN"
      ]
    },
    "frontend/src/services/apiClient.js": {
      "process_env": [
        "REACT_APP_API_URL",
        "REACT_APP_API_URL",
        "REACT_APP_API_URL",
        "NODE_ENV"
      ]
    },
    "frontend/src/services/WebSocketManager.js": {
      "process_env": [
        "NODE_ENV"
      ]
    },
    "frontend/src/services/api_v1.js": {
      "env_var_ref": [
        "API_BASE_URL"
      ],
      "process_env": [
        "NODE_ENV",
        "NODE_ENV",
        "NODE_ENV"
      ]
    },
    "config/environment/production.js": {
      "process_env": [
        "VITE_BACKEND_URL",
        "VITE_WS_URL",
        "VITE_FIGMA_PERSONAL_ACCESS_TOKEN",
        "VITE_FIGMA_FILE_KEY",
        "VITE_ENABLE_FIGMA_INTEGRATION",
        "VITE_DESIGN_SYSTEM_MODE",
        "VITE_GLASSMORPHISM_ENABLED",
        "VITE_ENABLE_ENHANCED_DASHBOARD",
        "VITE_ENABLE_CHART_JS_DASHBOARD",
        "VITE_ENABLE_REAL_TIME_CHARTS",
        "VITE_ENABLE_FIGMA_INTEGRATION",
        "VITE_ENABLE_PERFORMANCE_MONITORING",
        "VITE_ANALYTICS_ENABLED",
        "VITE_ERROR_TRACKING_ENABLED",
        "VITE_DEBUG_MODE",
        "VITE_CEO_ACCESS_TOKEN",
        "VITE_ADMIN_MODE",
        "VITE_DEPLOYMENT_ENV",
        "VITE_BUILD_VERSION",
        "VERCEL_DEPLOYMENT_ID",
        "VERCEL_GIT_COMMIT_SHA",
        "VERCEL_GIT_COMMIT_REF"
      ]
    },
    "config/pulumi/estuary-secrets.yaml": {
      "env_var_ref": [
        "GITHUB_ACCESS_TOKEN",
        "HUBSPOT_CLIENT_ID",
        "HUBSPOT_CLIENT_SECRET",
        "HUBSPOT_REFRESH_TOKEN",
        "SLACK_API_TOKEN",
        "ESTUARY_ACCESS_TOKEN",
        "ESTUARY_REFRESH_TOKEN"
      ]
    },
    "config/backups/simplified_mcp_config_20250701_003324.json": {
      "env_var_ref": [
        "PORTKEY_VIRTUAL_KEY",
        "PORTKEY_VIRTUAL_KEY",
        "PORTKEY_VIRTUAL_KEY",
        "PORTKEY_VIRTUAL_KEY"
      ]
    },
    "config/backups/cursor_enhanced_mcp_config_20250701_003324.json": {
      "env_var_ref": [
        "PORTKEY_API_KEY",
        "PORTKEY_VIRTUAL_KEY",
        "OPENAI_API_KEY",
        "PINECONE_API_KEY",
        "PORTKEY_API_KEY",
        "PORTKEY_VIRTUAL_KEY",
        "PORTKEY_VIRTUAL_KEY",
        "PORTKEY_VIRTUAL_KEY",
        "PORTKEY_VIRTUAL_KEY",
        "PORTKEY_VIRTUAL_KEY",
        "GITHUB_TOKEN",
        "PORTKEY_API_KEY",
        "OPENROUTER_API_KEY"
      ]
    },
    "config/estuary/apollo-capture.flow.yaml": {
      "env_var_ref": [
        "APOLLO_API_KEY"
      ]
    },
    "config/estuary/slack-capture.flow.yaml": {
      "env_var_ref": [
        "SLACK_API_TOKEN"
      ]
    },
    "config/estuary/hubspot-capture.flow.yaml": {
      "env_var_ref": [
        "HUBSPOT_CLIENT_ID",
        "HUBSPOT_CLIENT_SECRET",
        "HUBSPOT_REFRESH_TOKEN"
      ]
    },
    "config/estuary/github-capture.flow.yaml": {
      "env_var_ref": [
        "GITHUB_ACCESS_TOKEN"
      ]
    },
    "config/estuary/usergems-capture.flow.yaml": {
      "env_var_ref": [
        "USERGEMS_API_KEY"
      ]
    },
    "config/mcp/phase1/apify_config.json": {
      "env_var_ref": [
        "APIFY_TOKEN"
      ]
    },
    "ui-ux-agent/mcp-servers/langchain-agents/ui_ux_agent.py": {
      "get_config_value": [
        "openai_api_key",
        "openrouter_api_key"
      ]
    },
    "ui-ux-agent/mcp-servers/figma-dev-mode/figma_mcp_server.py": {
      "get_config_value": [
        "FIGMA_PAT",
        "figma_pat",
        "openai_api_key",
        "openrouter_api_key"
      ]
    },
    "backend/database/postgresql_staging_manager.py": {
      "get_config_value": [
        "postgresql_host",
        "postgresql_user",
        "postgresql_password"
      ]
    },
    "backend/core/comprehensive_snowflake_config.py": {
      "get_config_value": [
        "snowflake_password"
      ]
    },
    "backend/core/enhanced_snowflake_config.py": {
      "get_config_value": [
        "snowflake_password"
      ]
    },
    "backend/core/config_validator.py": {
      "get_config_value": [
        "gong_access_key",
        "gong_client_secret",
        "snowflake_account",
        "snowflake_user",
        "snowflake_password",
        "portkey_api_key",
        "openai_api_key",
        "openrouter_api_key",
        "pinecone_api_key",
        "pinecone_environment",
        "hubspot_access_token",
        "slack_bot_token",
        "linear_api_key"
      ]
    },
    "backend/core/optimized_connection_manager.py": {
      "get_config_value": [
        "postgres_user",
        "postgres_password",
        "postgres_database",
        "redis_password"
      ]
    },
    "backend/core/snowflake_schema_integration.py": {
      "get_config_value": [
        "snowflake_password"
      ]
    },
    "backend/core/snowflake_config_override.py": {
      "get_config_value": [
        "snowflake_password"
      ]
    },
    "backend/core/unified_connection_manager.py": {
      "get_config_value": [
        "snowflake_password"
      ],
      "os_getenv": [
        "SNOWFLAKE_ACCOUNT",
        "SNOWFLAKE_USER",
        "SNOWFLAKE_WAREHOUSE",
        "SNOWFLAKE_DATABASE",
        "POSTGRES_USER",
        "POSTGRES_PASSWORD",
        "POSTGRES_DATABASE",
        "REDIS_PASSWORD"
      ]
    },
    "backend/core/simple_config.py": {
      "os_getenv": [
        "PULUMI_ACCESS_TOKEN"
      ]
    },
    "backend/core/secure_snowflake_config.py": {
      "get_config_value": [
        "snowflake_account",
        "sophia_ai_token"
      ]
    },
    "backend/core/auto_esc_config.py": {
      "get_config_value": [
        "snowflake_password",
        "estuary_access_token",
        "gong_access_key",
        "gong_access_key_secret",
        "slack_bot_token",
        "slack_app_token",
        "slack_signing_secret",
        "hubspot_access_token",
        "hubspot_portal_id",
        "intercom_access_token",
        "intercom_app_id",
        "snowflake_account",
        "snowflake_user",
        "snowflake_role",
        "snowflake_warehouse",
        "snowflake_database",
        "snowflake_schema",
        "estuary_tenant",
        "estuary_endpoint",
        "jwt_secret",
        "jwt_algorithm",
        "jwt_expiration_hours",
        "lambda_api_key",
        "LAMBDA_API_KEY",
        "lambda_ip_address",
        "LAMBDA_IP_ADDRESS",
        "lambda_ssh_private_key",
        "LAMBDA_SSH_PRIVATE_KEY"
      ]
    },
    "backend/core/sophia_env_config.py": {
      "os_getenv": [
        "ENVIRONMENT",
        "ENVIRONMENT",
        "PULUMI_ORG",
        "PULUMI_ACCESS_TOKEN"
      ],
      "os_environ": [
        "ENVIRONMENT",
        "PULUMI_ORG",
        "ENVIRONMENT"
      ]
    },
    "backend/core/optimized_database_manager.py": {
      "get_config_value": [
        "postgres_password",
        "redis_password",
        "mysql_password"
      ]
    },
    "backend/core/security_config.py": {
      "os_getenv": [
        "DATABASE_PASSWORD",
        "JWT_SECRET",
        "WEBHOOK_SECRET",
        "JWT_SECRET",
        "JWT_SECRET"
      ]
    },
    "backend/core/startup_config.py": {
      "os_environ": [
        "ENVIRONMENT",
        "PULUMI_ORG"
      ]
    },
    "backend/security/audit_logger.py": {
      "os_environ_get": [
        "SOPHIA_AUDIT_FILE_PATH",
        "SOPHIA_AUDIT_SENTRY_DSN"
      ]
    },
    "backend/etl/enhanced_unified_data_pipeline.py": {
      "get_config_value": [
        "database_password",
        "redis_password",
        "estuary_access_token",
        "hubspot_access_token",
        "gong_access_key",
        "gong_access_key_secret",
        "slack_bot_token"
      ]
    },
    "backend/etl/enhanced_unified_data_pipeline_backup.py": {
      "get_config_value": [
        "database_password",
        "redis_password",
        "estuary_access_token"
      ]
    },
    "backend/etl/estuary_flow_orchestrator.py": {
      "get_config_value": [
        "estuary_flow_access_token",
        "hubspot_api_key",
        "postgresql_host",
        "postgresql_user",
        "postgresql_password",
        "gong_access_key",
        "gong_access_key_secret",
        "postgresql_host",
        "postgresql_user",
        "postgresql_password",
        "slack_bot_token",
        "postgresql_host",
        "postgresql_user",
        "postgresql_password",
        "postgresql_host",
        "postgresql_user",
        "postgresql_password"
      ]
    },
    "backend/etl/gong_api_extractor_clean.py": {
      "os_getenv": [
        "GONG_ACCESS_KEY",
        "GONG_ACCESS_KEY_SECRET",
        "POSTGRESQL_CONNECTION_STRING"
      ]
    },
    "backend/integrations/advanced_estuary_flow_manager.py": {
      "get_config_value": [
        "estuary_access_token",
        "gong_access_key",
        "gong_access_key_secret",
        "slack_bot_token",
        "hubspot_access_token",
        "intercom_access_token",
        "snowflake_account",
        "snowflake_account",
        "snowflake_user",
        "snowflake_password",
        "snowflake_account",
        "snowflake_account",
        "snowflake_user",
        "snowflake_password",
        "snowflake_account",
        "snowflake_account",
        "snowflake_user",
        "snowflake_password"
      ]
    },
    "backend/integrations/estuary_flow_manager.py": {
      "os_getenv": [
        "ESTUARY_ACCESS_TOKEN",
        "ESTUARY_REFRESH_TOKEN",
        "ESTUARY_REFRESH_TOKEN"
      ],
      "env_var_ref": [
        "SNOWFLAKE_PAT_TOKEN",
        "GITHUB_ACCESS_TOKEN",
        "HUBSPOT_CLIENT_ID",
        "HUBSPOT_CLIENT_SECRET",
        "HUBSPOT_REFRESH_TOKEN",
        "SLACK_API_TOKEN",
        "USERGEMS_API_KEY",
        "APOLLO_API_KEY",
        "ESTUARY_ACCESS_TOKEN"
      ]
    },
    "backend/scripts/enhanced_deploy_gong_snowflake_setup.py": {
      "get_config_value": [
        "snowflake_account",
        "snowflake_user",
        "snowflake_password"
      ]
    },
    "backend/scripts/sophia_data_pipeline_ultimate.py": {
      "get_config_value": [
        "gong_access_key",
        "gong_access_key_secret",
        "snowflake_account",
        "snowflake_user",
        "snowflake_password"
      ]
    },
    "backend/scripts/estuary_gong_setup.py": {
      "get_config_value": [
        "gong_access_key",
        "gong_client_secret",
        "snowflake_account",
        "snowflake_password"
      ]
    },
    "backend/scripts/enhanced_estuary_integration_test_suite.py": {
      "get_config_value": [
        "gong_access_key",
        "gong_client_secret",
        "gong_access_key",
        "snowflake_password",
        "openai_api_key"
      ]
    },
    "backend/scripts/enhanced_gong_pipeline_test_suite.py": {
      "get_config_value": [
        "gong_access_key"
      ]
    },
    "backend/scripts/deploy_gong_snowflake_setup.py": {
      "get_config_value": [
        "snowflake_account",
        "snowflake_user",
        "snowflake_password",
        "snowflake_account",
        "snowflake_user",
        "snowflake_password"
      ]
    },
    "backend/mcp_servers/ai_memory_auto_discovery.py": {
      "get_config_value": [
        "openai_api_key"
      ]
    },
    "backend/api/costar_routes.py": {
      "os_getenv": [
        "LLM_GATEWAY_API_KEY"
      ]
    },
    "backend/api/llm_strategy_routes.py": {
      "get_config_value": [
        "portkey_api_key",
        "openrouter_api_key"
      ]
    },
    "backend/infrastructure/sophia_iac_orchestrator.py": {
      "get_config_value": [
        "openai_api_key"
      ]
    },
    "backend/services/enhanced_cortex_agent_service.py": {
      "get_config_value": [
        "snowflake_account",
        "snowflake_user",
        "snowflake_password"
      ]
    },
    "backend/services/enhanced_portkey_orchestrator.py": {
      "get_config_value": [
        "portkey_virtual_key_deepseek",
        "portkey_virtual_key_openai",
        "portkey_virtual_key_anthropic",
        "portkey_virtual_key_qwen",
        "portkey_virtual_key_grok",
        "portkey_virtual_key_perplexity",
        "portkey_virtual_key_together",
        "portkey_virtual_key_groq",
        "portkey_virtual_key_mistral",
        "portkey_virtual_key_cohere",
        "portkey_virtual_key_prod"
      ]
    },
    "backend/services/unified_ai_orchestration_service.py": {
      "get_config_value": [
        "snowflake_password"
      ]
    },
    "backend/services/simplified_portkey_service.py": {
      "get_config_value": [
        "values_sophia_ai_portkey_virtual_key_prod"
      ]
    },
    "backend/services/real_time_streaming_service.py": {
      "env_var_ref": [
        "ROW_ID"
      ]
    },
    "backend/services/kb_management_service.py": {
      "get_config_value": [
        "openai_api_key"
      ]
    },
    "backend/services/chat_driven_metadata_service.py": {
      "get_config_value": [
        "openai_api_key"
      ]
    },
    "backend/services/comprehensive_memory_service.py": {
      "get_config_value": [
        "pinecone_api_key",
        "pinecone_environment"
      ]
    },
    "backend/services/smart_ai_service.py": {
      "get_config_value": [
        "PORTKEY_API_KEY",
        "PORTKEY_VIRTUAL_KEY_PROD",
        "OPENROUTER_API_KEY"
      ]
    },
    "backend/services/vector_indexing_service.py": {
      "get_config_value": [
        "gong_access_key"
      ]
    },
    "backend/app/_deprecated_apps/stabilized_fastapi_app.py": {
      "get_config_value": [
        "openai_api_key",
        "gong_access_key"
      ]
    },
    "backend/app/_deprecated_apps/minimal_app.py": {
      "get_config_value": [
        "openai_api_key",
        "gong_access_key"
      ]
    },
    "backend/app/_deprecated_apps/working_app.py": {
      "get_config_value": [
        "openai_api_key",
        "gong_access_key",
        "openai_api_key",
        "gong_access_key"
      ]
    },
    "backend/app/_deprecated_apps/simple_app.py": {
      "get_config_value": [
        "openai_api_key",
        "gong_access_key"
      ]
    },
    "backend/etl/payready_core/ingest_core_sql_data.py": {
      "get_config_value": [
        "snowflake_account",
        "snowflake_user",
        "snowflake_password"
      ]
    },
    "backend/etl/netsuite/estuary_netsuite_setup.py": {
      "get_config_value": [
        "netsuite_realm",
        "netsuite_consumer_key",
        "netsuite_consumer_secret",
        "netsuite_token_id",
        "netsuite_token_secret",
        "snowflake_account",
        "snowflake_user",
        "snowflake_password"
      ]
    },
    "backend/etl/estuary/estuary_configuration_manager.py": {
      "get_config_value": [
        "gong_access_key",
        "gong_client_secret",
        "asana_api_token",
        "snowflake_account",
        "snowflake_password"
      ]
    },
    "backend/agents/specialized/snowflake_admin_agent.py": {
      "get_config_value": [
        "openai_api_key"
      ]
    },
    "backend/infrastructure/adapters/estuary_adapter.py": {
      "get_config_value": [
        "gong_access_key",
        "gong_client_secret",
        "slack_bot_token"
      ],
      "os_getenv": [
        "SNOWFLAKE_ACCOUNT",
        "SNOWFLAKE_USER",
        "SOPHIA_AI_TOKEN"
      ]
    },
    "backend/services/infrastructure_chat/sophia_infrastructure_chat.py": {
      "get_config_value": [
        "openai_api_key"
      ],
      "os_getenv": [
        "LLM_GATEWAY_API_KEY"
      ]
    },
    "scripts/security/comprehensive_security_remediation.py": {
      "get_config_value": [
        "{config_key}",
        "api_token"
      ]
    },
    "scripts/security/remove_exposed_secrets.py": {
      "get_config_value": [
        "snowflake_password",
        "snowflake_password",
        "snowflake_password",
        "snowflake_password",
        "gong_access_key",
        "gong_access_key"
      ]
    },
    "scripts/security/security_audit_and_cleanup.py": {
      "get_config_value": [
        "{secret_type}"
      ]
    },
    "scripts/ci/deployment_health_gate.py": {
      "get_config_value": [
        "openai_api_key",
        "snowflake_account",
        "snowflake_password",
        "openai_api_key",
        "anthropic_api_key",
        "pinecone_api_key"
      ]
    },
    "scripts/ci/sync_from_gh_to_pulumi.py": {
      "os_getenv": [
        "PULUMI_ACCESS_TOKEN"
      ]
    },
    "api/middleware/security.py": {
      "os_getenv": [
        "REDIS_URL"
      ]
    },
    "api/monitoring/health.py": {
      "os_getenv": [
        "VITE_PORTKEY_API_KEY",
        "VITE_SALESFORCE_OAUTH_TOKEN",
        "VITE_HUBSPOT_API_KEY",
        "VITE_INTERCOM_ACCESS_TOKEN",
        "GONG_ACCESS_KEY",
        "REDIS_URL"
      ]
    },
    "external/davidamom_snowflake/server.py": {
      "os_getenv": [
        "SNOWFLAKE_USER",
        "SNOWFLAKE_ACCOUNT",
        "SNOWFLAKE_DATABASE",
        "SNOWFLAKE_WAREHOUSE",
        "SNOWFLAKE_PRIVATE_KEY_FILE",
        "SNOWFLAKE_PRIVATE_KEY_PASSPHRASE",
        "SNOWFLAKE_PASSWORD"
      ]
    },
    "external/snowflake_cortex_official/cortex_agents.py": {
      "os_getenv": [
        "SEMANTIC_MODEL_FILE",
        "CORTEX_SEARCH_SERVICE",
        "SNOWFLAKE_ACCOUNT_URL",
        "SNOWFLAKE_PAT"
      ]
    },
    "external/glips_figma_context/tsup.config.ts": {
      "process_env": [
        "NPM_PACKAGE_VERSION"
      ]
    },
    "external/microsoft_playwright/playwright.config.ts": {
      "process_env": [
        "CI",
        "CI",
        "CI",
        "MCP_IN_DOCKER"
      ]
    },
    "external/openrouter_search/src/index.ts": {
      "process_env": [
        "OPENROUTER_API_KEY"
      ]
    },
    "external/dynamike_snowflake/snowflake_mcp_server/main.py": {
      "os_getenv": [
        "SNOWFLAKE_WAREHOUSE",
        "SNOWFLAKE_DATABASE",
        "SNOWFLAKE_SCHEMA",
        "SNOWFLAKE_ROLE"
      ]
    },
    "external/glips_figma_context/src/mcp.ts": {
      "process_env": [
        "NPM_PACKAGE_VERSION"
      ]
    },
    "external/glips_figma_context/src/cli.ts": {
      "process_env": [
        "NODE_ENV"
      ]
    },
    "external/glips_figma_context/src/config.ts": {
      "process_env": [
        "NPM_PACKAGE_VERSION",
        "FIGMA_API_KEY",
        "FIGMA_API_KEY",
        "FIGMA_OAUTH_TOKEN",
        "FIGMA_OAUTH_TOKEN",
        "PORT",
        "PORT",
        "OUTPUT_FORMAT",
        "OUTPUT_FORMAT"
      ]
    },
    "external/glips_figma_context/src/tests/integration.test.ts": {
      "process_env": [
        "FIGMA_API_KEY",
        "FIGMA_FILE_KEY"
      ]
    },
    "external/glips_figma_context/src/services/figma.ts": {
      "process_env": [
        "NODE_ENV"
      ]
    },
    "external/anthropic-mcp-servers/src/memory/index.ts": {
      "process_env": [
        "MEMORY_FILE_PATH",
        "MEMORY_FILE_PATH",
        "MEMORY_FILE_PATH",
        "MEMORY_FILE_PATH"
      ]
    },
    "external/anthropic-mcp-servers/src/everything/sse.ts": {
      "process_env": [
        "PORT"
      ]
    },
    "external/anthropic-mcp-servers/src/everything/streamableHttp.ts": {
      "process_env": [
        "PORT"
      ]
    },
    "external/anthropic-mcp-servers/src/sequentialthinking/index.ts": {
      "process_env": [
        "DISABLE_THOUGHT_LOGGING"
      ]
    },
    "external/portkey_admin/src/services/portkey.service.ts": {
      "process_env": [
        "PORTKEY_API_KEY"
      ]
    },
    "external/anthropic-mcp-python-sdk/examples/clients/simple-chatbot/mcp_simple_chatbot/main.py": {
      "os_getenv": [
        "LLM_API_KEY"
      ]
    },
    "external/microsoft_playwright/tests/fixtures.ts": {
      "process_env": [
        "CI",
        "PWMCP_DEBUG"
      ]
    },
    "external/microsoft_playwright/src/browserContextFactory.ts": {
      "process_env": [
        "XDG_CACHE_HOME",
        "LOCALAPPDATA"
      ]
    },
    "external/microsoft_playwright/src/fileUtils.ts": {
      "process_env": [
        "XDG_CACHE_HOME",
        "LOCALAPPDATA"
      ]
    },
    "external/microsoft_playwright/src/config.ts": {
      "process_env": [
        "DISPLAY",
        "PW_BROWSER_AGENT"
      ]
    },
    "external/anthropic-mcp-inspector/client/playwright.config.ts": {
      "process_env": [
        "CI",
        "CI",
        "CI",
        "CI",
        "CI"
      ]
    },
    "external/anthropic-mcp-inspector/server/src/index.ts": {
      "process_env": [
        "MCP_ENV_VARS",
        "MCP_ENV_VARS",
        "MCP_PROXY_TOKEN",
        "DANGEROUSLY_OMIT_AUTH",
        "CLIENT_PORT",
        "ALLOWED_ORIGINS",
        "SERVER_PORT",
        "HOST"
      ]
    },
    "external/anthropic-mcp-inspector/cli/src/cli.ts": {
      "process_env": [
        "CLIENT_PORT",
        "SERVER_PORT",
        "DEBUG",
        "DEBUG"
      ]
    },
    "external/anthropic-mcp-inspector/client/bin/client.js": {
      "process_env": [
        "CLIENT_PORT",
        "HOST",
        "INSPECTOR_URL",
        "MCP_AUTO_OPEN_ENABLED"
      ]
    },
    "external/anthropic-mcp-inspector/client/bin/start.js": {
      "process_env": [
        "HOST",
        "HOST",
        "MCP_AUTO_OPEN_ENABLED",
        "DEBUG",
        "CLIENT_PORT",
        "SERVER_PORT",
        "DANGEROUSLY_OMIT_AUTH",
        "DEBUG"
      ]
    },
    "external/anthropic-mcp-inspector/client/e2e/global-teardown.js": {
      "process_env": [
        "CI"
      ]
    },
    "external/anthropic-mcp-inspector/client/src/components/__tests__/AuthDebugger.test.tsx": {
      "env_var_ref": [
        "SESSION_KEY",
        "SESSION_KEY"
      ]
    },
    "pulumi/esc/sophia-ai-production.yaml": {
      "os_getenv": [
        "SNOWFLAKE_PASSWORD"
      ]
    },
    "mcp-servers/linear/linear_mcp_server.py": {
      "get_config_value": [
        "linear_api_key"
      ],
      "os_getenv": [
        "LINEAR_TEAM_ID"
      ]
    },
    "mcp-servers/snowflake/production_snowflake_mcp_server.py": {
      "get_config_value": [
        "snowflake.account",
        "snowflake.user"
      ]
    },
    "mcp-servers/apify_intelligence/apify_intelligence_mcp_server.py": {
      "get_config_value": [
        "apify_api_token"
      ]
    },
    "mcp-servers/huggingface_ai/huggingface_ai_mcp_server.py": {
      "get_config_value": [
        "huggingface_token"
      ]
    },
    "mcp-servers/codacy/codacy_mcp_server.py": {
      "get_config_value": [
        "secret_name",
        "CODACY_API_TOKEN"
      ]
    },
    "mcp-servers/slack/go_slack_integration.py": {
      "get_config_value": [
        "slack_bot_token"
      ]
    },
    "mcp-servers/asana/asana_mcp_server.py": {
      "get_config_value": [
        "asana_access_token"
      ],
      "os_getenv": [
        "ASANA_WORKSPACE_GID"
      ]
    },
    "mcp-servers/snowflake_cortex/snowflake_cortex_mcp_server.py": {
      "get_config_value": [
        "snowflake_password"
      ],
      "os_getenv": [
        "SNOWFLAKE_ACCOUNT",
        "SNOWFLAKE_USER"
      ]
    },
    "mcp-servers/hubspot/tests/get_closed_ticket_conversations.py": {
      "get_config_value": [
        "hubspot_access_token"
      ]
    },
    "mcp-servers/hubspot/src/mcp_server_hubspot/__init__.py": {
      "os_environ": [
        "HUBSPOT_STORAGE_DIR"
      ]
    },
    "mcp-servers/hubspot/src/mcp_server_hubspot/hubspot_client.py": {
      "get_config_value": [
        "hubspot_access_token"
      ]
    },
    "infrastructure/vercel/index.ts": {
      "env_var_ref": [
        "VERCEL_TOKEN",
        "VERCEL_TOKEN",
        "VERCEL_TOKEN",
        "VERCEL_TOKEN",
        "PROD_PROJECT_ID",
        "DEV_PROJECT_ID",
        "NAMECHEAP_API_KEY",
        "NAMECHEAP_API_KEY",
        "VERCEL_TOKEN"
      ],
      "process_env": [
        "VERCEL_TEAM_ID"
      ]
    },
    "infrastructure/esc/sophia-ai-platform-base.yaml": {
      "env_var_ref": [
        "WEBHOOK_JWT_PRIVATE_KEY",
        "WEBHOOK_JWT_PUBLIC_KEY",
        "SNOWFLAKE_PASSWORD",
        "SNOWFLAKE_OAUTH_CLIENT_ID",
        "SNOWFLAKE_OAUTH_CLIENT_SECRET",
        "SNOWFLAKE_OAUTH_REFRESH_TOKEN",
        "REDIS_CLUSTER_PASSWORD",
        "AGENT_ORCHESTRATOR_AUTH_TOKEN",
        "AGENT_COMMUNICATION_SECRET",
        "GONG_ACCESS_KEY",
        "GONG_CLIENT_SECRET",
        "GONG_OAUTH_CLIENT_ID",
        "GONG_OAUTH_CLIENT_SECRET",
        "GONG_OAUTH_REFRESH_TOKEN",
        "GONG_WEBHOOK_SECRET",
        "ARIZE_API_KEY",
        "ARIZE_SPACE_ID",
        "PROMETHEUS_AUTH_TOKEN",
        "GRAFANA_URL",
        "GRAFANA_PASSWORD",
        "GRAFANA_ADMIN_PASSWORD",
        "MCP_GITHUB_TOKEN",
        "MCP_SLACK_TOKEN",
        "SLACK_SIGNING_SECRET",
        "MCP_LINEAR_TOKEN",
        "MCP_DOCKER_REGISTRY_TOKEN",
        "ENCRYPTION_KEY",
        "AZURE_OIDC_CLIENT_ID",
        "PORTKEY_API_KEY",
        "OPENROUTER_API_KEY"
      ]
    },
    "infrastructure/esc/sophia-ai-production.yaml": {
      "env_var_ref": [
        "AGNO_API_KEY",
        "OPENROUTER_API_KEY",
        "PORTKEY_API_KEY",
        "PORTKEY_VIRTUAL_KEY",
        "OPENAI_API_KEY",
        "ANTHROPIC_API_KEY",
        "HUGGINGFACE_API_TOKEN",
        "LANGCHAIN_API_KEY",
        "ARIZE_API_KEY",
        "ARIZE_SPACE_ID",
        "MISTRAL_API_KEY",
        "DEEPSEEK_API_KEY",
        "CODESTRAL_API_KEY",
        "TOGETHERAI_API_KEY",
        "XAI_API_KEY",
        "VENICE_AI_API_KEY",
        "LLAMA_API_KEY",
        "PINECONE_API_KEY",
        "WEAVIATE_API_KEY",
        "WEAVIATE_URL",
        "APIFY_API_TOKEN",
        "SERP_API_KEY",
        "TAVILY_API_KEY",
        "DATABASE_URL",
        "GRAFANA_URL",
        "GRAFANA_PASSWORD",
        "PROMETHEUS_URL",
        "SLACK_BOT_TOKEN",
        "SLACK_APP_TOKEN",
        "SLACK_SIGNING_SECRET",
        "JWT_SECRET",
        "ENCRYPTION_KEY",
        "LAMBDA_LABS_API_KEY",
        "LAMBDA_LABS_SSH_KEY",
        "DOCKER_PERSONAL_ACCESS_TOKEN",
        "PULUMI_ACCESS_TOKEN",
        "GONG_ACCESS_KEY",
        "GONG_CLIENT_SECRET",
        "HUBSPOT_ACCESS_TOKEN",
        "LINEAR_API_KEY",
        "NOTION_API_KEY"
      ]
    },
    "infrastructure/esc/sophia-intelligence-platform.yaml": {
      "env_var_ref": [
        "NAMECHEAP_API_KEY"
      ]
    },
    "infrastructure/kubernetes/sophia-platform-secrets.yaml": {
      "env_var_ref": [
        "AZURE_CLIENT_ID",
        "PULUMI_ACCESS_TOKEN",
        "ENCRYPTION_KEY",
        "JWT_SECRET",
        "WEBHOOK_BASE_URL",
        "WEBHOOK_JWT_PRIVATE_KEY",
        "WEBHOOK_JWT_PUBLIC_KEY",
        "GONG_ACCESS_KEY",
        "GONG_CLIENT_SECRET",
        "GONG_WEBHOOK_SECRET",
        "GONG_OAUTH_CLIENT_ID",
        "GONG_OAUTH_CLIENT_SECRET",
        "GONG_OAUTH_REFRESH_TOKEN",
        "AGENT_ORCHESTRATOR_AUTH_TOKEN",
        "AGENT_COMMUNICATION_SECRET",
        "REDIS_CLUSTER_PASSWORD",
        "OPENAI_API_KEY",
        "OPENROUTER_API_KEY",
        "PORTKEY_API_KEY",
        "PORTKEY_VIRTUAL_KEY",
        "ANTHROPIC_API_KEY",
        "ARIZE_API_KEY",
        "PINECONE_API_KEY",
        "WEAVIATE_API_KEY",
        "WEAVIATE_URL",
        "SNOWFLAKE_PASSWORD",
        "SNOWFLAKE_OAUTH_CLIENT_ID",
        "SNOWFLAKE_OAUTH_CLIENT_SECRET",
        "SNOWFLAKE_OAUTH_REFRESH_TOKEN",
        "DATABASE_URL",
        "MCP_GITHUB_TOKEN",
        "MCP_SLACK_TOKEN",
        "MCP_LINEAR_TOKEN",
        "MCP_DOCKER_REGISTRY_TOKEN",
        "SLACK_BOT_TOKEN",
        "SLACK_APP_TOKEN",
        "SLACK_SIGNING_SECRET",
        "HUBSPOT_ACCESS_TOKEN",
        "LINEAR_API_KEY",
        "NOTION_API_KEY",
        "ARIZE_API_KEY",
        "ARIZE_SPACE_ID",
        "PROMETHEUS_AUTH_TOKEN",
        "GRAFANA_URL",
        "GRAFANA_PASSWORD",
        "GRAFANA_ADMIN_PASSWORD",
        "AZURE_OIDC_CLIENT_ID",
        "DOCKER_PERSONAL_ACCESS_TOKEN",
        "LAMBDA_LABS_API_KEY",
        "LAMBDA_LABS_SSH_KEY"
      ]
    },
    "infrastructure/dns/ip-context-detector.ts": {
      "process_env": [
        "GITHUB_ACTIONS",
        "CI",
        "GITHUB_REPOSITORY",
        "GITHUB_RUN_ID",
        "GITHUB_WORKFLOW",
        "RUNNER_OS",
        "PULUMI_COMMAND",
        "PULUMI_ORGANIZATION",
        "PULUMI_STACK",
        "PULUMI_PROJECT",
        "PULUMI_CONFIG",
        "KUBERNETES_SERVICE_HOST",
        "AWS_REGION",
        "AZURE_LOCATION",
        "USER",
        "HOME",
        "PWD",
        "CI",
        "GITHUB_ACTIONS",
        "TERM",
        "LAMBDA_LABS_CONTEXT",
        "NODE_ENV",
        "GITHUB_ACTIONS",
        "CI",
        "GITHUB_REPOSITORY",
        "PULUMI_COMMAND",
        "PULUMI_ORGANIZATION",
        "PULUMI_STACK",
        "NODE_ENV",
        "LAMBDA_LABS_CONTEXT",
        "USER",
        "HOME"
      ]
    }
  },
  "potential_issues": [
    {
      "file": "load_github_secrets.py",
      "type": "hardcoded_secret",
      "key_type": "OpenAI-style key",
      "value": "sk-development-key-f..."
    },
    {
      "file": "comprehensive_alignment_analysis_and_fix.py",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"NfwyhFUjemKlC66h7iE..."
    },
    {
      "file": "comprehensive_alignment_analysis_and_fix.py",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"VNZav8LJmsA3xKpoGMa..."
    },
    {
      "file": "fix_alignment_issues.py",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"NfwyhFUjemKlC66h7iE..."
    },
    {
      "file": "fix_alignment_issues.py",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"VNZav8LJmsA3xKpoGMa..."
    },
    {
      "file": "vercel-env-bulk-import.env",
      "type": "hardcoded_secret",
      "key_type": "Stripe/Payment key",
      "value": "pk_placeholder_to_be..."
    },
    {
      "file": "frontend/tsconfig.json",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"forceConsistentCasi..."
    },
    {
      "file": "scripts/estuary_integration_manager.py",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"NfwyhFUjemKlC66h7iE..."
    },
    {
      "file": "scripts/estuary_integration_manager.py",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"TV33BPZ5UN45QKZCZ2U..."
    },
    {
      "file": "scripts/manual_sync_github_to_pulumi_esc.py",
      "type": "hardcoded_secret",
      "key_type": "OpenAI-style key",
      "value": "sk-svcacct-fBzQGxh4Z..."
    },
    {
      "file": "scripts/deploy_n8n_enterprise_enhancement.py",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"targetMemoryUtiliza..."
    },
    {
      "file": "scripts/fix_dashboard_typescript_errors.py",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"forceConsistentCasi..."
    },
    {
      "file": "scripts/comprehensive_secret_codebase_update.py",
      "type": "hardcoded_secret",
      "key_type": "OpenAI-style key",
      "value": "sk-development-key-f..."
    },
    {
      "file": "infrastructure/tsconfig.json",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"forceConsistentCasi..."
    },
    {
      "file": "infrastructure/index.ts",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"DynamoDBWriteCapaci..."
    },
    {
      "file": "backend/etl/enhanced_unified_data_pipeline_backup.py",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"NfwyhFUjemKlC66h7iE..."
    },
    {
      "file": "backend/infrastructure/adapters/estuary_adapter.py",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"NfwyhFUjemKlC66h7iE..."
    },
    {
      "file": "scripts/security/comprehensive_security_remediation.py",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"TV33BPZ5UN44QKZCZJU..."
    },
    {
      "file": "external/openrouter_search/tsconfig.json",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"forceConsistentCasi..."
    },
    {
      "file": "external/glips_figma_context/tsconfig.json",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"forceConsistentCasi..."
    },
    {
      "file": "external/anthropic-mcp-servers/tsconfig.json",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"forceConsistentCasi..."
    },
    {
      "file": "external/portkey_admin/tsconfig.json",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"forceConsistentCasi..."
    },
    {
      "file": "external/glips_figma_context/src/utils/common.ts",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"ABCDEFGHIJKLMNOPQRS..."
    },
    {
      "file": "external/anthropic-mcp-inspector/server/tsconfig.json",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"forceConsistentCasi..."
    },
    {
      "file": "external/anthropic-mcp-inspector/cli/tsconfig.json",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"forceConsistentCasi..."
    },
    {
      "file": "infrastructure/vercel/tsconfig.json",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"forceConsistentCasi..."
    },
    {
      "file": "infrastructure/dns/tsconfig.json",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"forceConsistentCasi..."
    },
    {
      "file": "infrastructure/components/storage/index.ts",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"DynamoDBWriteCapaci..."
    },
    {
      "file": "infrastructure/components/storage/index.ts",
      "type": "hardcoded_secret",
      "key_type": "Potential API key",
      "value": "\"DynamoDBWriteCapaci..."
    }
  ],
  "all_unique_secrets": [
    "AGENT_COMMUNICATION_SECRET",
    "AGENT_ORCHESTRATOR_AUTH_TOKEN",
    "AGNO_API_KEY",
    "AIRBYTE_ACCESS_TOKEN",
    "AIRBYTE_CLIENT_ID",
    "AIRBYTE_CLIENT_SECRET",
    "ALERT_WEBHOOK_URL",
    "ALLOWED_ORIGINS",
    "ANALYTICS_ID",
    "ANTHROPIC_API_KEY",
    "APIFY_API_TOKEN",
    "APIFY_TOKEN",
    "API_BASE_URL",
    "API_KEY",
    "API_SECRET",
    "API_SECRET_KEY",
    "APOLLO_API_KEY",
    "APOLLO_IO_API_KEY",
    "ARIZE_API_KEY",
    "ARIZE_SPACE_ID",
    "ASANA_ACCESS_TOKEN",
    "ASANA_API_TOKEN",
    "ASANA_PAT_TOKEN",
    "ASANA_TOKEN",
    "ASANA_WORKSPACE_GID",
    "AWS_REGION",
    "AZURE_CLIENT_ID",
    "AZURE_LOCATION",
    "AZURE_OIDC_CLIENT_ID",
    "BACKUP_ENCRYPTION_KEY",
    "BRAVE_API_KEY",
    "BUZZ_API_KEY",
    "CEO_ACCESS_TOKEN",
    "CI",
    "CLIENT_PORT",
    "CODACY_ACCOUNT_TOKEN",
    "CODACY_API_TOKEN",
    "CODACY_PROJECT_TOKEN",
    "CODESTRAL_API_KEY",
    "CODESTRAL_ORG_ID",
    "COHERE_API_KEY",
    "COHERE_VIRTUAL_KEY",
    "CORTEX_SEARCH_SERVICE",
    "COSTAR_API_KEY",
    "DANGEROUSLY_OMIT_AUTH",
    "DATABASE_PASSWORD",
    "DATABASE_SSH_KEY",
    "DATABASE_URL",
    "DEBUG",
    "DEEPSEEK_API_KEY",
    "DEV_PROJECT_ID",
    "DISABLE_THOUGHT_LOGGING",
    "DISPLAY",
    "DOCKER_PASSWORD",
    "DOCKER_PERSONAL_ACCESS_TOKEN",
    "DOCKER_TOKEN",
    "ENCRYPTION_KEY",
    "ENVIRONMENT",
    "ESC_APIFY_API_TOKEN",
    "ESC_ARIZE_API_KEY",
    "ESC_ARIZE_SPACE_ID",
    "ESC_CODACY_ACCOUNT_TOKEN",
    "ESC_CODACY_PROJECT_TOKEN",
    "ESC_DOCKER_TOKEN",
    "ESC_HUGGINGFACE_API_TOKEN",
    "ESC_LAMBDA_LABS_API_KEY",
    "ESC_LOOKER_API_KEY",
    "ESC_MIXPANEL_API_KEY",
    "ESC_OPENROUTER_API_KEY",
    "ESC_PHANTOM_BUSTER_API_KEY",
    "ESC_PINECONE_API_KEY",
    "ESC_PORTKEY_API_KEY",
    "ESC_PULUMI_ACCESS_TOKEN",
    "ESC_SNOWFLAKE_PASSWORD",
    "ESC_TAVILY_API_KEY",
    "ESC_TOGETHER_AI_API_KEY",
    "ESC_TWINGLY_API_KEY",
    "ESC_ZENROWS_API_KEY",
    "ESTUARY_ACCESS_TOKEN",
    "ESTUARY_CLIENT_ID",
    "ESTUARY_CLIENT_SECRET",
    "ESTUARY_FLOW_ACCESS_TOKEN",
    "ESTUARY_REFRESH_TOKEN",
    "FIGMA_ACCESS_TOKEN",
    "FIGMA_API_KEY",
    "FIGMA_FILE_KEY",
    "FIGMA_OAUTH_TOKEN",
    "FIGMA_PAT",
    "FIGMA_PERSONAL_ACCESS_TOKEN",
    "FIGMA_PROJECT_ID",
    "GH_API_TOKEN",
    "GH_CLASSIC_PAT_TOKEN",
    "GH_FINE_GRAINED_TOKEN",
    "GITHUB_ACCESS_TOKEN",
    "GITHUB_ACTIONS",
    "GITHUB_PAT",
    "GITHUB_REPOSITORY",
    "GITHUB_RUN_ID",
    "GITHUB_TOKEN",
    "GITHUB_WEBHOOK_SECRET",
    "GITHUB_WORKFLOW",
    "GONG_ACCESS_KEY",
    "GONG_ACCESS_KEY_SECRET",
    "GONG_BASE_URL",
    "GONG_CLIENT_ACCESS_KEY",
    "GONG_CLIENT_SECRET",
    "GONG_OAUTH_CLIENT_ID",
    "GONG_OAUTH_CLIENT_SECRET",
    "GONG_OAUTH_REFRESH_TOKEN",
    "GONG_WEBHOOK_JWT_PUBLIC_KEY",
    "GONG_WEBHOOK_SECRET",
    "GRAFANA_ADMIN_PASSWORD",
    "GRAFANA_PASSWORD",
    "GRAFANA_URL",
    "GROQ_API_KEY",
    "GROQ_VIRTUAL_KEY",
    "HOME",
    "HOST",
    "HUBSPOT_ACCESS_TOKEN",
    "HUBSPOT_API_KEY",
    "HUBSPOT_CLIENT_ID",
    "HUBSPOT_CLIENT_SECRET",
    "HUBSPOT_PORTAL_ID",
    "HUBSPOT_REFRESH_TOKEN",
    "HUBSPOT_STORAGE_DIR",
    "HUGGINGFACE_API_TOKEN",
    "INSPECTOR_URL",
    "INSTANCE_ID",
    "INTERCOM_ACCESS_TOKEN",
    "JWT_SECRET",
    "KIBANA_URL",
    "KUBERNETES_CLUSTER_ID",
    "KUBERNETES_SERVICE_HOST",
    "LAMBDA_API_KEY",
    "LAMBDA_IP_ADDRESS",
    "LAMBDA_LABS_API_KEY",
    "LAMBDA_LABS_CONTEXT",
    "LAMBDA_LABS_SSH_KEY",
    "LAMBDA_LABS_SSH_PRIVATE_KEY",
    "LAMBDA_LABS_SSH_PUBLIC_KEY",
    "LAMBDA_SSH_PRIVATE_KEY",
    "LANGCHAIN_API_KEY",
    "LANGSMITH_API_KEY",
    "LANGSMITH_ORG_ID",
    "LINEAR_API_KEY",
    "LINEAR_TEAM_ID",
    "LINKEDIN_API_KEY",
    "LLAMA_API_KEY",
    "LLM_API_KEY",
    "LLM_GATEWAY_API_KEY",
    "LOCALAPPDATA",
    "MCP_AUTO_OPEN_ENABLED",
    "MCP_DOCKER_REGISTRY_TOKEN",
    "MCP_ENV_VARS",
    "MCP_GITHUB_TOKEN",
    "MCP_IN_DOCKER",
    "MCP_LINEAR_TOKEN",
    "MCP_PROXY_TOKEN",
    "MCP_SLACK_TOKEN",
    "MEMORY_FILE_PATH",
    "MISTRAL_API_KEY",
    "MISTRAL_VIRTUAL_KEY",
    "N",
    "NAMECHEAP_API_KEY",
    "NODE_ENV",
    "NOTION_ACCESS_TOKEN",
    "NOTION_API_KEY",
    "NOTION_TOKEN",
    "NPM_API_TOKEN",
    "NPM_PACKAGE_VERSION",
    "NPM_TOKEN",
    "OPENAI_API_KEY",
    "OPENROUTER_API_KEY",
    "OUTPUT_FORMAT",
    "PINECONE_API_KEY",
    "PINECONE_ENVIRONMENT",
    "PIPEDREAM_API_KEY",
    "PORT",
    "PORTKEY_API_KEY",
    "PORTKEY_CONFIG",
    "PORTKEY_VIRTUAL_KEY",
    "PORTKEY_VIRTUAL_KEY_PROD",
    "POSTGRESQL_CONNECTION_STRING",
    "POSTGRESQL_HOST",
    "POSTGRESQL_PASSWORD",
    "POSTGRES_DATABASE",
    "POSTGRES_PASSWORD",
    "POSTGRES_REPLICATION_PASSWORD",
    "POSTGRES_USER",
    "PROD_PROJECT_ID",
    "PROMETHEUS_AUTH_TOKEN",
    "PROMETHEUS_URL",
    "PUBLIC_KEY",
    "PULUMI_ACCESS_TOKEN",
    "PULUMI_COMMAND",
    "PULUMI_CONFIG",
    "PULUMI_ORG",
    "PULUMI_ORGANIZATION",
    "PULUMI_PROJECT",
    "PULUMI_STACK",
    "PWD",
    "PWMCP_DEBUG",
    "PW_BROWSER_AGENT",
    "PYTHONPATH",
    "REACT_APP_API_URL",
    "REDIS_CLUSTER_PASSWORD",
    "REDIS_HOST",
    "REDIS_PASSWORD",
    "REDIS_URL",
    "ROW_ID",
    "RUNNER_OS",
    "SALESFORCE_ACCESS_TOKEN",
    "SALESFORCE_OAUTH_TOKEN",
    "SECRET_KEY",
    "SECRET_NAME",
    "SEMANTIC_MODEL_FILE",
    "SENTRY_DSN",
    "SERP_API_KEY",
    "SERVER_PORT",
    "SESSION_KEY",
    "SLACK_API_TOKEN",
    "SLACK_APP_TOKEN",
    "SLACK_BOT_TOKEN",
    "SLACK_CLIENT_ID",
    "SLACK_CLIENT_SECRET",
    "SLACK_REFRESH_TOKEN",
    "SLACK_SIGNING_SECRET",
    "SLACK_SOCKET_TOKEN",
    "SLACK_WEBHOOK_URL",
    "SNOWFLAKE_ACCOUNT",
    "SNOWFLAKE_ACCOUNT_URL",
    "SNOWFLAKE_DATABASE",
    "SNOWFLAKE_DEV_PASSWORD",
    "SNOWFLAKE_OAUTH_CLIENT_ID",
    "SNOWFLAKE_OAUTH_CLIENT_SECRET",
    "SNOWFLAKE_OAUTH_REFRESH_TOKEN",
    "SNOWFLAKE_PASSWORD",
    "SNOWFLAKE_PAT",
    "SNOWFLAKE_PAT_TOKEN",
    "SNOWFLAKE_PRIVATE_KEY_FILE",
    "SNOWFLAKE_PRIVATE_KEY_PASSPHRASE",
    "SNOWFLAKE_PROD_PASSWORD",
    "SNOWFLAKE_ROLE",
    "SNOWFLAKE_SCHEMA",
    "SNOWFLAKE_STG_PASSWORD",
    "SNOWFLAKE_USER",
    "SNOWFLAKE_USERNAME",
    "SNOWFLAKE_WAREHOUSE",
    "SOPHIA_AI_TOKEN",
    "SOPHIA_API_KEY",
    "SOPHIA_AUDIT_FILE_PATH",
    "SOPHIA_AUDIT_SENTRY_DSN",
    "SSH_KEY",
    "TAVILY_API_KEY",
    "TERM",
    "TOGETHERAI_API_KEY",
    "USER",
    "USERGEMS_API_KEY",
    "VENICE_AI_API_KEY",
    "VERCEL_ANALYTICS_ID",
    "VERCEL_DEPLOYMENT_ID",
    "VERCEL_GIT_COMMIT_REF",
    "VERCEL_GIT_COMMIT_SHA",
    "VERCEL_ORG_ID",
    "VERCEL_PROJECT_ID",
    "VERCEL_TEAM_ID",
    "VERCEL_TOKEN",
    "VERSION_ID",
    "VIRTUAL_ENV",
    "VITE_ADMIN_MODE",
    "VITE_ANALYTICS_ENABLED",
    "VITE_BACKEND_URL",
    "VITE_BUILD_VERSION",
    "VITE_CEO_ACCESS_TOKEN",
    "VITE_DEBUG_MODE",
    "VITE_DEPLOYMENT_ENV",
    "VITE_DESIGN_SYSTEM_MODE",
    "VITE_ENABLE_CHART_JS_DASHBOARD",
    "VITE_ENABLE_ENHANCED_DASHBOARD",
    "VITE_ENABLE_FIGMA_INTEGRATION",
    "VITE_ENABLE_PERFORMANCE_MONITORING",
    "VITE_ENABLE_REAL_TIME_CHARTS",
    "VITE_ERROR_TRACKING_ENABLED",
    "VITE_FIGMA_FILE_KEY",
    "VITE_FIGMA_PERSONAL_ACCESS_TOKEN",
    "VITE_GLASSMORPHISM_ENABLED",
    "VITE_HUBSPOT_API_KEY",
    "VITE_INTERCOM_ACCESS_TOKEN",
    "VITE_PORTKEY_API_KEY",
    "VITE_SALESFORCE_OAUTH_TOKEN",
    "VITE_SOPHIA_API_URL",
    "VITE_WS_URL",
    "WEAVIATE_API_KEY",
    "WEAVIATE_URL",
    "WEBHOOK_BASE_URL",
    "WEBHOOK_JWT_PRIVATE_KEY",
    "WEBHOOK_JWT_PUBLIC_KEY",
    "WEBHOOK_SECRET",
    "XAI_API_KEY",
    "XDG_CACHE_HOME",
    "anthropic_api_key",
    "api_token",
    "apify_api_token",
    "asana_access_token",
    "asana_api_token",
    "database_password",
    "estuary_access_token",
    "estuary_endpoint",
    "estuary_flow_access_token",
    "estuary_tenant",
    "figma_pat",
    "github_token",
    "gong_access_key",
    "gong_access_key_secret",
    "gong_client_secret",
    "hubspot_access_token",
    "hubspot_api_key",
    "hubspot_portal_id",
    "huggingface_token",
    "intercom_access_token",
    "intercom_app_id",
    "jwt_algorithm",
    "jwt_expiration_hours",
    "jwt_secret",
    "lambda_api_key",
    "lambda_ip_address",
    "lambda_labs_api_key",
    "lambda_labs_ssh_private_key",
    "lambda_ssh_private_key",
    "linear_api_key",
    "mysql_password",
    "netsuite_consumer_key",
    "netsuite_consumer_secret",
    "netsuite_realm",
    "netsuite_token_id",
    "netsuite_token_secret",
    "openai_api_key",
    "openrouter_api_key",
    "pinecone_api_key",
    "pinecone_environment",
    "portkey_api_key",
    "portkey_virtual_key_anthropic",
    "portkey_virtual_key_cohere",
    "portkey_virtual_key_deepseek",
    "portkey_virtual_key_grok",
    "portkey_virtual_key_groq",
    "portkey_virtual_key_mistral",
    "portkey_virtual_key_openai",
    "portkey_virtual_key_perplexity",
    "portkey_virtual_key_prod",
    "portkey_virtual_key_qwen",
    "portkey_virtual_key_together",
    "postgres_database",
    "postgres_password",
    "postgres_user",
    "postgresql_host",
    "postgresql_password",
    "postgresql_user",
    "redis_password",
    "secret_name",
    "slack_app_token",
    "slack_bot_token",
    "slack_signing_secret",
    "snowflake.account",
    "snowflake.user",
    "snowflake_account",
    "snowflake_database",
    "snowflake_password",
    "snowflake_role",
    "snowflake_schema",
    "snowflake_user",
    "snowflake_warehouse",
    "sophia_ai_token",
    "values_sophia_ai_portkey_virtual_key_prod",
    "vercel_access_token",
    "{config_key}",
    "{env_var.lower()}",
    "{new}",
    "{secret_type}"
  ]
}