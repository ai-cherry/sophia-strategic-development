version: '3.8'

# Canonical docker-compose.yml for Sophia AI Platform
# Use docker-compose.override.yml for development overrides
# Use docker-compose.prod.yml for production settings

services:
  # Main Sophia AI Backend
  sophia-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
      args:
        PYTHON_VERSION: ${PYTHON_VERSION:-3.12}
    container_name: sophia-backend
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-prod}
      - PULUMI_ORG=${PULUMI_ORG:-scoobyjava-org}
      - PULUMI_ACCESS_TOKEN=${PULUMI_ACCESS_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - sophia-network

  # Mem0 OpenMemory MCP Server
  mem0-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp-server
      args:
        MCP_SERVER_PATH: backend/mcp_servers/mem0_openmemory
        MCP_SERVER_MODULE: enhanced_mem0_server
        MCP_SERVER_PORT: 8080
    container_name: mem0-server
    environment:
      - MEM0_API_KEY=${MEM0_API_KEY}
      - MEM0_HOST=${MEM0_HOST:-mem0-service}
      - MEM0_PORT=${MEM0_PORT:-8765}
    ports:
      - "${MEM0_PORT_EXTERNAL:-8080}:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - sophia-network

  # Cortex AISQL MCP Server
  cortex-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp-server
      args:
        MCP_SERVER_PATH: backend/mcp_servers/cortex_aisql
        MCP_SERVER_MODULE: cortex_mcp_server
        MCP_SERVER_PORT: 8080
    container_name: cortex-server
    environment:
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE:-SOPHIA_WH}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE:-SOPHIA_AI}
      - SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA:-PUBLIC}
    ports:
      - "${CORTEX_PORT_EXTERNAL:-8081}:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - sophia-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: sophia-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - sophia-network

  # PostgreSQL for persistent storage
  postgres:
    image: postgres:16-alpine
    container_name: sophia-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sophia}
      - POSTGRES_USER=${POSTGRES_USER:-sophia}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sophia} -d ${POSTGRES_DB:-sophia}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - sophia-network

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: sophia-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@sophia-ai.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    profiles:
      - tools
    restart: unless-stopped
    networks:
      - sophia-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  sophia-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

