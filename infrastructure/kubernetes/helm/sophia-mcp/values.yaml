# Sophia AI MCP Servers - Helm Values Configuration
# Production-ready deployment with auto-scaling and monitoring

global:
  namespace: sophia-mcp
  imageRegistry: ghcr.io/ai-cherry
  imageTag: "latest"
  imagePullPolicy: IfNotPresent
  environment: production

  # Pulumi ESC integration
  pulumiEscEnv: scoobyjava-org/sophia-ai-production

  # Security settings
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 2000
    capabilities:
      drop:
        - ALL

# MCP Gateway Configuration
mcpGateway:
  enabled: true
  name: sophia-mcp-gateway
  replicas: 3
  image:
    repository: sophia-mcp-gateway
    tag: "" # Uses global.imageTag if empty

  service:
    type: LoadBalancer
    port: 80
    targetPort: 8080
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"

  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "1000m"

  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

  config:
    logLevel: INFO
    timeout: 30000
    maxConnections: 1000
    healthCheckInterval: 30
    retryAttempts: 3

# Individual MCP Servers Configuration
mcpServers:
  # AI Memory MCP Server - Critical
  aiMemory:
    enabled: true
    name: sophia-mcp-ai-memory
    replicas: 2
    port: 9000
    image:
      repository: sophia-ai-memory-mcp
      tag: ""

    resources:
      requests:
        nvidia.com/gpu: 0.25
        memory: "512Mi"
        cpu: "200m"
      limits:
        nvidia.com/gpu: 0.25
        memory: "2Gi"
        cpu: "1000m"

    env:
      - name: MCP_SERVER_TYPE
        value: "ai_memory"
      - name: SEMANTIC_SEARCH_ENABLED
        value: "true"
      - name: AUTO_DISCOVERY_ENABLED
        value: "true"

    persistence:
      enabled: true
      size: 10Gi
      storageClass: gp3

    readinessProbe:
      httpGet:
        path: /ready
        port: 9000
      initialDelaySeconds: 10
      periodSeconds: 5

    livenessProbe:
      httpGet:
        path: /health
        port: 9000
      initialDelaySeconds: 30
      periodSeconds: 10

  # ModernStack Admin MCP Server - Critical
  modern_stackAdmin:
    enabled: true
    name: sophia-mcp-modern_stack-admin
    replicas: 2
    port: 8080
    image:
      repository: sophia-modern_stack-admin-mcp
      tag: ""

    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "1Gi"
        cpu: "500m"

    env:
      - name: MCP_SERVER_TYPE
        value: "modern_stack_admin"
      - name: MULTI_ENVIRONMENT_ENABLED
        value: "true"
      - name: SQL_EXECUTION_ENABLED
        value: "true"

    readinessProbe:
      httpGet:
        path: /ready
        port: 8080
      initialDelaySeconds: 10
      periodSeconds: 5

    livenessProbe:
      httpGet:
        path: /health
        port: 8080
      initialDelaySeconds: 30
      periodSeconds: 10

  # Linear MCP Server
  linear:
    enabled: true
    name: sophia-mcp-linear
    replicas: 2
    port: 3002
    image:
      repository: sophia-linear-mcp
      tag: ""

    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "300m"

    env:
      - name: MCP_SERVER_TYPE
        value: "linear"
      - name: PROJECT_HEALTH_ENABLED
        value: "true"

    readinessProbe:
      httpGet:
        path: /ready
        port: 3002
      initialDelaySeconds: 10
      periodSeconds: 5

    livenessProbe:
      httpGet:
        path: /health
        port: 3002
      initialDelaySeconds: 30
      periodSeconds: 10

  # Asana MCP Server
  asana:
    enabled: true
    name: sophia-mcp-asana
    replicas: 2
    port: 3001
    image:
      repository: sophia-asana-mcp
      tag: ""

    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "300m"

    env:
      - name: MCP_SERVER_TYPE
        value: "asana"
      - name: PROJECT_INTELLIGENCE_ENABLED
        value: "true"

    readinessProbe:
      httpGet:
        path: /ready
        port: 3001
      initialDelaySeconds: 10
      periodSeconds: 5

    livenessProbe:
      httpGet:
        path: /health
        port: 3001
      initialDelaySeconds: 30
      periodSeconds: 10

  # Gong MCP Server
  gong:
    enabled: true
    name: sophia-mcp-gong
    replicas: 2
    port: 3004
    image:
      repository: sophia-gong-mcp
      tag: ""

    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "500m"

    env:
      - name: MCP_SERVER_TYPE
        value: "gong"
      - name: CALL_ANALYSIS_ENABLED
        value: "true"
      - name: REAL_TIME_PROCESSING
        value: "true"

    readinessProbe:
      httpGet:
        path: /ready
        port: 3004
      initialDelaySeconds: 15
      periodSeconds: 5

    livenessProbe:
      httpGet:
        path: /health
        port: 3004
      initialDelaySeconds: 45
      periodSeconds: 10

# External MCP Servers (not deployed in this chart)
externalServers:
  codacy:
    enabled: true
    endpoint: "http://codacy-mcp-service:3008"
    healthCheck: "/health"
    capabilities:
      - code_analysis
      - security_scanning
      - quality_metrics

  sophiaIntelligence:
    enabled: true
    endpoint: "http://sophia-intelligence-service:8092"
    healthCheck: "/health"
    capabilities:
      - ai_orchestration
      - business_analysis
      - data_insights

# Monitoring and Observability
monitoring:
  enabled: true
  prometheus:
    enabled: true
    port: 9090
    path: /metrics
    scrapeInterval: 30s

  grafana:
    enabled: false # External Grafana instance

  alerts:
    enabled: true
    rules:
      - name: mcp-server-down
        condition: up == 0
        for: 2m
        severity: critical

      - name: mcp-high-memory
        condition: memory_usage > 80
        for: 5m
        severity: warning

      - name: mcp-high-latency
        condition: response_time > 1000
        for: 3m
        severity: warning

# Network Policies
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: sophia-ai
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 9000

  egress:
    - to: [] # Allow all egress (for external API calls)
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80

# Storage Configuration
storage:
  storageClass: gp3
  accessModes:
    - ReadWriteOnce

  volumes:
    aiMemoryData:
      size: 10Gi
      mountPath: /data/ai-memory

    logs:
      size: 5Gi
      mountPath: /logs

# Service Account and RBAC
serviceAccount:
  create: true
  name: sophia-mcp-sa
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT:role/sophia-mcp-role"

rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["services", "endpoints", "pods"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["apps"]
      resources: ["deployments", "replicasets"]
      verbs: ["get", "list", "watch"]

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Lambda Labs GPU Node Affinity and Tolerations
nodeSelector:
  lambdalabs.com/gpu-type: "rtx-4090"
  lambdalabs.com/instance-type: "gpu_1x_a10"
  kubernetes.io/arch: amd64

tolerations:
  - key: "lambdalabs.com/gpu"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  - key: "sophia.ai/mcp-servers"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - sophia-mcp
          topologyKey: kubernetes.io/hostname

# Security
podSecurityPolicy:
  enabled: true
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000

# Environment-specific overrides
environments:
  production:
    replicas:
      gateway: 3
      aiMemory: 2
      modern_stackAdmin: 2
      linear: 2
      asana: 2
      gong: 2

    resources:
      requests:
        memory: "256Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "1000m"

  staging:
    replicas:
      gateway: 2
      aiMemory: 1
      modern_stackAdmin: 1
      linear: 1
      asana: 1
      gong: 1

    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  development:
    replicas:
      gateway: 1
      aiMemory: 1
      modern_stackAdmin: 1
      linear: 1
      asana: 1
      gong: 1

    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "200m"
