---
# Sophia AI Platform - Kubernetes Secret Management
# Comprehensive secret management integrated with Pulumi ESC
# Supports webhook server, agent pools, MCP servers, and monitoring stack

apiVersion: v1
kind: Namespace
metadata:
  name: sophia-ai
  labels:
    name: sophia-ai
    environment: production
    team: sophia-ai
    managed-by: pulumi-esc

---
# ServiceAccount for Sophia AI Platform
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sophia-platform
  namespace: sophia-ai
  labels:
    app: sophia-platform
    component: service-account
  annotations:
    eks.amazonaws.com/role-arn: "${AWS_ROLE_ARN}"
    azure.workload.identity/client-id: "${AZURE_CLIENT_ID}"
secrets:
  - name: sophia-platform-secrets
  - name: sophia-webhook-secrets
  - name: sophia-agent-secrets
  - name: sophia-monitoring-secrets

---
# Main platform secrets (Core infrastructure)
apiVersion: v1
kind: Secret
metadata:
  name: sophia-platform-secrets
  namespace: sophia-ai
  labels:
    app: sophia-platform
    component: core-secrets
    managed-by: pulumi-esc
type: Opaque
data:
  # Platform configuration
  platform-name: "${PLATFORM_NAME}"
  platform-version: "${PLATFORM_VERSION}"
  platform-environment: "${PLATFORM_ENVIRONMENT}"

  # Pulumi ESC integration
  pulumi-access-token: "${PULUMI_ACCESS_TOKEN}"
  pulumi-org: "${PULUMI_ORG}"

  # Encryption and security
  encryption-key: "${ENCRYPTION_KEY}"
  jwt-secret: "${JWT_SECRET}"

---
# Webhook service secrets (Gong webhook and authentication)
apiVersion: v1
kind: Secret
metadata:
  name: sophia-webhook-secrets
  namespace: sophia-ai
  labels:
    app: sophia-platform
    component: webhook-secrets
    managed-by: pulumi-esc
type: Opaque
data:
  # Webhook configuration
  webhook-domain: "${WEBHOOK_DOMAIN}"
  webhook-base-url: "${WEBHOOK_BASE_URL}"
  webhook-jwt-private-key: "${WEBHOOK_JWT_PRIVATE_KEY}"
  webhook-jwt-public-key: "${WEBHOOK_JWT_PUBLIC_KEY}"

  # Gong integration (aligned with existing setup)
  gong-access-key: "${GONG_ACCESS_KEY}"
  gong-client-secret: "${GONG_CLIENT_SECRET}"
  gong-webhook-secret: "${GONG_WEBHOOK_SECRET}"

  # Enhanced Gong OAuth
  gong-oauth-client-id: "${GONG_OAUTH_CLIENT_ID}"
  gong-oauth-client-secret: "${GONG_OAUTH_CLIENT_SECRET}"
  gong-oauth-refresh-token: "${GONG_OAUTH_REFRESH_TOKEN}"

---
# Agent orchestration secrets (Agent pools and communication)
apiVersion: v1
kind: Secret
metadata:
  name: sophia-agent-secrets
  namespace: sophia-ai
  labels:
    app: sophia-platform
    component: agent-secrets
    managed-by: pulumi-esc
type: Opaque
data:
  # Agent orchestration
  agent-orchestrator-auth-token: "${AGENT_ORCHESTRATOR_AUTH_TOKEN}"
  agent-communication-secret: "${AGENT_COMMUNICATION_SECRET}"

  # Redis cluster authentication
  redis-cluster-password: "${REDIS_CLUSTER_PASSWORD}"

  # AI Services
  openai-api-key: "${OPENAI_API_KEY}"
  openrouter-api-key: "${OPENROUTER_API_KEY}"
  portkey-api-key: "${PORTKEY_API_KEY}"
  portkey-virtual-key-prod: "${PORTKEY_VIRTUAL_KEY_PROD}"
  anthropic-api-key: "${ANTHROPIC_API_KEY}"
  arize-api-key: "${ARIZE_API_KEY}"

  # Vector database authentication
  pinecone-api-key: "${PINECONE_API_KEY}"
  pinecone-environment: "${PINECONE_ENVIRONMENT}"
  pinecone-index-name: "${PINECONE_INDEX_NAME}"
  weaviate-api-key: "${WEAVIATE_API_KEY}"
  weaviate-url: "${WEAVIATE_URL}"

---
# Data infrastructure secrets (Snowflake, databases)
apiVersion: v1
kind: Secret
metadata:
  name: sophia-data-secrets
  namespace: sophia-ai
  labels:
    app: sophia-platform
    component: data-secrets
    managed-by: pulumi-esc
type: Opaque
data:
  # Snowflake configuration (aligned with existing GONG_ANALYTICS)
  snowflake-account: "${SNOWFLAKE_ACCOUNT}"
  snowflake-user: "${SNOWFLAKE_USER}"
  snowflake-password: "${SNOWFLAKE_PASSWORD}"

  # Enhanced Snowflake OAuth
  snowflake-oauth-client-id: "${SNOWFLAKE_OAUTH_CLIENT_ID}"
  snowflake-oauth-client-secret: "${SNOWFLAKE_OAUTH_CLIENT_SECRET}"
  snowflake-oauth-refresh-token: "${SNOWFLAKE_OAUTH_REFRESH_TOKEN}"

  # Database connections
  database-url: "${DATABASE_URL}"

---
# MCP server secrets (All 15+ MCP servers)
apiVersion: v1
kind: Secret
metadata:
  name: sophia-mcp-secrets
  namespace: sophia-ai
  labels:
    app: sophia-platform
    component: mcp-secrets
    managed-by: pulumi-esc
type: Opaque
data:
  # MCP server authentication tokens
  mcp-github-token: "${MCP_GITHUB_TOKEN}"
  mcp-slack-token: "${MCP_SLACK_TOKEN}"
  mcp-linear-token: "${MCP_LINEAR_TOKEN}"
  mcp-docker-registry-token: "${MCP_DOCKER_REGISTRY_TOKEN}"
  mcp-postgres-connection-string: "${MCP_POSTGRES_CONNECTION_STRING}"

  # Slack integration (existing setup)
  slack-bot-token: "${SLACK_BOT_TOKEN}"
  slack-app-token: "${SLACK_APP_TOKEN}"
  slack-signing-secret: "${SLACK_SIGNING_SECRET}"

  # Business intelligence integrations
  hubspot-access-token: "${HUBSPOT_ACCESS_TOKEN}"
  linear-api-key: "${LINEAR_API_KEY}"
  notion-api-key: "${NOTION_API_KEY}"

---
# Monitoring and observability secrets
apiVersion: v1
kind: Secret
metadata:
  name: sophia-monitoring-secrets
  namespace: sophia-ai
  labels:
    app: sophia-platform
    component: monitoring-secrets
    managed-by: pulumi-esc
type: Opaque
data:
  # Monitoring stack (aligned with existing Arize setup)
  arize-api-key: "${ARIZE_API_KEY}"
  arize-space-id: "${ARIZE_SPACE_ID}"

  # Sentry error tracking
  sentry-dsn: "${SENTRY_DSN}"

  # Prometheus and Grafana
  prometheus-auth-token: "${PROMETHEUS_AUTH_TOKEN}"
  grafana-url: "${GRAFANA_URL}"
  grafana-username: "${GRAFANA_USERNAME}"
  grafana-password: "${GRAFANA_PASSWORD}"
  grafana-admin-password: "${GRAFANA_ADMIN_PASSWORD}"

---
# OIDC and cloud provider secrets
apiVersion: v1
kind: Secret
metadata:
  name: sophia-oidc-secrets
  namespace: sophia-ai
  labels:
    app: sophia-platform
    component: oidc-secrets
    managed-by: pulumi-esc
type: Opaque
data:
  # OIDC configuration for GitHub Actions
  aws-oidc-role-arn: "${AWS_OIDC_ROLE_ARN}"
  azure-oidc-client-id: "${AZURE_OIDC_CLIENT_ID}"
  gcp-oidc-service-account: "${GCP_OIDC_SERVICE_ACCOUNT}"

  # Docker registry
  docker-username: "${DOCKERHUB_USERNAME}"
  docker-token: "${DOCKER_TOKEN}"

  # Lambda Labs (existing setup)
  lambda-labs-api-key: "${LAMBDA_LABS_API_KEY}"
  lambda-labs-control-plane-ip: "${LAMBDA_LABS_CONTROL_PLANE_IP}"
  lambda-labs-ssh-key-name: "${LAMBDA_LABS_SSH_KEY_NAME}"

---
# ConfigMap for non-sensitive configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: sophia-platform-config
  namespace: sophia-ai
  labels:
    app: sophia-platform
    component: config
    managed-by: pulumi-esc
data:
  # Platform configuration
  PLATFORM_NAME: "sophia-ai-platform"
  PLATFORM_VERSION: "v2.0.0"
  ENVIRONMENT: "production"

  # Webhook configuration
  WEBHOOK_PORT: "5000"
  WEBHOOK_TIMEOUT: "30"
  WEBHOOK_RATE_LIMIT_RPM: "1000"
  WEBHOOK_RATE_LIMIT_BURST: "200"

  # Agent configuration
  AGENT_POOL_SIZE: "50"
  AGENT_MAX_CONCURRENT: "100"
  AGENT_INSTANTIATION_TARGET_US: "3"
  AGENT_HEALTH_CHECK_INTERVAL: "30"

  # Redis configuration
  REDIS_HOST: "redis-cluster"
  REDIS_PORT: "6379"
  REDIS_SSL_ENABLED: "true"
  REDIS_MAX_CONNECTIONS: "100"

  # Snowflake configuration (aligned with existing GONG_ANALYTICS)
  SNOWFLAKE_DATABASE: "GONG_ANALYTICS"
  SNOWFLAKE_WAREHOUSE: "SOPHIA_AI_WH"
  SNOWFLAKE_SCHEMA: "RAW"
  SNOWFLAKE_ROLE: "ACCOUNTADMIN"
  SNOWFLAKE_CONNECTION_POOL_MAX: "20"
  SNOWFLAKE_CONNECTION_POOL_MIN: "5"

  # Gong configuration
  GONG_API_BASE_URL: "https://api.gong.io"
  GONG_API_RATE_LIMIT: "2.5"
  GONG_API_TIMEOUT: "30"
  GONG_API_RETRY_ATTEMPTS: "3"

  # Monitoring configuration
  PROMETHEUS_ENABLED: "true"
  PROMETHEUS_PORT: "9090"
  PROMETHEUS_PATH: "/metrics"
  PROMETHEUS_SCRAPE_INTERVAL: "15"

  GRAFANA_ORG_ID: "1"
  GRAFANA_DASHBOARD_REFRESH: "30"

  SENTRY_TRACES_SAMPLE_RATE: "0.1"
  SENTRY_PROFILES_SAMPLE_RATE: "0.1"

  # MCP configuration
  MCP_GITHUB_ORG: "ai-cherry"
  MCP_GITHUB_REPO: "sophia-main"
  MCP_LINEAR_WORKSPACE: "payready"
  MCP_DOCKER_REGISTRY_URL: "registry.digitalocean.com"

  # Security configuration
  JWT_ALGORITHM: "RS256"
  JWT_EXPIRATION: "3600"
  JWT_ISSUER: "sophia-ai-platform"
  JWT_AUDIENCE: "webhook-clients"

  ENCRYPTION_ALGORITHM: "AES-256-GCM"
  ENCRYPTION_KEY_ROTATION_DAYS: "90"

  # Audit configuration
  AUDIT_ENABLED: "true"
  AUDIT_LOG_LEVEL: "INFO"
  AUDIT_RETENTION_DAYS: "365"
  AUDIT_STORAGE_BACKEND: "snowflake"

---
# RBAC: ClusterRole for secret management
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sophia-platform-secrets-manager
  labels:
    app: sophia-platform
    component: rbac
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["get", "list", "watch"]

---
# RBAC: ClusterRoleBinding for secret management
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sophia-platform-secrets-manager
  labels:
    app: sophia-platform
    component: rbac
subjects:
  - kind: ServiceAccount
    name: sophia-platform
    namespace: sophia-ai
roleRef:
  kind: ClusterRole
  name: sophia-platform-secrets-manager
  apiGroup: rbac.authorization.k8s.io

---
# NetworkPolicy for secure secret access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: sophia-platform-secrets-network-policy
  namespace: sophia-ai
  labels:
    app: sophia-platform
    component: network-policy
spec:
  podSelector:
    matchLabels:
      app: sophia-platform
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: sophia-ai
        - podSelector:
            matchLabels:
              app: sophia-platform
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 9090
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 443 # HTTPS
        - protocol: TCP
          port: 80 # HTTP
        - protocol: TCP
          port: 6379 # Redis
        - protocol: TCP
          port: 5432 # PostgreSQL
        - protocol: TCP
          port: 8080 # Internal services

---
# Secret rotation CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: sophia-platform-secret-rotation
  namespace: sophia-ai
  labels:
    app: sophia-platform
    component: secret-rotation
spec:
  schedule: "0 2 * * 0" # Weekly on Sunday at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: sophia-platform
          containers:
            - name: secret-rotator
              image: sophia-ai/secret-rotator:latest
              env:
                - name: PULUMI_ORG
                  value: "scoobyjava-org"
                - name: PULUMI_STACK
                  value: "sophia-ai-platform-production"
                - name: KUBERNETES_NAMESPACE
                  value: "sophia-ai"
              envFrom:
                - secretRef:
                    name: sophia-platform-secrets
              command:
                - /bin/bash
                - -c
                - |
                  echo "🔄 Starting secret rotation process..."

                  # Check secret age and rotate if needed
                  python /app/rotate_secrets.py \
                    --namespace sophia-ai \
                    --dry-run false \
                    --notify-slack true

                  echo "✅ Secret rotation completed"
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 500m
                  memory: 512Mi
          restartPolicy: OnFailure
          backoffLimit: 3

---
# Secret health check CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: sophia-platform-secret-health-check
  namespace: sophia-ai
  labels:
    app: sophia-platform
    component: secret-health-check
spec:
  schedule: "*/15 * * * *" # Every 15 minutes
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: sophia-platform
          containers:
            - name: secret-health-checker
              image: sophia-ai/secret-health-checker:latest
              env:
                - name: KUBERNETES_NAMESPACE
                  value: "sophia-ai"
              envFrom:
                - secretRef:
                    name: sophia-platform-secrets
                - secretRef:
                    name: sophia-monitoring-secrets
              command:
                - /bin/bash
                - -c
                - |
                  echo "🏥 Starting secret health check..."

                  # Validate all secret accessibility
                  python /app/check_secret_health.py \
                    --namespace sophia-ai \
                    --alert-on-failure true \
                    --metrics-endpoint /metrics

                  echo "✅ Secret health check completed"
              resources:
                requests:
                  cpu: 50m
                  memory: 64Mi
                limits:
                  cpu: 200m
                  memory: 256Mi
          restartPolicy: OnFailure
          backoffLimit: 2
