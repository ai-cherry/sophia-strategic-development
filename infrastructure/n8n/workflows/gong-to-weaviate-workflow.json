{
  "name": "Gong to Weaviate GPU Pipeline",
  "nodes": [
    {
      "parameters": {
        "path": "/webhook/gong-new-call",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook_trigger",
      "name": "Gong Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "functionCode": "// Extract call data for processing\nconst callData = items[0].json;\n\n// Prepare content for embedding\nconst content = `${callData.title || ''} ${callData.notes || ''} ${callData.outcome || ''}`;\n\n// Add metadata\nreturn [{\n  json: {\n    id: callData.id,\n    content: content,\n    source: 'gong_call',\n    metadata: {\n      callId: callData.id,\n      title: callData.title,\n      duration: callData.duration,\n      participants: callData.participants?.length || 0,\n      started: callData.started,\n      outcome: callData.outcome,\n      isExternal: callData.isExternal\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "prepare_data",
      "name": "Prepare Call Data",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "url": "={{ $env.LAMBDA_INFERENCE_URL }}/embed",
        "method": "POST",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "input",
              "value": "={{ $json.content }}"
            },
            {
              "name": "model",
              "value": "sentence-transformers/all-MiniLM-L6-v2"
            }
          ]
        },
        "options": {
          "timeout": 5000
        }
      },
      "id": "gpu_embedding",
      "name": "Generate GPU Embedding",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "functionCode": "// Merge embedding with original data\nconst originalData = $items('prepare_data')[0].json;\nconst embedding = items[0].json.embedding;\n\nreturn [{\n  json: {\n    ...originalData,\n    embedding: embedding,\n    embeddingModel: 'all-MiniLM-L6-v2',\n    embeddingGeneratedAt: new Date().toISOString()\n  }\n}];"
      },
      "id": "merge_embedding",
      "name": "Merge Embedding",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "operation": "create",
        "additionalFields": {
          "collection": "Knowledge",
          "properties": {
            "content": "={{ $json.content }}",
            "source": "={{ $json.source }}",
            "metadata": "={{ JSON.stringify($json.metadata) }}",
            "timestamp": "={{ $json.timestamp }}",
            "embedding_model": "={{ $json.embeddingModel }}"
          },
          "vector": "={{ $json.embedding }}"
        }
      },
      "id": "store_weaviate",
      "name": "Store in Weaviate",
      "type": "n8n-nodes-community.weaviate",
      "typeVersion": 1,
      "position": [1050, 200],
      "credentials": {
        "weaviateApi": {
          "id": "1",
          "name": "Weaviate"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ 'knowledge:' + $json.id }}",
        "value": "={{ JSON.stringify($json) }}",
        "expire": true,
        "ttl": 3600
      },
      "id": "cache_redis",
      "name": "Cache in Redis",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [1050, 400],
      "credentials": {
        "redis": {
          "id": "2",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "knowledge_vectors",
        "columns": "content,source,metadata,embedding,timestamp,embedding_model",
        "additionalFields": {}
      },
      "id": "store_postgres",
      "name": "Store in PostgreSQL",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1050, 600],
      "credentials": {
        "postgres": {
          "id": "3",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Calculate performance metrics\nconst startTime = $items('webhook_trigger')[0].json.timestamp;\nconst endTime = new Date();\nconst totalMs = endTime - new Date(startTime);\n\n// Estimate Snowflake time (8x slower)\nconst snowflakeEstimateMs = totalMs * 8;\n\nreturn [{\n  json: {\n    success: true,\n    processingTimeMs: totalMs,\n    snowflakeEstimateMs: snowflakeEstimateMs,\n    speedup: (snowflakeEstimateMs / totalMs).toFixed(1) + 'x',\n    costSavings: '$' + (totalMs * 0.001).toFixed(2),\n    message: `Processed in ${totalMs}ms (Snowflake would have taken ${snowflakeEstimateMs}ms)`\n  }\n}];"
      },
      "id": "performance_metrics",
      "name": "Calculate Performance",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "channel": "#sophia-monitoring",
        "text": "=Gong Call Processed âœ…\n\n*Call ID:* {{ $items('prepare_data')[0].json.id }}\n*Processing Time:* {{ $json.processingTimeMs }}ms\n*Speedup vs Snowflake:* {{ $json.speedup }}\n*Cost Savings:* {{ $json.costSavings }}\n\n_{{ $json.message }}_",
        "attachments": [],
        "otherOptions": {}
      },
      "id": "slack_notification",
      "name": "Notify Slack",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [1450, 200],
      "credentials": {
        "slackApi": {
          "id": "4",
          "name": "Slack"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "webhook_response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1450, 400]
    }
  ],
  "connections": {
    "webhook_trigger": {
      "main": [
        [
          {
            "node": "prepare_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare_data": {
      "main": [
        [
          {
            "node": "gpu_embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gpu_embedding": {
      "main": [
        [
          {
            "node": "merge_embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "merge_embedding": {
      "main": [
        [
          {
            "node": "store_weaviate",
            "type": "main",
            "index": 0
          },
          {
            "node": "cache_redis",
            "type": "main",
            "index": 0
          },
          {
            "node": "store_postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "store_weaviate": {
      "main": [
        [
          {
            "node": "performance_metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cache_redis": {
      "main": [
        [
          {
            "node": "performance_metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "store_postgres": {
      "main": [
        [
          {
            "node": "performance_metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "performance_metrics": {
      "main": [
        [
          {
            "node": "slack_notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "webhook_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "gpu-pipeline-error-handler"
  },
  "staticData": null,
  "tags": [
    {
      "id": "1",
      "name": "gong"
    },
    {
      "id": "2", 
      "name": "gpu-powered"
    },
    {
      "id": "3",
      "name": "weaviate"
    }
  ],
  "updatedAt": "2025-07-11T20:00:00.000Z",
  "versionId": "v2.0"
} 