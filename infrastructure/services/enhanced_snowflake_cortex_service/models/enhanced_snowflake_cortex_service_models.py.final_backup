"""
Enhanced Snowflake Cortex Service Models
Data models and Pydantic schemas
"""

import asyncio
import json
import logging
import uuid
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Any
# REMOVED: Snowflake dependency - use UnifiedMemoryServiceV3
# REMOVED: Snowflake dependency - use UnifiedMemoryServiceV3 import DictCursor
from core.enhanced_cache_manager import EnhancedCacheManager
from infrastructure.security.audit_logger import AuditLogger
from infrastructure.services.cost_engineering_service import (
    TaskRequest,
    cost_engineering_service,
)
from backend.services.unified_memory_service_v2 import UnifiedMemoryServiceV2

# Data models extracted from main file
class DataProcessingMode(Enum):
    """Data processing modes"""

    BATCH = "batch"
    STREAMING = "streaming"
    REAL_TIME = "real_time"
    SCHEDULED = "scheduled"
class DataPipelineConfig:
    """Configuration for data processing pipelines"""

    pipeline_id: str
    source_tables: list[str]
    target_table: str
    processing_mode: DataProcessingMode
    ai_functions: list[AIFunctionType]
    schedule_cron: str | None = None
    batch_size: int = 1000
    quality_checks: bool = True
    cost_optimization: bool = True
