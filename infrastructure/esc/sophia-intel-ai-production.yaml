# Sophia Intel AI Production Environment Configuration
# Pulumi ESC Environment for sophia-intel.ai domain integration

values:
  # Domain Configuration
  domain:
    primary: "sophia-intel.ai"
    app: "app.sophia-intel.ai"
    admin: "admin.sophia-intel.ai"
    api: "api.sophia-intel.ai"
    webhooks: "webhooks.sophia-intel.ai"
    docs: "docs.sophia-intel.ai"
    status: "status.sophia-intel.ai"
    dev: "dev.app.sophia-intel.ai"
    staging: "staging.sophia-intel.ai"

  # Lambda Labs Infrastructure
  lambda_labs:
    api_key:
      fn::secret: ${LAMBDA_API_KEY}
    ssh_key:
      fn::secret: ${LAMBDA_SSH_KEY}
    private_ssh_key:
      fn::secret: ${LAMBDA_PRIVATE_SSH_KEY}

    instances:
      core:
        name: "sophia-ai-core"
        ip: "192.222.58.232"
        type: "gpu_1x_gh200"
        cost_per_hour: 1.49
        purpose: "Core AI Services & Lambda GPU"
        endpoints:
          api: "https://api.sophia-intel.ai"
          ai_memory: "192.222.58.232:9001"
          fastapi: "192.222.58.232:8000"

      production:
        name: "sophia-production-instance"
        ip: "104.171.202.103"
        type: "gpu_1x_rtx6000"
        cost_per_hour: 0.50
        purpose: "Monitoring & Operations"
        endpoints:
          status: "https://status.sophia-intel.ai"
          prometheus: "104.171.202.103:9090"
          grafana: "104.171.202.103:3000"

      mcp_orchestrator:
        name: "sophia-mcp-orchestrator"
        ip: "104.171.202.117"
        type: "gpu_1x_a6000"
        cost_per_hour: 0.80
        purpose: "MCP Server Orchestration & Business Intelligence"
        endpoints:
          mcp_gateway: "104.171.202.117:8080"
          api_mcp: "https://api.sophia-intel.ai/mcp"

      data_pipeline:
        name: "sophia-data-pipeline"
        ip: "104.171.202.134"
        type: "gpu_1x_a100"
        cost_per_hour: 1.29
        purpose: "Data Processing & ETL Operations"
        endpoints:
          data_api: "https://api.sophia-intel.ai/data"
          ELIMINATED: "104.171.202.134:8000"

      development:
        name: "sophia-development"
        ip: "155.248.194.183"
        type: "gpu_1x_a10"
        cost_per_hour: 0.75
        purpose: "Development & Testing Environment"
        endpoints:
          dev_api: "https://dev.api.sophia-intel.ai"
          dev_services: "155.248.194.183:8000"

      api_token:
      fn::secret: ${
    projects:
      app:
        name: "sophia-intel-ai-app"
        domain: ${domain.app}
        framework: "vite"
        build_command: "npm run build"
        output_directory: "dist"
        root_directory: "frontend"
        node_version: "18.x"
        env_vars:
          VITE_API_ENDPOINT: "https://${domain.api}"
          VITE_ENVIRONMENT: "production"
          VITE_DOMAIN: ${domain.primary}
          VITE_APP_NAME: "Sophia AI"
          VITE_LAMBDA_LABS_ENDPOINT: "https://${domain.api}/lambda"
          VITE_MCP_ENDPOINT: "https://${domain.api}/mcp"
          VITE_WEBSOCKET_URL: "wss://${domain.api}/ws"

      admin:
        name: "sophia-intel-ai-admin"
        domain: ${domain.admin}
        framework: "vite"
        build_command: "cd admin && npm run build"
        output_directory: "admin/dist"
        root_directory: "admin"
        node_version: "18.x"
        env_vars:
          VITE_API_ENDPOINT: "https://${domain.api}"
          VITE_ENVIRONMENT: "production"
          VITE_DOMAIN: ${domain.primary}
          VITE_APP_NAME: "Sophia AI Admin"
          VITE_ADMIN_MODE: "true"
          VITE_AUTH_REQUIRED: "true"

      docs:
        name: "sophia-intel-ai-docs"
        domain: ${domain.docs}
        framework: "static"
        build_command: "npm run build:docs"
        output_directory: "docs/dist"
        root_directory: "docs"
        env_vars:
          VITE_DOMAIN: ${domain.primary}
          VITE_API_DOCS_URL: "https://${domain.api}/docs"

      status:
        name: "sophia-intel-ai-status"
        domain: ${domain.status}
        framework: "static"
        build_command: "npm run build:status"
        output_directory: "status/dist"
        root_directory: "status"
        env_vars:
          VITE_DOMAIN: ${domain.primary}
          VITE_API_ENDPOINT: "https://${domain.api}"
          VITE_MONITORING_ENDPOINTS: |
            [
              "https://${domain.api}/health",
              "https://${domain.app}",
              "https://${domain.admin}",
              "${lambda_labs.instances.core.endpoints.fastapi}/health",
              "${lambda_labs.instances.production.endpoints.grafana}/health"
            ]

  # Namecheap Configuration
  namecheap:
    api_key:
      fn::secret: ${NAMECHEAP_API_KEY}
    username: "scoobyjava"
    domain: ${domain.primary}

    dns_records:
      - name: "@"
        type: "A"
        value: "34.74.88.2"
        ttl: 1800
      - name: "api"
        type: "A"
        value: "34.74.88.2"
        ttl: 300
      - name: "webhooks"
        type: "A"
        value: "34.74.88.2"
        ttl: 300
      - name: "app"
        type: "CNAME"
        value: "192.222.58.232"
        ttl: 300
      - name: "admin"
        type: "CNAME"
        value: "192.222.58.232"
        ttl: 300
      - name: "docs"
        type: "CNAME"
        value: "192.222.58.232"
        ttl: 300
      - name: "status"
        type: "CNAME"
        value: "192.222.58.232"
        ttl: 300
      - name: "dev.app"
        type: "CNAME"
        value: "192.222.58.232"
        ttl: 300
      - name: "staging"
        type: "CNAME"
        value: "192.222.58.232"
        ttl: 300
      - name: "www"
        type: "CNAME"
        value: ${domain.primary}
        ttl: 3600

  # Security Configuration
  security:
    ssl:
      provider: "lambda-labs"
      auto_renewal: true
      force_https: true
      hsts_enabled: true

    cors:
      allowed_origins:
        - "https://${domain.app}"
        - "https://${domain.admin}"
        - "https://${domain.docs}"
        - "https://${domain.dev}"
        - "https://${domain.staging}"
        - "https://${domain.primary}"
      allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
      allowed_headers: ["Authorization", "Content-Type", "X-API-Key"]
      allow_credentials: true
      max_age: 86400

  # Monitoring Configuration
  monitoring:
    prometheus:
      endpoint: "${lambda_labs.instances.production.endpoints.prometheus}"
      scrape_interval: "30s"

    grafana:
      endpoint: "${lambda_labs.instances.production.endpoints.grafana}"
      dashboards:
        - "sophia-ai-overview"
        - "lambda-labs-infrastructure"
        - "lambda-labs-deployments"
        - "cost-monitoring"

    alerts:
      cost_threshold: 130.00  # Daily cost alert threshold
      response_time_threshold: 1000  # API response time threshold (ms)
      uptime_threshold: 99.9  # Uptime percentage threshold

    health_checks:
      endpoints:
        - url: "https://${domain.api}/health"
          interval: "30s"
          timeout: "10s"
        - url: "https://${domain.app}"
          interval: "60s"
          timeout: "15s"
        - url: "https://${domain.admin}"
          interval: "60s"
          timeout: "15s"

  # Cost Management
  cost_management:
    daily_budget: 120.00
    monthly_budget: 3600.00
    lambda_labs_cost_per_hour: 4.83

    optimization:
      auto_scaling: true
      instance_scheduling: false  # Keep instances running 24/7 for production
      cost_alerts: true

    tracking:
      lambda_labs: "${cost_management.lambda_labs_cost_per_hour} * 24 * 30"  # Monthly estimate
      lambda-labs: 0  # Pro plan included
      namecheap: 1  # Annual domain cost amortized monthly
      total_monthly_estimate: "${cost_management.monthly_budget}"

  # Deployment Configuration
  deployment:
    strategy: "rolling"
    rollback_enabled: true
    health_check_timeout: 300

    environments:
      production:
        branch: "main"
        auto_deploy: true
        protection_rules: true

      staging:
        branch: "develop"
        auto_deploy: true
        protection_rules: false

      development:
        branch: "feature/*"
        auto_deploy: false
        protection_rules: false

  # Integration Configuration
  integrations:
    github:
      organization: "ai-cherry"
      repository: "sophia-main"

    pulumi:
      stack: "scoobyjava-org/sophia-prod-on-lambda"
      environment: "sophia-intel-ai-production"

    ci_cd:
      provider: "github_actions"
      workflows:
        - "deploy-frontend"
        - "deploy-backend"
        - "run-tests"
        - "security-scan"

# Environment Variables Export
# These will be available to applications consuming this ESC environment
environmentVariables:
  # Domain Configuration
  SOPHIA_DOMAIN: ${domain.primary}
  SOPHIA_APP_URL: "https://${domain.app}"
  SOPHIA_ADMIN_URL: "https://${domain.admin}"
  SOPHIA_API_URL: "https://${domain.api}"

  # Lambda Labs Configuration
  LAMBDA_LABS_API_KEY: ${lambda_labs.api_key}
  LAMBDA_LABS_SSH_KEY: ${lambda_labs.ssh_key}
  LAMBDA_LABS_CORE_IP: ${lambda_labs.instances.core.ip}
  LAMBDA_LABS_API_ENDPOINT: ${lambda_labs.instances.core.endpoints.api}

  
  # Namecheap Configuration
  NAMECHEAP_API_KEY: ${namecheap.api_key}

  # Security Configuration
  CORS_ALLOWED_ORIGINS: ${security.cors.allowed_origins}

  # Monitoring Configuration
  PROMETHEUS_ENDPOINT: ${monitoring.prometheus.endpoint}
  GRAFANA_ENDPOINT: ${monitoring.grafana.endpoint}
