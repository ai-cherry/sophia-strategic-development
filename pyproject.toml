[project]
name = "sophia-ai"
version = "0.1.0"
description = "Sophia AI - Enterprise AI Orchestrator for Pay Ready with Microsoft Email Intelligence via Gong.io"
readme = "README.md"
requires-python = ">=3.11,<3.13"
authors = [
    {name = "Pay Ready Team", email = "dev@payready.com"}
]
keywords = ["ai", "orchestrator", "sales-coaching", "business-intelligence", "snowflake", "gong", "microsoft"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core Framework
    "fastapi>=0.115.0",
    "uvicorn>=0.24.0",
    "starlette>=0.40.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    # Database & Data
    "snowflake-connector-python>=3.13.0",
    "snowflake-sqlalchemy>=1.7.0",
    "sqlalchemy>=2.0.23",
    "pandas>=2.1.4",
    "numpy>=1.25.2",
    "psycopg2-binary>=2.9.7",
    "redis>=4.6.0",
    "aioredis>=2.0.1",
    # AI & ML Core
    "openai>=1.6.0",
    "anthropic>=0.8.1",
    "langchain>=0.1.0",
    "langchain-core>=0.1.23",
    "langchain-community>=0.2.4",
    "transformers>=4.35.2",
    "sentence-transformers>=2.2.2",
    "torch>=2.6.0",
    "scikit-learn>=1.7.0",
    "tiktoken>=0.5.2",
    "weaviate-client>=3.25.3",
    # Infrastructure & Cloud
    "pulumi>=3.177.0",
    "pulumi-aws>=6.15.0",
    "pulumi-kubernetes>=4.6.1",
    "boto3>=1.34.0",
    # Business Integrations
    "hubspot-api-client>=8.2.1",
    "slack-sdk>=3.26.1",
    "slack-bolt>=1.23.0",
    # HTTP & Async
    "aiohttp>=3.9.4",
    "httpx>=0.27.2",
    "requests>=2.31.0",
    "aiofiles>=24.1.0",
    # Monitoring & Observability
    "structlog>=25.4.0",
    "prometheus-client>=0.19.0",
    "sentry-sdk>=1.40.0",
    # Security & Auth
    "cryptography>=42.0.0",
    "passlib>=1.7.4",
    "python-jose>=3.4.0",
    "bcrypt>=4.1.2",
    # Utilities
    "python-dotenv>=1.0.0",
    "python-dateutil>=2.8.2",
    "pyyaml>=6.0.2",
    "click>=8.1.7",
    "typer>=0.16.0",
    "rich>=13.7.0",
    "tenacity>=8.2.3",
    # MCP (Model Context Protocol)
    "mcp[cli]>=1.0.0",
    # Document Processing
    "python-docx>=1.2.0",
    "python-pptx>=1.0.2",
    "pypdf>=5.6.0",
    "beautifulsoup4>=4.13.4",
    # Data Validation & Parsing
    "validators>=0.34.0",
    "jsonschema>=4.24.0",
    "marshmallow>=3.26.1",
    "asyncpg>=0.30.0",
    "psutil>=7.0.0",
    "markdownify>=1.1.0",
    "pinecone>=7.3.0",
    "fastmcp>=2.9.2",
]

[dependency-groups]
# Development dependencies
dev = [
    "pytest>=7.4.2",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.14.1",
    "ruff>=0.11.13",
    "black>=23.12.0",
    "mypy>=1.7.1",
    "isort>=6.0.1",
    "pre-commit>=4.2.0",
]

# Testing dependencies
test = [
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.7.0",
    "coverage>=7.8.2",
    "httpx>=0.27.2",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.14",
    "mkdocs-material-extensions>=1.3.1",
    "markdown>=3.8.1",
]

# Production stack - optimized for Lambda Labs deployment
prod-stack = [
    "snowflake-connector-python>=3.13.0",
    "torch>=2.6.0",
    "gunicorn>=23.0.0",
    "uvicorn[standard]>=0.24.0",
]

# Development stack - lighter weight for local development
dev-stack = [
    "snowflake-connector-python>=3.13.0",
    "torch>=2.6.0",
]

# Performance monitoring and analysis
monitoring = [
    "memory-profiler>=0.61.0",
    "psutil>=7.0.0",
]

# Data science and analytics
analytics = [
    "matplotlib>=3.10.3",
    "plotly>=6.1.2",
    "altair>=5.5.0",
]

# Enhanced AI capabilities
ai-enhanced = [
    "cohere>=5.15.0",
    "portkey-ai>=1.13.0",
    "tavily-python>=0.3.3",
    "google-generativeai>=0.8.5",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
# UV-specific configuration
dev-dependencies = [
    "pytest>=7.4.2",
    "ruff>=0.11.13",
    "mypy>=1.7.1",
]

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "S311"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "snowflake.*",
    "pulumi.*",
    "mcp.*",
    "langchain.*",
    "pinecone.*",
    "weaviate.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["backend", "mcp-servers"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.hatch.build.targets.wheel]
packages = ["backend", "mcp-servers"]

[tool.hatch.metadata]
allow-direct-references = true
