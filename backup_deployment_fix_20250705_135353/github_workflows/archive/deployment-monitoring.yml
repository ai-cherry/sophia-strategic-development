name: Deployment Health Monitoring

on:
  schedule:
    # Run every 15 minutes
    - cron: "*/15 * * * *"
  workflow_dispatch:
    inputs:
      alert_type:
        description: "Type of monitoring check"
        required: false
        default: "health"
        type: choice
        options:
          - health
          - report
          - test

env:
  SOPHIA_BASE_URL: ${{ secrets.SOPHIA_BASE_URL || 'https://sophia-ai-frontend-dev.vercel.app' }}
  ALERT_WEBHOOK_URL: ${{ secrets.ALERT_WEBHOOK_URL }}

jobs:
  health-check:
    name: Monitor Deployment Health
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run Health Check
        id: health-check
        run: |
          echo "üîç Running deployment health check..."

          # Make script executable
          chmod +x scripts/deployment-monitor.py

          # Run monitoring script
          if [ "${{ github.event.inputs.alert_type }}" = "report" ]; then
            echo "üìä Generating health report..."
            python scripts/deployment-monitor.py report 24 > health-report.md
            echo "report-generated=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.alert_type }}" = "test" ]; then
            echo "üß™ Running test check..."
            python scripts/deployment-monitor.py test
          else
            echo "üíì Running regular health check..."
            python scripts/deployment-monitor.py
          fi

      - name: Check Deployment Status
        run: |
          echo "üåê Testing deployment endpoints..."

          BASE_URL="${{ env.SOPHIA_BASE_URL }}"

          # Test frontend
          if curl -f -s "$BASE_URL/" > /dev/null; then
            echo "‚úÖ Frontend: Accessible"
          else
            echo "‚ùå Frontend: Not accessible"
            echo "frontend-failed=true" >> $GITHUB_OUTPUT
          fi

          # Test API endpoints
          for endpoint in "api/health" "api/n8n/health" "api/mcp/health"; do
            if curl -f -s "$BASE_URL/$endpoint" > /dev/null; then
              echo "‚úÖ $endpoint: OK"
            else
              echo "‚ö†Ô∏è  $endpoint: Not available"
            fi
          done

      - name: Upload Health Report
        if: steps.health-check.outputs.report-generated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: health-report-${{ github.run_number }}
          path: health-report.md
          retention-days: 30

      - name: Upload Monitoring Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-logs-${{ github.run_number }}
          path: |
            deployment-monitor.log
            deployment-metrics.jsonl
            monitor-state.json
          retention-days: 7

      - name: Notify on Critical Failure
        if: steps.health-check.outputs.frontend-failed == 'true'
        run: |
          echo "üö® CRITICAL: Frontend is not accessible!"
          echo "This indicates a major deployment issue that needs immediate attention."

          # Create issue if frontend is down
          if [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "Creating GitHub issue for critical failure..."

            cat > issue-body.md << 'EOF'
          ## üö® Critical Deployment Failure Detected

          **Issue:** Frontend is not accessible
          **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Base URL:** ${{ env.SOPHIA_BASE_URL }}

          ### Immediate Actions Required:
          1. Check Vercel deployment status
          2. Review recent commits for breaking changes
          3. Run manual deployment recovery procedures
          4. Verify all environment variables are configured

          ### Recovery Steps:
          1. Navigate to [GitHub Actions](https://github.com/ai-cherry/sophia-main/actions)
          2. Run "Force Vercel Deployment" workflow
          3. If that fails, use manual deployment methods in DEPLOYMENT_RECOVERY_GUIDE.md

          **Auto-generated by deployment monitoring workflow**
          EOF

            # Note: In a real scenario, you'd use GitHub CLI or API to create the issue
            echo "Issue body prepared (GitHub CLI would be used to create actual issue)"
          fi

  performance-check:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: health-check
    if: success()

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Performance Test
        run: |
          echo "‚ö° Running performance tests..."

          BASE_URL="${{ env.SOPHIA_BASE_URL }}"

          # Test response times
          echo "Testing response times..."

          for endpoint in "/" "/api/health"; do
            echo "Testing $endpoint..."

            # Use curl to measure response time
            response_time=$(curl -o /dev/null -s -w "%{time_total}" "$BASE_URL$endpoint" || echo "failed")

            if [ "$response_time" != "failed" ]; then
              # Convert to milliseconds
              response_ms=$(echo "$response_time * 1000" | bc -l)
              echo "‚úÖ $endpoint: ${response_ms}ms"

              # Check if response time is acceptable (< 5 seconds)
              if (( $(echo "$response_time > 5.0" | bc -l) )); then
                echo "‚ö†Ô∏è  WARNING: Slow response time for $endpoint"
              fi
            else
              echo "‚ùå $endpoint: Failed to connect"
            fi
          done

      - name: Generate Performance Report
        run: |
          echo "üìä Generating performance summary..."

          cat > performance-summary.md << 'EOF'
          # üìà Performance Monitoring Summary

          **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Base URL:** ${{ env.SOPHIA_BASE_URL }}

          ## Response Time Targets
          - Frontend: < 2 seconds
          - API endpoints: < 1 second

          ## Current Performance
          See workflow logs for detailed response times.

          ## Recommendations
          - Monitor response times regularly
          - Optimize slow endpoints
          - Consider CDN for static assets
          - Review database query performance
          EOF

  security-check:
    name: Security Monitoring
    runs-on: ubuntu-latest
    needs: health-check
    if: success()

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Security Headers Check
        run: |
          echo "üîí Checking security headers..."

          BASE_URL="${{ env.SOPHIA_BASE_URL }}"

          # Check security headers
          echo "Testing security headers..."

          headers=$(curl -I -s "$BASE_URL/" || echo "failed")

          if [ "$headers" != "failed" ]; then
            echo "Response headers received"

            # Check for important security headers
            if echo "$headers" | grep -i "x-frame-options" > /dev/null; then
              echo "‚úÖ X-Frame-Options header present"
            else
              echo "‚ö†Ô∏è  X-Frame-Options header missing"
            fi

            if echo "$headers" | grep -i "x-content-type-options" > /dev/null; then
              echo "‚úÖ X-Content-Type-Options header present"
            else
              echo "‚ö†Ô∏è  X-Content-Type-Options header missing"
            fi

            if echo "$headers" | grep -i "strict-transport-security" > /dev/null; then
              echo "‚úÖ HSTS header present"
            else
              echo "‚ö†Ô∏è  HSTS header missing"
            fi
          else
            echo "‚ùå Failed to retrieve headers"
          fi

      - name: SSL Certificate Check
        run: |
          echo "üîê Checking SSL certificate..."

          DOMAIN=$(echo "${{ env.SOPHIA_BASE_URL }}" | sed 's|https://||' | sed 's|/.*||')

          # Check SSL certificate expiration
          if command -v openssl > /dev/null; then
            echo "Checking SSL certificate for $DOMAIN..."

            cert_info=$(echo | openssl s_client -servername "$DOMAIN" -connect "$DOMAIN:443" 2>/dev/null | openssl x509 -noout -dates 2>/dev/null || echo "failed")

            if [ "$cert_info" != "failed" ]; then
              echo "‚úÖ SSL certificate information retrieved"
              echo "$cert_info"
            else
              echo "‚ö†Ô∏è  Could not retrieve SSL certificate information"
            fi
          else
            echo "‚ö†Ô∏è  OpenSSL not available for certificate check"
          fi

  summary:
    name: Monitoring Summary
    runs-on: ubuntu-latest
    needs: [health-check, performance-check, security-check]
    if: always()

    steps:
      - name: Generate Summary
        run: |
          echo "üìã Deployment Monitoring Summary"
          echo "================================"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "Base URL: ${{ env.SOPHIA_BASE_URL }}"
          echo ""
          echo "Job Results:"
          echo "- Health Check: ${{ needs.health-check.result }}"
          echo "- Performance Check: ${{ needs.performance-check.result }}"
          echo "- Security Check: ${{ needs.security-check.result }}"
          echo ""

          if [ "${{ needs.health-check.result }}" = "success" ] && \
             [ "${{ needs.performance-check.result }}" = "success" ] && \
             [ "${{ needs.security-check.result }}" = "success" ]; then
            echo "‚úÖ All monitoring checks passed"
            echo "üéØ Deployment is healthy and performing well"
          else
            echo "‚ö†Ô∏è  Some monitoring checks failed"
            echo "üîç Review individual job logs for details"
          fi
