name: Sophia AI UV CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  ENVIRONMENT: prod
  PULUMI_ORG: scoobyjava-org

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add UV to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --group dev

      - name: Run linting with Ruff
        run: uv run ruff check .

      - name: Run type checking with MyPy
        run: uv run mypy backend/
        continue-on-error: true

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add UV to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set Python version
        run: echo "${{ matrix.python-version }}" > .python-version

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ matrix.python-version }}-
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: uv sync --group dev

      - name: Run tests with pytest
        run: uv run pytest tests/ --cov=backend --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  security:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-security-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-security-
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv sync --group dev

      - name: Create security reports directory
        run: mkdir -p security/reports

      - name: Run pip-audit
        id: pip_audit
        run: |
          set +e
          uv run pip-audit --format=json --output=security/reports/vulnerability-report.json
          AUDIT_EXIT_CODE=$?
          echo "exit_code=$AUDIT_EXIT_CODE" >> $GITHUB_OUTPUT
          uv run pip-audit --format=markdown --output=security/reports/vulnerability-report.md || true

          if [ -f security/reports/vulnerability-report.json ]; then
            HIGH_CRITICAL=$(python -c "import json; data = json.load(open('security/reports/vulnerability-report.json')); vulns = data.get('vulnerabilities', []); high_critical = [v for v in vulns if v.get('fix_versions') and v.get('severity', '').lower() in ['high', 'critical']]; print(len(high_critical))")
            echo "high_critical_count=$HIGH_CRITICAL" >> $GITHUB_OUTPUT
          else
            echo "high_critical_count=0" >> $GITHUB_OUTPUT
          fi

      - name: Run safety check
        id: safety_check
        run: |
          set +e
          uv run safety check --json --output=security/reports/safety-report.json
          SAFETY_EXIT_CODE=$?
          echo "exit_code=$SAFETY_EXIT_CODE" >> $GITHUB_OUTPUT
          uv run safety check --output=security/reports/safety-report.txt || true

      - name: Upload vulnerability reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.sha }}
          path: security/reports/
          retention-days: 30

      - name: Add PR comment with security summary
        if: github.event_name == 'pull_request' && (steps.pip_audit.outputs.exit_code != '0' || steps.safety_check.outputs.exit_code != '0')
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## 🔒 Security Scan Results\n\n';

            if (fs.existsSync('security/reports/vulnerability-report.md')) {
              const auditReport = fs.readFileSync('security/reports/vulnerability-report.md', 'utf8');
              comment += '### pip-audit Results\n\n';
              comment += auditReport.substring(0, 3000);
              if (auditReport.length > 3000) {
                comment += '\n\n... (truncated, see full report in artifacts)';
              }
            }

            const highCritical = ${{ steps.pip_audit.outputs.high_critical_count }};
            if (highCritical > 0) {
              comment += `\n\n**⚠️ Found ${highCritical} HIGH/CRITICAL vulnerabilities that must be fixed!**\n`;
            }

            if (fs.existsSync('security/reports/safety-report.txt')) {
              const safetyReport = fs.readFileSync('security/reports/safety-report.txt', 'utf8');
              comment += '\n\n### Safety Check Results\n\n```\n';
              comment += safetyReport.substring(0, 1000);
              if (safetyReport.length > 1000) {
                comment += '\n... (truncated)';
              }
              comment += '\n```';
            }

            comment += '\n\n[View full reports in workflow artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail if high/critical vulnerabilities found
        if: steps.pip_audit.outputs.high_critical_count != '0'
        run: |
          echo "❌ Found ${{ steps.pip_audit.outputs.high_critical_count }} HIGH/CRITICAL vulnerabilities!"
          echo "Please review the security reports and fix these issues before merging."
          exit 1

  build-and-deploy:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add UV to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image with UV
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -f Dockerfile.uv \
            -t sophia-ai:latest \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            .

      - name: Install Pulumi dependencies
        run: uv sync --group prod-stack

      - name: Configure Pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
        run: |
          curl -fsSL https://get.pulumi.com | sh
          export PATH=$PATH:$HOME/.pulumi/bin
          pulumi login

      - name: Deploy infrastructure with Pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
        run: |
          export PATH=$PATH:$HOME/.pulumi/bin
          uv run pulumi up --yes --stack sophia-ai-production

  performance-test:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add UV to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install monitoring dependencies
        run: uv sync --group monitoring

      - name: Run performance tests
        run: uv run locust --headless --users 100 --spawn-rate 10 --run-time 60s --host https://app.sophia-intel.ai
