# Sophia AI Platform - Base ESC Environment Configuration
# Comprehensive base environment with webhook, agent orchestration, and enhanced secret management
# Inherits from production but adds platform-specific configurations

imports:
  - sophia-ai-production

values:
  # Core platform configuration
  platform:
    name: "sophia-ai-platform"
    version: "v2.0.0"
    environment: "${pulumi.stack}"
    deployment_strategy: "blue-green"
  
  # Enhanced webhook configuration
  webhook:
    domain: 
      fn::secret: "${WEBHOOK_DOMAIN}"
    port: 5000
    base_url: "https://${webhook.domain}/webhook/gong"
    jwt_private_key:
      fn::secret: "${WEBHOOK_JWT_PRIVATE_KEY}"
    jwt_public_key:
      fn::secret: "${WEBHOOK_JWT_PUBLIC_KEY}"
    rate_limit:
      requests_per_minute: 1000
      burst_size: 200
    timeout_seconds: 30
    cors:
      allowed_origins: ["*"]
      allowed_methods: ["GET", "POST", "PUT", "DELETE"]
      allowed_headers: ["Authorization", "Content-Type"]
  
  # Enhanced Snowflake configuration (aligned with existing GONG_ANALYTICS)
  snowflake:
    account:
      fn::secret: "${SNOWFLAKE_ACCOUNT}"
    user: "SCOOBYJAVA15" 
    password:
      fn::secret: "${SNOWFLAKE_PASSWORD}"
    database: "GONG_ANALYTICS"
    warehouse: "SOPHIA_AI_WH"
    schema: "RAW"
    role: "ACCOUNTADMIN"
    # OAuth configuration for enhanced security
    oauth:
      client_id:
        fn::secret: "${SNOWFLAKE_OAUTH_CLIENT_ID}"
      client_secret:
        fn::secret: "${SNOWFLAKE_OAUTH_CLIENT_SECRET}"
      refresh_token:
        fn::secret: "${SNOWFLAKE_OAUTH_REFRESH_TOKEN}"
      scope: "session:role-any"
    # Connection pool settings
    connection_pool:
      max_connections: 20
      min_connections: 5
      connection_timeout: 30
      idle_timeout: 300
  
  # Enhanced Redis configuration for agent pub/sub
  redis:
    # Cluster configuration
    cluster:
      host: "redis-cluster"
      port: 6379
      password:
        fn::secret: "${REDIS_CLUSTER_PASSWORD}"
      ssl_enabled: true
      ssl_cert_reqs: "required"
      max_connections: 100
      retry_on_timeout: true
    # Agent communication channels
    channels:
      agent_pool: "sophia:agents:pool"
      orchestrator: "sophia:agents:orchestrator"
      workflows: "sophia:workflows"
      health_check: "sophia:health"
      metrics: "sophia:metrics"
    # Pub/sub configuration
    pubsub:
      max_connections: 50
      command_timeout: 5
      retry_policy:
        max_retries: 3
        backoff_factor: 2
  
  # Enhanced agent orchestration configuration  
  agents:
    # Core orchestrator settings
    orchestrator:
      pool_size: 50
      max_concurrent: 100
      auth_token:
        fn::secret: "${AGENT_ORCHESTRATOR_AUTH_TOKEN}"
      health_check_interval: 30
      failure_threshold: 3
      recovery_timeout: 300
    
    # Performance configuration (aligned with existing AgnoPerformanceOptimizer)
    performance:
      agno_optimization: true
      instantiation_target_microseconds: 3
      memory_optimization: true
      connection_pooling: true
      batch_processing: true
      
    # Agent-specific configurations
    types:
      call_analysis:
        instances: 10
        max_memory_mb: 512
        timeout_seconds: 60
      sales_intelligence:
        instances: 8  
        max_memory_mb: 768
        timeout_seconds: 90
      business_intelligence:
        instances: 6
        max_memory_mb: 1024
        timeout_seconds: 120
      executive_intelligence:
        instances: 4
        max_memory_mb: 1024
        timeout_seconds: 180
      general_intelligence:
        instances: 12
        max_memory_mb: 512
        timeout_seconds: 45
    
    # Communication settings
    communication:
      secret:
        fn::secret: "${AGENT_COMMUNICATION_SECRET}"
      encryption_enabled: true
      message_ttl: 3600
      dead_letter_queue: true
  
  # Enhanced Gong integration (aligned with existing setup)
  gong:
    api:
      base_url: "https://api.gong.io"
      access_key:
        fn::secret: "${GONG_ACCESS_KEY}"
      secret_key:
        fn::secret: "${GONG_CLIENT_SECRET}"
      rate_limit: 2.5
      timeout: 30
      retry_attempts: 3
    # OAuth configuration for enhanced security  
    oauth:
      client_id:
        fn::secret: "${GONG_OAUTH_CLIENT_ID}"
      client_secret:
        fn::secret: "${GONG_OAUTH_CLIENT_SECRET}"
      refresh_token:
        fn::secret: "${GONG_OAUTH_REFRESH_TOKEN}"
      scope: "api:calls:read api:calls:transcripts:read"
    # Webhook configuration
    webhook:
      endpoint: "${webhook.base_url}"
      secret:
        fn::secret: "${GONG_WEBHOOK_SECRET}"
      events: ["call-processed", "transcript-ready", "insights-detected"]
      retry_policy:
        max_retries: 5
        retry_delay: 300
  
  # Enhanced monitoring and observability (extends existing)
  monitoring:
    # Extend existing Arize configuration
    arize:
      api_key:
        fn::secret: "${ARIZE_API_KEY}"
      space_id:
        fn::secret: "${ARIZE_SPACE_ID}"
      project_name: "sophia-ai-platform"
      model_id: "sophia-orchestrator"
      model_version: "v2.0.0"
    
    # Prometheus metrics
    prometheus:
      enabled: true
      port: 9090
      path: "/metrics"
      auth_token:
        fn::secret: "${PROMETHEUS_AUTH_TOKEN}"
      scrape_interval: 15
    
    # Grafana dashboards
    grafana:
      url:
        fn::secret: "${GRAFANA_URL}"
      username:
        fn::secret: "${GRAFANA_USERNAME}"
      password:
        fn::secret: "${GRAFANA_PASSWORD}"
      admin_password:
        fn::secret: "${GRAFANA_ADMIN_PASSWORD}"
      org_id: 1
      dashboard_refresh: 30
  
  # Enhanced MCP server integrations (for existing 15+ MCP servers)
  mcp_servers:
    # Authentication tokens for all MCP servers
    github:
      token:
        fn::secret: "${MCP_GITHUB_TOKEN}"
      org: "ai-cherry"
      repo: "sophia-main"
    slack:
      token:
        fn::secret: "${MCP_SLACK_TOKEN}"
      signing_secret:
        fn::secret: "${SLACK_SIGNING_SECRET}"
    linear:
      token:
        fn::secret: "${MCP_LINEAR_TOKEN}"
      workspace: "payready"
    docker:
      registry_token:
        fn::secret: "${MCP_DOCKER_REGISTRY_TOKEN}"
      registry_url: "registry.digitalocean.com"
    postgres:
      connection_string:
        fn::secret: "${MCP_POSTGRES_CONNECTION_STRING}"
    snowflake:
      # Uses same config as main snowflake section
      account: "${snowflake.account}"
      user: "${snowflake.user}"
      password: "${snowflake.password}"
  
  # Enhanced security configuration
  security:
    # JWT configuration for webhook authentication
    jwt:
      private_key: "${webhook.jwt_private_key}"
      public_key: "${webhook.jwt_public_key}"
      algorithm: "RS256"
      expiration: 3600
      issuer: "sophia-ai-platform"
      audience: "webhook-clients"
    
    # Encryption settings
    encryption:
      key:
        fn::secret: "${ENCRYPTION_KEY}"
      algorithm: "AES-256-GCM"
      key_rotation_days: 90
    
    # OIDC configuration for GitHub Actions
    oidc:
      github:
        issuer: "https://token.actions.githubusercontent.com"
        audience: "https://github.com/ai-cherry"
        subject_claim: "repo:ai-cherry/sophia-main:ref:refs/heads/main"
      aws_role_arn:
        fn::secret: "${AWS_OIDC_ROLE_ARN}"
      azure_client_id:
        fn::secret: "${AZURE_OIDC_CLIENT_ID}"
      gcp_service_account:
        fn::secret: "${GCP_OIDC_SERVICE_ACCOUNT}"
    
    # Audit logging
    audit:
      enabled: true
      log_level: "INFO"
      retention_days: 365
      storage_backend: "snowflake"
  
  # Enhanced Kubernetes integration
  kubernetes:
    namespace: "sophia-ai"
    service_account: "sophia-platform"
    cluster_name: "sophia-ai-cluster"
    # Resource limits
    resources:
      webhook_server:
        cpu_request: "500m"
        cpu_limit: "2000m" 
        memory_request: "1Gi"
        memory_limit: "4Gi"
      agent_pool:
        cpu_request: "2000m"
        cpu_limit: "8000m"
        memory_request: "4Gi"
        memory_limit: "16Gi"
      redis_cluster:
        cpu_request: "1000m"
        cpu_limit: "4000m"
        memory_request: "2Gi"
        memory_limit: "8Gi"
    # Autoscaling
    autoscaling:
      webhook_server:
        min_replicas: 3
        max_replicas: 10
        target_cpu: 70
      agent_pool:
        min_replicas: 2
        max_replicas: 20
        target_cpu: 80
        target_memory: 75

# Secret rotation configuration
rotation:
  strategy: "two-secret"
  rotation_interval_days: 90
  notification_channels: ["slack", "email"]
  auditing:
    enabled: true
    log_file: "/var/log/esc_rotation.log"
    retention_days: 365

# Environment variable mappings (extends existing)
environmentVariables:
  # Extend all existing environment variables from sophia-ai-production
  
  # Platform-specific additions
  WEBHOOK_DOMAIN: ${webhook.domain}
  WEBHOOK_BASE_URL: ${webhook.base_url}
  WEBHOOK_JWT_PRIVATE_KEY: ${webhook.jwt_private_key}
  WEBHOOK_JWT_PUBLIC_KEY: ${webhook.jwt_public_key}
  
  # Enhanced Snowflake OAuth
  SNOWFLAKE_OAUTH_CLIENT_ID: ${snowflake.oauth.client_id}
  SNOWFLAKE_OAUTH_CLIENT_SECRET: ${snowflake.oauth.client_secret}
  SNOWFLAKE_OAUTH_REFRESH_TOKEN: ${snowflake.oauth.refresh_token}
  
  # Redis cluster authentication
  REDIS_CLUSTER_PASSWORD: ${redis.cluster.password}
  
  # Agent orchestration
  AGENT_ORCHESTRATOR_AUTH_TOKEN: ${agents.orchestrator.auth_token}
  AGENT_COMMUNICATION_SECRET: ${agents.communication.secret}
  
  # Enhanced Gong OAuth
  GONG_OAUTH_CLIENT_ID: ${gong.oauth.client_id}
  GONG_OAUTH_CLIENT_SECRET: ${gong.oauth.client_secret}
  GONG_OAUTH_REFRESH_TOKEN: ${gong.oauth.refresh_token}
  GONG_WEBHOOK_SECRET: ${gong.webhook.secret}
  
  # Enhanced monitoring
  PROMETHEUS_AUTH_TOKEN: ${monitoring.prometheus.auth_token}
  GRAFANA_ADMIN_PASSWORD: ${monitoring.grafana.admin_password}
  
  # MCP server tokens
  MCP_GITHUB_TOKEN: ${mcp_servers.github.token}
  MCP_SLACK_TOKEN: ${mcp_servers.slack.token}
  MCP_LINEAR_TOKEN: ${mcp_servers.linear.token}
  MCP_DOCKER_REGISTRY_TOKEN: ${mcp_servers.docker.registry_token}
  MCP_POSTGRES_CONNECTION_STRING: ${mcp_servers.postgres.connection_string}
  
  # OIDC configuration
  AWS_OIDC_ROLE_ARN: ${security.oidc.aws_role_arn}
  AZURE_OIDC_CLIENT_ID: ${security.oidc.azure_client_id} 
  GCP_OIDC_SERVICE_ACCOUNT: ${security.oidc.gcp_service_account}
  
  # Platform metadata
  PLATFORM_NAME: ${platform.name}
  PLATFORM_VERSION: ${platform.version}
  PLATFORM_ENVIRONMENT: ${platform.environment}

# Additional n8n integration secrets
n8n:
  encryption_key:
    fn::secret: "${N8N_ENCRYPTION_KEY}"
  basic_auth_user:
    fn::secret: "${N8N_BASIC_AUTH_USER}"
  basic_auth_password:
    fn::secret: "${N8N_BASIC_AUTH_PASSWORD}"
  webhook_secret:
    fn::secret: "${N8N_WEBHOOK_SECRET}"
  # Add other integration secrets as needed 

# LLM gateway credentials and endpoints
llm_gateway:
  # Portkey Gateway Configuration
  portkey_api_key:
    fn::secret: "${PORTKEY_API_KEY}"
  portkey_endpoint: "https://api.portkey.ai/v1/chat/completions"
  
  # OpenRouter Backend Configuration
  api_key:
    fn::secret: "${OPENROUTER_API_KEY}"
  endpoint: "https://openrouter.ai/api/v1/chat/completions"
  
  # Fallback endpoints for high availability
  fallback_endpoints:
    - "https://api.openai.com/v1/chat/completions"
    - "https://api.anthropic.com/v1/messages" 